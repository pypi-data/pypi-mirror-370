#nop --
#nop Class Definitions
#nop --



#var zmud-description {Parser zmud}
#var zmud-help {
Parser per speedwalk in formato zMUD:\n
FUNZIONE PRINCIPALE:\n
• @zmudsw_parse{path} - converte path zMUD in formato TinTin++\n
FORMATO SUPPORTATO:\n
• Direzioni standard: n, s, e, w, u, d\n
• Direzioni diagonali: h(nw), j(ne), k(sw), l(se)\n
• Ripetizioni numeriche: 5n, 10e, etc.\n
• Comandi custom: (comando_personalizzato)\n
ESEMPI:\n
@zmudsw_parse{5n3e(open door)s2w} converte in:\n
n;n;n;n;n;e;e;e;open door;s;w;w\n
@zmudsw_parse{2nw3(kill orc)se} converte in:\n
nw;nw;kill orc;kill orc;kill orc;se\n
CARATTERISTICHE:\n
• Supporto completo sintassi zMUD\n
• Gestione comandi tra parentesi\n
• Espansione automatica direzioni abbreviate\n
• Tabella conversione direzioni diagonali\n
VARIABILI INTERNE:\n
• _:zpath[path] - path risultante\n
• _:zpath[count] - contatore ripetizioni\n
• _:zpath[mode] - modalità parsing (1=normale, 2=comando)\n
• _:zpath[dirTbl] - tabella conversione direzioni\n
NOTE:\n
• Compatibile con la maggior parte degli speedwalk zMUD\n
• Restituisce path in formato TinTin++ standard

}

#nop --
#nop Modloader Stuff
#nop --

#alias zmud-register {
	#nop need to check: events;
	#if {@isloaded{functions}} {
		register_module zmud
	} {
		fail_module zmud
	}
}

#function {zmudsw_parse} {
	#var _:zpath[path] {};
	#var _:zpath[count] {};
	#var _:zpath[mode] 1;
	#var _:zpath[dirTbl] {{j}{ne}{h}{nw}{k}{sw}{l}{se}};

	#parse {%1} {_:zpath[step]} {
		#if { ${_:zpath[mode]} == 1 } {
			#switch {"${_:zpath[step]}"} {
				#case {"%d"} {
					#var _:zpath[count] {${_:zpath[count]}${_:zpath[step]}};	
				};
				#case {"{n|s|e|w|u|d}"} {
					#if { "${_:zpath[count]}" != "" } {
						#${_:zpath[count]} #var _:zpath[path] {${_:zpath[path]};${_:zpath[step]}};
						#var _:zpath[count] {};
					} {
						#var _:zpath[path] {${_:zpath[path]};${_:zpath[step]}};
					};
				};
				#case {"{h|j|k|l}"} {
					#if { "${_:zpath[count]}" != "" } {
						#${_:zpath[count]} #var _:zpath[path] {${_:zpath[path]};${_:zpath[dirTbl][${_:zpath[step]}]}};
						#var _:zpath[count] {};
					} {
						#var _:zpath[path] {${_:zpath[path]};${_:zpath[dirTbl][${_:zpath[step]}]}};
					};	
				};
				#case {"("} {
					#var _:zpath[mode] 2;

				};
			};
		} {
			#switch {"${_:zpath[step]}"} {
				#case {")"} {
					#if { "${_:zpath[count]}" != "" } {
						#${_:zpath[count]} #var _:zpath[path] {${_:zpath[path]};${_:zpath[cmd]}};
						#var _:zpath[count] {};
					} {
						#var _:zpath[path] {${_:zpath[path]};${_:zpath[cmd]}};
					};	
					#var _:zpath[cmd] {};
					#var _:zpath[mode] 1;
				};
				#default {
					#var _:zpath[cmd] {${_:zpath[cmd]}${_:zpath[step]}};
				};
			};
		};
	};
	#var result {${_:zpath[path]}};
	#unvar _:zpath;
}

/* Verify loading */
#var loadState {1};
/* EOF */

