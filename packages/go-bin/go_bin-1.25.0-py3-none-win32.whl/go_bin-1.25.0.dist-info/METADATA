Metadata-Version: 2.4
Name: go-bin
Version: 1.25.0
Summary: Prebuilt golang binary
Project-URL: Repository, https://github.com/jmelahman/go-bin
Author-email: Jamison Lahman <jamison@lahman.dev>
License: MIT License
        
        Copyright (c) 2024 Jamison Lahman
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: binary,go,golang,packaging,prebuilt
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Go
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# Prebuilt Go Runtime

## Overview

This package provides a prebuilt Go runtime for integrating Golang artifacts into Python projects.

## Features

- Automatic Go runtime download for multiple platforms
- Cross-platform support (Windows, Linux, macOS)
- Declarative integration with python build systems

### Using the `go` binary

One potential use case for `go-bin` is to facilitate managing the go binary.
Rather than [managing multiple go installations](https://go.dev/doc/manage-install),
utilize tools such as [uv](https://docs.astral.sh/uv/) to switch between environments.

Without needing anything other than `uv`, building a golang binary becomes as simple as,

```shell
uvx --from=go-bin go build ./...
```

### Using `go-bin` for packaging

Whether you're building standalone go binaries or writing [c-extensions in golang](https://words.filippo.io/building-python-modules-with-go-1-5),
this package allows a declarative and hermetic way to build golang source code.

Simply define a build dependency on `go-bin`,

```toml
[build-system]
requires = ["hatchling", "go-bin~=1.23.4"]
build-backend = "hatchling.build"
```

_It is recommended to use [compatible release versions (`~=`)](https://peps.python.org/pep-0440/#version-specifiers). Major, minor, and patch versions of `go-bin` will always correlate with Go versions while the latter digit is reserved for changes in packaging._

then use it in your build scripts as if it were your system's version of `go`.
For an example, see [`github.com/jmelahman/connections`](https://github.com/jmelahman/connections).
