# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class IdCodeconfigBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_config': 'V1UserRequestedComputeConfig',
        'data_connection_mounts': 'list[V1DataConnectionMount]',
        'disable_auto_shutdown': 'bool',
        'ide': 'str',
        'idle_shutdown_seconds': 'int',
        'port_plugin_port': 'str',
        'switch_to_default_machine_on_idle': 'bool'
    }

    attribute_map = {
        'compute_config': 'computeConfig',
        'data_connection_mounts': 'dataConnectionMounts',
        'disable_auto_shutdown': 'disableAutoShutdown',
        'ide': 'ide',
        'idle_shutdown_seconds': 'idleShutdownSeconds',
        'port_plugin_port': 'portPluginPort',
        'switch_to_default_machine_on_idle': 'switchToDefaultMachineOnIdle'
    }

    def __init__(self, compute_config: 'V1UserRequestedComputeConfig' =None, data_connection_mounts: 'list[V1DataConnectionMount]' =None, disable_auto_shutdown: 'bool' =None, ide: 'str' =None, idle_shutdown_seconds: 'int' =None, port_plugin_port: 'str' =None, switch_to_default_machine_on_idle: 'bool' =None):  # noqa: E501
        """IdCodeconfigBody - a model defined in Swagger"""  # noqa: E501
        self._compute_config = None
        self._data_connection_mounts = None
        self._disable_auto_shutdown = None
        self._ide = None
        self._idle_shutdown_seconds = None
        self._port_plugin_port = None
        self._switch_to_default_machine_on_idle = None
        self.discriminator = None
        if compute_config is not None:
            self.compute_config = compute_config
        if data_connection_mounts is not None:
            self.data_connection_mounts = data_connection_mounts
        if disable_auto_shutdown is not None:
            self.disable_auto_shutdown = disable_auto_shutdown
        if ide is not None:
            self.ide = ide
        if idle_shutdown_seconds is not None:
            self.idle_shutdown_seconds = idle_shutdown_seconds
        if port_plugin_port is not None:
            self.port_plugin_port = port_plugin_port
        if switch_to_default_machine_on_idle is not None:
            self.switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    @property
    def compute_config(self) -> 'V1UserRequestedComputeConfig':
        """Gets the compute_config of this IdCodeconfigBody.  # noqa: E501


        :return: The compute_config of this IdCodeconfigBody.  # noqa: E501
        :rtype: V1UserRequestedComputeConfig
        """
        return self._compute_config

    @compute_config.setter
    def compute_config(self, compute_config: 'V1UserRequestedComputeConfig'):
        """Sets the compute_config of this IdCodeconfigBody.


        :param compute_config: The compute_config of this IdCodeconfigBody.  # noqa: E501
        :type: V1UserRequestedComputeConfig
        """

        self._compute_config = compute_config

    @property
    def data_connection_mounts(self) -> 'list[V1DataConnectionMount]':
        """Gets the data_connection_mounts of this IdCodeconfigBody.  # noqa: E501


        :return: The data_connection_mounts of this IdCodeconfigBody.  # noqa: E501
        :rtype: list[V1DataConnectionMount]
        """
        return self._data_connection_mounts

    @data_connection_mounts.setter
    def data_connection_mounts(self, data_connection_mounts: 'list[V1DataConnectionMount]'):
        """Sets the data_connection_mounts of this IdCodeconfigBody.


        :param data_connection_mounts: The data_connection_mounts of this IdCodeconfigBody.  # noqa: E501
        :type: list[V1DataConnectionMount]
        """

        self._data_connection_mounts = data_connection_mounts

    @property
    def disable_auto_shutdown(self) -> 'bool':
        """Gets the disable_auto_shutdown of this IdCodeconfigBody.  # noqa: E501


        :return: The disable_auto_shutdown of this IdCodeconfigBody.  # noqa: E501
        :rtype: bool
        """
        return self._disable_auto_shutdown

    @disable_auto_shutdown.setter
    def disable_auto_shutdown(self, disable_auto_shutdown: 'bool'):
        """Sets the disable_auto_shutdown of this IdCodeconfigBody.


        :param disable_auto_shutdown: The disable_auto_shutdown of this IdCodeconfigBody.  # noqa: E501
        :type: bool
        """

        self._disable_auto_shutdown = disable_auto_shutdown

    @property
    def ide(self) -> 'str':
        """Gets the ide of this IdCodeconfigBody.  # noqa: E501


        :return: The ide of this IdCodeconfigBody.  # noqa: E501
        :rtype: str
        """
        return self._ide

    @ide.setter
    def ide(self, ide: 'str'):
        """Sets the ide of this IdCodeconfigBody.


        :param ide: The ide of this IdCodeconfigBody.  # noqa: E501
        :type: str
        """

        self._ide = ide

    @property
    def idle_shutdown_seconds(self) -> 'int':
        """Gets the idle_shutdown_seconds of this IdCodeconfigBody.  # noqa: E501


        :return: The idle_shutdown_seconds of this IdCodeconfigBody.  # noqa: E501
        :rtype: int
        """
        return self._idle_shutdown_seconds

    @idle_shutdown_seconds.setter
    def idle_shutdown_seconds(self, idle_shutdown_seconds: 'int'):
        """Sets the idle_shutdown_seconds of this IdCodeconfigBody.


        :param idle_shutdown_seconds: The idle_shutdown_seconds of this IdCodeconfigBody.  # noqa: E501
        :type: int
        """

        self._idle_shutdown_seconds = idle_shutdown_seconds

    @property
    def port_plugin_port(self) -> 'str':
        """Gets the port_plugin_port of this IdCodeconfigBody.  # noqa: E501


        :return: The port_plugin_port of this IdCodeconfigBody.  # noqa: E501
        :rtype: str
        """
        return self._port_plugin_port

    @port_plugin_port.setter
    def port_plugin_port(self, port_plugin_port: 'str'):
        """Sets the port_plugin_port of this IdCodeconfigBody.


        :param port_plugin_port: The port_plugin_port of this IdCodeconfigBody.  # noqa: E501
        :type: str
        """

        self._port_plugin_port = port_plugin_port

    @property
    def switch_to_default_machine_on_idle(self) -> 'bool':
        """Gets the switch_to_default_machine_on_idle of this IdCodeconfigBody.  # noqa: E501


        :return: The switch_to_default_machine_on_idle of this IdCodeconfigBody.  # noqa: E501
        :rtype: bool
        """
        return self._switch_to_default_machine_on_idle

    @switch_to_default_machine_on_idle.setter
    def switch_to_default_machine_on_idle(self, switch_to_default_machine_on_idle: 'bool'):
        """Sets the switch_to_default_machine_on_idle of this IdCodeconfigBody.


        :param switch_to_default_machine_on_idle: The switch_to_default_machine_on_idle of this IdCodeconfigBody.  # noqa: E501
        :type: bool
        """

        self._switch_to_default_machine_on_idle = switch_to_default_machine_on_idle

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdCodeconfigBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'IdCodeconfigBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, IdCodeconfigBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'IdCodeconfigBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
