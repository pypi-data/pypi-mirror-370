# Filesystem Security Configuration Examples for @modelcontextprotocol/server-filesystem

This file contains real-world configuration examples for the `filesystem_server` plugin, demonstrating different security patterns and use cases when working with the official `@modelcontextprotocol/server-filesystem` MCP server.

**Important**: These configurations are specifically designed for `@modelcontextprotocol/server-filesystem`. 
Other filesystem MCP servers may use different tool names and would require plugin adaptation.

## Development Environment

### Sandboxed Development
Allow developers to work on source code while protecting sensitive areas:

```yaml
# watchgate.yaml
proxy:
  transport: "stdio"

upstreams:
  - name: "filesystem"
    command: "npx @modelcontextprotocol/server-filesystem /home/user/projects/myapp"

plugins:
  security:        
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "src/**/*",           # All source code
          "tests/**/*",         # All test files
          "docs/**/*",          # Documentation
          "README.md",          # Project readme
          "*.md",               # Other markdown files
          "package.json",       # Package configuration
          "requirements.txt",   # Python dependencies
          "!src/config/secrets.py",  # Exclude secrets
          "!**/.env*",          # Exclude environment files
          "!**/node_modules/**" # Exclude dependencies
        ]
        write: [
          "src/**/*.py",        # Python source files
          "src/**/*.js",        # JavaScript files
          "tests/**/*",         # Test files
          "docs/**/*.md",       # Documentation
          "logs/**/*.log",      # Log files
          "temp/**/*",          # Temporary files (including moves)
          "build/**/*"          # Build artifacts (including moves)
        ]
        priority: 20
```

### Open Source Project
Configuration for contributing to open source projects:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "**/*",               # Read everything
          "!.git/**/*",         # Except git internals
          "!node_modules/**/*", # Except dependencies
          "!__pycache__/**/*"   # Except Python cache
        ]
        write: [
          "src/**/*",           # Source code
          "tests/**/*",         # Tests
          "docs/**/*.md",       # Documentation
          "examples/**/*",      # Examples
          "temp/**/*"           # Temp files (including moves)
        ]
```

## Content Management

### Blog/Documentation Site
Allow content creation while protecting system files:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "content/**/*",       # All content
          "assets/**/*",        # All assets
          "themes/**/*",        # Theme files
          "config.yaml",        # Site configuration
          "!content/drafts/private/*"  # Except private drafts
        ]
        write: [
          "content/posts/**/*.md",      # Blog posts
          "content/pages/**/*.md",      # Static pages
          "content/drafts/**/*.md",     # Draft content
          "assets/images/**/*.{jpg,png,gif,svg}",  # Images
          "assets/documents/**/*.pdf",  # Documents
          "content/archive/**/*",       # Archive management (including moves)
          "assets/uploads/temp/**/*"    # Upload organization (including moves)
        ]
```

### Multi-Author Content Platform
Restrict authors to their own directories:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "content/published/**/*",     # All published content
          "content/authors/current-user/**/*",  # Own content
          "assets/shared/**/*",         # Shared assets
          "templates/**/*"              # Content templates
        ]
        write: [
          "content/authors/current-user/**/*",  # Own content only
          "assets/authors/current-user/**/*",   # Own assets only
          "content/authors/current-user/drafts/**/*"  # Own content management
        ]
```

## Data Science / Research

### Data Analysis Environment
Allow access to datasets while protecting sensitive information:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "datasets/public/**/*",       # Public datasets
          "datasets/processed/**/*",    # Processed data
          "notebooks/**/*.ipynb",       # Jupyter notebooks
          "scripts/**/*.py",            # Analysis scripts
          "results/**/*",               # Analysis results
          "!datasets/raw/personal/*",   # Exclude personal data
          "!datasets/raw/confidential/*"  # Exclude confidential data
        ]
        write: [
          "notebooks/**/*.ipynb",       # Can modify notebooks
          "results/experiments/**/*",   # Experiment results
          "outputs/**/*",               # Generated outputs
          "temp/**/*",                  # Temporary files
          "results/archive/**/*"        # Archive old results (including moves)
        ]
```

### Research Collaboration
Share research while protecting sensitive methodologies:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "papers/**/*",                # Research papers
          "data/public/**/*",           # Public datasets
          "code/published/**/*",        # Published code
          "presentations/**/*",         # Presentable materials
          "!code/proprietary/**/*",     # Exclude proprietary code
          "!data/sensitive/**/*"        # Exclude sensitive data
        ]
        write: [
          "papers/drafts/**/*.md",      # Draft papers
          "code/experiments/**/*",      # Experimental code
          "results/current/**/*",       # Current results
          "papers/archive/**/*",        # Archive old papers (including moves)
          "results/archive/**/*"        # Archive old results (including moves)
        ]
```

## Production/Enterprise

### Customer Support System
Allow support staff to access customer data with restrictions:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "cases/active/**/*",          # Active support cases
          "knowledge-base/**/*",        # Knowledge base
          "templates/**/*",             # Response templates
          "!cases/*/personal-data/*",   # Exclude personal data
          "!cases/*/payment-info/*"     # Exclude payment info
        ]
        write: [
          "cases/active/*/updates/*",   # Case updates
          "cases/active/*/responses/*", # Responses
          "reports/daily/**/*",         # Daily reports
          "cases/resolved/**/*",        # Move resolved cases
          "cases/escalated/**/*"        # Move escalated cases
        ]
```

### Application Deployment
Restrict deployment tools to appropriate directories:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "app/**/*",                   # Application code
          "config/deployment/**/*",     # Deployment configs
          "scripts/deploy/**/*",        # Deployment scripts
          "docs/deployment/**/*",       # Deployment docs
          "!config/secrets/**/*",       # Exclude secrets
          "!app/**/*.key"               # Exclude key files
        ]
        write: [
          "logs/deployment/**/*",       # Deployment logs
          "temp/builds/**/*",           # Build artifacts
          "status/**/*",                # Status files
          "backups/**/*",               # Manage backups (including moves)
          "releases/**/*"               # Manage releases (including moves)
        ]
```

## Educational/Training

### Student Coding Environment
Provide safe coding environment for students:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "assignments/**/*",           # Assignment instructions
          "examples/**/*",              # Code examples
          "student-work/**/*",          # Student's own work
          "reference/**/*",             # Reference materials
          "!solutions/**/*"             # Exclude solutions
        ]
        write: [
          "student-work/**/*",          # Their workspace
          "submissions/**/*",           # Assignment submissions
          "student-work/trash/**/*"     # Can clean up their work (including moves)
        ]
```

### Instructor Environment
Allow instructors to manage course materials:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "**/*"                        # Full read access
        ]
        write: [
          "assignments/**/*",           # Assignment materials
          "examples/**/*",              # Code examples
          "solutions/**/*",             # Solutions
          "grades/**/*",                # Gradebook
          "feedback/**/*",              # Student feedback
          "archives/**/*",              # Archive old materials (including moves)
          "submissions/**/*"            # Manage submissions (including moves)
        ]
```

## Security Hardening Examples

### Maximum Security
For high-security environments with minimal required access:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: [
          "public/**/*",                # Only public files
          "docs/public/**/*"            # Public documentation
        ]
        # No write permissions = completely read-only
        priority: 20
        
    - policy: "content_access_control"
      enabled: true
      config:
        mode: "blocklist"
        resources: [
          "**/*.env*",                  # Environment files
          "**/*.key",                   # Key files
          "**/*.pem",                   # Certificates
          "**/secrets/**/*",            # Secrets directories
          "**/.git/**/*"                # Git internals
        ]
        priority: 30
```

### Audit Everything
For environments requiring complete audit trails:

```yaml
plugins:
  security:
    _global:
        - policy: "filesystem_server"
      enabled: true
      config:
        read: ["**/*", "!secrets/**/*"]
        write: ["workspace/**/*", "logs/**/*", "temp/**/*"]
        priority: 20
        
  auditing:
    _global:
        - policy: "json_auditing"
      enabled: true
      config:
        output_file: "/var/log/watchgate/filesystem-audit.log"
        max_file_size_mb: 100
        backup_count: 30
```

## Testing Configurations

To test these configurations:

1. **Start with restrictive settings** and gradually add permissions
2. **Test each permission level** (read, write) separately
3. **Verify exclusion patterns** work as expected
4. **Test with realistic file paths** from your environment
5. **Check audit logs** to ensure proper logging
6. **Test error conditions** to verify security holds

## Pattern Matching Reference

Common glob patterns used in these examples:

- `**/*` - Match all files recursively
- `*.ext` - Match files with specific extension
- `dir/*` - Match files in directory (not recursive)
- `dir/**/*` - Match files in directory (recursive)
- `!pattern` - Exclude files matching pattern
- `{ext1,ext2}` - Match multiple extensions
- `**/name/**/*` - Match any directory named "name"

Remember: Patterns are evaluated in order, and exclusions (`!`) take precedence over inclusions.
