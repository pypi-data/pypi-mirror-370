import io
from unittest import TestCase
from unittest.mock import patch

from smoothglue_malware_scan.exceptions import (
    MalwareFoundException,
    ScanningServiceException,
)
from smoothglue_malware_scan.scanners.clamav import ClamAVScanner


class MockClamdNetworkSocket:
    str_rep = "MockClam"

    def __init__(self, instream_response, *args, **kwargs):
        self.instream_response = instream_response
        self.args = args
        self.kwargs = kwargs

    def instream(self, *args, **kwargs):
        return self.instream_response

    def __str__(self):
        return self.str_rep


def get_clamd_mock(instream_response):
    def inner(_):
        return MockClamdNetworkSocket(instream_response)

    return inner


class ClamAVScannerTest(TestCase):
    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock(""))
    def test_init(self):
        default_host_value = "clamd.clamav"
        default_port_value = 3310

        bad_host_values = [
            {},
            {"primary": "clamav1.example.com", "secondary": "clamav2.example.com"},
            [],
            ["clamav1.example.com", "clamav2.example.com"],
            False,
            True,
        ]
        for bad_host_value in bad_host_values:
            with self.subTest(f"Bad host value: {bad_host_value}"):
                with self.assertRaises(ValueError) as e:
                    ClamAVScanner(bad_host_value, default_port_value)
                    self.assertEqual(str(e.exception), "clam_av_host must be a string")

        bad_port_values = [
            "3310",
            {},
            {"tcp": 3310},
            [],
            [3310, 3320],
            3310.1,
            "foo",
            0,
            -10,
            65536,
        ]
        for bad_port_value in bad_port_values:
            with self.subTest(f"Bad port value: {bad_port_value}"):
                with self.assertRaises(ValueError) as e:
                    ClamAVScanner(default_host_value, bad_port_value)
                    self.assertEqual(
                        str(e.exception), "clam_av_port must be an integer between 0 and 65535"
                    )

        default_scanner = ClamAVScanner(None, None)
        self.assertEqual(default_scanner.clam_av_host, default_host_value)
        self.assertEqual(default_scanner.clam_av_port, default_port_value)

        default_scanner = ClamAVScanner(default_host_value, default_port_value)
        self.assertEqual(default_scanner.clam_av_host, default_host_value)
        self.assertEqual(default_scanner.clam_av_port, default_port_value)

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock({}))
    def test_scan_stream_clamav_issue(self):
        clam_scanner = ClamAVScanner()
        with self.assertRaises(ScanningServiceException) as e:
            clam_scanner.scan_stream(io.BytesIO(b""))
            self.assertEqual(
                str(e.exception), f"Error scanning with: {MockClamdNetworkSocket.str_rep}"
            )

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock({"stream": ("ERROR", "Foo")}))
    def test_scan_stream_clamav_error(self):
        clam_scanner = ClamAVScanner()
        with self.assertRaises(ScanningServiceException) as e:
            clam_scanner.scan_stream(io.BytesIO(b""))
            self.assertEqual(
                str(e.exception),
                f"Error scanning with: {MockClamdNetworkSocket.str_rep}\n\tReason: Foo",
            )

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock({"stream": ("FOUND", "Foo")}))
    def test_scan_stream_clamav_found(self):
        clam_scanner = ClamAVScanner()
        with self.assertRaises(MalwareFoundException) as e:
            clam_scanner.scan_stream(io.BytesIO(b""))
            self.assertEqual(str(e.exception), "Malware found: Foo")

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock({"stream": ("OK", None)}))
    def test_scan_stream_clamav_clean(self):
        clam_scanner = ClamAVScanner()
        self.assertTrue(clam_scanner.scan_stream(io.BytesIO(b"")))

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock({"stream": ("DETECTED", None)}))
    def test_scan_stream_clamav_unexpected(self):
        clam_scanner = ClamAVScanner()
        with self.assertRaises(ScanningServiceException) as e:
            clam_scanner.scan_stream(io.BytesIO(b""))
            expected_str = MockClamdNetworkSocket.str_rep
            self.assertEqual(
                str(e.exception),
                f"Error scanning with: {expected_str}\n\tReason: Unexpected state",
            )

    @patch.object(ClamAVScanner, "_init_scanner", get_clamd_mock(""))
    def test_str(self):
        clam_scanner = ClamAVScanner("foo", 1)
        self.assertEqual(str(clam_scanner), "ClamAV@foo:1")
