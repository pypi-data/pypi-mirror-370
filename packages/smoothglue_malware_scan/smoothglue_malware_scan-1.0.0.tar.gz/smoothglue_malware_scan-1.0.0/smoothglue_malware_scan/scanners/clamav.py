from io import IOBase

from clamd import ClamdNetworkSocket

from smoothglue_malware_scan.exceptions import (
    MalwareFoundException,
    ScanningServiceException,
)
from smoothglue_malware_scan.scanners.base import BaseMalwareScanner


class ClamAVScanner(BaseMalwareScanner):
    """
    Provides an integration for ClamAV
    """

    error_status = "ERROR"
    detected_status = "FOUND"
    pass_status = "OK"

    def __init__(self, clam_av_host: str = None, clam_av_port: int = None):
        self.clam_av_host = clam_av_host
        if self.clam_av_host is None:
            self.clam_av_host = "clamd.clamav"

        if not isinstance(self.clam_av_host, str):
            raise ValueError("clam_av_host must be a string")

        self.clam_av_port = clam_av_port
        if self.clam_av_port is None:
            self.clam_av_port = 3310

        if (
            not isinstance(self.clam_av_port, int)
            or self.clam_av_port <= 0
            or self.clam_av_port > 65535
        ):
            raise ValueError("clam_av_port must be an integer between 0 and 65535")

        super().__init__()

    def _init_scanner(self):
        return ClamdNetworkSocket(host=self.clam_av_host, port=self.clam_av_port)

    def scan_stream(self, stream: IOBase):
        result, reason = self.scanner.instream(stream).get("stream", (None, None))
        if result is None or result == self.error_status:
            raise ScanningServiceException(self, reason)

        if result == self.detected_status:
            raise MalwareFoundException(reason)

        if result == self.pass_status:
            return True

        raise ScanningServiceException(self, f"Unexpected result: {result}")

    def __str__(self):
        return f"ClamAV@{self.clam_av_host}:{self.clam_av_port}"
