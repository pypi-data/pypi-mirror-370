# coding: utf-8

"""
    aind-tars-service

     ## aind-tars-service  Service to pull data from TARS.  

    The version of the OpenAPI document: 0.1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_tars_service_client.models.molecule_data import MoleculeData

class TestMoleculeData(unittest.TestCase):
    """MoleculeData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MoleculeData:
        """Test MoleculeData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MoleculeData`
        """
        model = MoleculeData()
        if include_optional:
            return MoleculeData(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                updated_by = '',
                id = '',
                molecule_type = aind_tars_service_client.models.molecule_type.MoleculeType(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    updated_by = '', 
                    id = '', 
                    name = '', ),
                state = None,
                aliases = [
                    aind_tars_service_client.models.alias.Alias(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        citation = null, 
                        is_preferred = True, 
                        name = '', )
                    ],
                citations = [
                    null
                    ],
                rr_id = '',
                full_name = '',
                addgene_id = None,
                mgi_id = None,
                notes = None,
                sequence = '',
                genes = [
                    null
                    ],
                loci = [
                    null
                    ],
                species = [
                    aind_tars_service_client.models.species.Species(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        ror_id = '', 
                        name = '', )
                    ],
                organizations = [
                    null
                    ],
                shipments = [
                    null
                    ],
                material_transfer_agreements = [
                    null
                    ],
                gen_bank_files = [
                    ''
                    ],
                map_files = [
                    ''
                    ],
                fasta_files = [
                    ''
                    ],
                parents = [
                    null
                    ],
                children = [
                    null
                    ],
                patents = [
                    null
                    ],
                creators = [
                    null
                    ],
                principal_investigator = None,
                targeted_cell_populations = [
                    aind_tars_service_client.models.targeted_cell_population.TargetedCellPopulation(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        name = '', )
                    ],
                validated_cell_populations = [
                    null
                    ],
                targeted_rois = [
                    aind_tars_service_client.models.targeted_roi.TargetedRoi(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        name = '', )
                    ],
                validated_rois = [
                    null
                    ],
                genome_coordinates = None
            )
        else:
            return MoleculeData(
        )
        """

    def testMoleculeData(self):
        """Test MoleculeData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
