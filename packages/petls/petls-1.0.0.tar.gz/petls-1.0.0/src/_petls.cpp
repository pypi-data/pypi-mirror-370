#include <pybind11/stl.h>

#include <pybind11/pybind11.h>
#include "Complex.hpp"
#include <pybind11/eigen.h> //https://people.duke.edu/~ccc14/cspy/18G_C++_Python_pybind11.html#Using-the-C++-eigen-library-to-calculate-matrix-inverse-and-determinant
#include <string>

namespace py = pybind11;


// Declare functions that will instantiate the classes
void init_Complex(py::module &);
void init_dFlag(py::module &);
void init_Rips(py::module &);
void init_PersistentSheafLaplacian(py::module &);
void init_Alpha(py::module &);

// void init_Alpha(py::module &);

namespace ptl {

// This module definition will be turned into python bindings in CMakeLists.txt
// There is additional code in src/petls/__init__.py
//  to further wrap the python classes generated by this module 
PYBIND11_MODULE(_petls, m) {
    // Optional docstring
    m.doc() = "Persistent Laplacians library";

    
    init_Complex(m);
    init_Alpha(m);
    init_dFlag(m);
    init_Rips(m);
    init_PersistentSheafLaplacian(m);
}
}