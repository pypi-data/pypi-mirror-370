name: Test and Publish to TestPyPI (Staging)

on:
  # Run tests on PRs and publish when merged
  pull_request:
    types: [opened, synchronize, closed]
    branches: [ staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8, 3.9, '3.10', '3.11', '3.12' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          # Install package with dev dependencies (includes pytest, responses, etc.)
          pip install -e ".[dev]"

      - name: Lint with flake8 (optional)
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run tests with pytest
        run: |
          # pytest and pytest-cov are already installed above
          # ensures code coverage
          pytest --cov=./ --cov-report=xml --cov-fail-under=90

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  publish-testpypi:
    name: Publish to TestPyPI
    needs: test
    runs-on: ubuntu-latest
    # Only publish when a PR is merged (closed AND merged)
    if: github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get package version
        id: version
        run: |
          python -c "import featureflagshq; print('version=' + featureflagshq.__version__)" >> $GITHUB_OUTPUT

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "Publishing version ${{ steps.version.outputs.version }} to TestPyPI"
          # Use --skip-existing to avoid errors if version already exists
          twine upload --repository testpypi dist/* --verbose --skip-existing

      - name: Report TestPyPI Publication
        run: |
          echo "âœ… Successfully published version ${{ steps.version.outputs.version }} to TestPyPI"
          echo "ðŸ“¦ Install with: pip install -i https://test.pypi.org/simple/ featureflagshq==${{ steps.version.outputs.version }}"