[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devhub-tools"
version = "1.0.0"
description = "The Swiss Army Knife for Developers - A comprehensive CLI toolkit"
authors = [
    {name = "DevHub Team", email = "hello@devhub.dev"}
]
maintainers = [
    {name = "DevHub Team", email = "hello@devhub.dev"}
]
readme = "README.md"
license = "MIT"
keywords = [
    "cli", "developer-tools", "utilities", "devops", "automation",
    "formatting", "git", "api-testing", "security", "data-conversion"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "requests>=2.31.0",
    "GitPython>=3.1.0",
    "psutil>=5.9.0",
    "cryptography>=41.0.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "autopep8>=2.0.0",
    "libcst>=1.0.0",
    "validators>=0.22.0",
    "httpx>=0.24.0",
    "beautifulsoup4>=4.12.0",
    "jsonschema>=4.19.0",
    "toml>=0.10.2",
    "colorama>=0.4.6",
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.5.0",
    "ruff>=0.0.291",
    "pre-commit>=3.4.0",
    "coverage[toml]>=7.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-click>=0.8.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "coverage[toml]>=7.3.0",
]
all = [
    "devhub-cli[dev,docs,test]"
]

[project.urls]
Homepage = "https://github.com/arafat-mahmud/Developer-Utilities-Hub"
Documentation = "https://github.com/arafat-mahmud/Developer-Utilities-Hub/blob/main/README.md"
Repository = "https://github.com/arafat-mahmud/Developer-Utilities-Hub.git"
"Bug Tracker" = "https://github.com/arafat-mahmud/Developer-Utilities-Hub/issues"
Changelog = "https://github.com/arafat-mahmud/Developer-Utilities-Hub/blob/main/CHANGELOG.md"
Discussions = "https://github.com/arafat-mahmud/Developer-Utilities-Hub/discussions"

[project.scripts]
devhub = "devhub.cli:main"
dh = "devhub.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["devhub*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
devhub = ["templates/*", "schemas/*", "assets/*"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=devhub",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.tox/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "GitPython.*",
    "psutil.*",
    "libcst.*",
    "validators.*",
    "beautifulsoup4.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018", "S101"]

[tool.ruff.mccabe]
max-complexity = 10

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["devhub"]
known_third_party = ["click", "rich", "typer", "requests", "git", "psutil"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
