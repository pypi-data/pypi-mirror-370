[build-system]
requires = [
    "setuptools >= 61.0",
    'build',
    'wheel',
    "cython >= 3.0.8"
]
build-backend = "setuptools.build_meta"

[project]
name = "sdv-installer"
authors = [{name = "DataCebo, Inc.", email = 'info@datacebo.com'}]
description = "Package to install SDV Enterprise packages."
readme = "README.md"
requires-python = ">=3.8, <3.14"
keywords = [
    "sdv",
    "synthetic-data",
    "synthetic-data-generation",
    "timeseries",
    "single-table",
    "multi-table"
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: Free for non-commercial use",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    'requests',
    'platformdirs',
    'pip',
    'packaging',
]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    'pytest',
    'invoke',
    'packaging',
]
dev = [
    # general
    'pip>=9.0.1',
    'pytest',
    'invoke',
    'bump-my-version>=0.18.3',

    # style check
    'ruff>=0.7.1',

    # distribute on PyPI
    'twine>=1.10.0,<4',
    'wheel>=0.30.0',
    'coverage',

    # Pre Release Scripts
    'tomli',
]

[tool.setuptools.packages.find]
include = ['sdv_installer', 'sdv_installer.*']
exclude = [
    "docs*",
    "tests*",
    "scripts*",
    "DEVELOPMENT.md",
    "HISTORY.md",
    "RELEASE.md",
    "tasks.py",
]
namespaces = false

[tool.setuptools.dynamic]
version = {attr = "sdv_installer.__init__.__version__"}

[tool.setuptools.exclude-package-data]
'*' = [
    '*.pyx',
    '*.c',
    '* __pycache__',
    '*.py[co]',
]

[project.scripts]
sdv-installer = "sdv_installer.cli.__main__:run_cli"

[tool.ruff]
preview = true
line-length = 100
indent-width = 4
src = ["sdv-installer"]
exclude = [
    "docs",
    ".tox",
    ".git",
    "__pycache__",
    "*.ipynb",
    ".ipynb_checkpoints",
    "build_helper.py",
    "build_setup.py",
]

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # pydocstyle
    "D",
    # isort
    "I001",
    # print statements
    "T201",
    # pandas-vet
    "PD"
]
ignore = [
    # pydocstyle
    "D107",  # Missing docstring in __init__
    "D417",   # Missing argument descriptions in the docstring, this is a bug from pydocstyle: https://github.com/PyCQA/pydocstyle/issues/449
    "PD901",
    "PD101",
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
preview = true
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["sdv-installer"]
lines-between-types = 0

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402", "F403", "F405", "E501", "I001"]
"errors.py" = ["D105"]
"tests/**.py" = ["D"]
"build_helper.py" = ["D100", "D103", "E501"]
"build_setup.py" = ["D100"]
"scripts/**.py" = ["D100", "D103"]
"scripts/**.ipynb" = ["D100", "D103", "W391"]
"column_code.py" = ["D100", "D103"]
"non_hsa_expiration_imports.py" = ["D100", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
max-line-length = 100

[tool.bumpversion]
current_version = "0.0.1"
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.(?P<release>[a-z]+)(?P<candidate>\d+))?'
serialize = [
    '{major}.{minor}.{patch}.{release}{candidate}',
	'{major}.{minor}.{patch}'
]
search = '{current_version}'
replace = '{new_version}'
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = 'v{new_version}'
tag_message = 'Bump version: {current_version} → {new_version}'
allow_dirty = false
commit = true
message = 'Bump version: {current_version} → {new_version}'
commit_args = ''

[tool.bumpversion.parts.release]
first_value = 'dev'
optional_value = 'release'
values = [
    'dev',
    'release'
]

[[tool.bumpversion.files]]
filename = "sdv_installer/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"
