Metadata-Version: 2.4
Name: bijux-cli
Version: 0.1.2
Summary: Lean, plug-in-driven CLI kernel
Project-URL: Homepage, https://github.com/bijux/bijux-cli
Project-URL: Repository, https://github.com/bijux/bijux-cli.git
Project-URL: Bug Tracker, https://github.com/bijux/bijux-cli/issues
Project-URL: Documentation, https://bijux.github.io/bijux-cli/
Project-URL: Changelog, https://bijux.github.io/bijux-cli/changelog
Project-URL: Discussions, https://github.com/bijux/bijux-cli/discussions
Author-email: Bijan Mousavi <mousavi.bijan@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Bijan Mousavi
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
        associated documentation files (the "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
        following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial
        portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
        LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
        EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        USE OR OTHER DEALINGS IN THE SOFTWARE.
Keywords: cli,dependency-injection,developer-tools,fastapi,pluggy,plugins,repl,typer
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Framework :: FastAPI
Classifier: Framework :: Pytest
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS
Classifier: Operating System :: OS Independent
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Terminals
Classifier: Topic :: Utilities
Classifier: Typing :: Typed
Requires-Python: >=3.11
Requires-Dist: click>=8.1.7
Requires-Dist: colorama>=0.4.6
Requires-Dist: cookiecutter>=2.3.0
Requires-Dist: cryptography>=44.0.1
Requires-Dist: fastapi<1.0,>=0.110
Requires-Dist: injector>=0.20.1
Requires-Dist: orjson>=3.9.0
Requires-Dist: packaging>=23.0
Requires-Dist: pluggy>=1.0.0
Requires-Dist: prompt-toolkit>=3.0.0
Requires-Dist: psutil>=6.0.0
Requires-Dist: pydantic-settings~=2.0
Requires-Dist: pydantic<3.0,>=2.9.2
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: rapidfuzz>=3.0.0
Requires-Dist: structlog>=24.4.0
Requires-Dist: typer>=0.12.5
Provides-Extra: dev
Requires-Dist: anyio<5.0,>=4.4.0; extra == 'dev'
Requires-Dist: bandit<2.0,>=1.7.10; extra == 'dev'
Requires-Dist: build<2.0,>=1.0.3; extra == 'dev'
Requires-Dist: codespell<3.0,>=2.3.0; extra == 'dev'
Requires-Dist: commitizen<5.0,>=4.0.0; extra == 'dev'
Requires-Dist: cosmic-ray>=4.0.0; extra == 'dev'
Requires-Dist: deptry<1.0,>=0.10.0; extra == 'dev'
Requires-Dist: hypothesis-jsonschema<1.0,>=0.23.0; extra == 'dev'
Requires-Dist: hypothesis<7.0,>=6.103.0; extra == 'dev'
Requires-Dist: interrogate<2.0,>=1.7.0; extra == 'dev'
Requires-Dist: mkdocs-gen-files; extra == 'dev'
Requires-Dist: mkdocs-git-revision-date-localized-plugin<2.0,>=1.2.0; extra == 'dev'
Requires-Dist: mkdocs-glightbox<1.0,>=0.3; extra == 'dev'
Requires-Dist: mkdocs-include-markdown-plugin; extra == 'dev'
Requires-Dist: mkdocs-literate-nav; extra == 'dev'
Requires-Dist: mkdocs-material<10.0,>=9.5.39; extra == 'dev'
Requires-Dist: mkdocs-material[imaging]<10.0,>=9.5.39; extra == 'dev'
Requires-Dist: mkdocs-minify-plugin<1.0,>=0.7; extra == 'dev'
Requires-Dist: mkdocs-redirects<2.0,>=1.2; extra == 'dev'
Requires-Dist: mkdocs<2.0,>=1.6.1; extra == 'dev'
Requires-Dist: mkdocstrings[python]<1.0,>=0.26.1; extra == 'dev'
Requires-Dist: mutmut>=3.0; extra == 'dev'
Requires-Dist: mypy<2.0,>=1.11.2; extra == 'dev'
Requires-Dist: openapi-spec-validator<1.0,>=0.7.1; extra == 'dev'
Requires-Dist: pexpect<5.0,>=4.8.0; extra == 'dev'
Requires-Dist: pip-audit<3.0,>=2.7.3; extra == 'dev'
Requires-Dist: prance>=25.4.0.0; extra == 'dev'
Requires-Dist: pre-commit>=4.0; extra == 'dev'
Requires-Dist: pydocstyle<7.0,>=6.2.1; extra == 'dev'
Requires-Dist: pyright<2.0,>=1.1.320; extra == 'dev'
Requires-Dist: pytest-asyncio<2.0,>=1.0.0; extra == 'dev'
Requires-Dist: pytest-benchmark<5.0,>=4.0.0; extra == 'dev'
Requires-Dist: pytest-cov<7.0,>=6.2.1; extra == 'dev'
Requires-Dist: pytest-rerunfailures<14.0,>=13.0; extra == 'dev'
Requires-Dist: pytest-timeout<3.0,>=2.4.0; extra == 'dev'
Requires-Dist: pytest<9.0,>=8.4.1; extra == 'dev'
Requires-Dist: pytype>=2024.10.11; extra == 'dev'
Requires-Dist: radon>=6.0.0; extra == 'dev'
Requires-Dist: reuse<6.0.0,>=4.0.0; extra == 'dev'
Requires-Dist: ruff<1.0,>=0.6.8; extra == 'dev'
Requires-Dist: schemathesis<5.0,>=4.0; extra == 'dev'
Requires-Dist: towncrier<25.0,>=23.0; extra == 'dev'
Requires-Dist: twine<7.0,>=6.1.0; extra == 'dev'
Requires-Dist: types-colorama<1.0,>=0.0.14; extra == 'dev'
Requires-Dist: types-orjson<4.0,>=3.6.0; extra == 'dev'
Requires-Dist: types-pexpect<5.0,>4.9.0; extra == 'dev'
Requires-Dist: types-psutil<7.0,>=6.0.0; extra == 'dev'
Requires-Dist: types-pyyaml<7.0,>=6.0.12; extra == 'dev'
Requires-Dist: typing-extensions<5.0,>=4.5.0; extra == 'dev'
Requires-Dist: uvicorn<1.0,>=0.30.1; extra == 'dev'
Requires-Dist: vulture<3.0,>=2.7; extra == 'dev'
Description-Content-Type: text/markdown

# Bijux CLI
<a id="top"></a>

**A modern, predictable CLI framework for Python** — strict global flag precedence, first-class **plugins**, a **DI kernel**, and an interactive **REPL**. Build robust, extensible command-line tools that are easy to test, maintain, and scale.

[![PyPI - Version](https://img.shields.io/pypi/v/bijux-cli.svg)](https://pypi.org/project/bijux-cli/)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/bijux-cli.svg)](https://pypi.org/project/bijux-cli/)
[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/bijux/bijux-cli/main/LICENSES/MIT.txt)
[![Documentation](https://img.shields.io/badge/docs-GitHub%20Pages-brightgreen)](https://bijux.github.io/bijux-cli/)
[![CI Status](https://github.com/bijux/bijux-cli/actions/workflows/ci.yml/badge.svg)](https://github.com/bijux/bijux-cli/actions)

> **At a glance:** Plugin-driven • deterministic flags • DI for testability • REPL • structured JSON/YAML  
> **Quality:** **2,600+ tests** across layers with **98%+ coverage** (see
> [Test Artifacts](artifacts/test.md) and
> <a href="artifacts/test/htmlcov/index.html" target="_blank" rel="noopener">HTML coverage</a>).
> Multi-version CI. Docs build enforced. No telemetry.
---

## Table of Contents

* [Why Bijux CLI?](#why-bijux-cli)
* [Try It in 20 Seconds](#try-it-in-20-seconds)
* [Key Features](#key-features)
* [Installation](#installation)
* [Quick Start](#quick-start)
* [Plugins in 60 Seconds](#plugins-in-60-seconds)
* [Structured Output](#structured-output)
* [Developer Introspection](#developer-introspection)
* [Global Flags: Strict Precedence](#global-flags-strict-precedence)
* [Built-in Commands](#built-in-commands)
* [When to Use (and Not Use)](#when-to-use-and-not-use)
* [Shell Completion](#shell-completion)
* [Configuration & Paths](#configuration--paths)
* [Tests & Quality](#tests--quality)
* [Project Tree](#project-tree)
* [Roadmap](#roadmap)
* [Docs & Resources](#docs--resources)
* [Contributing](#contributing)
* [Acknowledgments](#acknowledgments)
* [License](#license)

[Back to top](#top)

---

<a id="why-bijux-cli"></a>
## Why Bijux CLI?

Click and Typer excel at simple tools. Bijux emphasizes **predictability and modularity** for complex ones:

* **Deterministic flags** for reliable CI/scripting.
* **Dependency Injection kernel** for testable, decoupled services.
* **First-class plugins** to extend without touching the core.
* **Interactive REPL** for exploration and debugging.

[Back to top](#top)

---

<a id="try-it-in-20-seconds"></a>
## Try It in 20 Seconds

```bash
pipx install bijux-cli  # Or: pip install bijux-cli
bijux --version
bijux doctor
bijux status -f json --no-pretty
```

[Back to top](#top)

---

<a id="key-features"></a>

## Key Features

* **Plugin-Driven Extensibility** — Scaffold, install, validate; plugins become top-level commands.
* **Deterministic Behavior** ⚖ — Strict flag precedence (see ADR-0002).
* **DI Kernel** — Decouple internals; inspect graphs for debugging/tests.
* **REPL Shell** — Persistent session with history; great for exploration/demos.
* **Structured Output** — JSON/YAML (+ pretty/compact, verbosity, consistent errors).
* **Diagnostics** — Built-in `doctor`, `audit`, `docs` for workflows.
* **Shell Completion** — Bash, Zsh, Fish, PowerShell support.

[Back to top](#top)

---

<a id="installation"></a>

## Installation

Requires **Python 3.11+**.

```bash
# Isolated install (recommended)
pipx install bijux-cli

# Standard
pip install bijux-cli
```

Upgrade: `pipx upgrade bijux-cli` or `pip install --upgrade bijux-cli`.

[Back to top](#top)

---

<a id="quick-start"></a>

## Quick Start

```bash
# Discover commands/flags
bijux --help

# Health check
bijux doctor

# REPL mode
bijux
bijux> help
bijux> status
bijux> exit
```

[Back to top](#top)

---

<a id="plugins-in-60-seconds"></a>

## Plugins in 60 Seconds

```bash
# Scaffold from a real template (local dir or Git URL), then install
# Option A: local template (example uses repo's cookiecutter template)
bijux plugins scaffold my_plugin --template ./plugin_template --force

# Option B: cookiecutter-compatible Git URL
# bijux plugins scaffold my_plugin --template https://github.com/bijux/bijux-plugin-template.git --force

# Install & explore
bijux plugins install ./my_plugin --force
bijux plugins list
bijux my_plugin --help

# Validate & remove
bijux plugins check my_plugin
bijux plugins uninstall my_plugin
```

Plugins dynamically add top-level commands.

[Back to top](#top)

---

<a id="structured-output"></a>

## Structured Output

For automation:

```bash
# Compact JSON
bijux status -f json --no-pretty | jq

# Pretty YAML
bijux status -f yaml --pretty
```

[Back to top](#top)

---

<a id="developer-introspection"></a>

## Developer Introspection

```bash
# DI graph
bijux dev di -f json

# Loaded plugins
bijux dev list-plugins
```

[Back to top](#top)

---

<a id="global-flags-strict-precedence"></a>

## Global Flags: Strict Precedence

Fixed ordering eliminates ambiguity.

| Priority | Flag                        | Effect                                                    |
| -------: | --------------------------- | --------------------------------------------------------- |
|        1 | `-h`, `--help`              | Immediate exit (code 0) with usage; ignores all.          |
|        2 | `-q`, `--quiet`             | Suppress stdout/stderr; preserves exit code.              |
|        3 | `-d`, `--debug`             | Full diagnostics; implies `--verbose`, forces `--pretty`. |
|        4 | `-f, --format <json\|yaml>` | Structured output; invalid → code 2.                      |
|        5 | `--pretty` / `--no-pretty`  | Indentation toggle (default: `--pretty`).                 |
|        6 | `-v`, `--verbose`           | Runtime metadata; implied by `--debug`.                   |

Rationale: [ADR-0002](https://bijux.github.io/bijux-cli/ADR/0002-global-flags-precedence)

[Back to top](#top)

---

<a id="built-in-commands"></a>

## Built-in Commands

| Command   | Description                 | Example                           |
| --------- | --------------------------- | --------------------------------- |
| `doctor`  | Environment diagnostics     | `bijux doctor`                    |
| `status`  | CLI snapshot                | `bijux status -f json`            |
| `repl`    | Interactive shell           | `bijux repl`                      |
| `plugins` | Manage plugins              | `bijux plugins list`              |
| `config`  | Key-value settings          | `bijux config set core_timeout=5` |
| `history` | REPL history                | `bijux history --limit 10`        |
| `audit`   | Security checks             | `bijux audit --dry-run`           |
| `docs`    | Generate specs/docs         | `bijux docs --out spec.json`      |
| `dev`     | Introspection (DI, plugins) | `bijux dev di`                    |
| `sleep`   | Pause                       | `bijux sleep -s 5`                |
| `version` | Version info                | `bijux version`                   |

[Back to top](#top)

---

<a id="when-to-use-and-not-use"></a>

## When to Use (and Not Use)

**Use if you need:**

* Plugins for extensibility.
* Deterministic flags for CI/scripts. [ADR-0002](https://bijux.github.io/bijux-cli/ADR/0002-global-flags-precedence)
* REPL for interactive workflows.
* DI for modular, testable design.

**Overkill if:**

* You’re building a tiny one-off script (Click/Typer may be simpler).
* You don’t need plugins/DI.

[Back to top](#top)

---

<a id="shell-completion"></a>

## Shell Completion

```bash
# Install (writes to your shell’s completion dir)
bijux --install-completion

# Or print the script for manual setup
bijux --show-completion
```

*Zsh tip:* Ensure `compinit` runs and your `fpath` includes the completion directory.

[Back to top](#top)

---

<a id="configuration--paths"></a>

## Configuration & Paths

Precedence: **flags > env > config > defaults**.

* Config: `~/.bijux/.env` (`BIJUXCLI_CONFIG`)
* History: `~/.bijux/.history` (`BIJUXCLI_HISTORY_FILE`)
* Plugins: `~/.bijux/.plugins` (`BIJUXCLI_PLUGINS_DIR`)

Example:

```bash
export BIJUXCLI_PLUGINS_DIR=./custom-plugins
```

[Back to top](#top)

---

<a id="tests--quality"></a>

## Tests & Quality

* **Depth:** 2,600+ tests across unit, integration, functional, and E2E layers.
* **Coverage:** **98%+** code coverage (measured via `pytest-cov` in CI).
* **Determinism:** CI runs the full suite on multiple Python versions (3.11+).
* **Artifacts:** JSON/YAML fixtures validate structured outputs; E2E simulates real usage (REPL, plugins, DI).
* **Docs:** Read the full testing guide → **[TESTS.md](TESTS.md)**.

Quick commands:

```bash
make test         # all tests
make test-unit    # unit tests only
make test-e2e     # end-to-end tests only
```

**Artifacts:** [Test Artifacts](artifacts/test.md) ·
[JUnit report](artifacts/test.md#junit-xml) ·
<a href="artifacts/test/htmlcov/index.html" target="_blank" rel="noopener">HTML coverage report</a>


[Back to top](#top)

---

<a id="project-tree"></a>

## Project Tree

A guided map of the repository (what lives where, and why).
See **[PROJECT\_TREE.md](PROJECT_TREE.md)** for the full breakdown.

Quick glance:

```
api/            # OpenAPI schemas
config/         # Lint/type/security configs
docs/           # MkDocs site (Material)
makefiles/      # Task modules (docs, test, lint, etc.)
plugin_template/# Cookiecutter-ready plugin scaffold
scripts/        # Helper scripts (hooks, docs generation)
src/bijux_cli/  # CLI + library implementation
tests/          # unit / integration / functional / e2e
```

[Back to top](#top)

---

<a id="roadmap"></a>

## Roadmap

* **v0.2** — Async command support, richer plugin registry.
* **v1.0** — Community plugin marketplace, benchmarks vs. alternatives.

Track progress and suggest features via [Issues](https://github.com/bijux/bijux-cli/issues).

[Back to top](#top)

---

<a id="docs--resources"></a>

## Docs & Resources

* **Site**: [https://bijux.github.io/bijux-cli/](https://bijux.github.io/bijux-cli/)
* **Changelog**: [https://github.com/bijux/bijux-cli/blob/main/CHANGELOG.md](https://github.com/bijux/bijux-cli/blob/main/CHANGELOG.md)
* **Repository**: [https://github.com/bijux/bijux-cli](https://github.com/bijux/bijux-cli)
* **Issues**: [https://github.com/bijux/bijux-cli/issues](https://github.com/bijux/bijux-cli/issues)
* **Security** (private reports): [https://github.com/bijux/bijux-cli/security/advisories/new](https://github.com/bijux/bijux-cli/security/advisories/new)
* **Tests:** See **[TESTS.md](TESTS.md)**
* **Project Tree:** See **[PROJECT\_TREE.md](PROJECT_TREE.md)**
* **Artifacts:** Browse all reports & logs — [index](artifacts/index.md)
· [Tests](artifacts/test.md) · [Lint](artifacts/lint.md) · [Quality](artifacts/quality.md)
 · [Security](artifacts/security.md) · [SBOM](artifacts/sbom.md) · [API](artifacts/api.md) · [Citation](artifacts/citation.md)

*When filing issues, include `--debug` output where possible.*

[Back to top](#top)

---

<a id="contributing"></a>

## Contributing

Welcome! See **[CONTRIBUTING.md](https://github.com/bijux/bijux-cli/blob/main/CONTRIBUTING.md)** for setup, style, and tests. We label **good first issue** to help you get started.

[Back to top](#top)

---

<a id="acknowledgments"></a>

## Acknowledgments

* Built on [Typer](https://typer.tiangolo.com/) (CLI), [FastAPI](https://fastapi.tiangolo.com/) (HTTP API), and [Injector](https://github.com/python-injector/injector) (DI).
* Inspired by Click, Typer, and Cobra.
* Thanks to early contributors and testers!

[Back to top](#top)

---

<a id="license"></a>

## License

MIT — see **[LICENSES/MIT.txt](https://raw.githubusercontent.com/bijux/bijux-cli/main/LICENSES/MIT.txt)**.
© 2025 Bijan Mousavi.

[Back to top](#top)
# Changelog
<a id="top"></a>

All notable changes to **Bijux CLI** are documented here.
This project adheres to [Semantic Versioning](https://semver.org) and the
[Keep a Changelog](https://keepachangelog.com/en/1.0.0/) format.

<a id="unreleased"></a>
## [Unreleased]

### Added
* (add new entries via Towncrier fragments in `changelog.d/`)

### Changed
* (add here)

### Fixed
* (add here)

[Back to top](#top)

---

<!-- towncrier start -->

<a id="v0-1-2"></a>
## [0.1.2] – 2025-08-17

### Added
* **New Documentation Engine:** Introduced a new modular documentation builder in `scripts/docs_builder/` that replaces the previous helper script.
* **CI Artifact Pages:** The documentation site now automatically generates detailed pages for all CI artifacts, including tests, linting, code quality, security, API tests, SBOMs, and citation files.
* **Release Evidence:** The `publish` workflow now downloads all artifacts from the `CI` run, packages them as `evidence/*.tar.gz` bundles, and attaches them to the GitHub Release for traceability.
* **Build Hygiene:** Makefiles now enforce a "hygienic" build process, ensuring all temporary files, caches, and build outputs are stored under the `artifacts/` directory to prevent root directory pollution.

### Changed
* **CI/CD Overhaul:**
    * The `ci.yml` workflow now uploads each category of artifact separately for better organization and downstream consumption.
    * The `docs.yml` workflow now waits for the main `CI` run to complete, downloads all artifacts, and uses them to build a data-rich documentation site.
    * The `publish.yml` workflow has been streamlined and made more robust, removing the optional "wait for docs" step and improving tag detection.
* **Documentation Content:** All top-level Markdown documents (`README.md`, `USAGE.md`, `TESTS.md`, `TOOLING.md`, `CONTRIBUTING.md`, etc.) have been significantly rewritten and expanded with tables of contents, `back-to-top` links, and cross-references to the new artifact pages.
* **Build System:**
    * All `Makefile` modules have been refactored to use the new hygienic `artifacts/` directory structure for outputs and caches.
    * `tox.ini` has been updated to align with the new Makefile targets and to run a comprehensive suite of checks for the `py311` environment, mirroring the full CI validation process.
* **API Schema:** The OpenAPI `schema.yaml` has been improved with stricter validation (`additionalProperties: false`), better descriptions, response links, and more detailed examples.
* **Source Code:** Refactored async handling in `src/bijux_cli/api.py` and improved type safety across multiple modules by removing `pyright: ignore` comments and adding explicit `cast` calls where necessary.

### Fixed
* **Type Safety:** Resolved numerous previously ignored type errors throughout the codebase and test suite.
* **API Endpoint Logic:** Corrected the item update logic in `src/bijux_cli/httpapi.py` by removing a faulty check for duplicate names that was causing incorrect 409 Conflict errors.
* **Test Suite:** Improved the stability and correctness of E2E tests by enhancing golden file comparisons and fixing brittle assertions.

[Back to top](#top)


<a id="v0-1-1"></a>

## [0.1.1] – 2025-08-14

### Added
* **Publish pipeline:** GitHub Actions `publish.yml` that publishes via `make publish` only after required checks are green and a tag is present.
* **Project map:** `PROJECT_TREE.md` (and `docs/project_tree.md`) with a curated overview.
* **Developer Tooling page:** `TOOLING.md` (and `docs/tooling.md`) with embedded configs, Makefile snippets, and CI workflows via `include-markdown`.
* **Docs assets:** Community landing page, Plausible analytics partial, and CSS overrides.

### Changed
* **Docs generator (`scripts/helper_mkdocs.py`):**
  * Copies **README**, **USAGE**, **TESTS**, **PROJECT_TREE**, and **TOOLING** into the site with link rewrites and `{#top}` anchors.
  * Generates mkdocstrings pages for all modules under `src/bijux_cli/**`.
  * Builds **one** consolidated **API Reference** with this structure:
    * top: **Api Module**, **Cli Module**, **Httpapi Module**
    * sections (collapsed by default): **Commands**, **Contracts**, **Core**, **Infra**, **Services**
    * nested groups for command subpackages (`config/`, `dev/`, `history/`, `memory/`, `plugins/`) beneath **Commands**.
  * Emits `reference/**/index.md` to power Material’s section indexes.
* **MkDocs config (`mkdocs.yml`):** tightened plugin ordering and settings for `include-markdown`, enabled section indexes, and strict mode; added watch paths for configs and scripts.
* **README / USAGE:** Refined copy; standardized **top anchors** and links to **TESTS.md**/**PROJECT_TREE.md**/**TOOLING.md**.
* **SECURITY.md:** Rewritten with clearer reporting, SLAs, scope, and safe harbor.
* **Makefiles:** macOS-safe env handling; Cairo-less Interrogate wrapper for doc coverage.
* **Config:** Expanded lints/dictionary.

### Fixed
* **Docs build (strict):** resolved broken/unknown links in **TOOLING.md** and removed duplicate **API Reference** sections; left sidebar now stays populated when deep-linking into API pages.
* **Tests:** E2E version fixtures cleaned up.

### Packaging
* **PyPI links corrected:** `project.urls` now points to accurate Homepage/Docs/Changelog/Issues/Discussions.
* **Dynamic versioning from Git tags:** Using `hatch-vcs` with `dynamic = ["version"]`; annotated tags like `v0.1.1` define the release version. `commitizen` tags as `v$version`.
* **Richer PyPI description:** `hatch-fancy-pypi-readme` renders **README.md** + **CHANGELOG.md** on PyPI.
* **Wheel/Sdist layout:** Explicit Hatch build config ensures `py.typed`, licenses, and metadata are included.

[Back to top](#top)

---

<a id="v0-1-0"></a>

## [0.1.0] – 2025-08-12

### Added

* **Core runtime**

    * Implemented Dependency Injection kernel, REPL shell, plugin loader, telemetry hooks, and shell completion (bash/zsh/fish).
    * Added core modules: `api`, `cli`, `httpapi`, `core/{constants,context,di,engine,enums,exceptions,paths}`.

* **Contracts layer** (`contracts/`)

    * Defined protocols for `audit`, `config`, `context`, `docs`, `doctor`, `emitter`, `history`,
      `memory`, `observability`, `process`, `registry`, `retry`, `serializer`, `telemetry`.
    * Added `py.typed` markers for downstream type checking.

* **Services layer**

    * Implemented concrete services for `audit`, `config`, `docs`, `doctor`, `history`, `memory`.
    * Built plugin subsystem: `plugins/{entrypoints,groups,hooks,registry}`.

* **Infra layer** (`infra/`)

    * Implemented `emitter`, `observability`, `process`, `retry`, `serializer`, `telemetry`.

* **Command suite**

    * Added top-level commands: `audit`, `docs`, `doctor`, `help`, `repl`, `sleep`, `status`, `version`.
    * Added `config/` commands: `clear`, `export`, `get`, `list`, `load`, `reload`, `set`, `unset`, `service`.
    * Added `dev/` commands: `di`, `list-plugins`, `service`.
    * Added `history/` commands: `clear`, `service`.
    * Added `memory/` commands: `clear`, `delete`, `get`, `list`, `set`, `service`.
    * Added `plugins/` commands: `check`, `info`, `install`, `list`, `scaffold`, `uninstall`.

* **Structured output & flags**

    * Added JSON/YAML output via `--format`, pretty printing, and deterministic global flag precedence ([ADR-0002](https://bijux.github.io/bijux-cli/ADR/0002-global-flags-precedence)).

* **API contract validation & testing**

    * Automated lint/validation of `api/*.yaml` with Prance, OpenAPI Spec Validator, Redocly, and OpenAPI Generator.
    * Added **Schemathesis** contract testing against the running server.
    * Pinned OpenAPI Generator CLI version via `OPENAPI_GENERATOR_VERSION` and automated Node.js toolchain setup in Makefile.

* **Documentation tooling**

    * Integrated MkDocs (Material), mkdocstrings, literate-nav, and ADR index generation.

* **Quality & security pipeline**

    * Added formatting/linting: `ruff` (+format).
    * Added typing: `mypy`, `pyright`, `pytype`.
    * Added docs style/coverage: `pydocstyle`, `interrogate`.
    * Added code health: `vulture`, `deptry`, `radon`, `codespell`, `reuse`.
    * Added security: `bandit`, `pip-audit`.
    * Added mutation testing: `mutmut`, `cosmic-ray`.

* **SBOM**

    * Generated CycloneDX JSON for prod/dev dependencies via `make sbom` (uses `pip-audit`).

* **Citation**

    * Validated `CITATION.cff` and added export to BibTeX/RIS/EndNote formats via `make citation`.

* **Makefile architecture**

    * Modularized the Makefile into `makefiles/*.mk` for maintainability and clear separation of concerns.
    * Centralized all developer workflows (`test`, `lint`, `quality`, `security`, `api`, `docs`, `build`, `sbom`, `citation`, `changelog`, `publish`) in one consistent interface.
    * Added `bootstrap` target for idempotent virtualenv setup and Git hook installation from `scripts/git-hooks` (skips re-installation if already linked).
    * Added `all-parallel` target to run independent checks (`quality`, `security`, `api`, `docs`) concurrently for faster CI/CD.
    * Added `make help` for self-documenting targets with grouped sections.
    * Provided helper macros (`run_tool`, `read_pyproject_version`) to standardize tooling invocation.

* **pre-commit**

    * Added hygiene hooks: `ruff-format` + `ruff`, `mdformat`, and `codespell`.
      * Enforced Conventional Commits via **commitizen** `commit-msg` hook.

* **tox orchestration**

    * Configured multi-Python test envs (`py311`, `py312`, `py313`).
    * Mapped Makefile workflows into tox envs (`lint`, `quality`, `security`, `api`, `docs`, `build`, `sbom`, `changelog`, `citation`) to ensure reproducibility.
    * Passed `MAKEFLAGS` to execute Makefile targets inside tox-managed virtualenvs.

* **Continuous Integration**

    * Added **GitHub Actions** workflow running tox across Python versions with Node.js 20 and Java 17 for API checks.
    * Added **GitLab CI** sample mirroring the GitHub workflow (tox-driven) with artifacts for coverage and API logs.
    * CI/CD pipelines directly leverage the modularized Makefile for consistent local/CI behavior.

* **Packaging / PyPI page**

    * Built dynamic long description via **hatch-fancy-pypi-readme** from **README.md** and **CHANGELOG.md** for PyPI/TestPyPI.
    * Packaged with `LICENSES/`, `REUSE.toml`, `CITATION.cff`, and `py.typed` included in source distributions.

### Changed

* Released initial public version.

### Fixed

* None

[Back to top](#top)

[Unreleased]: https://github.com/bijux/bijux-cli/compare/v0.1.1...HEAD
[0.1.1]: https://github.com/bijux/bijux-cli/compare/v0.1.0...v0.1.1
[0.1.0]: https://github.com/bijux/bijux-cli/releases/tag/v0.1.0
