import argparse
from argparse import Namespace
from pathlib import Path
from typing import ClassVar

from robotooter.bots.base_bot import BaseBot
from robotooter.bots.base_bot import CommandParam as CommandParam
from robotooter.filters.base_filter import BaseFilter as BaseFilter
from robotooter.mixins.resources import ResourcesMixin
from robotooter.models.configs import BotConfig as BotConfig

from chapter_by_chapter.content_creator import ContentCreator as ContentCreator
from chapter_by_chapter.greeter import Greeter as Greeter
from chapter_by_chapter.models import BookMetadata as BookMetadata
from chapter_by_chapter.models import ChapterByChapterConfig as ChapterByChapterConfig
from chapter_by_chapter.models import ChapterMetadata as ChapterMetadata
from chapter_by_chapter.models import PeriodicMessages as PeriodicMessages
from chapter_by_chapter.processor import Processor as Processor

SET_BOOK_PARAMS: list[CommandParam]
ENQUEUE_PARAMS: list[CommandParam]

class ChapterByChapterBot(ResourcesMixin, BaseBot[ChapterByChapterConfig]):
    CONFIG_CLASS: ClassVar[type[ChapterByChapterConfig]]
    @classmethod
    def create_with_config(cls, config_data: BotConfig, filters: list[BaseFilter]) -> ChapterByChapterBot: ...
    @staticmethod
    def new_bot_info() -> str | None: ...
    def __init__(self, config: ChapterByChapterConfig, filters: list[BaseFilter]) -> None: ...
    def set_book(self, args: Namespace) -> None: ...
    def show_book(self, args: Namespace) -> None: ...
    def list_books(self, args: Namespace) -> None: ...
    def queue(self, args: Namespace) -> None: ...
    def periodic_message(self, args: Namespace) -> None: ...
    def generate_content(self, book_key: str | None, chapter: int | None = None) -> None: ...
    def get_greeter(self) -> Greeter: ...
    def get_all_books(self) -> list[BookMetadata]: ...
    def get_book_metadata(self, book_key: str) -> BookMetadata | None: ...
    def get_chapter_metadata(self, book_key: str, chapter: int) -> tuple[ChapterMetadata | None, list[Path]]: ...
    def get_tomorrows_chapter(self, book_key: str, chapter: int) -> ChapterMetadata | None: ...
    def get_next_book(self) -> BookMetadata | None: ...
    def book_path(self, book_key: str | None = None) -> Path: ...
    def get_days_remaining_in_current_book(self) -> int: ...
    def _toot(self, args: argparse.Namespace) -> None: ...
    def _setup_data(self, args: argparse.Namespace) -> None: ...
