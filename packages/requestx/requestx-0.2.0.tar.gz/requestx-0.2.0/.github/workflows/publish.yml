name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.1)'
        required: true
        type: string
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        type: boolean
        default: false
      skip_tests:
        description: 'Skip running tests before publishing'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - hotfix/*
      - patch/*
    paths:
      - 'Cargo.toml'
      - 'pyproject.toml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-publish:
    name: Validate Publication
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
    - uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Extract version from Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Publishing version: ${VERSION}"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi

    - name: Check if version exists on PyPI
      id: check
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        TEST_PYPI="${{ github.event.inputs.test_pypi }}"
        
        if [ "$TEST_PYPI" = "true" ]; then
          PYPI_URL="https://test.pypi.org/pypi/requestx/json"
          echo "Checking Test PyPI for version ${VERSION}"
        else
          PYPI_URL="https://pypi.org/pypi/requestx/json"
          echo "Checking PyPI for version ${VERSION}"
        fi
        
        if curl -s "$PYPI_URL" | jq -e ".releases.\"$VERSION\"" > /dev/null 2>&1; then
          echo "Version $VERSION already exists on PyPI"
          echo "should_publish=false" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION does not exist, proceeding with publication"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        fi

  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    needs: validate-publish
    if: needs.validate-publish.outputs.should_publish == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync --dev

    - name: Run quick tests
      run: |
        # Run Rust tests
        cargo test --lib
        
        # Build and test Python package
        uv run maturin develop
        uv run python -c "import requestx; print(f'RequestX {requestx.__version__} imported successfully')"
        
        # Run critical Python tests
        if [ -f tests/test_basic.py ]; then
          uv run python -m pytest tests/test_basic.py -v
        else
          echo "Basic tests not found, running import test only"
        fi

  build-and-publish:
    name: Build and Publish
    runs-on: ${{ matrix.os }}
    needs: [validate-publish, quick-test]
    if: always() && needs.validate-publish.outputs.should_publish == 'true' && (needs.quick-test.result == 'success' || needs.quick-test.result == 'skipped')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install maturin
      run: uv tool install maturin[patchelf]

    - name: Build wheels (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: PyO3/maturin-action@v1
      with:
        target: x86_64
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto

    - name: Build wheels (Linux aarch64)
      if: matrix.os == 'ubuntu-latest'
      uses: PyO3/maturin-action@v1
      with:
        target: aarch64
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto

    - name: Build wheels (Windows)
      if: matrix.os == 'windows-latest'
      uses: PyO3/maturin-action@v1
      with:
        target: x64
        args: --release --out dist --find-interpreter
        sccache: 'true'

    - name: Build wheels (macOS)
      if: matrix.os == 'macos-latest'
      uses: PyO3/maturin-action@v1
      with:
        target: universal2-apple-darwin
        args: --release --out dist --find-interpreter
        sccache: 'true'

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform }}
        path: dist

  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    needs: [validate-publish, quick-test]
    if: always() && needs.validate-publish.outputs.should_publish == 'true' && (needs.quick-test.result == 'success' || needs.quick-test.result == 'skipped')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install maturin
      run: uv tool install maturin

    - name: Build source distribution
      run: uv run maturin sdist --out dist

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  test-built-packages:
    name: Test Built Packages
    runs-on: ubuntu-latest
    needs: [build-and-publish, build-sdist]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: Download sdist
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

    - name: Test wheel installation
      run: |
        python -m pip install --upgrade pip
        # Find and install a wheel
        WHEEL=$(find dist -name '*.whl' | head -1)
        if [ -n "$WHEEL" ]; then
          echo "Testing wheel: $WHEEL"
          python -m pip install "$WHEEL" --force-reinstall
          python -c "import requestx; print(f'RequestX {requestx.__version__} from wheel works')"
        else
          echo "No wheel found to test"
          exit 1
        fi

    - name: Test sdist installation
      run: |
        # Test source distribution
        SDIST=$(find dist -name '*.tar.gz' | head -1)
        if [ -n "$SDIST" ]; then
          echo "Testing sdist: $SDIST"
          python -m pip install "$SDIST" --force-reinstall
          python -c "import requestx; print(f'RequestX {requestx.__version__} from sdist works')"
        else
          echo "No sdist found to test"
          exit 1
        fi

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-publish, test-built-packages]
    environment:
      name: ${{ github.event.inputs.test_pypi == 'true' && 'test-pypi' || 'pypi' }}
      url: ${{ github.event.inputs.test_pypi == 'true' && 'https://test.pypi.org/p/requestx' || 'https://pypi.org/p/requestx' }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Flatten artifacts
      run: |
        mkdir -p upload
        find dist -name '*.whl' -exec cp {} upload/ \;
        find dist -name '*.tar.gz' -exec cp {} upload/ \;
        ls -la upload/
        echo "Files to upload:"
        ls -1 upload/

    - name: Publish to Test PyPI
      if: github.event.inputs.test_pypi == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: upload/
        verbose: true
        print-hash: true

    - name: Publish to PyPI
      if: github.event.inputs.test_pypi != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: upload/
        verbose: true
        print-hash: true

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    if: always()
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          wheels-*
          sdist
        failOnError: false

    - name: Publication Summary
      run: |
        echo "## Publication Summary"
        echo "- Version: ${{ needs.validate-publish.outputs.version }}"
        echo "- Target: ${{ github.event.inputs.test_pypi == 'true' && 'Test PyPI' || 'PyPI' }}"
        echo "- Validation: ${{ needs.validate-publish.result }}"
        echo "- Quick Test: ${{ needs.quick-test.result }}"
        echo "- Build: ${{ needs.build-and-publish.result }}"
        echo "- Package Test: ${{ needs.test-built-packages.result }}"
        echo "- Publication: ${{ needs.publish-to-pypi.result }}"
        
        if [ "${{ needs.publish-to-pypi.result }}" = "success" ]; then
          echo "✅ Successfully published RequestX ${{ needs.validate-publish.outputs.version }}"
        else
          echo "❌ Publication failed"
        fi