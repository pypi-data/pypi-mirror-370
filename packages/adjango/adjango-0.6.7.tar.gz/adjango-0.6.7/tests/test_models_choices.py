# test_models_choices.py
import pytest
from django.db.models import TextChoices

from adjango.models.choices import ATextChoices


class TestATextChoices:
    """–¢–µ—Å—Ç—ã –¥–ª—è ATextChoices"""

    def test_atext_choices_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç TextChoices"""
        assert issubclass(ATextChoices, TextChoices)

    def test_get_label_with_enum_member(self):
        """–¢–µ—Å—Ç get_label —Å Enum —á–ª–µ–Ω–æ–º"""

        class TestChoices(ATextChoices):
            OPTION1 = "opt1", "Option 1"
            OPTION2 = "opt2", "Option 2"

        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º enum —á–ª–µ–Ω
        label = TestChoices.get_label(TestChoices.OPTION1)
        assert label == "Option 1"

        label = TestChoices.get_label(TestChoices.OPTION2)
        assert label == "Option 2"

    def test_get_label_with_value(self):
        """–¢–µ—Å—Ç get_label —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º"""

        class TestChoices(ATextChoices):
            ACTIVE = "active", "Active Status"
            INACTIVE = "inactive", "Inactive Status"
            PENDING = "pending", "Pending Status"

        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum
        label = TestChoices.get_label("active")
        assert label == "Active Status"

        label = TestChoices.get_label("inactive")
        assert label == "Inactive Status"

        label = TestChoices.get_label("pending")
        assert label == "Pending Status"

    def test_get_label_with_invalid_value(self):
        """–¢–µ—Å—Ç get_label —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""

        class TestChoices(ATextChoices):
            VALID = "valid", "Valid Option"

        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        label = TestChoices.get_label("invalid")
        assert label is None

        label = TestChoices.get_label("")
        assert label is None

        label = TestChoices.get_label(None)
        assert label is None

    def test_get_label_with_different_types(self):
        """–¢–µ—Å—Ç get_label —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π"""

        class TestChoices(ATextChoices):
            OPTION1 = "opt1", "Option 1"

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
        label = TestChoices.get_label(123)
        assert label is None

        label = TestChoices.get_label([])
        assert label is None

        label = TestChoices.get_label({})
        assert label is None

    def test_get_label_empty_choices(self):
        """–¢–µ—Å—Ç get_label —Å –ø—É—Å—Ç—ã–º–∏ choices"""

        class EmptyChoices(ATextChoices):
            pass

        label = EmptyChoices.get_label("anything")
        assert label is None

    def test_get_label_complex_choices(self):
        """–¢–µ—Å—Ç get_label —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ choices"""

        class StatusChoices(ATextChoices):
            DRAFT = "draft", "Draft Document"
            REVIEW = "review", "Under Review"
            APPROVED = "approved", "Approved Document"
            PUBLISHED = "published", "Published Document"
            ARCHIVED = "archived", "Archived Document"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        test_cases = [
            ("draft", "Draft Document"),
            ("review", "Under Review"),
            ("approved", "Approved Document"),
            ("published", "Published Document"),
            ("archived", "Archived Document"),
        ]

        for value, expected_label in test_cases:
            label = StatusChoices.get_label(value)
            assert label == expected_label

    def test_get_label_with_unicode(self):
        """–¢–µ—Å—Ç get_label —Å unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""

        class UnicodeChoices(ATextChoices):
            RUSSIAN = "ru", "–†—É—Å—Å–∫–∏–π"
            CHINESE = "cn", "‰∏≠Êñá"
            EMOJI = "emoji", "üòä Emoji"

        label = UnicodeChoices.get_label("ru")
        assert label == "–†—É—Å—Å–∫–∏–π"

        label = UnicodeChoices.get_label("cn")
        assert label == "‰∏≠Êñá"

        label = UnicodeChoices.get_label("emoji")
        assert label == "üòä Emoji"

    def test_get_label_case_sensitivity(self):
        """–¢–µ—Å—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É"""

        class CaseChoices(ATextChoices):
            UPPER = "UPPER", "Upper Case"
            lower = "lower", "Lower Case"
            Mixed = "Mixed", "Mixed Case"

        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        assert CaseChoices.get_label("UPPER") == "Upper Case"
        assert CaseChoices.get_label("lower") == "Lower Case"
        assert CaseChoices.get_label("Mixed") == "Mixed Case"

        # –ù–µ—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
        assert CaseChoices.get_label("upper") is None
        assert CaseChoices.get_label("LOWER") is None
        assert CaseChoices.get_label("mixed") is None

    def test_get_label_with_numbers_and_special_chars(self):
        """–¢–µ—Å—Ç get_label —Å —á–∏—Å–ª–∞–º–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏"""

        class SpecialChoices(ATextChoices):
            VERSION_1_0 = "v1.0", "Version 1.0"
            VERSION_2_0 = "v2.0", "Version 2.0"
            BETA_TEST = "beta-test", "Beta Test"
            UNDERSCORE = "test_value", "Test Value"

        assert SpecialChoices.get_label("v1.0") == "Version 1.0"
        assert SpecialChoices.get_label("v2.0") == "Version 2.0"
        assert SpecialChoices.get_label("beta-test") == "Beta Test"
        assert SpecialChoices.get_label("test_value") == "Test Value"

    def test_get_label_method_return_type(self):
        """–¢–µ—Å—Ç —Ç–∏–ø–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""

        class TestChoices(ATextChoices):
            OPTION = "opt", "Option Label"

        # –í–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É
        label = TestChoices.get_label("opt")
        assert isinstance(label, str)
        assert label == "Option Label"

        # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
        label = TestChoices.get_label("invalid")
        assert label is None

    def test_get_label_preserves_original_functionality(self):
        """–¢–µ—Å—Ç —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å TextChoices —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"""

        class TestChoices(ATextChoices):
            OPTION1 = "opt1", "Option 1"
            OPTION2 = "opt2", "Option 2"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã TextChoices —Ä–∞–±–æ—Ç–∞—é—Ç
        assert TestChoices.OPTION1.value == "opt1"
        assert TestChoices.OPTION1.label == "Option 1"
        assert TestChoices.OPTION2.value == "opt2"
        assert TestChoices.OPTION2.label == "Option 2"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º choices
        choices_list = TestChoices.choices
        expected_choices = [("opt1", "Option 1"), ("opt2", "Option 2")]
        assert choices_list == expected_choices
