[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "cloudstack-orchestrator"
version = "2.5.0"
description = "CloudStack Orchestrator SDK and CLI for automated Kubernetes platform management"
readme = "README.md"
authors = [
    {name = "CloudStack Team", email = "dev@cloudstack.io"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]
keywords = ["kubernetes", "gitops", "argocd", "platform", "orchestration"]
requires-python = ">=3.11"
dependencies = [
    "typer>=0.9.0",
    "rich>=13.7.0",
    "boto3>=1.34.0",
    "google-cloud-secret-manager>=2.16.0",
    "google-cloud-container>=2.35.0",
    "kubernetes>=29.0.0",
    "pyyaml>=6.0.1",
    "pydantic>=2.5.0",
    "pygithub>=2.1.1",
    "requests>=2.31.0",
    "requests-oauthlib>=2.0.0",
    "httpx>=0.28.1",
    "bcrypt>=4.1.0",
    "pyjwt>=2.8.0",
    "azure-keyvault-secrets>=4.10.0",
    "azure-identity>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/killerapp/cloudstack-orchestrator"
Documentation = "https://github.com/killerapp/cloudstack-orchestrator#readme"
Repository = "https://github.com/killerapp/cloudstack-orchestrator"
Issues = "https://github.com/killerapp/cloudstack-orchestrator/issues"

[project.scripts]
cso = "cloudstack_orchestrator.cli:app"

[project.optional-dependencies]
# mcp = ["mcp>=0.1.0", "websockets>=12.0"]  # TODO: Enable when MCP is implemented

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "python-semantic-release>=9.0.0",
]

[tool.semantic_release]
version_variables = [
    "src/cloudstack_orchestrator/__init__.py:__version__",
]
version_toml = [
    "pyproject.toml:project.version",
]
build_command = "python -m build"
commit_message = "chore(release): {version} [skip ci]\n\nAutomatically generated by python-semantic-release"
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.commit_parser_options]
major_tags = ["BREAKING CHANGE", "BREAKING-CHANGE"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
