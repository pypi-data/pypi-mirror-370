# src/glgrpa/SAP.py

# Importaciones necesarias
from selenium.webdriver.common.by import By

from .Chrome import Chrome
from .Terminal import Terminal
from .Windows import Windows

class SAP(Chrome, Windows, Terminal):    
    def __init__(self, base_url: str, usuario: str, clave: str, usuario_microsoft: str = '', clave_microsoft: str = '', dev: bool = False, driver=None):
        super().__init__(dev=dev, driver=driver)
        self.base_url = base_url.split('#')[0]  # Asegurarse de que base_url no tenga fragmentos
        
        self.autentificacion_http_activo = False
        self.autentificacion_sap_activo = False
        self.autentificacion_microsoft_activo = False

        self.usuario_sap = usuario
        self.clave_sap = clave
        self.usuario_microsoft = usuario_microsoft
        self.clave_microsoft = clave_microsoft
        
        self.set_credenciales_usuario(usuario, clave)

        self.sap_iniciado = False
        
        self.mapa_transacciones = {
            'OB08': "#Shell-startGUI?sap-ui2-tcode=OB08&sap-system=FIORI_MENU",
            'FB03': '#Shell-startGUI?sap-ui2-tcode=FB03&sap-system=FIORI_MENU',
            # Agrega m√°s transacciones seg√∫n sea necesario
        }
    
    # Setter y Getter de credenciales SAP y Microsoft
    def set_credenciales_usuario(self, usuario: str, clave: str) -> dict:
        """
        Configura las credenciales del usuario de SAP.
        
        Al inicializar la clase se setean las credenciales del usuario y la clave de SAP pero se pueden cambiar en cualquier momento.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.set_credenciales_usuario('nuevo_usuario', 'nueva_clave')
        ```
        >>> {'usuario': 'nuevo_usuario', 'clave': 'nueva_clave'}
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario est√° vac√≠o.
        - Si la clave est√° vac√≠a.
        """
        
        if usuario == '':
            raise ValueError("El usuario no puede estar vac√≠o")
        if clave == '':
            raise ValueError("La clave no puede estar vac√≠a")
        
        self.usuario_sap = usuario
        self.clave_sap = clave
        
        return {
            'usuario': self.usuario_sap,
            'clave': self.clave_sap
        }
        
    def set_credenciales_microsoft(self, usuario: str, clave: str) -> dict:
        """
        Configura las credenciales del usuario de Microsoft.
        
        Permite configurar las credenciales de Microsoft despu√©s de inicializar la clase SAP.
        Estas credenciales ser√°n utilizadas autom√°ticamente por el LoginManager cuando sea necesario.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario_sap', clave='clave_sap')
        sap.set_credenciales_microsoft('usuario@empresa.com', 'clave_microsoft')
        ```
        >>> {'usuario': 'usuario@empresa.com', 'clave': 'clave_microsoft'}
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario de Microsoft est√° vac√≠o.
        - Si la clave de Microsoft est√° vac√≠a.
        """
        
        if usuario == '':
            raise ValueError("El usuario de Microsoft no puede estar vac√≠o")
        if clave == '':
            raise ValueError("La clave de Microsoft no puede estar vac√≠a")
        
        self.usuario_microsoft = usuario
        self.clave_microsoft = clave
        self.mostrar(f"üîê Credenciales Microsoft configuradas para {self.usuario_microsoft}")
        
        return {
            'usuario': self.usuario_microsoft,
            'clave': self.clave_microsoft
        }
        
    def obtener_credenciales_microsoft(self) -> tuple[str, str]:
        """
        Obtiene las credenciales de Microsoft configuradas.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.set_credenciales_microsoft('usuario@empresa.com', 'clave_microsoft')
        usuario, clave = sap.obtener_credenciales_microsoft()
        ```
        >>> ('usuario@empresa.com', 'clave_microsoft')
        >>> ('', '') # Si no se han configurado las credenciales
        """
        return (self.usuario_microsoft, self.clave_microsoft)
        
    def obtener_usuario_sap(self) -> str:
        """ 
        Obtiene el usuario de SAP configurado.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.obtener_usuario_sap()
        ```
        >>> 'usuario'
        
        ---
        ### Raises
        #### ValueError
        - Si el usuario SAP no est√° configurado.
        """
        if not self.usuario_sap:
            raise ValueError("Usuario SAP no configurado. Use set_credenciales_usuario() para configurarlo.")
        
        return self.usuario_sap
    
    def obtener_clave_sap(self) -> str:
        """
        Obtiene la clave de SAP configurada.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.obtener_clave_sap()
        ```
        >>> 'clave'

        ---
        ### Raises
        #### ValueError
        - Si la clave SAP no est√° configurada.
        """
        if not self.clave_sap:
            raise ValueError("Clave SAP no configurada. Use set_credenciales_usuario() para configurarla.")
        return self.clave_sap
    
    # M√©todo unificado de ingreso a SAP utilizando LoginManager
    def ingreso_a_sap(self) -> bool:
        """
        M√©todo unificado para el ingreso a SAP que utiliza LoginManager.
        
        Este m√©todo reemplaza toda la l√≥gica de autenticaci√≥n anterior y utiliza 
        el LoginManager centralizado para manejar todos los tipos de login.
        
        ---
        ### Ejemplo
        ```python
        sap = SAP(base_url='https://sap.example.com', usuario='usuario', clave='clave')
        sap.ingreso_a_sap()
        ```
        >>> True  # Si SAP se inici√≥ correctamente
        
        ---
        ### Raises
        #### ValueError
        - Las opciones del driver no est√°n configuradas.
        - El navegador no est√° abierto.
        - Error cr√≠tico en el proceso de login (credenciales vac√≠as, driver no inicializado, etc.)
        #### Exception
        - No se pudo obtener el PID del proceso de Chrome.
        - No se pudo activar la ventana de SAP.
        """
        try:
            # Importar LoginManager para evitar importaci√≥n circular
            from .LoginManager import LoginManager
            
            self.driver = self.obtener_driver()
            
            # Configurar LoginManager con las credenciales SAP y Microsoft
            login_manager = LoginManager(
                dev=self.dev, 
                driver=self.driver
            )
            
            # Configurar credenciales SAP (obligatorias)
            login_manager.configurar_credenciales_sap(self.usuario_sap, self.clave_sap)
            
            # Configurar credenciales Microsoft si est√°n disponibles
            if self.usuario_microsoft and self.clave_microsoft:
                login_manager.configurar_credenciales_microsoft(self.usuario_microsoft, self.clave_microsoft)
                
            # Identificar si se requiere login unificado
            if login_manager.manejar_login_automatico():
                self.mostrar("üßÆ Ingresando a SAP...")

            # Navegar a SAP pasando el LoginManager configurado
            self.navegar(self.base_url, login_manager=login_manager)
            self.activar_ventana()
            
            # Verificaci√≥n final del estado
            if self.__en_pagina_de_inicio():
                self.sap_iniciado = True
                return self.sap_iniciado
            
            # Si llegamos aqu√≠ y no estamos en la p√°gina de inicio, puede que necesitemos login adicional
            self.mostrar("üîç Verificando si se requiere login adicional...")
            
            # Intentar manejar cualquier login pendiente
            try:
                if login_manager.manejar_login_automatico():
                    self.mostrar("üîì Login adicional completado")
                    # Verificar nuevamente
                    if self.__en_pagina_de_inicio():
                        self.sap_iniciado = True
                        self.mostrar("‚úÖ SAP iniciado correctamente despu√©s de login adicional")
                        return self.sap_iniciado
                else:
                    self.mostrar("‚ö†Ô∏è Login autom√°tico retorn√≥ False - posible fallo en autenticaci√≥n")
            except ValueError as login_error:
                # Los errores cr√≠ticos del LoginManager se propagan como ValueError
                self.mostrar(f"‚ùå Error cr√≠tico en login autom√°tico: {str(login_error)}", True)
                raise ValueError(f"Error cr√≠tico durante el login: {str(login_error)}") from login_error
            
            # Si a√∫n no estamos en la p√°gina correcta
            self.mostrar("‚ùå No se pudo completar el ingreso a SAP", True)
            self.sap_iniciado = False
            return self.sap_iniciado
            
        except ValueError as ve:
            # Re-propagar errores cr√≠ticos del LoginManager o de configuraci√≥n
            self.mostrar(f"‚ùå Error cr√≠tico en ingreso_a_sap: {str(ve)}", True)
            self.sap_iniciado = False
            raise ve
        except Exception as e:
            # Manejar otros errores inesperados
            self.mostrar(f"‚ùå Error inesperado en ingreso_a_sap: {str(e)}", True)
            self.sap_iniciado = False
            raise Exception(f"Error inesperado durante el ingreso a SAP: {str(e)}") from e
    
    def __en_pagina_de_inicio(self) -> bool:
        """
        Verifica si se est√° en la p√°gina de inicio de SAP.

        Comprueba si el t√≠tulo de la p√°gina es "P√°gina de inicio", lo que indica que se ha iniciado sesi√≥n correctamente.

        ---
        Se utiliza dentro del m√©todo `navegar_inicio_SAP()`.

        ---
        ### Ejemplo
        ```python
        self.__en_pagina_de_inicio():
        ```
        >>> True
        """
        for reintentos in range(5):
            if self.driver.title == "P√°gina de inicio":
                return True
            self.demora(3)
            self.driver.refresh()

        return False

    # Navegaci√≥n a transacciones espec√≠ficas
    def ir_a_transaccion(self, codigo_transaccion: str) -> None:
        """
        Navega a una transacci√≥n espec√≠fica en SAP a trav√©s de su c√≥digo.
        
        Busca la transacci√≥n en el mapa de transacciones y navega a la URL correspondiente comprobando el acceso correcto al mismo.
        
        ---
        ### Ejemplo
        ```python
        codigo_transaccion = 'OB08'
        sap = SAP(base_url='https://sap.example.com')
        sap.set_credenciales_usuario('usuario', 'clave')
        sap.ingreso_a_sap()
        sap.ir_a_transaccion(codigo_transaccion)
        ```
        >>> None  # Si la transacci√≥n se navega correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si SAP no ha sido iniciado
        - Si la transacci√≥n no se encuentra en el mapa de transacciones.
        - Si se encuentra una alerta desconocida.
        #### PermissionError
        - Si no se tiene acceso a la transacci√≥n.
        - Si los datos est√°n bloqueados para la transacci√≥n.        
        """
        
        if self.sap_iniciado is False:
            raise ValueError("SAP no ha sido iniciado. Use ingreso_a_sap() primero.")
        
        self.mostrar(f"Navegando a la transacci√≥n {codigo_transaccion}")

        transaccion = self.__obtener_transaccion_por_codigo(codigo_transaccion)
        self.navegar(f"{self.base_url}{transaccion}")
        self.__comprobar_acceso_transaccion()
        
        self.mostrar(f"Transacci√≥n {codigo_transaccion} navegada")
        
    def __obtener_transaccion_por_codigo(self, codigo_transaccion: str) -> str:
        """ 
        Obtiene la url relativa de la transacci√≥n por su c√≥digo si es que existe en el mapa de transacciones.
        Si no se encuentra, lanza una excepci√≥n.
        
        ---
        Se utiliza dentro del metodo `ir_a_transaccion()`.
        
        ---
        Ejemplo
        ```python
        codigo = 'OB08'
        transaccion = self.__obtener_transaccion_por_codigo(codigo)
        ```
        >>> "Shell-startGUI?sap-ui2-tcode=OB08&sap-system=FIORI_MENU"

        ---
        ### Raises 
        #### ValueError: 
        - Si la transacci√≥n no se encuentra en el mapa de transacciones.
        """
        
        transaccion = self.mapa_transacciones.get(codigo_transaccion)
        
        if transaccion is None:
            raise ValueError(f"Transacci√≥n {codigo_transaccion} no encontrada en el mapa de transacciones")

        return transaccion
    
    def __comprobar_acceso_transaccion(self) -> None:
        """
        Comprueba el acceso a la transacci√≥n.
        
        ---
        Se utiliza dentro del metodo `ir_a_transaccion()`.
        
        ---
        Ejemplo
        ```python
        codigo_transaccion = 'OB08'
        transaccion = self.__obtener_transaccion_por_codigo(codigo_transaccion)
        self.navegar(f"{self.base_url}{transaccion}")
        self.__comprobar_acceso_transaccion()
        ```
        >>> None  # Si el acceso a la transacci√≥n se verifica correctamente
        
        ---
        ### Raises
        #### ValueError
        - Si se encuentra una alerta desconocida.
        #### PermissionError
        - Si no se tiene autorizaci√≥n para la transacci√≥n.
        - Si los datos est√°n bloqueados para la transacci√≥n.
        """
        self.mostrar("Comprobando acceso a la transacci√≥n")
        
        alerta = self.__buscar_alertas()
        if alerta:
            self.mostrar(f"Alerta encontrada: {alerta}", True)
            if 'No tiene autorizaci√≥n' in alerta:
                raise PermissionError("No tiene autorizaci√≥n para esta transacci√≥n")
            elif 'Datos bloqueados' in alerta:
                raise PermissionError("Datos bloqueados para esta transacci√≥n")
            else:
                raise ValueError(f"Alerta desconocida: {alerta}")   
    
    # M√©todos de b√∫squeda de alertas        
    def __buscar_alertas(self) -> str|None:
        """ 
        Busca alertas emergentes en SAP. 
        
        En caso de encontrar una alerta, devuelve el texto de la alerta.
        
        ---
        Se utiliza dentro del metodo `__comprobar_acceso_transaccion()`.
        
        ---
        Ejemplo
        ```python
        alerta = self.__buscar_alertas()
        ```
        >>> "Alerta\\nNo tiene autorizaci√≥n para esta transacci√≥n\\nAcepter\\nCancelar"  # Si se encuentra una alerta
        """
        span_alerta, texto_alerta = self.buscar_elemento_en_iframes(By.CLASS_NAME, 'lsPWNew', False)
        
        if span_alerta and texto_alerta:
            return texto_alerta.strip().split('\n')[0]
        
        return None
    
    def buscar_alerta_transaccion(self) -> dict[str, bool | str] | None:
        """ 
        Busca una alerta de transacci√≥n en SAP.
        
        Busca un elemento con la clase `lsMessageBar` en los iframes de la p√°gina y verifica si contiene una alerta de error o una alerta de transacci√≥n.  
        En caso de encontrar una alerta, evalua si es un error buscando clases como `lsMessageBar__icon--Error` o `lsMessageBar__image--Error` en los hijos del elemento encontrado.
        
        ---
        Ejemplo
        ```python
        alerta = self.buscar_alerta_transaccion()
        ```
        >>> {'isError': True, 'content': 'Alerta de error encontrada'}
        >>> {'isError': False, 'content': 'Alerta de transacci√≥n encontrada'}
        
        """
        self.mostrar("Obteniendo alerta de transacci√≥n")
        span_alerta, texto_alerta = self.buscar_elemento_en_iframes(By.CLASS_NAME, 'lsMessageBar')
        
        if span_alerta and texto_alerta:
            # Verifica si alg√∫n hijo tiene clase de error
            hijos = span_alerta.find_elements(By.XPATH, ".//*")
            for h in hijos:
                clase_hijo = h.get_attribute("class")
                if clase_hijo is not None:
                    if "lsMessageBar__icon--Error" in clase_hijo or "lsMessageBar__image--Error" in clase_hijo:
                        self.mostrar("Alerta de error encontrada", True)
                        isError = True
                        break    
            else:
                self.mostrar("Alerta de transacci√≥n encontrada", True)
                isError = False
            
            return {'isError': isError, 'content': texto_alerta.strip().split('\n')[0]}
        
        self.mostrar("No se encontr√≥ alerta de transacci√≥n", True)
        return None