# src/Windows/Windows.py

import os
import platform
from datetime import datetime
import time
import subprocess
import psutil
from functools import wraps
from .Terminal import Terminal

class Windows(Terminal):
    def __init__(self, dev: bool = False):
        super().__init__(dev=dev)
        
        # Estado GUI para verificaci√≥n eficiente
        self._gui_verificada = False
        self._ultimo_check_gui = None
        self._intentos_recuperacion_gui = 0
        
        # Determinar la carpeta de descargas personalizada seg√∫n el sistema operativo
        if platform.system() == "Windows":
            self.carpeta_descargas_personalizada = os.path.join(os.environ.get("USERPROFILE", ""), "DescargaPersonalizada")
        else:
            self.carpeta_descargas_personalizada = os.path.join(os.environ.get("HOME", ""), "DescargaPersonalizada")
        
        # Crear la carpeta si no existe
        if not os.path.exists(self.carpeta_descargas_personalizada):
            os.makedirs(self.carpeta_descargas_personalizada, exist_ok=True)
        
        # Purga inicial de la carpeta
        self.purgar_carpeta_descargas_personalizada()

    @staticmethod
    def resolver_ruta_archivo(nombre_archivo: str, usar_directorio_script: bool = True) -> str:
        """
        Resuelve rutas de archivos correctamente cuando se ejecuta desde tareas programadas.
        
        Soluciona el problema com√∫n donde aplicaciones empaquetadas ejecutadas desde
        tareas programadas de Windows tienen un directorio de trabajo actual (cwd) 
        diferente al esperado. Puede usar el directorio del script ejecutable o el cwd.
        
        ---
        Se utiliza para resolver rutas de archivos .env, configuraci√≥n y otros archivos
        que deben estar junto al ejecutable en aplicaciones empaquetadas distribuidas.
        
        ---
        ### Ejemplo
        ```python
        # Para archivo .env.production junto al ejecutable
        ruta_env = Windows.resolver_ruta_archivo('.env.production')
        
        # Para archivo en directorio actual (comportamiento original)
        archivo_estado = Windows.resolver_ruta_archivo('estado.json', usar_directorio_script=False)
        
        # Para verificar si archivo existe
        ruta_config = Windows.resolver_ruta_archivo('config.ini')
        if os.path.exists(ruta_config):
            print(f"üìÅ Archivo encontrado en: {ruta_config}")
        ```
        >>> "C:\\path\\to\\executable\\.env.production"  # Ruta absoluta resuelta
        
        ---
        ### Raises
        #### Exception
        - Si no se puede determinar la ruta del ejecutable actual
        - Si ocurre un error al resolver la ruta del archivo
        """
        try:
            if usar_directorio_script:
                # Obtener directorio del script/ejecutable actual
                import sys
                if getattr(sys, 'frozen', False):
                    # Aplicaci√≥n empaquetada (exe)
                    directorio_base = os.path.dirname(sys.executable)
                else:
                    # Script Python normal
                    import inspect
                    frame = inspect.currentframe()
                    if frame and frame.f_back:
                        caller_file = frame.f_back.f_globals.get('__file__')
                        if caller_file:
                            directorio_base = os.path.dirname(os.path.abspath(caller_file))
                        else:
                            directorio_base = os.getcwd()
                    else:
                        directorio_base = os.getcwd()
                
                ruta_resuelta = os.path.join(directorio_base, nombre_archivo)
            else:
                # Usar directorio de trabajo actual (comportamiento original)
                ruta_resuelta = os.path.join(os.getcwd(), nombre_archivo)
            
            # Normalizar ruta para Windows
            ruta_resuelta = os.path.normpath(ruta_resuelta)
            
            return ruta_resuelta
            
        except Exception as e:
            # Fallback al directorio actual si hay error
            return os.path.join(os.getcwd(), nombre_archivo)

    # Excepci√≥n personalizada para GUI
    class GUINotAvailableError(Exception):
        """
        Excepci√≥n lanzada cuando GUI no est√° disponible para automatizaci√≥n.
        
        Se utiliza cuando operaciones que requieren interacci√≥n visual
        no pueden ejecutarse porque no hay sesi√≥n de escritorio activa.
        
        ---
        ### Ejemplo
        ```python
        try:
            self.enviar_tecla_ventana('F5')
        except GUINotAvailableError as e:
            self.mostrar(f"‚ùå Error GUI: {str(e)}", True)
        ```
        >>> None  # Maneja error cuando GUI no disponible
        
        ---
        ### Raises
        #### Exception
        - Hereda de Exception base para manejo est√°ndar errores
        """
        pass

    @staticmethod
    def requiere_gui(func):
        """
        Decorador que garantiza GUI activa antes de ejecutar m√©todo.
        
        Verifica que haya una sesi√≥n de escritorio activa en Windows antes de ejecutar
        m√©todos que requieren interacci√≥n visual como env√≠o de teclas, clicks o screenshots.
        Implementa cache de verificaci√≥n para optimizar rendimiento y recuperaci√≥n autom√°tica.
        
        ---
        Se utiliza dentro de m√©todos que requieren interacci√≥n con elementos visuales.
        Ejemplo de uso t√≠pico en clases que heredan de Windows para operaciones GUI.
        
        ---
        ### Ejemplo
        ```python
        @Windows.requiere_gui
        def enviar_tecla_ventana(self, tecla):
            # M√©todo que necesita GUI para env√≠o de teclas
            pyautogui.press(tecla)
            
        @Windows.requiere_gui  
        def tomar_screenshot(self, nombre_archivo=None):
            # M√©todo que necesita GUI para captura de pantalla
            screenshot = pyautogui.screenshot()
        ```
        >>> None  # Ejecuta solo si GUI est√° disponible
        
        ---
        ### Raises
        #### GUINotAvailableError
        - Si no hay sesi√≥n de escritorio activa en Windows despu√©s de intentos recuperaci√≥n
        - Si no se pueden detectar procesos cr√≠ticos de GUI (explorer.exe, dwm.exe)
        - Si la verificaci√≥n de GUI falla despu√©s de 3 intentos de recuperaci√≥n autom√°tica
        
        #### Exception
        - Si ocurre un error inesperado durante la verificaci√≥n o recuperaci√≥n de GUI
        """
        @wraps(func)
        def wrapper(self, *args, **kwargs):
            if not self._verificar_sesion_gui_activa():
                raise Windows.GUINotAvailableError(
                    f"üñ•Ô∏è GUI no disponible para ejecutar {func.__name__}. "
                    "Verifique que hay una sesi√≥n de escritorio activa en la VM. "
                    "Para solucionar: abrir RDP, configurar auto-login o verificar servicio GUI."
                )
            
            return func(self, *args, **kwargs)
        
        return wrapper

    def _verificar_sesion_gui_activa(self) -> bool:
        """
        Verifica si hay una sesi√≥n GUI activa en Windows.
        
        Comprueba la presencia de procesos cr√≠ticos del escritorio Windows y
        valida que la sesi√≥n est√© disponible para automatizaci√≥n RPA. Implementa
        cache temporal para optimizar verificaciones repetidas y recuperaci√≥n autom√°tica.
        
        ---
        Se utiliza dentro del decorador `@requiere_gui` para validaci√≥n autom√°tica.
        Realiza verificaci√≥n inteligente con cache de 30 segundos para eficiencia.
        
        ---
        ### Ejemplo
        ```python
        if self._verificar_sesion_gui_activa():
            self.mostrar("‚úÖ GUI disponible para automatizaci√≥n")
            self.tomar_screenshot("estado_gui")
        else:
            self.mostrar("‚ùå GUI no disponible", True)
            self._intentar_recuperacion_gui()
        ```
        >>> True  # Si GUI est√° activa y disponible
        
        ---
        ### Raises
        #### Exception
        - Si ocurre un error al verificar procesos del sistema
        - Si no se puede acceder a la informaci√≥n de sesiones Windows
        """
        try:
            # Cache de verificaci√≥n para evitar checks excesivos (optimizaci√≥n performance)
            ahora = datetime.now()
            if (self._ultimo_check_gui and 
                (ahora - self._ultimo_check_gui).total_seconds() < 30 and
                self._gui_verificada):
                return True
            
            self.mostrar("üîç Verificando disponibilidad de GUI...")
            
            # Verificar procesos cr√≠ticos de GUI Windows
            procesos_gui_criticos = [
                'explorer.exe',  # Windows Explorer - cr√≠tico para escritorio
                'dwm.exe',       # Desktop Window Manager - cr√≠tico para ventanas
                'winlogon.exe'   # Windows Logon - cr√≠tico para sesi√≥n usuario
            ]
            
            # Obtener lista de procesos activos
            procesos_activos = {p.name().lower() for p in psutil.process_iter(['name'])}
            
            # Verificar que todos los procesos cr√≠ticos est√©n presentes
            procesos_encontrados = []
            for proceso in procesos_gui_criticos:
                if proceso.lower() in procesos_activos:
                    procesos_encontrados.append(proceso)
            
            # Verificaci√≥n adicional: sesi√≥n interactiva Windows
            gui_disponible = len(procesos_encontrados) >= 2
            
            if gui_disponible:
                # Verificaci√≥n adicional: display disponible
                try:
                    resultado_display = subprocess.run(
                        ['powershell', '-Command', 'Get-WmiObject -Class Win32_VideoController | Select-Object Name'],
                        capture_output=True, text=True, timeout=10
                    )
                    display_activo = "Name" in resultado_display.stdout
                except:
                    display_activo = True  # Asumir disponible si no se puede verificar
                
                gui_disponible = gui_disponible and display_activo
            
            # Actualizar estado de cache
            self._ultimo_check_gui = ahora
            self._gui_verificada = gui_disponible
            
            if gui_disponible:
                self.mostrar(f"‚úÖ GUI activa - Procesos detectados: {', '.join(procesos_encontrados)}")
                self._intentos_recuperacion_gui = 0  # Reset contador intentos
            else:
                self.mostrar(f"‚ùå GUI no disponible - Solo detectados: {', '.join(procesos_encontrados)}", True)
                
                # Intentar recuperaci√≥n autom√°tica si es posible
                if self._intentos_recuperacion_gui < 3:
                    self.mostrar("üîÑ Intentando recuperaci√≥n autom√°tica de GUI...", True)
                    if self._intentar_recuperacion_gui():
                        return self._verificar_sesion_gui_activa()  # Re-verificar despu√©s de recuperaci√≥n
                    self._intentos_recuperacion_gui += 1
            
            return gui_disponible
            
        except Exception as e:
            self.mostrar(f"‚ùå Error verificando GUI: {str(e)}", True)
            # En caso de error, asumir GUI no disponible por seguridad
            self._gui_verificada = False
            return False

    def _intentar_recuperacion_gui(self) -> bool:
        """
        Intenta recuperar sesi√≥n GUI autom√°ticamente.
        
        Implementa estrategias de recuperaci√≥n autom√°tica cuando GUI no est√° disponible.
        Incluye reinicio de explorer.exe, activaci√≥n de sesi√≥n y notificaci√≥n de estado.
        
        ---
        Se utiliza dentro de `_verificar_sesion_gui_activa` cuando GUI no est√° disponible.
        Implementa m√∫ltiples estrategias de recuperaci√≥n con logging detallado de intentos.
        
        ---
        ### Ejemplo
        ```python
        if not self._verificar_sesion_gui_activa():
            if self._intentar_recuperacion_gui():
                self.mostrar("üîÑ GUI recuperada exitosamente")
            else:
                self.mostrar("‚ùå No se pudo recuperar GUI autom√°ticamente", True)
        ```
        >>> True  # Si logra recuperar GUI exitosamente
        
        ---
        ### Raises
        #### Exception
        - Si ocurre error durante estrategias de recuperaci√≥n
        - Si no se pueden ejecutar comandos de sistema para recuperaci√≥n
        """
        try:
            self.mostrar("üõ†Ô∏è Ejecutando estrategias de recuperaci√≥n GUI...")
            
            # Estrategia 1: Reiniciar Windows Explorer
            try:
                self.mostrar("üîÑ Estrategia 1: Reiniciando Windows Explorer...")
                subprocess.run(['taskkill', '/f', '/im', 'explorer.exe'], 
                             capture_output=True, check=False)
                time.sleep(2)
                subprocess.run(['explorer.exe'], shell=True, check=False)
                time.sleep(5)
                self.mostrar("‚úÖ Windows Explorer reiniciado")
            except Exception as e:
                self.mostrar(f"‚ùå Fall√≥ reinicio Explorer: {str(e)}", True)
            
            # Estrategia 2: Activar sesi√≥n con SendKeys simulado
            try:
                self.mostrar("üîÑ Estrategia 2: Activando sesi√≥n con simulaci√≥n teclas...")
                subprocess.run([
                    'powershell', '-Command', 
                    'Add-Type -AssemblyName System.Windows.Forms; '
                    '[System.Windows.Forms.SendKeys]::SendWait("{F15}")'
                ], capture_output=True, timeout=10)
                time.sleep(2)
                self.mostrar("‚úÖ Se√±al de activaci√≥n enviada")
            except Exception as e:
                self.mostrar(f"‚ùå Fall√≥ activaci√≥n sesi√≥n: {str(e)}", True)
            
            # Estrategia 3: Verificar y activar servicios cr√≠ticos GUI
            try:
                self.mostrar("üîÑ Estrategia 3: Verificando servicios cr√≠ticos...")
                servicios_criticos = ['UxSms', 'Themes', 'AudioSrv']
                for servicio in servicios_criticos:
                    resultado = subprocess.run(
                        ['sc', 'query', servicio], 
                        capture_output=True, text=True
                    )
                    if 'STOPPED' in resultado.stdout:
                        subprocess.run(['sc', 'start', servicio], 
                                     capture_output=True, check=False)
                        self.mostrar(f"üîÑ Servicio {servicio} iniciado")
                
                self.mostrar("‚úÖ Servicios cr√≠ticos verificados")
            except Exception as e:
                self.mostrar(f"‚ùå Error verificando servicios: {str(e)}", True)
            
            # Esperar estabilizaci√≥n del sistema
            self.mostrar("‚è≥ Esperando estabilizaci√≥n del sistema...")
            time.sleep(3)
            
            self.mostrar("üîç Recuperaci√≥n completada, re-verificando estado...")
            return True
            
        except Exception as e:
            self.mostrar(f"‚ùå Error durante recuperaci√≥n GUI: {str(e)}", True)
            return False

    def forzar_sesion_gui_activa(self) -> bool:
        """
        Fuerza activaci√≥n de sesi√≥n GUI con estrategias avanzadas.
        
        M√©todo p√∫blico para forzar GUI cuando se detecta que no est√° disponible.
        Implementa estrategias m√°s agresivas que la recuperaci√≥n autom√°tica,
        incluyendo configuraci√≥n de auto-login y tareas programadas.
        
        ---
        Se utiliza cuando se necesita garantizar GUI activa antes de procesos cr√≠ticos RPA.
        M√©todo m√°s completo que recuperaci√≥n autom√°tica, dise√±ado para configuraci√≥n inicial.
        
        ---
        ### Ejemplo
        ```python
        if not self._verificar_sesion_gui_activa():
            self.mostrar("üö® GUI no disponible, forzando activaci√≥n...")
            if self.forzar_sesion_gui_activa():
                self.mostrar("‚úÖ Sesi√≥n GUI forzada exitosamente")
            else:
                raise Exception("No se pudo establecer sesi√≥n GUI")
        ```
        >>> True  # Si logra establecer sesi√≥n GUI
        
        ---
        ### Raises
        #### Exception
        - Si todas las estrategias de forzado fallan
        - Si no tiene permisos administrativos para configuraciones cr√≠ticas
        #### PermissionError
        - Si no puede modificar configuraciones del sistema
        """
        try:
            self.mostrar("üö® Iniciando forzado de sesi√≥n GUI activa...")
            
            # Primero intentar recuperaci√≥n est√°ndar
            if self._intentar_recuperacion_gui():
                if self._verificar_sesion_gui_activa():
                    self.mostrar("‚úÖ GUI recuperada con estrategias est√°ndar")
                    return True
            
            # Estrategias avanzadas de forzado
            self.mostrar("üîß Aplicando estrategias avanzadas de forzado...")
            
            # Estrategia avanzada 1: Crear y ejecutar tarea GUI keepalive
            try:
                self.mostrar("üîÑ Creando tarea programada GUI keepalive...")
                
                comando_keepalive = (
                    'Add-Type -AssemblyName System.Windows.Forms; '
                    'while($true) { '
                    'try { [System.Windows.Forms.SendKeys]::SendWait("{F15}"); } '
                    'catch { } '
                    'Start-Sleep 300 '
                    '}'
                )
                
                # Crear tarea programada que mantenga GUI activa
                subprocess.run([
                    'schtasks', '/create', '/tn', 'GLGRPA_GUI_KeepAlive',
                    '/tr', f'powershell.exe -WindowStyle Hidden -Command "{comando_keepalive}"',
                    '/sc', 'onlogon', '/rl', 'highest', '/f'
                ], capture_output=True, check=False)
                
                # Ejecutar tarea inmediatamente
                subprocess.run([
                    'schtasks', '/run', '/tn', 'GLGRPA_GUI_KeepAlive'
                ], capture_output=True, check=False)
                
                self.mostrar("‚úÖ Tarea GUI keepalive configurada")
                
            except Exception as e:
                self.mostrar(f"‚ùå Error configurando tarea keepalive: {str(e)}", True)
            
            # Estrategia avanzada 2: Verificar/configurar auto-login
            try:
                self.mostrar("üîÑ Verificando configuraci√≥n auto-login...")
                
                # Verificar si auto-login est√° habilitado
                resultado = subprocess.run([
                    'reg', 'query', 
                    'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon',
                    '/v', 'AutoAdminLogon'
                ], capture_output=True, text=True)
                
                if 'AutoAdminLogon' not in resultado.stdout or '0x1' not in resultado.stdout:
                    self.mostrar("‚ö†Ô∏è Auto-login no configurado. Para configurarlo manualmente:", True)
                    self.mostrar("üí° 1. Ejecutar como admin: netplwiz", True)
                    self.mostrar("üí° 2. Desmarcar 'Los usuarios deben escribir su nombre...'", True)
                    self.mostrar("üí° 3. O usar configurador autom√°tico con credenciales", True)
                else:
                    self.mostrar("‚úÖ Auto-login ya configurado")
                    
            except Exception as e:
                self.mostrar(f"‚ùå Error verificando auto-login: {str(e)}", True)
            
            # Esperar estabilizaci√≥n completa
            self.mostrar("‚è≥ Esperando estabilizaci√≥n completa del sistema...")
            time.sleep(5)
            
            # Verificaci√≥n final
            gui_final = self._verificar_sesion_gui_activa()
            
            if gui_final:
                self.mostrar("üéâ ¬°Sesi√≥n GUI forzada exitosamente!")
                self.mostrar("üìã Configuraciones aplicadas para mantener GUI persistente")
                return True
            else:
                self.mostrar("‚ùå No se pudo forzar GUI despu√©s de todas las estrategias", True)
                self.mostrar("üí° Soluciones manuales recomendadas:", True)
                self.mostrar("   ‚Ä¢ Abrir conexi√≥n RDP y mantenerla activa", True)
                self.mostrar("   ‚Ä¢ Configurar auto-login en Windows", True)
                self.mostrar("   ‚Ä¢ Verificar que VM tenga display/monitor virtual", True)
                return False
                
        except Exception as e:
            self.mostrar(f"‚ùå Error cr√≠tico forzando GUI: {str(e)}", True)
            return False
        
    def purgar_carpeta_descargas_personalizada(self):
        """ Purga la carpeta de descargas """
        
        # Obtener los archivos de la carpeta de descargas 
        archivos = [f for f in os.listdir(self.carpeta_descargas_personalizada)]
        
        # Eliminar los archivos
        for archivo in archivos:
            os.remove(os.path.join(self.carpeta_descargas_personalizada, archivo))

    def crear_carpeta_si_no_existe(self, carpeta: str) -> bool:
        """ Crea la carpeta de descargas si no existe """
        try:
            if not os.path.exists(carpeta):
                os.makedirs(carpeta)
            
            return True
        except Exception as e:
            return False
        
    def buscar_ultimo_archivo(self, ruta:str, extension: str) -> str:
        """ Busca el √∫ltimo archivo de una extensi√≥n espec√≠fica en la carpeta de descargas """
        
        # Obtener los archivos de la carpeta de descargas
        archivos = [f for f in os.listdir(ruta) if f.endswith(extension)]
        
        # Si no se encontraron archivos, se lanza una excepci√≥n
        if not archivos:
            raise FileNotFoundError(f"No se encontraron archivos {extension} en la carpeta de descargas.")
        
        # Ordenar los archivos por fecha de modificaci√≥n
        archivos.sort(key=lambda f: os.path.getmtime(os.path.join(ruta, f)), reverse=True)
        return os.path.join(ruta, archivos[0])
        
    def mover_archivo(self, ruta_archivo: str, ruta_destino: str) -> str| bool:
        """ Mueve un archivo a una carpeta destino """

        self.mostrar(f"Moviendo archivo {ruta_archivo} a {ruta_destino}")
        
        # Crear las carpetas si no existen
        if not self.crear_carpeta_si_no_existe(ruta_destino):
            self.mostrar(f"No se pudo crear la carpeta {ruta_destino}", True)
            return False

        # Obtener el nombre del archivo
        nombre_archivo = os.path.basename(ruta_archivo)
        nueva_ruta = os.path.join(ruta_destino, nombre_archivo)
        time.sleep(3)
        
        # Verificar si el archivo ya existe en la carpeta destino
        if os.path.exists(nueva_ruta):
            self.mostrar(f"El archivo {nombre_archivo} ya existe en la carpeta {ruta_destino}", True)
            return nueva_ruta
        
        # Mover el archivo
        try:
            os.rename(ruta_archivo, nueva_ruta)
        except Exception as e:
            self.mostrar(f"No se pudo mover el archivo {ruta_archivo} a la carpeta {ruta_destino}", True)
            self.mostrar(f"Error: {e}", True)
            return False
            
        return nueva_ruta
    
    def armar_estructura_de_carpetas(self, ruta: str) -> str| bool:
        r""" Arma la estructura de carpetas en la ruta indicada [ruta\anio\mes\dia]. Devuelve la ruta destino """
        try:
            # Obtener la fecha actual
            fecha_actual = datetime.now()
            anio = fecha_actual.strftime("%Y")
            mes = fecha_actual.strftime("%m")
            dia = fecha_actual.strftime("%d")
            
            # Crear la estructura de carpetas
            ruta_destino = os.path.join(ruta, anio, mes, dia)
            
            return ruta_destino
        except Exception as e:
            self.mostrar(f"No se pudo crear la estructura de carpetas en la ruta {ruta}")
            return False
        
    def copiar_al_portapapeles(self, texto: str) -> bool:
        """ Copia el texto al portapapeles """
        try:
            import pyperclip
            pyperclip.copy(texto)
            self.mostrar(f"üìÉ Texto copiado al portapapeles:\n{texto}")
            return True
        except ImportError:
            self.mostrar("‚ùå No se pudo importar la librer√≠a 'pyperclip'. Aseg√∫rate de tenerla instalada.", True)
            return False
        except Exception as e:
            self.mostrar(f"‚ùå Error desconocido al copiar al portapapeles: {e}", True)
            return False
    
    @requiere_gui
    def tomar_screenshot(self, nombre_archivo: str | None = None) -> str:
        """ Toma un screenshot de la pantalla completa y lo guarda en la carpeta logs """
        try:
            import pyautogui
            
            # Generar nombre del archivo si no se proporciona
            if not nombre_archivo:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                nombre_archivo = f"screenshot_{timestamp}.png"
            
            # Asegurar que tenga extensi√≥n .png
            if not nombre_archivo.endswith('.png'):
                nombre_archivo += '.png'
            
            # Crear ruta en carpeta logs
            carpeta_logs = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "logs")
            if not os.path.exists(carpeta_logs):
                os.makedirs(carpeta_logs, exist_ok=True)
            
            ruta_screenshot = os.path.join(carpeta_logs, nombre_archivo)
            
            # Tomar screenshot
            screenshot = pyautogui.screenshot()
            screenshot.save(ruta_screenshot)
            
            self.mostrar(f"üì∏ Screenshot guardado en: {ruta_screenshot}")
            return ruta_screenshot
            
        except ImportError as e:
            if "pyscreeze" in str(e) or "Pillow" in str(e):
                self.mostrar("‚ö†Ô∏è Screenshot no disponible: falta dependencia Pillow/pyscreeze", True)
                self.mostrar("üí° Para habilitar screenshots, instalar: pip install Pillow", True)
            else:
                self.mostrar(f"‚ùå No se pudo importar pyautogui: {e}", True)
            return ""
        except Exception as e:
            if "pyscreeze" in str(e) or "Pillow" in str(e):
                self.mostrar("‚ö†Ô∏è Screenshot fallido: Pillow no compatible con esta versi√≥n de Python", True)
                self.mostrar("üí° Instalar versi√≥n compatible: pip install 'Pillow>=10.0.0'", True)
            else:
                self.mostrar(f"‚ùå Error al tomar screenshot: {e}", True)
            return ""

    @requiere_gui
    def enviar_tecla_ventana(self, *teclas) -> bool:
        """
        Env√≠a combinaciones de teclas a la ventana activa.
        
        Permite enviar teclas individuales o combinaciones (Ctrl+C, Alt+Tab, etc.)
        usando pyautogui. Requiere GUI activa para funcionar correctamente.
        
        ---
        Se utiliza dentro de automatizaciones que requieren simulaci√≥n de teclas.
        M√©todo protegido por decorador @requiere_gui para garantizar funcionamiento.
        
        ---
        ### Ejemplo
        ```python
        # Tecla individual
        self.enviar_tecla_ventana('F5')
        
        # Combinaci√≥n de teclas
        self.enviar_tecla_ventana('ctrl', 'c')
        self.enviar_tecla_ventana('alt', 'tab')
        self.enviar_tecla_ventana('shift', 'f3')
        ```
        >>> True  # Si las teclas se env√≠an exitosamente
        
        ---
        ### Raises
        #### ImportError
        - Si pyautogui no est√° disponible o instalado
        #### Exception
        - Si ocurre error durante env√≠o de teclas
        #### GUINotAvailableError
        - Si GUI no est√° activa (manejado por decorador)
        """
        try:
            import pyautogui
            
            if len(teclas) == 1:
                # Tecla individual
                pyautogui.press(teclas[0])
                self.mostrar(f"‚å®Ô∏è Tecla enviada: {teclas[0]}")
            else:
                # Combinaci√≥n de teclas
                pyautogui.hotkey(*teclas)
                self.mostrar(f"‚å®Ô∏è Combinaci√≥n enviada: {'+'.join(teclas)}")
            
            return True
            
        except ImportError:
            self.mostrar("‚ùå No se pudo importar pyautogui para env√≠o de teclas", True)
            return False
        except Exception as e:
            self.mostrar(f"‚ùå Error enviando teclas: {str(e)}", True)
            return False

    @requiere_gui  
    def pegar_portapapeles_en_ventana_activa(self) -> bool:
        """
        Pega el contenido del portapapeles en la ventana activa.
        
        Utiliza la combinaci√≥n Ctrl+V para pegar contenido del portapapeles
        en la ventana que tiene el foco actualmente.
        
        ---
        Se utiliza dentro de automatizaciones para pegar datos copiados previamente.
        Complementa el m√©todo `copiar_al_portapapeles` para flujo completo copiar/pegar.
        
        ---
        ### Ejemplo
        ```python
        # Flujo completo copiar/pegar
        datos = "informaci√≥n a pegar"
        self.copiar_al_portapapeles(datos)
        time.sleep(1)  # Esperar que se copie
        self.pegar_portapapeles_en_ventana_activa()
        ```
        >>> True  # Si el pegado es exitoso
        
        ---
        ### Raises
        #### ImportError
        - Si pyautogui no est√° disponible
        #### Exception  
        - Si ocurre error durante el pegado
        #### GUINotAvailableError
        - Si GUI no est√° activa (manejado por decorador)
        """
        try:
            import pyautogui
            
            pyautogui.hotkey('ctrl', 'v')
            self.mostrar("üìã Contenido pegado desde portapapeles")
            return True
            
        except ImportError:
            self.mostrar("‚ùå No se pudo importar pyautogui para pegar", True)
            return False
        except Exception as e:
            self.mostrar(f"‚ùå Error pegando desde portapapeles: {str(e)}", True)
            return False

    def verificar_estado_gui(self) -> dict:
        """
        Obtiene informaci√≥n detallada del estado actual de GUI.
        
        Retorna diccionario con informaci√≥n completa sobre el estado de la GUI,
        procesos activos, servicios y configuraci√≥n de sesi√≥n para diagn√≥stico.
        
        ---
        Se utiliza dentro de diagn√≥stico y debugging cuando hay problemas con GUI.
        M√©todo √∫til para generar reportes de estado del sistema.
        
        ---
        ### Ejemplo
        ```python
        estado = self.verificar_estado_gui()
        self.mostrar(f"GUI activa: {estado['gui_activa']}")
        self.mostrar(f"Procesos detectados: {estado['procesos_gui']}")
        ```
        >>> {"gui_activa": True, "procesos_gui": ["explorer.exe", "dwm.exe"], ...}
        
        ---
        ### Raises
        #### Exception
        - Si ocurre error accediendo informaci√≥n del sistema
        """
        try:
            self.mostrar("üîç Analizando estado completo de GUI...")
            
            # Verificar procesos GUI
            procesos_gui = []
            procesos_criticos = ['explorer.exe', 'dwm.exe', 'winlogon.exe']
            procesos_activos = {p.name().lower() for p in psutil.process_iter(['name'])}
            
            for proceso in procesos_criticos:
                if proceso.lower() in procesos_activos:
                    procesos_gui.append(proceso)
            
            # Verificar servicios cr√≠ticos
            servicios_estado = {}
            servicios_criticos = ['UxSms', 'Themes', 'AudioSrv']
            
            for servicio in servicios_criticos:
                try:
                    resultado = subprocess.run(
                        ['sc', 'query', servicio], 
                        capture_output=True, text=True
                    )
                    servicios_estado[servicio] = 'RUNNING' if 'RUNNING' in resultado.stdout else 'STOPPED'
                except:
                    servicios_estado[servicio] = 'UNKNOWN'
            
            # Verificar display
            display_disponible = False
            try:
                resultado_display = subprocess.run(
                    ['powershell', '-Command', 'Get-WmiObject -Class Win32_VideoController | Select-Object Name'],
                    capture_output=True, text=True, timeout=5
                )
                display_disponible = "Name" in resultado_display.stdout
            except:
                display_disponible = False
            
            # Forzar nueva verificaci√≥n
            self._ultimo_check_gui = None
            gui_activa = self._verificar_sesion_gui_activa()
            
            estado = {
                'gui_activa': gui_activa,
                'procesos_gui': procesos_gui,
                'servicios_estado': servicios_estado,
                'display_disponible': display_disponible,
                'ultimo_check': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'intentos_recuperacion': self._intentos_recuperacion_gui
            }
            
            # Mostrar resumen
            self.mostrar("üìä Estado GUI completo:")
            self.mostrar(f"   ‚Ä¢ GUI Activa: {'‚úÖ' if gui_activa else '‚ùå'} {gui_activa}")
            self.mostrar(f"   ‚Ä¢ Procesos GUI: {', '.join(procesos_gui) if procesos_gui else 'Ninguno'}")
            self.mostrar(f"   ‚Ä¢ Display: {'‚úÖ' if display_disponible else '‚ùå'} {display_disponible}")
            self.mostrar(f"   ‚Ä¢ Servicios activos: {sum(1 for s in servicios_estado.values() if s == 'RUNNING')}/{len(servicios_criticos)}")
            
            return estado
            
        except Exception as e:
            self.mostrar(f"‚ùå Error verificando estado GUI: {str(e)}", True)
            return {
                'gui_activa': False,
                'error': str(e),
                'ultimo_check': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }