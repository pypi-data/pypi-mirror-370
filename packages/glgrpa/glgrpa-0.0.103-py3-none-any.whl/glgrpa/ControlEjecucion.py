# src/glgrpa/ControlEjecucion.py

import json
import os
import inspect
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any, Callable
from functools import wraps
from .Windows import Windows
from .Terminal import Terminal
from .Email import Email

class ControlEjecucion(Windows, Terminal):
    """
    Clase para el control de estado y reintentos de ejecuci√≥n siguiendo el patr√≥n
    de herencia m√∫ltiple de glgrpa. Proporciona funcionalidad para:
    - Gesti√≥n de estado de ejecuci√≥n con archivo JSON
    - Control de reintentos autom√°ticos
    - Notificaciones por email en caso de √©xito/fallo
    - Logging detallado con emojis siguiendo las convenciones del proyecto
    """
    
    # Cache de configuraci√≥n para evitar m√∫ltiples instanciaciones
    _configuracion_cache: Optional[Dict[str, Any]] = None
    _instancia_principal: Optional['ControlEjecucion'] = None
    
    def __init__(self, 
                 intentos_maximos: int = 3,
                 permitir_multiples_ejecuciones_diarias: bool = False,
                 dev: bool = False,
                 email_destinatarios: Optional[list] = None,
                 nombre_script: Optional[str] = None,
                 # Par√°metros SMTP para Email
                 smtp_server: Optional[str] = None,
                 smtp_port: Optional[int] = None,
                 smtp_username: Optional[str] = None,
                 smtp_password: Optional[str] = None,
                 nombre_trabajador_virtual: Optional[str] = None,
                 nombre_aprendizaje: Optional[str] = None,
                 # Nuevo par√°metro para reutilizar configuraci√≥n
                 reutilizar_configuracion: bool = True,
                 # Callbacks personalizados para mensajes de email
                 callback_mensaje_exito: Optional[Callable] = None,
                 callback_mensaje_error: Optional[Callable] = None):
        """
        Inicializa el control de ejecuci√≥n.
        
        :param intentos_maximos: N√∫mero m√°ximo de reintentos por ejecuci√≥n (default: 3)
        :param permitir_multiples_ejecuciones_diarias: Si permite m√∫ltiples ejecuciones por d√≠a
        :param dev: Modo desarrollo (delays m√°s cortos, logging verboso)
        :param email_destinatarios: Lista de emails para notificaciones
        :param nombre_script: Nombre del script para logs y emails (se detecta autom√°ticamente si no se especifica)
        :param smtp_server: Servidor SMTP para env√≠o de emails
        :param smtp_port: Puerto SMTP
        :param smtp_username: Usuario SMTP
        :param smtp_password: Contrase√±a SMTP
        :param nombre_trabajador_virtual: Nombre del trabajador virtual para emails
        :param nombre_aprendizaje: Nombre del aprendizaje para emails
        :param reutilizar_configuracion: Si debe reutilizar configuraci√≥n de instancia anterior (default: True)
        :param callback_mensaje_exito: Funci√≥n callback que genera mensaje personalizado de √©xito (recibe resultado de funci√≥n principal)
        :param callback_mensaje_error: Funci√≥n callback que genera mensaje personalizado de error (recibe excepci√≥n)
        """
        super().__init__(dev=dev)
        
        # Intentar reutilizar configuraci√≥n si est√° disponible y se solicita
        if reutilizar_configuracion and ControlEjecucion._configuracion_cache:
            self._cargar_configuracion_cache()
        else:
            # Configuraci√≥n nueva - guardar par√°metros proporcionados
            self._guardar_configuracion_parametros(
                intentos_maximos, permitir_multiples_ejecuciones_diarias,
                email_destinatarios, nombre_script, smtp_server, smtp_port,
                smtp_username, smtp_password, nombre_trabajador_virtual, nombre_aprendizaje
            )
        
        # Guardar callbacks personalizados
        self.callback_mensaje_exito = callback_mensaje_exito
        self.callback_mensaje_error = callback_mensaje_error
        
        # Detectar nombre del script autom√°ticamente si no se especifica
        if self.nombre_script is None:
            try:
                frame = inspect.currentframe()
                if frame and frame.f_back:
                    caller_frame = frame.f_back  
                    caller_filename = caller_frame.f_globals.get('__file__', 'script_desconocido')
                    self.nombre_script = Path(caller_filename).stem
                else:
                    self.nombre_script = 'script_desconocido'
            except Exception:
                self.nombre_script = 'script_desconocido'
            
        # Ruta del archivo de estado usando resoluci√≥n correcta para tareas programadas
        self.archivo_estado = self.resolver_ruta_archivo("estado_ejecucion.json", usar_directorio_script=True)
        
        # Configurar email handler
        self._configurar_email_handler()
        
        # Guardar como instancia principal si es la primera
        if ControlEjecucion._instancia_principal is None:
            ControlEjecucion._instancia_principal = self

    def _guardar_configuracion_parametros(self, intentos_maximos, permitir_multiples_ejecuciones_diarias,
                                         email_destinatarios, nombre_script, smtp_server, smtp_port,
                                         smtp_username, smtp_password, nombre_trabajador_virtual, nombre_aprendizaje):
        """Guarda la configuraci√≥n de par√°metros en atributos de instancia y cache global."""
        self.intentos_maximos = intentos_maximos
        self.permitir_multiples_ejecuciones_diarias = permitir_multiples_ejecuciones_diarias
        self.email_destinatarios = email_destinatarios or []
        self.nombre_script = nombre_script
        
        # Guardar configuraci√≥n en cache global para reutilizaci√≥n
        ControlEjecucion._configuracion_cache = {
            'intentos_maximos': intentos_maximos,
            'permitir_multiples_ejecuciones_diarias': permitir_multiples_ejecuciones_diarias,
            'email_destinatarios': email_destinatarios or [],
            'smtp_server': smtp_server,
            'smtp_port': smtp_port,
            'smtp_username': smtp_username,
            'smtp_password': smtp_password,
            'nombre_trabajador_virtual': nombre_trabajador_virtual,
            'nombre_aprendizaje': nombre_aprendizaje
        }

    def _cargar_configuracion_cache(self):
        """Carga la configuraci√≥n desde el cache global."""
        if ControlEjecucion._configuracion_cache:
            cache = ControlEjecucion._configuracion_cache
            self.intentos_maximos = cache.get('intentos_maximos', 3)
            self.permitir_multiples_ejecuciones_diarias = cache.get('permitir_multiples_ejecuciones_diarias', False)
            self.email_destinatarios = cache.get('email_destinatarios', [])
            self.nombre_script = cache.get('nombre_script')
            self.mostrar("üîÑ Reutilizando configuraci√≥n de instancia anterior")
        else:
            # Valores por defecto si no hay cache
            self.intentos_maximos = 3
            self.permitir_multiples_ejecuciones_diarias = False
            self.email_destinatarios = []
            self.nombre_script = None

    def _configurar_email_handler(self):
        """Configura el handler de email usando la configuraci√≥n actual."""
        self.email_handler = None
        
        if self.email_destinatarios:
            self.mostrar(f"üîç Configurando emails para: {', '.join(self.email_destinatarios)}")
            
            # Obtener configuraci√≥n SMTP del cache si est√° disponible
            cache = ControlEjecucion._configuracion_cache or {}
            smtp_server = cache.get('smtp_server')
            smtp_port = cache.get('smtp_port')
            smtp_username = cache.get('smtp_username')
            smtp_password = cache.get('smtp_password')
            nombre_trabajador_virtual = cache.get('nombre_trabajador_virtual')
            nombre_aprendizaje = cache.get('nombre_aprendizaje')
            
            if smtp_server and smtp_port and smtp_username and smtp_password:
                self.mostrar(f"üîç Par√°metros SMTP: servidor={smtp_server}, puerto={smtp_port}, usuario={smtp_username}")
                try:
                    self.email_handler = Email(
                        smtp_server=smtp_server,
                        smtp_port=smtp_port,
                        smtp_username=smtp_username,
                        smtp_password=smtp_password,
                        nombre_trabajador_virtual=nombre_trabajador_virtual or self.nombre_script or 'trabajador_virtual',
                        nombre_aprendizaje=nombre_aprendizaje or self.nombre_script or 'aprendizaje',
                        dev=self.dev
                    )
                    self.mostrar("üìß Sistema de notificaciones por email configurado")
                except Exception as e:
                    self.mostrar(f"‚ùå No se pudo configurar el sistema de email: {str(e)}", True)
                    self.email_handler = None
            else:
                missing_params = []
                if not smtp_server: missing_params.append("smtp_server")
                if not smtp_port: missing_params.append("smtp_port") 
                if not smtp_username: missing_params.append("smtp_username")
                if not smtp_password: missing_params.append("smtp_password")
                self.mostrar(f"‚ö†Ô∏è  Emails configurados pero faltan par√°metros SMTP: {', '.join(missing_params)}. Notificaciones deshabilitadas.", True)
        else:
            self.mostrar("üîç No hay destinatarios de email configurados - notificaciones deshabilitadas")

    @staticmethod
    def resolver_ruta_variables_entorno(nombre_archivo_env: str = '.env.production') -> str:
        """
        Resuelve correctamente la ruta del archivo de variables de entorno.
        
        M√©todo est√°tico espec√≠fico para resolver rutas de archivos .env cuando se ejecuta
        desde tareas programadas de Windows. Evita el problema de duplicaci√≥n de rutas
        que ocurre cuando el directorio de trabajo actual no es el directorio del ejecutable.
        
        ### Ejemplo
        ```python
        from glgrpa import ControlEjecucion
        
        # Resolver ruta del archivo .env.production
        ruta_env = ControlEjecucion.resolver_ruta_variables_entorno()
        
        # Verificar si existe antes de cargar
        if os.path.exists(ruta_env):
            from dotenv import load_dotenv
            load_dotenv(ruta_env)
            print(f"‚úÖ Variables cargadas desde: {ruta_env}")
        else:
            print(f"‚ùå No se encontr√≥ archivo: {ruta_env}")
        
        # Para otros archivos .env
        ruta_env_dev = ControlEjecucion.resolver_ruta_variables_entorno('.env.development')
        ```
        >>> "C:\\path\\to\\executable\\.env.production"  # Ruta resuelta correctamente
        
        :param nombre_archivo_env: Nombre del archivo de variables de entorno (default: '.env.production')
        :return: Ruta absoluta resuelta del archivo de variables de entorno
        
        ### Raises
        #### Exception
        - Si no se puede determinar la ruta del ejecutable actual
        """
        return Windows.resolver_ruta_archivo(nombre_archivo_env, usar_directorio_script=True)

    def leer_estado_ejecucion(self) -> Dict[str, Any]:
        """
        Lee el estado de ejecuci√≥n desde el archivo JSON.
        
        :return: Diccionario con el estado de ejecuci√≥n
        """
        estado_default = {
            "fecha": datetime.now().strftime("%Y-%m-%d"),
            "exitoso": False,
            "intentos_diarios": 0,
            "intentos_maximos": self.intentos_maximos,
            "intentos_realizados": 0,
            "ultimo_error": None,
            "timestamp": datetime.now().isoformat(),
            "nombre_script": self.nombre_script
        }
        
        try:
            if os.path.exists(self.archivo_estado):
                with open(self.archivo_estado, 'r', encoding='utf-8') as f:
                    estado = json.load(f)
                    self.mostrar(f"üìÑ Estado de ejecuci√≥n le√≠do: {estado['fecha']} - Intentos: {estado['intentos_realizados']}/{estado['intentos_maximos']}")
                    return estado
            else:
                self.mostrar("üìÑ No existe archivo de estado previo, creando nuevo estado")
                return estado_default
        except Exception as e:
            self.mostrar(f"‚ùå Error al leer estado de ejecuci√≥n: {str(e)}", True)
            return estado_default

    def guardar_estado_ejecucion(self, estado: Dict[str, Any]) -> bool:
        """
        Guarda el estado de ejecuci√≥n en el archivo JSON.
        
        :param estado: Diccionario con el estado a guardar
        :return: True si se guard√≥ correctamente, False en caso contrario
        """
        try:
            estado["timestamp"] = datetime.now().isoformat()
            with open(self.archivo_estado, 'w', encoding='utf-8') as f:
                json.dump(estado, f, indent=2, ensure_ascii=False)
            self.mostrar(f"üíæ Estado guardado: exitoso={estado['exitoso']}, intentos={estado['intentos_realizados']}")
            return True
        except Exception as e:
            self.mostrar(f"‚ùå Error al guardar estado: {str(e)}", True)
            return False

    def validar_puede_ejecutar(self, estado: Dict[str, Any]) -> tuple[bool, str]:
        """
        Valida si el script puede ejecutarse basado en el estado actual.
        
        :param estado: Estado actual de ejecuci√≥n
        :return: Tupla (puede_ejecutar, razon)
        """
        fecha_actual = datetime.now().strftime("%Y-%m-%d")
        
        # Si es un d√≠a diferente, resetear contadores
        if estado["fecha"] != fecha_actual:
            self.mostrar(f"üìÖ Nueva fecha detectada: {fecha_actual}, reseteando contadores")
            estado.update({
                "fecha": fecha_actual,
                "intentos_diarios": 0,
                "intentos_realizados": 0,
                "exitoso": False,
                "ultimo_error": None
            })
            return True, "Nueva fecha - ejecuci√≥n permitida"
        
        # Si ya fue exitoso hoy y no permite m√∫ltiples ejecuciones
        if estado["exitoso"] and not self.permitir_multiples_ejecuciones_diarias:
            return False, f"Script ya ejecutado exitosamente hoy ({estado['fecha']})"
        
        # Si se alcanz√≥ el l√≠mite de intentos diarios
        if estado["intentos_realizados"] >= self.intentos_maximos:
            return False, f"L√≠mite de intentos diarios alcanzado ({estado['intentos_realizados']}/{self.intentos_maximos})"
        
        return True, "Ejecuci√≥n permitida"

    def enviar_notificacion_email(self, exitoso: bool, error_msg: Optional[str] = None, 
                                intentos_realizados: int = 0, resultado_funcion: Optional[Any] = None) -> bool:
        """
        Env√≠a notificaci√≥n por email del resultado de la ejecuci√≥n usando los m√©todos
        estandarizados de la clase Email (enviar_email_exito/enviar_email_error).
        
        :param exitoso: Si la ejecuci√≥n fue exitosa
        :param error_msg: Mensaje de error si aplicable
        :param intentos_realizados: N√∫mero de intentos realizados
        :param resultado_funcion: Resultado de la funci√≥n principal (para callbacks personalizados)
        :return: True si se envi√≥ correctamente
        """
        # Logging detallado para debugging
        self.mostrar(f"üîç Intentando enviar email: exitoso={exitoso}, email_handler={'‚úÖ' if self.email_handler else '‚ùå'}, destinatarios={'‚úÖ' if self.email_destinatarios else '‚ùå'}")
        
        if not self.email_handler:
            self.mostrar("‚ö†Ô∏è  Email handler no configurado - no se enviar√° notificaci√≥n")
            return False
            
        if not self.email_destinatarios:
            self.mostrar("‚ö†Ô∏è  No hay destinatarios configurados - no se enviar√° notificaci√≥n")
            return False
            
        try:
            fecha_actual = datetime.now().strftime("%d/%m/%Y")
            
            if exitoso:
                self.mostrar(f"üìß Enviando email de √©xito a: {', '.join(self.email_destinatarios)}")
                
                # Usar callback personalizado si est√° disponible
                if self.callback_mensaje_exito:
                    try:
                        mensaje_personalizado = self.callback_mensaje_exito(resultado_funcion)
                        self.mostrar("üéØ Usando mensaje personalizado para email de √©xito")
                        
                        # Usar m√©todo estandarizado con mensaje personalizado
                        resultado = self.email_handler.enviar_email_exito(
                            destinatarios=self.email_destinatarios,
                            titulo=mensaje_personalizado.get('titulo', f"Ejecuci√≥n Exitosa - {self.nombre_script}"),
                            subtitulo=mensaje_personalizado.get('subtitulo', "El script de automatizaci√≥n se ejecut√≥ correctamente"),
                            mensaje=mensaje_personalizado.get('mensaje', f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\nEstado: Completado correctamente\nFecha: {fecha_actual}"),
                            fecha=fecha_actual,
                            duracion="00:00:00"  # Puede implementarse c√°lculo de duraci√≥n si se necesita
                        )
                    except Exception as callback_error:
                        self.mostrar(f"‚ö†Ô∏è  Error en callback personalizado de √©xito: {str(callback_error)}, usando mensaje est√°ndar")
                        # Fallback al mensaje est√°ndar
                        resultado = self.email_handler.enviar_email_exito(
                            destinatarios=self.email_destinatarios,
                            titulo=f"Ejecuci√≥n Exitosa - {self.nombre_script}",
                            subtitulo="El script de automatizaci√≥n se ejecut√≥ correctamente",
                            mensaje=f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\nEstado: Completado correctamente\nFecha: {fecha_actual}",
                            fecha=fecha_actual,
                            duracion="00:00:00"
                        )
                else:
                    # Usar m√©todo estandarizado para emails de √©xito
                    resultado = self.email_handler.enviar_email_exito(
                        destinatarios=self.email_destinatarios,
                        titulo=f"Ejecuci√≥n Exitosa - {self.nombre_script}",
                        subtitulo="El script de automatizaci√≥n se ejecut√≥ correctamente",
                        mensaje=f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\nEstado: Completado correctamente\nFecha: {fecha_actual}",
                        fecha=fecha_actual,
                        duracion="00:00:00"  # Puede implementarse c√°lculo de duraci√≥n si se necesita
                    )
            else:
                self.mostrar(f"üìß Enviando email de error a: {', '.join(self.email_destinatarios)}")
                
                # Usar callback personalizado si est√° disponible
                if self.callback_mensaje_error:
                    try:
                        # El callback de error recibe la excepci√≥n original si est√° disponible
                        excepcion_original = Exception(error_msg) if error_msg else None
                        mensaje_personalizado = self.callback_mensaje_error(excepcion_original)
                        self.mostrar("üéØ Usando mensaje personalizado para email de error")
                        
                        # Usar m√©todo estandarizado con mensaje personalizado
                        resultado = self.email_handler.enviar_email_error(
                            destinatarios=self.email_destinatarios,
                            titulo=mensaje_personalizado.get('titulo', f"‚ùå Ejecuci√≥n Fallida - {self.nombre_script}"),
                            subtitulo=mensaje_personalizado.get('subtitulo', f"El script fall√≥ tras {intentos_realizados} intentos"),
                            mensaje=mensaje_personalizado.get('mensaje', f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\n√öltimo error: {error_msg or 'Error no especificado'}\nEstado: L√≠mite de reintentos alcanzado\nFecha: {fecha_actual}"),
                            fecha=fecha_actual,
                            duracion="00:00:00"
                        )
                    except Exception as callback_error:
                        self.mostrar(f"‚ö†Ô∏è  Error en callback personalizado de error: {str(callback_error)}, usando mensaje est√°ndar")
                        # Fallback al mensaje est√°ndar
                        resultado = self.email_handler.enviar_email_error(
                            destinatarios=self.email_destinatarios,
                            titulo=f"‚ùå Ejecuci√≥n Fallida - {self.nombre_script}",
                            subtitulo=f"El script fall√≥ tras {intentos_realizados} intentos",
                            mensaje=f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\n√öltimo error: {error_msg or 'Error no especificado'}\nEstado: L√≠mite de reintentos alcanzado\nFecha: {fecha_actual}",
                            fecha=fecha_actual,
                            duracion="00:00:00"
                        )
                else:
                    # Usar m√©todo estandarizado para emails de error
                    resultado = self.email_handler.enviar_email_error(
                        destinatarios=self.email_destinatarios,
                        titulo=f"‚ùå Ejecuci√≥n Fallida - {self.nombre_script}",
                        subtitulo=f"El script fall√≥ tras {intentos_realizados} intentos",
                        mensaje=f"Script: {self.nombre_script}\nIntentos realizados: {intentos_realizados}/{self.intentos_maximos}\n√öltimo error: {error_msg or 'Error no especificado'}\nEstado: L√≠mite de reintentos alcanzado\nFecha: {fecha_actual}",
                        fecha=fecha_actual,
                        duracion="00:00:00"
                    )
            
            if resultado:
                self.mostrar(f"üìß Email de notificaci√≥n enviado exitosamente: {'‚úÖ √âxito' if exitoso else '‚ùå Fallo'}")
            else:
                self.mostrar(f"‚ùå Fall√≥ el env√≠o del email de notificaci√≥n: {'‚úÖ √âxito' if exitoso else '‚ùå Fallo'}")
                
            return resultado
            
        except Exception as e:
            self.mostrar(f"‚ùå Error al enviar email de notificaci√≥n: {str(e)}", True)
            return False

    def ejecutar_con_control_estado(self, funcion_principal: Callable, *args, **kwargs) -> bool:
        """
        Ejecuta una funci√≥n con control de estado. Cada ejecuci√≥n es independiente
        y controlada por tareas programadas de Windows (ej: 7:00, 7:30, 8:00).
        
        :param funcion_principal: Funci√≥n a ejecutar
        :param args: Argumentos posicionales para la funci√≥n
        :param kwargs: Argumentos con nombre para la funci√≥n
        :return: True si la ejecuci√≥n fue exitosa
        """
        self.mostrar(f"üöÄ Iniciando control de ejecuci√≥n para: {self.nombre_script}")
        
        # Leer estado actual
        estado = self.leer_estado_ejecucion()
        
        # Validar si puede ejecutar
        puede_ejecutar, razon = self.validar_puede_ejecutar(estado)
        if not puede_ejecutar:
            self.mostrar(f"üö´ Ejecuci√≥n bloqueada: {razon}")
            return False
        
        self.mostrar(f"‚úÖ Validaci√≥n passed: {razon}")
        
        # Incrementar contador de intentos
        intento_actual = estado["intentos_realizados"] + 1
        self.mostrar(f"üîÑ Ejecuci√≥n {intento_actual}/{self.intentos_maximos}")
        
        try:
            # Actualizar estado antes del intento
            estado["intentos_realizados"] = intento_actual
            estado["intentos_diarios"] = intento_actual
            self.guardar_estado_ejecucion(estado)
            
            # Ejecutar funci√≥n principal
            resultado = funcion_principal(*args, **kwargs)
            
            if resultado:
                # Ejecuci√≥n exitosa
                estado["exitoso"] = True
                estado["ultimo_error"] = None
                self.guardar_estado_ejecucion(estado)
                
                self.mostrar(f"‚úÖ Ejecuci√≥n exitosa en intento {intento_actual}")
                
                # Enviar email de √©xito pasando el resultado para callbacks personalizados
                self.enviar_notificacion_email(
                    exitoso=True, 
                    intentos_realizados=intento_actual,
                    resultado_funcion=resultado
                )
                
                return True
            else:
                # Funci√≥n retorn√≥ False
                error_msg = f"Funci√≥n principal retorn√≥ False en intento {intento_actual}"
                estado["ultimo_error"] = error_msg
                self.mostrar(f"‚ö†Ô∏è  {error_msg}")
                
                # Guardar estado del fallo
                self.guardar_estado_ejecucion(estado)
                
                # Si alcanz√≥ el m√°ximo de intentos, enviar email de fallo final
                if intento_actual >= self.intentos_maximos:
                    self.mostrar(f"‚ùå L√≠mite de intentos alcanzado ({intento_actual}/{self.intentos_maximos})")
                    self.enviar_notificacion_email(
                        exitoso=False,
                        error_msg=error_msg,
                        intentos_realizados=intento_actual
                    )
                else:
                    self.mostrar(f"‚è≥ Esperando pr√≥xima ejecuci√≥n programada. Intentos restantes: {self.intentos_maximos - intento_actual}")
                
                return False
                
        except Exception as e:
            # Error durante la ejecuci√≥n
            error_msg = f"Error en intento {intento_actual}: {str(e)}"
            estado["ultimo_error"] = error_msg
            self.mostrar(f"‚ùå {error_msg}", True)
            
            # Tomar screenshot para debugging si est√° disponible
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                screenshot_nombre = f"error_{self.nombre_script}_intento_{intento_actual}_{timestamp}"
                self.tomar_screenshot(screenshot_nombre)
                self.mostrar(f"üì∏ Screenshot guardado: {screenshot_nombre}.png")
            except Exception as screenshot_error:
                self.mostrar(f"‚ö†Ô∏è  No se pudo tomar screenshot: {str(screenshot_error)}")
            
            # Guardar estado despu√©s del error
            self.guardar_estado_ejecucion(estado)
            
            # Si alcanz√≥ el m√°ximo de intentos, enviar email de fallo final
            if intento_actual >= self.intentos_maximos:
                self.mostrar(f"‚ùå L√≠mite de intentos alcanzado ({intento_actual}/{self.intentos_maximos})")
                self.enviar_notificacion_email(
                    exitoso=False,
                    error_msg=error_msg,
                    intentos_realizados=intento_actual
                )
            else:
                self.mostrar(f"‚è≥ Esperando pr√≥xima ejecuci√≥n programada. Intentos restantes: {self.intentos_maximos - intento_actual}")
            
            return False

    def decorador_ejecucion_controlada_instancia(self, 
                                     intentos_maximos: Optional[int] = None,
                                     permitir_multiples_ejecuciones_diarias: Optional[bool] = None,
                                     email_destinatarios: Optional[list] = None):
        """
        Decorador de instancia para aplicar control de ejecuci√≥n a cualquier funci√≥n.
        
        Nota: Para uso en scripts de producci√≥n, se recomienda usar el decorador est√°tico
        ControlEjecucion.decorador_ejecucion_controlada() que incluye configuraci√≥n completa.
        
        :param intentos_maximos: Override del n√∫mero m√°ximo de intentos
        :param permitir_multiples_ejecuciones_diarias: Override de m√∫ltiples ejecuciones diarias
        :param email_destinatarios: Override de destinatarios de email
        :return: Decorador
        """
        def decorador(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                # Usar valores override si se proporcionan, sino usar configuraci√≥n actual
                _intentos_maximos = intentos_maximos or self.intentos_maximos
                _permitir_multiples = permitir_multiples_ejecuciones_diarias if permitir_multiples_ejecuciones_diarias is not None else self.permitir_multiples_ejecuciones_diarias
                _email_destinatarios = email_destinatarios or self.email_destinatarios
                
                # Reutilizar la instancia actual si tiene la misma configuraci√≥n
                if (_intentos_maximos == self.intentos_maximos and 
                    _permitir_multiples == self.permitir_multiples_ejecuciones_diarias and
                    _email_destinatarios == self.email_destinatarios):
                    
                    self.mostrar("üîÑ Reutilizando instancia actual de ControlEjecucion")
                    # Actualizar nombre del script para el contexto actual
                    nombre_script_anterior = self.nombre_script
                    self.nombre_script = func.__name__
                    
                    try:
                        return self.ejecutar_con_control_estado(func, *args, **kwargs)
                    finally:
                        # Restaurar nombre del script original
                        self.nombre_script = nombre_script_anterior
                else:
                    # Crear nueva instancia solo si la configuraci√≥n es diferente
                    self.mostrar("üÜï Creando nueva instancia con configuraci√≥n diferente")
                    control = ControlEjecucion(
                        intentos_maximos=_intentos_maximos,
                        permitir_multiples_ejecuciones_diarias=_permitir_multiples,
                        dev=self.dev,
                        email_destinatarios=_email_destinatarios,
                        nombre_script=func.__name__,
                        reutilizar_configuracion=True  # Reutilizar configuraci√≥n SMTP
                    )
                    
                    return control.ejecutar_con_control_estado(func, *args, **kwargs)
                
            return wrapper
        return decorador

    @staticmethod
    def decorador_ejecucion_controlada(intentos_maximos: int = 3,
                                     permitir_multiples_ejecuciones_diarias: bool = False,
                                     email_destinatarios: Optional[list] = None,
                                     nombre_script: Optional[str] = None,
                                     smtp_server: Optional[str] = None,
                                     smtp_port: Optional[int] = None,
                                     smtp_username: Optional[str] = None,
                                     smtp_password: Optional[str] = None,
                                     nombre_trabajador_virtual: Optional[str] = None,
                                     nombre_aprendizaje: Optional[str] = None,
                                     dev: bool = False,
                                     callback_mensaje_exito: Optional[Callable] = None,
                                     callback_mensaje_error: Optional[Callable] = None):
        """
        Decorador est√°tico para aplicar control de ejecuci√≥n a cualquier funci√≥n.
        
        Este es el decorador principal que se debe usar en scripts de producci√≥n.
        Permite configurar completamente el control de ejecuci√≥n sin necesidad de 
        crear una instancia previa de ControlEjecucion.
        
        ### Ejemplo
        ```python
        from glgrpa import ControlEjecucion
        
        @ControlEjecucion.decorador_ejecucion_controlada(
            intentos_maximos=3,
            permitir_multiples_ejecuciones_diarias=False,
            email_destinatarios=['admin@empresa.com'],
            smtp_server='smtp.outlook.com',
            smtp_port=587,
            smtp_username='robot@empresa.com',
            smtp_password='password',
            nombre_trabajador_virtual='Robot SAP',
            nombre_aprendizaje='Cotizaciones BNA'
        )
        def mi_proceso_rpa():
            # L√≥gica de automatizaci√≥n
            return True  # Retornar True si exitoso, False si fall√≥
        ```
        
        :param intentos_maximos: N√∫mero m√°ximo de reintentos por d√≠a (default: 3)
        :param permitir_multiples_ejecuciones_diarias: Si permite m√∫ltiples ejecuciones exitosas por d√≠a
        :param email_destinatarios: Lista de emails para notificaciones
        :param nombre_script: Nombre del script para logs (se detecta autom√°ticamente si no se especifica)
        :param smtp_server: Servidor SMTP para env√≠o de emails
        :param smtp_port: Puerto SMTP
        :param smtp_username: Usuario SMTP
        :param smtp_password: Contrase√±a SMTP
        :param nombre_trabajador_virtual: Nombre del trabajador virtual para emails
        :param nombre_aprendizaje: Nombre del aprendizaje para emails
        :param dev: Modo desarrollo (timeouts m√°s cortos, logging verboso)
        :param callback_mensaje_exito: Funci√≥n callback que genera mensaje personalizado de √©xito
        :param callback_mensaje_error: Funci√≥n callback que genera mensaje personalizado de error
        :return: Funci√≥n decorada con control de ejecuci√≥n
        
        ### Raises
        #### ValueError
        - Si email_destinatarios est√° configurado pero faltan par√°metros SMTP
        #### Exception
        - Si ocurre un error durante la configuraci√≥n del control de ejecuci√≥n
        """
        def decorador(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                # Validar configuraci√≥n de email
                if email_destinatarios and not all([smtp_server, smtp_port, smtp_username, smtp_password]):
                    raise ValueError("Si se configuran email_destinatarios, tambi√©n se deben proporcionar todos los par√°metros SMTP")
                
                # Detectar nombre del script si no se especifica
                _nombre_script = nombre_script
                if _nombre_script is None:
                    _nombre_script = func.__name__
                
                # Crear instancia de ControlEjecucion con toda la configuraci√≥n
                control = ControlEjecucion(
                    intentos_maximos=intentos_maximos,
                    permitir_multiples_ejecuciones_diarias=permitir_multiples_ejecuciones_diarias,
                    dev=dev,
                    email_destinatarios=email_destinatarios,
                    nombre_script=_nombre_script,
                    smtp_server=smtp_server,
                    smtp_port=smtp_port,
                    smtp_username=smtp_username,
                    smtp_password=smtp_password,
                    nombre_trabajador_virtual=nombre_trabajador_virtual,
                    nombre_aprendizaje=nombre_aprendizaje,
                    callback_mensaje_exito=callback_mensaje_exito,
                    callback_mensaje_error=callback_mensaje_error
                )
                
                # Ejecutar funci√≥n con control de estado
                return control.ejecutar_con_control_estado(func, *args, **kwargs)
                
            return wrapper
        return decorador
