name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: "3.11"

jobs:
  version-check:
    name: Version Consistency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          # get version from pyproject.toml
          VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)

          # check version in  __init__.py
          INIT_VERSION=$(grep "__version__ = " src/ctx_gen/__init__.py | cut -d'"' -f2)

          if [ "$VERSION" != "$INIT_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "pyproject.toml: $VERSION"
            echo "__init__.py: $INIT_VERSION"
            exit 1
          fi

          echo "✅ Versions are consistent: $VERSION"

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort pylint
          # Install types packages that actually exist
          pip install types-pyperclip
          # Install the project in editable mode
          pip install -e .

      - name: Check code formatting with Black
        run: |
          black --check --diff src/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff src/

      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Type check with mypy
        run: |
          mypy src/ctx_gen --ignore-missing-imports --no-strict-optional
        continue-on-error: true

      - name: Lint with pylint
        run: |
          pylint src/ctx_gen --exit-zero --disable=C,R --max-line-length=100
        continue-on-error: true

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-mock
          pip install -e .
        shell: bash

      - name: Create basic tests if not exist
        run: |
          mkdir -p tests
          if [ ! -f tests/test_basic.py ]; then
            cat > tests/test_basic.py << 'EOF'
          import pytest
          from ctx_gen import __version__
          from ctx_gen.cli import Config, BinaryFileDetector, format_size
          import pathlib

          def test_version():
              assert __version__ == "0.3.0"

          def test_config_creation():
              config = Config()
              assert config.max_file_size == 1024 * 1024
              assert config.max_total_tokens == 100000
              assert config.skip_binary == True

          def test_format_size():
              assert format_size(100) == "100.0B"
              assert format_size(1024) == "1.0KB"
              assert format_size(1024 * 1024) == "1.0MB"

          def test_binary_detector():
              # Test text file detection
              text_file = pathlib.Path("test.py")
              assert BinaryFileDetector.is_text_by_extension(text_file) == True
              
              # Test binary file detection
              binary_file = pathlib.Path("test.exe")
              assert BinaryFileDetector.is_binary_by_extension(binary_file) == True
          EOF
          fi
        shell: bash

      - name: Run tests with pytest
        run: |
          pytest tests/ \
            --cov=ctx_gen \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --verbose \
            --timeout=60 \
            -n auto || true
        shell: bash
        continue-on-error: true

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
        continue-on-error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-timeout

      - name: Run integration tests
        run: |
          # Test CLI commands
          ctx-gen version
          ctx-gen --help

          # Test basic generation
          mkdir -p test_project
          echo
