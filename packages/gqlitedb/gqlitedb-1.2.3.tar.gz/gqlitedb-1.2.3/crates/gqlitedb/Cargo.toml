[package]
name = "gqlitedb"
description = "GQLite is a Rust-language library, with a C interface, that implements a small, fast, self-contained, high-reliability, full-featured, Graph Query database engine."
readme = "README.md"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[features]
default = ["redb", "capi", "sqlite"]
_backtrace = []
capi = []
redb = ["dep:redb"]
_pgql = ["dep:pgrx"]
_pg13 = ["pgrx/pg13"]
_pg14 = ["pgrx/pg14"]
_pg15 = ["pgrx/pg15"]
_pg16 = ["pgrx/pg16"]
_pg17 = ["pgrx/pg17"]
sqlite = ["dep:rusqlite", "dep:askama"]
_value_private = []
bundled = ["rusqlite/bundled"]

[dependencies]
askama = { version = "0.14", optional = true }
ccutils = { version = "0.3", features = ["sync", "pool"] }
ciborium = "0.2"
itertools = "0.14"
pgrx = { version = "0.15", optional = true }
pest = "2"
pest_derive = "2"
rand = "0.9"
redb = { version = "2", optional = true }
rusqlite = { package = "rusqlite", version = "0.37", optional = true, features = [
  "functions",
  "uuid",
] }
serde = "1"
serde_json = "1"
thiserror = "2"
uuid = { version = "1", features = ["v4"] }

[dev-dependencies]
ccutils = { version = "0.3", features = ["temporary"] }
divan = "0.1"
iai-callgrind = { version = "0.16" }
regex = "1"

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
# rusqlite_wasm = { package = "rusqlite", version = "0.37", optional = true, git = "https://github.com/Spxg/rusqlite.git", branch = "wasm-demo", features = [
#   "functions",
#   "uuid",
# ] }
uuid = { version = "1", features = ["js"] }

# [target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# rusqlite_main = { package = "rusqlite", version = "0.37", optional = true, features = [
#   "functions",
#   "uuid",
# ] }

[[bench]]
name = "pokec_divan"
harness = false

[[bench]]
name = "pokec_iai"
harness = false
