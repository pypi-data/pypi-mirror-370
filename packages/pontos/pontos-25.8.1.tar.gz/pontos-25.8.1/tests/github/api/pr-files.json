[
    {
      "sha": "cad83468a60da7af39549d2ac07b86b51563618e",
      "filename": "gvm/protocols/gmpv2110/__init__.py",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/gvm/protocols/gmpv2110/__init__.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/gvm/protocols/gmpv2110/__init__.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/gvm/protocols/gmpv2110/__init__.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -127,9 +127,10 @@\n     AliveTest,\n     TargetsMixin,\n )\n-from gvm.protocols.gmpv214.entities.users import UsersMixin\n \n # NEW IN 2110\n+from gvm.protocols.gmpv2110.entities.users import UsersMixin\n+\n from gvm.protocols.gmpv2110.system.version import VersionMixin\n \n from gvm.connections import GvmConnection"
    },
    {
      "sha": "f22f0818d145afaa3031fee6b85a434768b3d0ce",
      "filename": "gvm/protocols/gmpv2110/entities/users.py",
      "status": "added",
      "additions": 191,
      "deletions": 0,
      "changes": 191,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/gvm/protocols/gmpv2110/entities/users.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/gvm/protocols/gmpv2110/entities/users.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/gvm/protocols/gmpv2110/entities/users.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -0,0 +1,191 @@\n+# -*- coding: utf-8 -*-\n+# Copyright (C) 2022 Greenbone AG\n+#\n+# SPDX-License-Identifier: GPL-3.0-or-later\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# pylint: disable=arguments-differ, arguments-renamed\n+\n+from typing import Any, List, Optional\n+\n+from gvm.errors import RequiredArgument\n+from gvm.protocols.gmpv214.entities.users import (\n+    UsersMixin as Gmp214UsersMixin,\n+    UserAuthType,\n+)\n+from gvm.utils import deprecation, to_comma_list, to_bool\n+from gvm.xml import XmlCommand\n+\n+\n+class UsersMixin(Gmp214UsersMixin):\n+    def create_user(\n+        self,\n+        name: str,\n+        *,\n+        password: Optional[str] = None,\n+        hosts: Optional[List[str]] = None,\n+        hosts_allow: Optional[bool] = False,\n+        ifaces: Any = None,\n+        ifaces_allow: Any = None,\n+        role_ids: Optional[List[str]] = None,\n+    ) -> Any:\n+        \"\"\"Create a new user\n+\n+        Arguments:\n+            name: Name of the user\n+            password: Password of the user\n+            hosts: A list of host addresses (IPs, DNS names)\n+            hosts_allow: If True allow only access to passed hosts otherwise\n+                deny access. Default is False for deny hosts.\n+            ifaces: deprecated\n+            ifaces_allow: deprecated\n+            role_ids: A list of role UUIDs for the user\n+\n+        Returns:\n+            The response. See :py:meth:`send_command` for details.\n+        \"\"\"\n+        if not name:\n+            raise RequiredArgument(\n+                function=self.create_user.__name__, argument='name'\n+            )\n+\n+        cmd = XmlCommand(\"create_user\")\n+        cmd.add_element(\"name\", name)\n+\n+        if password:\n+            cmd.add_element(\"password\", password)\n+\n+        if hosts:\n+            cmd.add_element(\n+                \"hosts\",\n+                to_comma_list(hosts),\n+                attrs={\"allow\": to_bool(hosts_allow)},\n+            )\n+\n+        if ifaces is not None:\n+            major, minor = self.get_protocol_version()\n+            deprecation(\n+                \"The ifaces parameter has been removed in GMP\"\n+                f\" version {major}{minor}\"\n+            )\n+\n+        if ifaces_allow is not None:\n+            major, minor = self.get_protocol_version()\n+            deprecation(\n+                \"The ifaces_allow parameter has been removed in GMP\"\n+                f\" version {major}{minor}\"\n+            )\n+\n+        if role_ids:\n+            for role in role_ids:\n+                cmd.add_element(\"role\", attrs={\"id\": role})\n+\n+        return self._send_xml_command(cmd)\n+\n+    def modify_user(\n+        self,\n+        user_id: str = None,\n+        *,\n+        name: Optional[str] = None,\n+        comment: Optional[str] = None,\n+        password: Optional[str] = None,\n+        auth_source: Optional[UserAuthType] = None,\n+        role_ids: Optional[List[str]] = None,\n+        hosts: Optional[List[str]] = None,\n+        hosts_allow: Optional[bool] = False,\n+        ifaces: Any = None,\n+        ifaces_allow: Any = None,\n+        group_ids: Optional[List[str]] = None,\n+    ) -> Any:\n+        \"\"\"Modifies an existing user.\n+\n+        Most of the fields need to be supplied\n+        for changing a single field even if no change is wanted for those.\n+        Else empty values are inserted for the missing fields instead.\n+\n+        Arguments:\n+            user_id: UUID of the user to be modified.\n+            name: The new name for the user.\n+            comment: Comment on the user.\n+            password: The password for the user.\n+            auth_source: Source allowed for authentication for this user.\n+            roles_id: List of roles UUIDs for the user.\n+            hosts: User access rules: List of hosts.\n+            hosts_allow: Defines how the hosts list is to be interpreted.\n+                If False (default) the list is treated as a deny list.\n+                All hosts are allowed by default except those provided by\n+                the hosts parameter. If True the list is treated as a\n+                allow list. All hosts are denied by default except those\n+                provided by the hosts parameter.\n+            ifaces: deprecated\n+            ifaces_allow: deprecated\n+            group_ids: List of group UUIDs for the user.\n+\n+        Returns:\n+            The response. See :py:meth:`send_command` for details.\n+        \"\"\"\n+        if not user_id:\n+            raise RequiredArgument(\n+                function=self.modify_user.__name__, argument='user_id'\n+            )\n+\n+        cmd = XmlCommand(\"modify_user\")\n+\n+        cmd.set_attribute(\"user_id\", user_id)\n+\n+        if name:\n+            cmd.add_element(\"new_name\", name)\n+\n+        if role_ids:\n+            for role in role_ids:\n+                cmd.add_element(\"role\", attrs={\"id\": role})\n+\n+        if hosts:\n+            cmd.add_element(\n+                \"hosts\",\n+                to_comma_list(hosts),\n+                attrs={\"allow\": to_bool(hosts_allow)},\n+            )\n+\n+        if ifaces is not None:\n+            major, minor = self.get_protocol_version()\n+            deprecation(\n+                \"The ifaces parameter has been removed in GMP\"\n+                f\" version {major}{minor}\"\n+            )\n+\n+        if ifaces_allow is not None:\n+            major, minor = self.get_protocol_version()\n+            deprecation(\n+                \"The ifaces_allow parameter has been removed in GMP\"\n+                f\" version {major}{minor}\"\n+            )\n+\n+        if comment:\n+            cmd.add_element(\"comment\", comment)\n+\n+        if password:\n+            cmd.add_element(\"password\", password)\n+\n+        if auth_source:\n+            _xmlauthsrc = cmd.add_element(\"sources\")\n+            _xmlauthsrc.add_element(\"source\", auth_source.value)\n+\n+        if group_ids:\n+            _xmlgroups = cmd.add_element(\"groups\")\n+            for group_id in group_ids:\n+                _xmlgroups.add_element(\"group\", attrs={\"id\": group_id})\n+\n+        return self._send_xml_command(cmd)"
    },
    {
      "sha": "dd464f0e6f137ed440c141e08957973a03e1317a",
      "filename": "tests/protocols/gmpv2110/entities/test_users.py",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/test_users.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/test_users.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/tests/protocols/gmpv2110/entities/test_users.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -17,9 +17,8 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n from ...gmpv2110 import Gmpv2110TestCase\n-from .users import GmpModifyUserTestMixin\n+from .users import GmpCreateUserTestMixin, GmpModifyUserTestMixin\n from ...gmpv208.entities.users import (\n-    GmpCreateUserTestMixin,\n     GmpCloneUserTestMixin,\n     GmpDeleteUserTestMixin,\n     GmpGetUsersTestMixin,"
    },
    {
      "sha": "bc37e6b01a09b2427df50cc7a470f9cef0c1f651",
      "filename": "tests/protocols/gmpv2110/entities/users/__init__.py",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/__init__.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/__init__.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/tests/protocols/gmpv2110/entities/users/__init__.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -16,4 +16,5 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+from .test_create_user import GmpCreateUserTestMixin\n from .test_modify_user import GmpModifyUserTestMixin"
    },
    {
      "sha": "8b9c51973a7667e43aeb77471a63f77b401be838",
      "filename": "tests/protocols/gmpv2110/entities/users/test_create_user.py",
      "status": "added",
      "additions": 122,
      "deletions": 0,
      "changes": 122,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/test_create_user.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/test_create_user.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/tests/protocols/gmpv2110/entities/users/test_create_user.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -0,0 +1,122 @@\n+# -*- coding: utf-8 -*-\n+# Copyright (C) 2018-2022 Greenbone AG\n+#\n+# SPDX-License-Identifier: GPL-3.0-or-later\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+from unittest.mock import patch, call\n+from gvm.errors import RequiredArgument\n+\n+\n+class GmpCreateUserTestMixin:\n+    def test_create_user_missing_name(self):\n+        with self.assertRaises(RequiredArgument):\n+            self.gmp.create_user(name=None)\n+\n+        with self.assertRaises(RequiredArgument):\n+            self.gmp.create_user(name='')\n+\n+    def test_create_user(self):\n+        self.gmp.create_user(name='foo')\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>' '<name>foo</name>' '</create_user>'\n+        )\n+\n+    def test_create_user_with_password(self):\n+        self.gmp.create_user(name='foo', password='bar')\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>'\n+            '<name>foo</name>'\n+            '<password>bar</password>'\n+            '</create_user>'\n+        )\n+\n+    def test_create_user_with_hosts(self):\n+        self.gmp.create_user(name='foo', hosts=['h1', 'h2'], hosts_allow=True)\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>'\n+            '<name>foo</name>'\n+            '<hosts allow=\"1\">h1,h2</hosts>'\n+            '</create_user>'\n+        )\n+\n+        self.gmp.create_user(name='foo', hosts=['h1', 'h2'])\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>'\n+            '<name>foo</name>'\n+            '<hosts allow=\"0\">h1,h2</hosts>'\n+            '</create_user>'\n+        )\n+\n+        self.gmp.create_user(name='foo', hosts=['h1', 'h2'], hosts_allow=False)\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>'\n+            '<name>foo</name>'\n+            '<hosts allow=\"0\">h1,h2</hosts>'\n+            '</create_user>'\n+        )\n+\n+    @patch('gvm.protocols.gmpv2110.entities.users.deprecation')\n+    def test_create_user_with_ifaces(self, deprecation_mock):\n+        self.gmp.create_user(name='foo', ifaces=['h1', 'h2'], ifaces_allow=True)\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>' '<name>foo</name>' '</create_user>'\n+        )\n+\n+        self.gmp.create_user(name='foo', ifaces=['h1', 'h2'])\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>' '<name>foo</name>' '</create_user>'\n+        )\n+\n+        self.gmp.create_user(\n+            name='foo', ifaces=['h1', 'h2'], ifaces_allow=False\n+        )\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>' '<name>foo</name>' '</create_user>'\n+        )\n+\n+        # pylint: disable=line-too-long\n+        deprecation_calls = [\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call(\n+                'The ifaces_allow parameter has been removed in GMP version 2110'\n+            ),\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call(\n+                'The ifaces_allow parameter has been removed in GMP version 2110'\n+            ),\n+        ]\n+        # pylint: enable=line-too-long\n+        deprecation_mock.assert_has_calls(deprecation_calls)\n+\n+    def test_create_user_with_role_ids(self):\n+        self.gmp.create_user(name='foo', role_ids=['r1', 'r2'])\n+\n+        self.connection.send.has_been_called_with(\n+            '<create_user>'\n+            '<name>foo</name>'\n+            '<role id=\"r1\"/>'\n+            '<role id=\"r2\"/>'\n+            '</create_user>'\n+        )"
    },
    {
      "sha": "156d04f50e99207706cd5068c2fb3bdd5930cab5",
      "filename": "tests/protocols/gmpv2110/entities/users/test_modify_user.py",
      "status": "modified",
      "additions": 29,
      "deletions": 27,
      "changes": 56,
      "blob_url": "https://github.com/greenbone/python-gvm/blob/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/test_modify_user.py",
      "raw_url": "https://github.com/greenbone/python-gvm/raw/63b99dab803c778eff05783025334a61e58614e7/tests/protocols/gmpv2110/entities/users/test_modify_user.py",
      "contents_url": "https://api.github.com/repos/greenbone/python-gvm/contents/tests/protocols/gmpv2110/entities/users/test_modify_user.py?ref=63b99dab803c778eff05783025334a61e58614e7",
      "patch": "@@ -16,6 +16,7 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+from unittest.mock import patch, call\n from gvm.errors import RequiredArgument\n from gvm.protocols.gmpv2110 import UserAuthType\n \n@@ -156,43 +157,44 @@ def test_modify_user_with_hosts(self):\n             '</modify_user>'\n         )\n \n-    def test_modify_user_with_ifaces(self):\n+    @patch('gvm.protocols.gmpv2110.entities.users.deprecation')\n+    def test_modify_user_with_ifaces(self, deprecation_mock):\n         self.gmp.modify_user(user_id='u1', ifaces=[])\n \n         self.connection.send.has_been_called_with('<modify_user user_id=\"u1\"/>')\n \n-        self.gmp.modify_user(user_id='u1', ifaces=['foo'])\n+        self.gmp.modify_user(user_id='u2', ifaces=['foo'])\n \n-        self.connection.send.has_been_called_with(\n-            '<modify_user user_id=\"u1\">'\n-            '<ifaces allow=\"0\">foo</ifaces>'\n-            '</modify_user>'\n-        )\n+        self.connection.send.has_been_called_with('<modify_user user_id=\"u2\"/>')\n \n-        self.gmp.modify_user(user_id='u1', ifaces=['foo', 'bar'])\n+        self.gmp.modify_user(user_id='u3', ifaces=['foo', 'bar'])\n \n-        self.connection.send.has_been_called_with(\n-            '<modify_user user_id=\"u1\">'\n-            '<ifaces allow=\"0\">foo,bar</ifaces>'\n-            '</modify_user>'\n-        )\n+        self.connection.send.has_been_called_with('<modify_user user_id=\"u3\"/>')\n \n         self.gmp.modify_user(\n-            user_id='u1', ifaces=['foo', 'bar'], ifaces_allow=False\n+            user_id='u4', ifaces=['foo', 'bar'], ifaces_allow=False\n         )\n \n-        self.connection.send.has_been_called_with(\n-            '<modify_user user_id=\"u1\">'\n-            '<ifaces allow=\"0\">foo,bar</ifaces>'\n-            '</modify_user>'\n-        )\n+        self.connection.send.has_been_called_with('<modify_user user_id=\"u4\"/>')\n \n         self.gmp.modify_user(\n-            user_id='u1', ifaces=['foo', 'bar'], ifaces_allow=True\n-        )\n-\n-        self.connection.send.has_been_called_with(\n-            '<modify_user user_id=\"u1\">'\n-            '<ifaces allow=\"1\">foo,bar</ifaces>'\n-            '</modify_user>'\n-        )\n+            user_id='u5', ifaces=['foo', 'bar'], ifaces_allow=True\n+        )\n+\n+        self.connection.send.has_been_called_with('<modify_user user_id=\"u5\"/>')\n+\n+        # pylint: disable=line-too-long\n+        deprecation_calls = [\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call(\n+                'The ifaces_allow parameter has been removed in GMP version 2110'\n+            ),\n+            call('The ifaces parameter has been removed in GMP version 2110'),\n+            call(\n+                'The ifaces_allow parameter has been removed in GMP version 2110'\n+            ),\n+        ]\n+        # pylint: enable=line-too-long\n+        deprecation_mock.assert_has_calls(deprecation_calls)"
    }
]
