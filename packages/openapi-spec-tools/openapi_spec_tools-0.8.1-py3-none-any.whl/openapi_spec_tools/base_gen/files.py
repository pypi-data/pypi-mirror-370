"""File utilities for use in CLI stuff."""
import logging
from datetime import datetime
from typing import Any

import typer

from openapi_spec_tools.utils import open_oas

DEFAULT_COPYRIGHT = f"""\
# Copyright {datetime.now().year}
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#
"""

_copyright = DEFAULT_COPYRIGHT


def set_copyright(copyright: str = DEFAULT_COPYRIGHT) -> None:
    """Set the global copyright value."""
    global _copyright  # noqa: PLW0603
    _copyright = copyright


def copyright() -> str:
    """Get the global copyright value."""
    return _copyright


def open_oas_with_error_handling(filename: str, logger: logging.Logger) -> Any:
    """Perform error handling around opening an OpenAPI spec.

    Avoids the standard Typer error handling that is quite verbose.
    """
    try:
        starttime = datetime.now()
        data = open_oas(filename)
        delta = datetime.now() - starttime
        logger.info(f"Opening {filename} took {delta.total_seconds()} seconds")
        return data
    except FileNotFoundError:
        message = f"failed to find {filename}"
    except Exception as ex:
        message = f"unable to parse {filename}: {ex}"

    typer.echo(f"ERROR: {message}")
    raise typer.Exit(1)


def copy_and_update(src_filename: str, dst_filename: str, replacements: dict[str, str]):
    """Copy text from src to dst with replacements of current package name to the supplied value."""
    with (
        open(src_filename, "r", encoding="utf-8", newline="\n") as src_fp,
        open(dst_filename, "w", encoding="utf-8", newline="\n") as dst_fp,
    ):
        # NOTE: ignore the shebangs for now... not used to copy over executable files
        dst_fp.write(copyright())
        for line in src_fp.readlines():
            updated = line
            for old, new in replacements.items():
                updated = updated.replace(old, new)
            dst_fp.write(updated)


