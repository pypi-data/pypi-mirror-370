Metadata-Version: 2.4
Name: claude-mpm
Version: 4.0.3
Summary: Claude Multi-agent Project Manager - Clean orchestration with ticket management
Home-page: https://github.com/bobmatnyc/claude-mpm
Author: Claude MPM Team
Author-email: bob@matsuoka.com
License: MIT
Keywords: claude,orchestration,multi-agent,ticket-management
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ai-trackdown-pytools>=1.4.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: click>=8.0.0
Requires-Dist: pexpect>=4.8.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: requests>=2.25.0
Requires-Dist: flask>=3.0.0
Requires-Dist: flask-cors>=4.0.0
Requires-Dist: watchdog>=3.0.0
Requires-Dist: tree-sitter>=0.21.0
Requires-Dist: python-socketio>=5.11.0
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: aiohttp-cors<0.8.0,>=0.7.0
Requires-Dist: python-engineio>=4.8.0
Requires-Dist: python-frontmatter>=1.0.0
Requires-Dist: mistune>=3.0.0
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: mcp>=0.1.0
Requires-Dist: ijson>=3.2.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=7.2.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Requires-Dist: sphinx-autobuild>=2021.3.14; extra == "docs"
Provides-Extra: monitor
Provides-Extra: agents
Requires-Dist: bandit>=1.7.5; extra == "agents"
Requires-Dist: black>=23.0.0; extra == "agents"
Requires-Dist: commitizen>=3.13.0; extra == "agents"
Requires-Dist: dask>=2023.12.0; extra == "agents"
Requires-Dist: detect-secrets>=1.4.0; extra == "agents"
Requires-Dist: diagrams>=0.23.0; extra == "agents"
Requires-Dist: docstring-parser>=0.15.0; extra == "agents"
Requires-Dist: faker>=20.0.0; extra == "agents"
Requires-Dist: gitlint>=0.19.0; extra == "agents"
Requires-Dist: gitpython>=3.1.40; extra == "agents"
Requires-Dist: hypothesis>=6.92.0; extra == "agents"
Requires-Dist: isort>=5.12.0; extra == "agents"
Requires-Dist: lizard>=1.17.0; extra == "agents"
Requires-Dist: mermaid-py>=0.2.0; extra == "agents"
Requires-Dist: mkdocs>=1.5.0; extra == "agents"
Requires-Dist: mutmut>=2.4.0; extra == "agents"
Requires-Dist: mypy>=1.8.0; extra == "agents"
Requires-Dist: pandas>=2.1.0; extra == "agents"
Requires-Dist: pre-commit>=3.5.0; extra == "agents"
Requires-Dist: prometheus-client>=0.19.0; extra == "agents"
Requires-Dist: pydoc-markdown>=4.8.0; extra == "agents"
Requires-Dist: pydriller>=2.5.0; extra == "agents"
Requires-Dist: pygments>=2.17.0; extra == "agents"
Requires-Dist: pytest>=7.4.0; extra == "agents"
Requires-Dist: pytest-benchmark>=4.0.0; extra == "agents"
Requires-Dist: pytest-cov>=4.1.0; extra == "agents"
Requires-Dist: radon>=6.0.0; extra == "agents"
Requires-Dist: rope>=1.11.0; extra == "agents"
Requires-Dist: sphinx>=7.2.0; extra == "agents"
Requires-Dist: sqlalchemy>=2.0.0; extra == "agents"
Requires-Dist: sqlparse>=0.4.4; extra == "agents"
Requires-Dist: tree-sitter>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-python>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-javascript>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-typescript>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-go>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-rust>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-java>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-cpp>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-c>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-ruby>=0.21.0; extra == "agents"
Requires-Dist: tree-sitter-php>=0.21.0; extra == "agents"
Dynamic: author-email
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Claude MPM - Multi-Agent Project Manager

A powerful orchestration framework for Claude Code that enables multi-agent workflows, session management, and real-time monitoring through an intuitive interface.

> **Quick Start**: See [QUICKSTART.md](QUICKSTART.md) to get running in 5 minutes!

## Features

- ü§ñ **Multi-Agent System**: Automatically delegates tasks to specialized agents (PM, Research, Engineer, QA, Documentation, Security, Ops, Data Engineer, Test Integration, Version Control)
- üß† **Agent Memory System**: Persistent learning with project-specific knowledge retention
- üîÑ **Session Management**: Resume previous sessions with `--resume` 
- üìä **Real-Time Monitoring**: Live dashboard with `--monitor` flag
- üõ°Ô∏è **Memory Guardian (Experimental)**: Automatic memory monitoring and intelligent restarts to prevent crashes
- üìÅ **Multi-Project Support**: Per-session working directories
- üîç **Git Integration**: View diffs and track changes across projects
- üéØ **Smart Task Orchestration**: PM agent intelligently routes work to specialists

## Quick Installation

```bash
pip install claude-mpm
```

**That's it!** See [QUICKSTART.md](QUICKSTART.md) for immediate usage or [docs/user/installation.md](docs/user/installation.md) for advanced options.

## Quick Usage

```bash
# Start interactive mode (recommended)
claude-mpm

# Start with monitoring dashboard
claude-mpm run --monitor

# Start with memory protection (prevents crashes from large conversations)
claude-mpm run-guarded
```

See [QUICKSTART.md](QUICKSTART.md) for complete usage examples.


## Architecture

Claude MPM v3.8.2+ features a **modern service-oriented architecture** with interface-based design, dependency injection, and intelligent caching for 50-80% performance improvements.

See [docs/ARCHITECTURE.md](docs/ARCHITECTURE.md) for detailed architecture information.

## Key Capabilities

### Multi-Agent Orchestration
The PM agent automatically delegates work to specialized agents including Research, Engineer, QA, Documentation, Security, Ops, Data Engineer, Test Integration, and Version Control.

### Agent Memory System
Agents learn project-specific patterns and remember insights across sessions. Initialize with `claude-mpm memory init`.

### Memory Guardian System (Experimental)
**‚ö†Ô∏è Beta Feature** - Prevents memory-related crashes through intelligent monitoring and automatic restarts with state preservation.

```bash
# Start with memory protection (recommended for long sessions)
claude-mpm run-guarded --accept-experimental

# Custom memory threshold for your system
claude-mpm run-guarded --memory-threshold 16000 --accept-experimental  # 16GB
```

**Why Memory Guardian?** Large conversation histories can consume 2GB+ of memory, causing system instability. The Memory Guardian monitors memory usage and performs controlled restarts while preserving your conversation context and work progress.

**Note:** This is an experimental feature in beta. Use `--accept-experimental` to suppress warnings.

### Real-Time Monitoring
The `--monitor` flag opens a web dashboard showing live agent activity, file operations, and session management.

See [docs/MEMORY.md](docs/MEMORY.md), [docs/USER_GUIDE_MEMORY_GUARDIAN.md](docs/USER_GUIDE_MEMORY_GUARDIAN.md), and [docs/developer/11-dashboard/README.md](docs/developer/11-dashboard/README.md) for details.


## Documentation

### User Documentation
- **[Quick Start Guide](QUICKSTART.md)** - Get running in 5 minutes
- **[Installation Guide](docs/user/installation.md)** - Complete installation options
- **[User Guide](docs/user/)** - Detailed usage documentation
- **[Memory System](docs/MEMORY.md)** - Agent memory documentation
- **[Memory Guardian Guide](docs/USER_GUIDE_MEMORY_GUARDIAN.md)** - Comprehensive memory protection documentation
- **[Troubleshooting](docs/user/troubleshooting.md)** - Common issues and solutions

### Developer Documentation
- **[Architecture Overview](docs/ARCHITECTURE.md)** - Service-oriented architecture and design
- **[API Reference](docs/api/)** - Complete API documentation with Sphinx
- **[Service Layer Guide](docs/developer/SERVICES.md)** - Service interfaces and implementations
- **[Memory Guardian Technical](docs/MEMORY_GUARDIAN_TECHNICAL.md)** - Technical architecture and implementation details
- **[Memory Guardian Configuration](docs/MEMORY_GUARDIAN_CONFIG.md)** - Complete configuration reference
- **[Performance Guide](docs/PERFORMANCE.md)** - Optimization and caching strategies
- **[Security Guide](docs/SECURITY.md)** - Security framework and best practices
- **[Testing Guide](docs/TESTING.md)** - Testing patterns and strategies
- **[Migration Guide](docs/MIGRATION.md)** - Upgrading from previous versions
- **[Developer Guide](docs/developer/)** - Comprehensive development documentation

### API Documentation
Comprehensive API documentation is available at [docs/api/](docs/api/) - build with `make html` in that directory.

## Recent Updates (v3.8.2)

**Major Architecture Refactoring (TSK-0053)**: Complete service-oriented redesign with 50-80% performance improvements, enhanced security, and interface-based design.

**Process Management Improvements**: Enhanced hook system reliability with automatic process cleanup, timeout protection, and orphan process monitoring to prevent resource leaks.

See [CHANGELOG.md](CHANGELOG.md) for full history and [docs/MIGRATION.md](docs/MIGRATION.md) for upgrade instructions.

## Development

### Quick Development Setup
```bash
# Complete development setup with code formatting and quality tools
make dev-complete

# Or step by step:
make setup-dev          # Install in development mode
make setup-pre-commit    # Set up automated code formatting
```

### Code Quality & Formatting
The project uses automated code formatting and quality checks:
- **Black** for code formatting
- **isort** for import sorting
- **flake8** for linting
- **mypy** for type checking
- **Pre-commit hooks** for automatic enforcement

See [docs/developer/CODE_FORMATTING.md](docs/developer/CODE_FORMATTING.md) for details.

### Contributing
Contributions are welcome! Please see our [project structure guide](docs/STRUCTURE.md) and follow the established patterns.

**Development Workflow**:
1. Run `make dev-complete` to set up your environment
2. Code formatting happens automatically on commit
3. All code must pass quality checks before merging

### Project Structure
See [docs/STRUCTURE.md](docs/STRUCTURE.md) for codebase organization.

### License
MIT License - see [LICENSE](LICENSE) file.

## Credits

- Based on [claude-multiagent-pm](https://github.com/kfsone/claude-multiagent-pm)
- Enhanced for [Claude Code](https://docs.anthropic.com/en/docs/claude-code) integration
- Built with ‚ù§Ô∏è by the Claude MPM community
