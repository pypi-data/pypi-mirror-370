#!/bin/bash
set -eo pipefail

function follow_link {
  python -c 'import os,sys; print(os.path.realpath(sys.argv[1]))' $1
}

OUTPUT="medaka"
THREADS=1

medaka_version=$(medaka --version)
modeldata=()
while read -r line; do
    modeldata+=("$line")
done < <(medaka tools list_models)
# 0: Available models
# 1: default consensus model
# 2: default variant model
MODEL=${modeldata[2]##* }
MODELS=$(
    echo ${modeldata[0]} | sed 's/Available://' | python -c \
        "import sys; import itertools; mods=[f'{x[:-1]}' for x in sys.stdin.readline().split() if 'variant' in x]; print(' '.join(mods))"
)

BATCH_SIZE=100
ANNOT_OPTS=""
FORCE=false

iflag=false
rflag=false
xflag=false
mflag=false

usage="
${medaka_version}
------------

Haploid variant calling via neural networks.

$(basename "$0") [-h] -i <fastx> -r <fasta>

    -h  show this help text.
    -i  fastx input basecalls (required).
    -r  fasta reference sequence (required).
    -o  output folder (default: medaka).
    -m  medaka model, (default: ${MODEL}).
        Choices: $MODELS.
        If not provided, and automatic choice will be attempted based on
        the contents of the input file.
    -s  Perform read realignment when annotating variants.
    -f  Force overwrite of outputs (default will reuse existing outputs).
    -x  Force recreation of alignment index.
    -t  number of threads with which to create features (default: 1).
    -b  batchsize, controls memory use (default: ${BATCH_SIZE})."


while getopts ':hi:r:o:m:sfxt:b:' option; do
  case "$option" in
    h  ) echo "$usage" >&2; exit;;
    i  ) iflag=true; BASECALLS=$(follow_link $OPTARG);;
    r  ) rflag=true; REFERENCE=$(follow_link $OPTARG);;
    o  ) OUTPUT=$OPTARG;;
    m  ) mflag=true; MODEL=$(medaka tools resolve_model --model $OPTARG);;
    s  ) ANNOT_OPTS="--dpsp";;
    f  ) FORCE=true;;
    x  ) xflag=true;;
    t  ) THREADS=$OPTARG;;
    b  ) BATCH_SIZE=$OPTARG;;
    \? ) echo "Invalid option: -${OPTARG}." >&2; exit 1;;
    :  ) echo "Option -$OPTARG requires an argument." >&2; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if ! $iflag; then
  echo "$usage" >&2;
  echo "" >&2;
  echo "-i must be specified." >&2;
  exit 1;
fi

if ! $rflag; then
  echo "$usage" >&2;
  echo "" >&2;
  echo "-r must be specified." >&2;
  exit 1;
fi

rleflag=$(medaka tools is_rle_model --model $MODEL)
[[ $rleflag == "True" ]] && rleflag=true || rleflag=false
if $rleflag; then
    echo "Given model is unsupported for variant calling: $MODEL"
    exit 1
fi

if ! $mflag; then
    echo "Attempting to automatically select model version."
    model=$(medaka tools resolve_model --auto_model variant "${BASECALLS}" 2>/dev/null || true)
    if [[ "${model}" == "" ]] ; then
        echo "WARNING: Failed to detect a model version, will use default: '${MODEL}'"
    else
        echo "SUCCESS: Automatic model selection chose model: '${model}'"
        MODEL=${model}
    fi
fi

if [[ "${MODEL}" != *"variant"* ]]; then
  echo "WARNING: The model '${MODEL}' is not recommended for use with this program."
  echo "         Please select a model named with 'variant' in its name. It is"
  echo "         preferable to use a model with the 'variant' and 'prom' tags for "
  echo "         MinION/GridION data over one with the 'min' tag but not 'variant'."
fi

echo "Checking program versions"
echo "This is ${medaka_version}"
medaka_version_report || exit 1

if [[ ! -e "${OUTPUT}" ]]; then
  mkdir -p "${OUTPUT}"
elif ${FORCE}; then
  echo "Warning: Output will be overwritten (-f flag)"
else
  echo "Warning: Output ${OUTPUT} already exists, may use old results."
fi

cd ${OUTPUT}


CALLS2REF=calls_to_ref
ALIGN_PARAMS=$(medaka tools get_alignment_params --model "${MODEL}")
if $xflag; then
    ALIGN_PARAMS="-f ${ALIGN_PARAMS}"
fi
if [[ ! -e "${CALLS2REF}.bam" ]] || ${FORCE}; then
    echo "Aligning basecalls to reference"
    mini_align -i "${BASECALLS}" -r "${REFERENCE}" -p "${CALLS2REF}" -t "${THREADS}" -m ${ALIGN_PARAMS} \
      || { echo "Failed to run alignment of reads to draft." ; exit 1; }
    FORCE=true
else
    echo "Not aligning basecalls to reference, ${CALLS2REF}.bam exists."
fi

CONSENSUSPROBS=consensus_probs.hdf
if [[ ! -e "${CONSENSUSPROBS}" ]] || ${FORCE}; then
    echo "Running medaka inference"
    rm -rf "${CONSENSUSPROBS}"
    medaka inference "${CALLS2REF}.bam" "${CONSENSUSPROBS}" \
        --model "${MODEL}" --batch_size "${BATCH_SIZE}" --threads "${THREADS}" \
        || { echo "Failed to run medaka inference."; exit 1; }
    FORCE=true
else
    echo "Not running medaka inference, ${CONSENSUSPROBS} exists."
fi

VARIANTS=medaka.vcf
if [[ ! -e "${VARIANTS}" ]] || ${FORCE}; then
    medaka vcf "${CONSENSUSPROBS}" "${REFERENCE}" "${VARIANTS}" \
        || { echo "Failed to create variants."; exit 1; }
    FORCE=true
else
    echo "Not calling variants, ${OUTPUT}/${VARIANTS} exists."
fi

VARIANTS_SORTED=medaka.sorted.vcf
if [[ ! -e "${VARIANTS_SORTED}" ]] || ${FORCE}; then
    bcftools sort "${VARIANTS}" -o "${VARIANTS_SORTED}"  \
        || { echo "Failed to sort variants."; exit 1; }
    FORCE=true
else
    echo "Not sorting variants, ${OUTPUT}/${VARIANTS_SORTED} exists."
fi

ANNOTATED=medaka.annotated.vcf
if [[ ! -e "${ANNOTATED}" ]] || ${FORCE}; then
    medaka tools annotate ${ANNOT_OPTS} "${VARIANTS_SORTED}" "${REFERENCE}" "${CALLS2REF}.bam" "${ANNOTATED}" \
        || { echo "Failed to annotate variants."; exit 1; }
    echo "Variants written to ${OUTPUT}/${ANNOTATED}, have a nice day."
    FORCE=true
else
    echo "Variants ${OUTPUT}/${ANNOTATED} exists, remove ${OUTPUT} and try again."
fi
