[build-system]
requires = ["setuptools", "numpy", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyfhiaims"
authors = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
maintainers = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
description = "An FHI-aims official Python package"
readme = "README.md"
requires-python = ">=3.10"
keywords = ['electronic structure', 'FHI-aims']
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy",
    "scipy>=1.1.1",
    "monty>=2024.10.21",
    "pyyaml",
]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
    "pyyaml",
    "pytest>=6.0",
    "pytest-xdist>=1.31",
    "pytest-cov>=2.8",
]
dev = [
    "pre-commit>=2.12.1",
]

[project.urls]
repository = "https://gitlab.com/FHI-aims-club/pyfhiaims/"
#homepage="https://vibes-developers.gitlab.io/vibes/"
#documentation="https://vibes-developers.gitlab.io/vibes/Documentation/0_intro"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
namespaces = true  # to disable scanning PEP 420 namespaces (true by default)

[tool.setuptools.dynamic]
version = {attr = "pyfhiaims.__version__"}

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.black]
target-version = ['py311']

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"
filterwarnings = ["ignore"]

[tool.ruff]
target-version = "py311"
lint.select = ["ALL"]
lint.ignore = [
    # Rule families
    "ANN", # flake8-annotations (not ready, require types for ALL args)
    "ARG", # Check for unused function arguments
    "BLE", # General catch of Exception
    "C90", # Check for functions with a high McCabe complexity
    "COM", # flake8-commas (conflict with line wrapper)
    "CPY", # Missing copyright notice at top of file (need preview mode)
    "EM",  # Format nice error messages
    "ERA", # Check for commented-out code
    "FIX", # Check for FIXME, TODO and other developer notes
    "G",   # Validate logging format strings
    "INP", # Ban PEP-420 implicit namespace packages
    "N",   # PEP8-naming (many var/arg names are intended)
    "PTH", # Prefer pathlib over os.path
    "SLF", # Access "private" class members
    "T20", # Check for print/pprint
    "TD",  # TODO tags related

    # Single rules
    "A005",    # Module shadows a Python standard-library module
    "B023",    # Function definition does not bind loop variable
    "B904",    # Within an except clause, raise exceptions with ...
    "C408",    # unnecessary-collection-call
    "D105",    # Missing docstring in magic method
    "D205",    # One blank line required between summary line and description
    "D213",    # Multi-line docstring summary should start at the first line
    "D203",    # Should have blank lines before classes
    "DTZ007",  # Don't care about timezones
    "E741",    # Variables may seem ambiguous, but aren't (quantum number lables)
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function
    "PD011",   # (A lot of false positive on non-Pandas objects)
    "PERF203", # Use of try-except in for/while loop
    "PERF401", # Replace "for" loops with list comprehension
    "PLC0415", # `import` should be at the top-level of a file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR1702", # Too many nested blocks
    "PLR2004", # Magic-value-comparison TODO: fix these
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PT013",   # Incorrect import of pytest
    "RUF002",  # The docstrings contain information from the manual
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "S101",    # Allow assert statments
    "S110",    # Log for try-except-pass
    "S112",    # Log for try-except-continue
    "S311",    # Use random module for cryptographic purposes
    "S314",    # Replace xml with defusedxml to avoid XML attacks
    "S603",    # Check source for use of "subprocess" call
    "S607",    # Start process with relative path
    "SIM105",  # Use contextlib.suppress() instead of try-except-pass
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Check for return statements in try blocks
    "TRY301",  # Check for raise statements within try blocks
]
lint.isort.known-first-party = ["pyfhiaims"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"pyfhiaims/__init__.py" = ["F401"]
# "pyfhiaims/outputs/*" = ["D", "RUF", "E501", "DTZ007", "F401", "SIM115", "PLR1704"]"
"pyfhiaims/external_interfaces/*" = ["D", "B", "C", "SIM118", "SIM108", "E501", "ISC003", "E501", "F401"]

