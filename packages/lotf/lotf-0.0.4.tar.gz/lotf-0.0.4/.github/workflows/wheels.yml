# CI workflow to build Python wheels and source distribution for PyPI release
# Builds cross-platform wheels using cibuildwheel and uploads to PyPI on release
name: Release

on:
  # push:               # Trigger on push for testing
  workflow_dispatch:  # Allow manual triggering for testing
  release:
    types:
      - published     # Build and upload to PyPI only when GitHub release is published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    # Check out repository with submodules for complete source
    - uses: actions/checkout@v5
      with:
        submodules: true

    # Build source distribution using modern build tool
    - name: Build SDist
      run: pipx run build --sdist

    # Validate package metadata for PyPI compliance
    - name: Check metadata
      run: pipx run twine check dist/*

    # Upload source distribution as artifact
    - uses: actions/upload-artifact@v4
      with:
        name: dist-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Build all platforms even if one fails
      matrix:
        # Runners https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#standard-github-hosted-runners-for-public-repositories
        # - ubuntu-latest: ubuntu x64
        # - ubuntu-24.04-arm: ubuntu arm64
        # - macos-13: mac intel
        # - macos-14: mac arm64
        # - windows-latest: windows x64
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-14, windows-latest]

    steps:
    # Check out repository with submodules for C++ extensions
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Get latest Boost release
      id: boost
      uses: actions/github-script@v7
      with:
        script: |
          const { data } = await github.rest.repos.getLatestRelease({
            owner: 'boostorg',
            repo: 'boost'
          });
          const version = data.tag_name.replace(/^boost-/, '');
          const versionUnderscore = version.replace(/\./g, '_');
          core.setOutput('version', version);
          core.setOutput('tar_url', `https://archives.boost.io/release/${version}/source/boost_${versionUnderscore}.tar.bz2`);

    # Build wheels for multiple Python versions and architectures
    - uses: pypa/cibuildwheel@v3.1
      env:

        # Linux: Install latest Boost headers
        CIBW_BEFORE_ALL_LINUX: |
          echo "Installing Boost ${{ steps.boost.outputs.version }}"
          curl -L "${{ steps.boost.outputs.tar_url }}" | tar xj --strip-components=1
          cp -r boost /usr/local/include/
          echo "Boost installation complete"

        # macOS: Install latest Boost headers via Homebrew
        CIBW_BEFORE_ALL_MACOS: |
          echo "Installing Boost via Homebrew"
          brew install boost
          echo "Boost installation complete"
        MACOSX_DEPLOYMENT_TARGET: "10.15"

        # Windows: Install Boost via pre-installed vcpkg
        CIBW_BEFORE_ALL_WINDOWS: >
          echo Installing Boost unordered via vcpkg &&
          vcpkg install boost-unordered:x64-windows &&
          echo Checking Boost installation &&
          if exist "%VCPKG_INSTALLATION_ROOT%\installed\x64-windows\include\boost\unordered\unordered_flat_map.hpp" (echo Boost unordered_flat_map found) else (echo WARNING: Boost unordered_flat_map NOT found) &&
          echo Boost installation complete
        CIBW_TEST_COMMAND: "python -c \"import lotf; backend_info = lotf.backend(); print('=== Backend Information ==='); print(backend_info); assert 'boost::unordered_flat_map/set' in backend_info, f'Expected boost backend but got: {backend_info}'\""


    # Ensure build process didn't modify source files
    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    # Upload built wheels as artifacts
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        path: wheelhouse/*.whl
        name: dist-${{ matrix.os }}


  # Upload to PyPI only when a GitHub release is published
  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    # Enable PyPI trusted publishing (no API token needed)
    permissions:
      id-token: write

    steps:
    # Download all built artifacts (wheels and sdist)
    - uses: actions/download-artifact@v5
      with:
        path: dist
        pattern: dist-*
        merge-multiple: true

    # Upload to PyPI using trusted publishing (modern approach)
    - uses: pypa/gh-action-pypi-publish@release/v1
