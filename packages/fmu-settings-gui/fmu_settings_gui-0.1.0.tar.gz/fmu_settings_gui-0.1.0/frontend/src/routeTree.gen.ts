/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as MappingsIndexImport } from "./routes/mappings/index";
import { Route as GeneralIndexImport } from "./routes/general/index";
import { Route as DirectoryIndexImport } from "./routes/directory/index";
import { Route as UserKeysImport } from "./routes/user/keys";
import { Route as GeneralSmdaImport } from "./routes/general/smda";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const MappingsIndexRoute = MappingsIndexImport.update({
  id: "/mappings/",
  path: "/mappings/",
  getParentRoute: () => rootRoute,
} as any);

const GeneralIndexRoute = GeneralIndexImport.update({
  id: "/general/",
  path: "/general/",
  getParentRoute: () => rootRoute,
} as any);

const DirectoryIndexRoute = DirectoryIndexImport.update({
  id: "/directory/",
  path: "/directory/",
  getParentRoute: () => rootRoute,
} as any);

const UserKeysRoute = UserKeysImport.update({
  id: "/user/keys",
  path: "/user/keys",
  getParentRoute: () => rootRoute,
} as any);

const GeneralSmdaRoute = GeneralSmdaImport.update({
  id: "/general/smda",
  path: "/general/smda",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/general/smda": {
      id: "/general/smda";
      path: "/general/smda";
      fullPath: "/general/smda";
      preLoaderRoute: typeof GeneralSmdaImport;
      parentRoute: typeof rootRoute;
    };
    "/user/keys": {
      id: "/user/keys";
      path: "/user/keys";
      fullPath: "/user/keys";
      preLoaderRoute: typeof UserKeysImport;
      parentRoute: typeof rootRoute;
    };
    "/directory/": {
      id: "/directory/";
      path: "/directory";
      fullPath: "/directory";
      preLoaderRoute: typeof DirectoryIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/general/": {
      id: "/general/";
      path: "/general";
      fullPath: "/general";
      preLoaderRoute: typeof GeneralIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/mappings/": {
      id: "/mappings/";
      path: "/mappings";
      fullPath: "/mappings";
      preLoaderRoute: typeof MappingsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/general/smda": typeof GeneralSmdaRoute;
  "/user/keys": typeof UserKeysRoute;
  "/directory": typeof DirectoryIndexRoute;
  "/general": typeof GeneralIndexRoute;
  "/mappings": typeof MappingsIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/general/smda": typeof GeneralSmdaRoute;
  "/user/keys": typeof UserKeysRoute;
  "/directory": typeof DirectoryIndexRoute;
  "/general": typeof GeneralIndexRoute;
  "/mappings": typeof MappingsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/general/smda": typeof GeneralSmdaRoute;
  "/user/keys": typeof UserKeysRoute;
  "/directory/": typeof DirectoryIndexRoute;
  "/general/": typeof GeneralIndexRoute;
  "/mappings/": typeof MappingsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/general/smda"
    | "/user/keys"
    | "/directory"
    | "/general"
    | "/mappings";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/general/smda"
    | "/user/keys"
    | "/directory"
    | "/general"
    | "/mappings";
  id:
    | "__root__"
    | "/"
    | "/general/smda"
    | "/user/keys"
    | "/directory/"
    | "/general/"
    | "/mappings/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  GeneralSmdaRoute: typeof GeneralSmdaRoute;
  UserKeysRoute: typeof UserKeysRoute;
  DirectoryIndexRoute: typeof DirectoryIndexRoute;
  GeneralIndexRoute: typeof GeneralIndexRoute;
  MappingsIndexRoute: typeof MappingsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GeneralSmdaRoute: GeneralSmdaRoute,
  UserKeysRoute: UserKeysRoute,
  DirectoryIndexRoute: DirectoryIndexRoute,
  GeneralIndexRoute: GeneralIndexRoute,
  MappingsIndexRoute: MappingsIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/general/smda",
        "/user/keys",
        "/directory/",
        "/general/",
        "/mappings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/general/smda": {
      "filePath": "general/smda.tsx"
    },
    "/user/keys": {
      "filePath": "user/keys.tsx"
    },
    "/directory/": {
      "filePath": "directory/index.tsx"
    },
    "/general/": {
      "filePath": "general/index.tsx"
    },
    "/mappings/": {
      "filePath": "mappings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
