// This file is auto-generated by @hey-api/openapi-ts

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyReadable = {
    id: string;
};

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyWritable = {
    id: string;
    key: string;
};

/**
 * A key-value pair for a known and supported access scope.
 */
export type AccessTokenReadable = {
    id: string;
};

/**
 * A key-value pair for a known and supported access scope.
 */
export type AccessTokenWritable = {
    id: string;
    key: string;
};

/**
 * Contains the coordinate system known to SMDA.
 */
export type CoordinateSystem = {
    identifier: string;
    uuid: string;
};

/**
 * A single country in the list of countries known to SMDA.
 */
export type CountryItem = {
    identifier: string;
    uuid: string;
};

/**
 * A single discovery in the list of discoveries known to SMDA.
 */
export type DiscoveryItem = {
    short_identifier: string;
    uuid: string;
};

/**
 * Path where a .fmu directory may exist.
 */
export type FmuDirPath = {
    path: string;
};

/**
 * Information returned when 'opening' an FMU Directory.
 */
export type FmuProject = {
    path: string;
    project_dir_name: string;
    config: ProjectConfig;
};

/**
 * A single field in the list of fields known to SMDA.
 */
export type FieldItem = {
    identifier: string;
    uuid: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * The ``masterdata`` block contains information related to masterdata.
 *
 * Currently, SMDA holds the masterdata.
 */
export type Masterdata = {
    smda?: Smda | null;
};

/**
 * A generic message to return to the GUI.
 */
export type Message = {
    message: string;
};

/**
 * Returns "ok" if the route is functioning correctly.
 */
export type Ok = {
    status?: 'ok';
};

/**
 * The configuration file in a .fmu directory.
 *
 * Stored as config.json.
 */
export type ProjectConfig = {
    version: string;
    created_at: string;
    created_by: string;
    masterdata: Masterdata;
};

/**
 * Contains SMDA-related attributes.
 */
export type Smda = {
    coordinate_system: CoordinateSystem;
    country: Array<CountryItem>;
    discovery: Array<DiscoveryItem>;
    field: Array<FieldItem>;
    stratigraphic_column: StratigraphicColumn;
};

/**
 * An identifier for a field to be searched for.
 */
export type SmdaField = {
    identifier: string;
};

/**
 * The search result of a field identifier result.
 */
export type SmdaFieldSearchResult = {
    hits: number;
    pages: number;
    results: Array<SmdaFieldUuid>;
};

/**
 * Name-UUID identifier for a field as known by SMDA.
 */
export type SmdaFieldUuid = {
    identifier: string;
    uuid: string;
};

/**
 * Contains SMDA-related attributes.
 */
export type SmdaMasterdataResult = {
    field: Array<FieldItem>;
    country: Array<CountryItem>;
    discovery: Array<DiscoveryItem>;
    stratigraphic_columns: Array<StratigraphicColumn>;
    field_coordinate_system: CoordinateSystem;
    coordinate_systems: Array<CoordinateSystem>;
};

/**
 * Contains the stratigraphic column known to SMDA.
 */
export type StratigraphicColumn = {
    identifier: string;
    uuid: string;
};

/**
 * Known API keys stored in a user config.
 */
export type UserApiKeys = {
    smda_subscription?: string | null;
};

/**
 * The configuration file in a $HOME/.fmu directory.
 *
 * Stored as config.json.
 */
export type UserConfig = {
    version: string;
    created_at: string;
    user_api_keys: UserApiKeys;
    recent_directories: Array<string>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ProjectDeleteProjectSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type ProjectDeleteProjectSessionErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type ProjectDeleteProjectSessionError = ProjectDeleteProjectSessionErrors[keyof ProjectDeleteProjectSessionErrors];

export type ProjectDeleteProjectSessionResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ProjectDeleteProjectSessionResponse = ProjectDeleteProjectSessionResponses[keyof ProjectDeleteProjectSessionResponses];

export type ProjectGetProjectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type ProjectGetProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     *
     * The .fmu directory was unable to be found at or above a given path, or
     * the requested path to create a project .fmu directory at does not exist.
     *
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type ProjectGetProjectError = ProjectGetProjectErrors[keyof ProjectGetProjectErrors];

export type ProjectGetProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type ProjectGetProjectResponse = ProjectGetProjectResponses[keyof ProjectGetProjectResponses];

export type ProjectPostProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type ProjectPostProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     *
     * The .fmu directory was unable to be found at or above a given path, or
     * the requested path to create a project .fmu directory at does not exist.
     *
     */
    404: unknown;
    /**
     *
     * A project .fmu directory already exist at a given location, or may
     * possibly not be a directory, i.e. it may be a .fmu file.
     *
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type ProjectPostProjectError = ProjectPostProjectErrors[keyof ProjectPostProjectErrors];

export type ProjectPostProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type ProjectPostProjectResponse = ProjectPostProjectResponses[keyof ProjectPostProjectResponses];

export type ProjectInitProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/init';
};

export type ProjectInitProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     *
     * The .fmu directory was unable to be found at or above a given path, or
     * the requested path to create a project .fmu directory at does not exist.
     *
     */
    404: unknown;
    /**
     *
     * A project .fmu directory already exist at a given location, or may
     * possibly not be a directory, i.e. it may be a .fmu file.
     *
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type ProjectInitProjectError = ProjectInitProjectErrors[keyof ProjectInitProjectErrors];

export type ProjectInitProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type ProjectInitProjectResponse = ProjectInitProjectResponses[keyof ProjectInitProjectResponses];

export type UserGetUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/';
};

export type UserGetUserErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     *
     * The .fmu directory was unable to be found at or above a given path, or
     * the requested path to create a project .fmu directory at does not exist.
     *
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type UserGetUserError = UserGetUserErrors[keyof UserGetUserErrors];

export type UserGetUserResponses = {
    /**
     * Successful Response
     */
    200: UserConfig;
};

export type UserGetUserResponse = UserGetUserResponses[keyof UserGetUserResponses];

export type UserPatchApiKeyData = {
    body: ApiKeyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/user/api_key';
};

export type UserPatchApiKeyErrors = {
    /**
     *
     * Occurs when trying to save a key to an unknown API. An API is unknown
     * if it is not a predefined field in the fmu-settings UserAPIKeys model.
     *
     */
    400: unknown;
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     *
     * The .fmu directory was unable to be found at or above a given path, or
     * the requested path to create a project .fmu directory at does not exist.
     *
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type UserPatchApiKeyError = UserPatchApiKeyErrors[keyof UserPatchApiKeyErrors];

export type UserPatchApiKeyResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UserPatchApiKeyResponse = UserPatchApiKeyResponses[keyof UserPatchApiKeyResponses];

export type SessionCreateSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/session/';
};

export type SessionCreateSessionErrors = {
    /**
     *
     * Occurs when no token or an invalid token is or is not provided
     * with the x-fmu-settings-api header.
     *
     */
    401: unknown;
    /**
     *
     * Will occur if the operating system claims the user does not have
     * permission to create $HOME/.fmu. If returned something very wrong
     * is happening.
     *
     */
    403: unknown;
    /**
     *
     * Occurs in two cases:
     *
     * - When attempting to create a session when one already exists
     * - When trying to create a user .fmu directory, but it already
     * exists. Typically means that .fmu exists as a file.
     *
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type SessionCreateSessionError = SessionCreateSessionErrors[keyof SessionCreateSessionErrors];

export type SessionCreateSessionResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type SessionCreateSessionResponse = SessionCreateSessionResponses[keyof SessionCreateSessionResponses];

export type SessionPatchAccessTokenData = {
    body: AccessTokenWritable;
    path?: never;
    query?: never;
    url: '/api/v1/session/access_token';
};

export type SessionPatchAccessTokenErrors = {
    /**
     *
     * Occurs when trying to save a key to an unknown access scope. An
     * access scope/token is unknown if it is not a predefined field in the
     * the session manager's 'AccessTokens' model.
     *
     */
    400: unknown;
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type SessionPatchAccessTokenError = SessionPatchAccessTokenErrors[keyof SessionPatchAccessTokenErrors];

export type SessionPatchAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type SessionPatchAccessTokenResponse = SessionPatchAccessTokenResponses[keyof SessionPatchAccessTokenResponses];

export type SmdaGetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/smda/health';
};

export type SmdaGetHealthErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type SmdaGetHealthError = SmdaGetHealthErrors[keyof SmdaGetHealthErrors];

export type SmdaGetHealthResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type SmdaGetHealthResponse = SmdaGetHealthResponses[keyof SmdaGetHealthResponses];

export type SmdaPostFieldData = {
    body: SmdaField;
    path?: never;
    query?: never;
    url: '/api/v1/smda/field';
};

export type SmdaPostFieldErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type SmdaPostFieldError = SmdaPostFieldErrors[keyof SmdaPostFieldErrors];

export type SmdaPostFieldResponses = {
    /**
     * Successful Response
     */
    200: SmdaFieldSearchResult;
};

export type SmdaPostFieldResponse = SmdaPostFieldResponses[keyof SmdaPostFieldResponses];

export type SmdaPostMasterdataData = {
    body: Array<SmdaField>;
    path?: never;
    query?: never;
    url: '/api/v1/smda/masterdata';
};

export type SmdaPostMasterdataErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
    /**
     * Occurs when an API call to SMDA times out.
     */
    503: unknown;
};

export type SmdaPostMasterdataError = SmdaPostMasterdataErrors[keyof SmdaPostMasterdataErrors];

export type SmdaPostMasterdataResponses = {
    /**
     * Successful Response
     */
    200: SmdaMasterdataResult;
};

export type SmdaPostMasterdataResponse = SmdaPostMasterdataResponses[keyof SmdaPostMasterdataResponses];

export type HealthV1HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type HealthV1HealthCheckErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type HealthV1HealthCheckError = HealthV1HealthCheckErrors[keyof HealthV1HealthCheckErrors];

export type HealthV1HealthCheckResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type HealthV1HealthCheckResponse = HealthV1HealthCheckResponses[keyof HealthV1HealthCheckResponses];

export type HealthHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type HealthHealthCheckResponse = HealthHealthCheckResponses[keyof HealthHealthCheckResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8001' | (string & {});
};