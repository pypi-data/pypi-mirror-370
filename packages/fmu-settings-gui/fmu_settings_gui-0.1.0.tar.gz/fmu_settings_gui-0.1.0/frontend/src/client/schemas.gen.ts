// This file is auto-generated by @hey-api/openapi-ts

export const APIKeySchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        key: {
            type: 'string',
            format: 'password',
            title: 'Key',
            writeOnly: true
        }
    },
    type: 'object',
    required: ['id', 'key'],
    title: 'APIKey',
    description: 'A key-value pair for a known and supported API.'
} as const;

export const AccessTokenSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        key: {
            type: 'string',
            format: 'password',
            title: 'Key',
            writeOnly: true
        }
    },
    type: 'object',
    required: ['id', 'key'],
    title: 'AccessToken',
    description: 'A key-value pair for a known and supported access scope.'
} as const;

export const CoordinateSystemSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['ST_WGS84_UTM37N_P32637']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid',
            examples: ['15ce3b84-766f-4c93-9050-b154861f9100']
        }
    },
    type: 'object',
    required: ['identifier', 'uuid'],
    title: 'CoordinateSystem',
    description: 'Contains the coordinate system known to SMDA.'
} as const;

export const CountryItemSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['Norway']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid',
            examples: ['15ce3b84-766f-4c93-9050-b154861f9100']
        }
    },
    type: 'object',
    required: ['identifier', 'uuid'],
    title: 'CountryItem',
    description: 'A single country in the list of countries known to SMDA.'
} as const;

export const DiscoveryItemSchema = {
    properties: {
        short_identifier: {
            type: 'string',
            title: 'Short Identifier',
            examples: ['SomeDiscovery']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid',
            examples: ['15ce3b84-766f-4c93-9050-b154861f9100']
        }
    },
    type: 'object',
    required: ['short_identifier', 'uuid'],
    title: 'DiscoveryItem',
    description: 'A single discovery in the list of discoveries known to SMDA.'
} as const;

export const FMUDirPathSchema = {
    properties: {
        path: {
            type: 'string',
            format: 'path',
            title: 'Path',
            examples: ['/path/to/project.2038.02.02']
        }
    },
    type: 'object',
    required: ['path'],
    title: 'FMUDirPath',
    description: 'Path where a .fmu directory may exist.'
} as const;

export const FMUProjectSchema = {
    properties: {
        path: {
            type: 'string',
            format: 'path',
            title: 'Path',
            examples: ['/path/to/project.2038.02.02']
        },
        project_dir_name: {
            type: 'string',
            title: 'Project Dir Name',
            examples: ['project.2038.02.02']
        },
        config: {
            '$ref': '#/components/schemas/ProjectConfig'
        }
    },
    type: 'object',
    required: ['path', 'project_dir_name', 'config'],
    title: 'FMUProject',
    description: "Information returned when 'opening' an FMU Directory."
} as const;

export const FieldItemSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['OseFax']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid',
            examples: ['15ce3b84-766f-4c93-9050-b154861f9100']
        }
    },
    type: 'object',
    required: ['identifier', 'uuid'],
    title: 'FieldItem',
    description: 'A single field in the list of fields known to SMDA.'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MasterdataSchema = {
    properties: {
        smda: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Smda'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'Masterdata',
    description: `The \`\`masterdata\`\` block contains information related to masterdata.

Currently, SMDA holds the masterdata.`
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message',
    description: 'A generic message to return to the GUI.'
} as const;

export const OkSchema = {
    properties: {
        status: {
            type: 'string',
            const: 'ok',
            title: 'Status',
            default: 'ok'
        }
    },
    type: 'object',
    title: 'Ok',
    description: 'Returns "ok" if the route is functioning correctly.'
} as const;

export const ProjectConfigSchema = {
    properties: {
        version: {
            type: 'string',
            pattern: '(\\d+(\\.\\d+){0,2}|\\d+\\.\\d+\\.[a-z0-9]+\\+[a-z0-9.]+)',
            title: 'Version'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        created_by: {
            type: 'string',
            title: 'Created By'
        },
        masterdata: {
            '$ref': '#/components/schemas/Masterdata'
        }
    },
    type: 'object',
    required: ['version', 'created_at', 'created_by', 'masterdata'],
    title: 'ProjectConfig',
    description: `The configuration file in a .fmu directory.

Stored as config.json.`
} as const;

export const SmdaSchema = {
    properties: {
        coordinate_system: {
            '$ref': '#/components/schemas/CoordinateSystem'
        },
        country: {
            items: {
                '$ref': '#/components/schemas/CountryItem'
            },
            type: 'array',
            title: 'Country'
        },
        discovery: {
            items: {
                '$ref': '#/components/schemas/DiscoveryItem'
            },
            type: 'array',
            title: 'Discovery'
        },
        field: {
            items: {
                '$ref': '#/components/schemas/FieldItem'
            },
            type: 'array',
            title: 'Field'
        },
        stratigraphic_column: {
            '$ref': '#/components/schemas/StratigraphicColumn'
        }
    },
    type: 'object',
    required: ['coordinate_system', 'country', 'discovery', 'field', 'stratigraphic_column'],
    title: 'Smda',
    description: 'Contains SMDA-related attributes.'
} as const;

export const SmdaFieldSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['TROLL']
        }
    },
    type: 'object',
    required: ['identifier'],
    title: 'SmdaField',
    description: 'An identifier for a field to be searched for.'
} as const;

export const SmdaFieldSearchResultSchema = {
    properties: {
        hits: {
            type: 'integer',
            title: 'Hits'
        },
        pages: {
            type: 'integer',
            title: 'Pages'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/SmdaFieldUUID'
            },
            type: 'array',
            title: 'Results'
        }
    },
    type: 'object',
    required: ['hits', 'pages', 'results'],
    title: 'SmdaFieldSearchResult',
    description: 'The search result of a field identifier result.'
} as const;

export const SmdaFieldUUIDSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['TROLL']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid'
        }
    },
    type: 'object',
    required: ['identifier', 'uuid'],
    title: 'SmdaFieldUUID',
    description: 'Name-UUID identifier for a field as known by SMDA.'
} as const;

export const SmdaMasterdataResultSchema = {
    properties: {
        field: {
            items: {
                '$ref': '#/components/schemas/FieldItem'
            },
            type: 'array',
            title: 'Field'
        },
        country: {
            items: {
                '$ref': '#/components/schemas/CountryItem'
            },
            type: 'array',
            title: 'Country'
        },
        discovery: {
            items: {
                '$ref': '#/components/schemas/DiscoveryItem'
            },
            type: 'array',
            title: 'Discovery'
        },
        stratigraphic_columns: {
            items: {
                '$ref': '#/components/schemas/StratigraphicColumn'
            },
            type: 'array',
            title: 'Stratigraphic Columns'
        },
        field_coordinate_system: {
            '$ref': '#/components/schemas/CoordinateSystem'
        },
        coordinate_systems: {
            items: {
                '$ref': '#/components/schemas/CoordinateSystem'
            },
            type: 'array',
            title: 'Coordinate Systems'
        }
    },
    type: 'object',
    required: ['field', 'country', 'discovery', 'stratigraphic_columns', 'field_coordinate_system', 'coordinate_systems'],
    title: 'SmdaMasterdataResult',
    description: 'Contains SMDA-related attributes.'
} as const;

export const StratigraphicColumnSchema = {
    properties: {
        identifier: {
            type: 'string',
            title: 'Identifier',
            examples: ['DROGON_2020']
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid',
            examples: ['15ce3b84-766f-4c93-9050-b154861f9100']
        }
    },
    type: 'object',
    required: ['identifier', 'uuid'],
    title: 'StratigraphicColumn',
    description: 'Contains the stratigraphic column known to SMDA.'
} as const;

export const UserAPIKeysSchema = {
    properties: {
        smda_subscription: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Smda Subscription'
        }
    },
    type: 'object',
    title: 'UserAPIKeys',
    description: 'Known API keys stored in a user config.'
} as const;

export const UserConfigSchema = {
    properties: {
        version: {
            type: 'string',
            pattern: '(\\d+(\\.\\d+){0,2}|\\d+\\.\\d+\\.[a-z0-9]+\\+[a-z0-9.]+)',
            title: 'Version'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        user_api_keys: {
            '$ref': '#/components/schemas/UserAPIKeys'
        },
        recent_directories: {
            items: {
                type: 'string',
                format: 'path'
            },
            type: 'array',
            maxItems: 5,
            uniqueItems: true,
            title: 'Recent Directories'
        }
    },
    type: 'object',
    required: ['version', 'created_at', 'user_api_keys', 'recent_directories'],
    title: 'UserConfig',
    description: `The configuration file in a $HOME/.fmu directory.

Stored as config.json.`
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;