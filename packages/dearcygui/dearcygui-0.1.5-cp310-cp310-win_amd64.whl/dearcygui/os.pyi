"""
This type stub file was generated by cyright.
"""

from dearcygui import Context

class _FileDialogQuery:
    def submit(self): # -> None:
        """
        Submits the dialog to run via SDL_RunOnMainThread.
        """
        ...
    


def show_open_file_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS file open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...

def show_save_file_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS file save selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...

def show_open_folder_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS directory open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...

class _SystemThemeResult:
    ...


def get_system_theme(context: Context) -> str:
    """
    Get the system theme.
    Returns:
        - "unknown": The system theme is unknown.
        - "light": The system theme is light.
        - "dark": The system theme is dark.
    """
    ...

def open_url(url: str) -> None:
    """
    Open an URL in the default web browser.
    """
    ...

def get_battery_info() -> tuple[int, int, str]:
    """
    Get the battery information.
    Returns:
        - percentage: The battery percentage (0-100). -1 if unknown.
        - seconds_left: The estimated time left in seconds. -1 if unknown.
        - state: The power state as a string.
            - "unknown": The power state is unknown.
            - "on_battery": The system is running on battery.
            - "no_battery": The system has no battery.
            - "charging": The system is charging the battery.
            - "charged": The battery is fully charged.

    You should never take a battery status as absolute truth. Batteries
    (especially failing batteries) are delicate hardware, and the values
    reported here are best estimates based on what that hardware reports.
    It's not uncommon for older batteries to lose stored power much faster
    than it reports, or completely drain when reporting it has 20 percent
    left, etc.

    Battery status can change at any time; if you are concerned with power
    state, you should call this function frequently, and perhaps ignore
    changes until they seem to be stable for a few seconds.

    It's possible a platform can only report battery percentage or time
    left but not both.

    On some platforms, retrieving power supply details might be expensive.
    If you want to display continuous status you could call this function
    every minute or so.
    """
    ...

def show_message_box(context: Context, title: str, message: str, message_type: str = ...) -> None:
    """
    Stops the rendering thread with a blocking system
    message box. The rendering thread is blocked until
    the user to closes the message box.

    If called from the rendering thread (the one that created
    the context), this function will display the message box
    immediately, without waiting render_frame().

    Args:
        context: The context to use.
        title: The title of the message box.
        message: The message to display.
        message_type: The type of the message box. Can be "error", "warning" or "info".
    """
    ...

def set_application_metadata(name: str = ..., version: str = ..., identifier: str = ..., creator: str = ..., copyright: str = ..., url: str = ..., type: str = ...) -> None:
    """
    Set the application metadata. This is used by the OS to display
    information about the application in the system settings or
    application manager.

    To properly apply, some metadata require this call to be made
    before context creation.

    Args:
        name: The name of the application.
        version: The version of the application.
        identifier: A unique string that identifies this app.
            This must be in reverse-domain format, like "com.example.mygame2".
            This string is used by desktop compositors to identify and group
            windows together, as well as match applications with associated
            desktop settings and icons. If you plan to package your
            application in a container such as Flatpak, the app ID
            should match the name of your Flatpak container as well. 
        creator: A one line creator notice for the application.
        copyright: A one line copyright notice for the application.
        url: The URL of the application.
        type: The type of application this is.
            Currently must be one of: "game", "mediaplayer", "application".
    """
    ...

