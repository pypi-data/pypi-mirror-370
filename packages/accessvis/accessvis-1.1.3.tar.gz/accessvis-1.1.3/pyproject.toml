[project]
name = "accessvis"
description = "3D visualisation tools and utilities for earth systems data"
readme = "README.md"
requires-python = ">=3.6"
license = {file = "LICENSE"}
keywords = ["access-nri", "3d-viz", "visualisation"]

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name = "Owen Kaluza", email = "owen.kaluza@anu.edu.au" }
]
maintainers = [
  {name = "Owen Kaluza", email = "owen.kaluza@anu.edu.au" }
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "License :: OSI Approved :: Apache Software License",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Multimedia :: Graphics :: 3D Rendering",
  "Topic :: Scientific/Engineering :: Visualization",
  "Development Status :: 3 - Alpha",
  "Programming Language :: C++",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Framework :: Jupyter",
  "Framework :: IPython"
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "lavavu",
  "pillow",
  "py360convert>=1.0.3",
  "matplotlib",
  "requests",
  "wget",
  "numpy",
  "numpy-quaternion",
  "ipywidgets",
  "astropy",
  "xarray",
  "tqdm",
  "netcdf4",
]
dynamic = ["version"]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly 
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
#[project.optional-dependencies]
#dev = ["check-manifest"]
#test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
#[project.urls]
#"Homepage" = "https://github.com/access-nri/visualisations"
#"Bug Reports" = "https://github.com/access-nri/visualisation/issues"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
#[project.scripts]
#sample = "sample:main"



# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools.packages.find]
where = ["src"]
# If there are data files included in your packages that need to be
# installed, specify them here.
[tool.setuptools.package-data]
accessvis = ["data/*"]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools >= 61.0.0",
  "versioneer[toml]",
]

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/accessvis/_version.py"
versionfile_build = "accessvis/_version.py"
tag_prefix = "v"        # Tag prefix (like "v" or "release-")
parentdir_prefix = "accessvis-"  # Directory name that matches parent directory

[tool.ruff]
line-length = 88
select = ["E", "F"]
extend-select = ["I"]
ignore = ["E501", "F403"]

