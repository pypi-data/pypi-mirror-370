[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pysdccc"
dynamic = ["version"]
authors = [
    { name = "Leon Budnick", email = "leon.budnick@draeger.com" },
]
description = "Python wrapper for SDCcc test tool"
requires-python = ">=3.11, <3.14"
dependencies = [
    "typing-extensions>=4.13.2;python_version<'3.13'",
    "junitparser>=4",
    "httpx>=0.28.0",
    "anyio>=4.7.0",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["sdc", "SDCcc", "test", "wrapper"]

[project.urls]
"Homepage" = "https://github.com/Draegerwerk/pysdccc"
"Bug Tracker" = "https://github.com/Draegerwerk/pysdccc/issues"
"Changelog" = "https://github.com/Draegerwerk/pysdccc/blob/main/CHANGELOG.md"
"Repository" = "https://github.com/Draegerwerk/pysdccc.git"

[dependency-groups]
test = [
    "pytest>=8.4.1",
    "pytest-html>=4",
    "pytest-cov>=6.2.1",
    "trio>=0.30.0",
    "pysdccc[cli]",
]
dev = [
    { include-group = "test" },
    "pyright>=1.1.403",
    "lxml-stubs>=0.5.1",
    "ruff>=0.11.8",
]

[project.scripts]
pysdccc = "pysdccc._cli:cli"
sdccc = "pysdccc._cli:sdccc"

[project.optional-dependencies]
cli = [
    "click>=8.0",
]

[tool.hatch.version]
path = "src/pysdccc/__init__.py"

[tool.ruff]
lint.select = ["ALL"]  # https://docs.astral.sh/ruff/settings/#select
lint.extend-ignore = [# https://docs.astral.sh/ruff/settings/#extend-ignore
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "D107", # https://docs.astral.sh/ruff/rules/undocumented-public-init/
    "D203", # https://docs.astral.sh/ruff/rules/incorrect-blank-line-before-class/
    "D213", # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/
    "S101", # https://docs.astral.sh/ruff/rules/assert/
    "S311", # https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage/
]

line-length = 120  # https://docs.astral.sh/ruff/settings/#line-length
# Allow imports relative to the "src" and "test" directories.
src = ["src", "tests"]  # https://docs.astral.sh/ruff/settings/#src

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true # https://docs.astral.sh/ruff/settings/#allow-star-arg-any
suppress-none-returning = true # https://docs.astral.sh/ruff/settings/#suppress-none-returning

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true  # https://docs.astral.sh/ruff/settings/#allow-dict-calls-with-keyword-arguments

[tool.ruff.lint.pycodestyle]
max-doc-length = 120 # https://docs.astral.sh/ruff/settings/#max-doc-length

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.pytest.ini_options]
testpaths = [
    "tests"
]

log_cli = true
log_cli_level = "info"
log_cli_format = "%(asctime)s %(levelname)s (%(threadName)-10s) %(filename)s:%(lineno)d %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "debug"
log_file_format = "%(asctime)s %(levelname)s (%(threadName)-10s) %(filename)s:%(lineno)d %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S:%f"

filterwarnings = [# https://docs.python.org/3/library/warnings.html#warning-filter
    "ignore::pytest.PytestUnhandledThreadExceptionWarning", # may be raised in logging thread if pipe is already closed
]

[tool.tox]  # https://github.com/tox-dev/tox-uv
env_list = ["pre-commit", "py311", "py312", "py313"]

[tool.tox.env_run_base]
depends = ["pre-commit"] # https://tox.wiki/en/latest/config.html#depends
runner = "uv-venv-lock-runner" # https://tox.wiki/en/latest/config.html#runner
package = "wheel" # https://tox.wiki/en/latest/config.html#package
commands = [["pytest"]] # https://tox.wiki/en/latest/config.html#commands
dependency_groups = ["test"] # https://tox.wiki/en/latest/config.html#dependency_groups

[tool.tox.env.pre-commit]
commands = [["pre-commit", "run", "--all-files"]] # https://tox.wiki/en/latest/config.html#commands
depends = [] # https://tox.wiki/en/latest/config.html#depends
allowlist_externals = ["pre-commit"] # https://tox.wiki/en/latest/config.html#allowlist_externals
skip_install = true # https://tox.wiki/en/latest/config.html#skip_install

[tool.coverage.run]
parallel = true # https://coverage.readthedocs.io/en/latest/config.html#run-parallel
