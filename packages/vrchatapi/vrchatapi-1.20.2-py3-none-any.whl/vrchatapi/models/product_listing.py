# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.2
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class ProductListing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'archived': 'bool',
        'buyer_refundable': 'bool',
        'created': 'datetime',
        'description': 'str',
        'display_name': 'str',
        'duration': 'int',
        'duration_type': 'str',
        'group_icon': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'hydrated_products': 'list[Product]',
        'id': 'str',
        'image_id': 'str',
        'instant': 'bool',
        'listing_type': 'ProductListingType',
        'listing_variants': 'list[ProductListingVariant]',
        'permanent': 'bool',
        'price_tokens': 'int',
        'product_ids': 'list[str]',
        'product_type': 'ProductType',
        'products': 'list[object]',
        'quantifiable': 'bool',
        'recurrable': 'bool',
        'refundable': 'bool',
        'seller_display_name': 'str',
        'seller_id': 'str',
        'stackable': 'bool',
        'store_ids': 'list[str]',
        'tags': 'list[str]',
        'updated': 'datetime'
    }

    attribute_map = {
        'active': 'active',
        'archived': 'archived',
        'buyer_refundable': 'buyerRefundable',
        'created': 'created',
        'description': 'description',
        'display_name': 'displayName',
        'duration': 'duration',
        'duration_type': 'durationType',
        'group_icon': 'groupIcon',
        'group_id': 'groupId',
        'group_name': 'groupName',
        'hydrated_products': 'hydratedProducts',
        'id': 'id',
        'image_id': 'imageId',
        'instant': 'instant',
        'listing_type': 'listingType',
        'listing_variants': 'listingVariants',
        'permanent': 'permanent',
        'price_tokens': 'priceTokens',
        'product_ids': 'productIds',
        'product_type': 'productType',
        'products': 'products',
        'quantifiable': 'quantifiable',
        'recurrable': 'recurrable',
        'refundable': 'refundable',
        'seller_display_name': 'sellerDisplayName',
        'seller_id': 'sellerId',
        'stackable': 'stackable',
        'store_ids': 'storeIds',
        'tags': 'tags',
        'updated': 'updated'
    }

    def __init__(self, active=None, archived=None, buyer_refundable=None, created=None, description=None, display_name=None, duration=None, duration_type=None, group_icon=None, group_id=None, group_name=None, hydrated_products=None, id=None, image_id=None, instant=None, listing_type=None, listing_variants=None, permanent=None, price_tokens=None, product_ids=None, product_type=None, products=None, quantifiable=None, recurrable=None, refundable=None, seller_display_name=None, seller_id=None, stackable=None, store_ids=None, tags=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """ProductListing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._archived = None
        self._buyer_refundable = None
        self._created = None
        self._description = None
        self._display_name = None
        self._duration = None
        self._duration_type = None
        self._group_icon = None
        self._group_id = None
        self._group_name = None
        self._hydrated_products = None
        self._id = None
        self._image_id = None
        self._instant = None
        self._listing_type = None
        self._listing_variants = None
        self._permanent = None
        self._price_tokens = None
        self._product_ids = None
        self._product_type = None
        self._products = None
        self._quantifiable = None
        self._recurrable = None
        self._refundable = None
        self._seller_display_name = None
        self._seller_id = None
        self._stackable = None
        self._store_ids = None
        self._tags = None
        self._updated = None
        self.discriminator = None

        self.active = active
        self.archived = archived
        self.buyer_refundable = buyer_refundable
        self.created = created
        self.description = description
        self.display_name = display_name
        if duration is not None:
            self.duration = duration
        if duration_type is not None:
            self.duration_type = duration_type
        self.group_icon = group_icon
        self.group_id = group_id
        self.group_name = group_name
        if hydrated_products is not None:
            self.hydrated_products = hydrated_products
        self.id = id
        self.image_id = image_id
        self.instant = instant
        self.listing_type = listing_type
        self.listing_variants = listing_variants
        self.permanent = permanent
        self.price_tokens = price_tokens
        self.product_ids = product_ids
        self.product_type = product_type
        self.products = products
        if quantifiable is not None:
            self.quantifiable = quantifiable
        self.recurrable = recurrable
        self.refundable = refundable
        self.seller_display_name = seller_display_name
        self.seller_id = seller_id
        self.stackable = stackable
        self.store_ids = store_ids
        self.tags = tags
        self.updated = updated

    @property
    def active(self):
        """Gets the active of this ProductListing.  # noqa: E501


        :return: The active of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProductListing.


        :param active: The active of this ProductListing.  # noqa: E501
        :type active: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def archived(self):
        """Gets the archived of this ProductListing.  # noqa: E501


        :return: The archived of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProductListing.


        :param archived: The archived of this ProductListing.  # noqa: E501
        :type archived: bool
        """
        if self.local_vars_configuration.client_side_validation and archived is None:  # noqa: E501
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def buyer_refundable(self):
        """Gets the buyer_refundable of this ProductListing.  # noqa: E501


        :return: The buyer_refundable of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._buyer_refundable

    @buyer_refundable.setter
    def buyer_refundable(self, buyer_refundable):
        """Sets the buyer_refundable of this ProductListing.


        :param buyer_refundable: The buyer_refundable of this ProductListing.  # noqa: E501
        :type buyer_refundable: bool
        """
        if self.local_vars_configuration.client_side_validation and buyer_refundable is None:  # noqa: E501
            raise ValueError("Invalid value for `buyer_refundable`, must not be `None`")  # noqa: E501

        self._buyer_refundable = buyer_refundable

    @property
    def created(self):
        """Gets the created of this ProductListing.  # noqa: E501


        :return: The created of this ProductListing.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProductListing.


        :param created: The created of this ProductListing.  # noqa: E501
        :type created: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self):
        """Gets the description of this ProductListing.  # noqa: E501


        :return: The description of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductListing.


        :param description: The description of this ProductListing.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ProductListing.  # noqa: E501


        :return: The display_name of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProductListing.


        :param display_name: The display_name of this ProductListing.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def duration(self):
        """Gets the duration of this ProductListing.  # noqa: E501


        :return: The duration of this ProductListing.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ProductListing.


        :param duration: The duration of this ProductListing.  # noqa: E501
        :type duration: int
        """

        self._duration = duration

    @property
    def duration_type(self):
        """Gets the duration_type of this ProductListing.  # noqa: E501


        :return: The duration_type of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this ProductListing.


        :param duration_type: The duration_type of this ProductListing.  # noqa: E501
        :type duration_type: str
        """

        self._duration_type = duration_type

    @property
    def group_icon(self):
        """Gets the group_icon of this ProductListing.  # noqa: E501


        :return: The group_icon of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._group_icon

    @group_icon.setter
    def group_icon(self, group_icon):
        """Sets the group_icon of this ProductListing.


        :param group_icon: The group_icon of this ProductListing.  # noqa: E501
        :type group_icon: str
        """
        if self.local_vars_configuration.client_side_validation and group_icon is None:  # noqa: E501
            raise ValueError("Invalid value for `group_icon`, must not be `None`")  # noqa: E501

        self._group_icon = group_icon

    @property
    def group_id(self):
        """Gets the group_id of this ProductListing.  # noqa: E501


        :return: The group_id of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ProductListing.


        :param group_id: The group_id of this ProductListing.  # noqa: E501
        :type group_id: str
        """
        if self.local_vars_configuration.client_side_validation and group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this ProductListing.  # noqa: E501


        :return: The group_name of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ProductListing.


        :param group_name: The group_name of this ProductListing.  # noqa: E501
        :type group_name: str
        """
        if self.local_vars_configuration.client_side_validation and group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def hydrated_products(self):
        """Gets the hydrated_products of this ProductListing.  # noqa: E501


        :return: The hydrated_products of this ProductListing.  # noqa: E501
        :rtype: list[Product]
        """
        return self._hydrated_products

    @hydrated_products.setter
    def hydrated_products(self, hydrated_products):
        """Sets the hydrated_products of this ProductListing.


        :param hydrated_products: The hydrated_products of this ProductListing.  # noqa: E501
        :type hydrated_products: list[Product]
        """

        self._hydrated_products = hydrated_products

    @property
    def id(self):
        """Gets the id of this ProductListing.  # noqa: E501


        :return: The id of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductListing.


        :param id: The id of this ProductListing.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_id(self):
        """Gets the image_id of this ProductListing.  # noqa: E501


        :return: The image_id of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ProductListing.


        :param image_id: The image_id of this ProductListing.  # noqa: E501
        :type image_id: str
        """
        if self.local_vars_configuration.client_side_validation and image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def instant(self):
        """Gets the instant of this ProductListing.  # noqa: E501


        :return: The instant of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._instant

    @instant.setter
    def instant(self, instant):
        """Sets the instant of this ProductListing.


        :param instant: The instant of this ProductListing.  # noqa: E501
        :type instant: bool
        """
        if self.local_vars_configuration.client_side_validation and instant is None:  # noqa: E501
            raise ValueError("Invalid value for `instant`, must not be `None`")  # noqa: E501

        self._instant = instant

    @property
    def listing_type(self):
        """Gets the listing_type of this ProductListing.  # noqa: E501


        :return: The listing_type of this ProductListing.  # noqa: E501
        :rtype: ProductListingType
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this ProductListing.


        :param listing_type: The listing_type of this ProductListing.  # noqa: E501
        :type listing_type: ProductListingType
        """
        if self.local_vars_configuration.client_side_validation and listing_type is None:  # noqa: E501
            raise ValueError("Invalid value for `listing_type`, must not be `None`")  # noqa: E501

        self._listing_type = listing_type

    @property
    def listing_variants(self):
        """Gets the listing_variants of this ProductListing.  # noqa: E501


        :return: The listing_variants of this ProductListing.  # noqa: E501
        :rtype: list[ProductListingVariant]
        """
        return self._listing_variants

    @listing_variants.setter
    def listing_variants(self, listing_variants):
        """Sets the listing_variants of this ProductListing.


        :param listing_variants: The listing_variants of this ProductListing.  # noqa: E501
        :type listing_variants: list[ProductListingVariant]
        """
        if self.local_vars_configuration.client_side_validation and listing_variants is None:  # noqa: E501
            raise ValueError("Invalid value for `listing_variants`, must not be `None`")  # noqa: E501

        self._listing_variants = listing_variants

    @property
    def permanent(self):
        """Gets the permanent of this ProductListing.  # noqa: E501


        :return: The permanent of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this ProductListing.


        :param permanent: The permanent of this ProductListing.  # noqa: E501
        :type permanent: bool
        """
        if self.local_vars_configuration.client_side_validation and permanent is None:  # noqa: E501
            raise ValueError("Invalid value for `permanent`, must not be `None`")  # noqa: E501

        self._permanent = permanent

    @property
    def price_tokens(self):
        """Gets the price_tokens of this ProductListing.  # noqa: E501


        :return: The price_tokens of this ProductListing.  # noqa: E501
        :rtype: int
        """
        return self._price_tokens

    @price_tokens.setter
    def price_tokens(self, price_tokens):
        """Sets the price_tokens of this ProductListing.


        :param price_tokens: The price_tokens of this ProductListing.  # noqa: E501
        :type price_tokens: int
        """
        if self.local_vars_configuration.client_side_validation and price_tokens is None:  # noqa: E501
            raise ValueError("Invalid value for `price_tokens`, must not be `None`")  # noqa: E501

        self._price_tokens = price_tokens

    @property
    def product_ids(self):
        """Gets the product_ids of this ProductListing.  # noqa: E501


        :return: The product_ids of this ProductListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_ids

    @product_ids.setter
    def product_ids(self, product_ids):
        """Sets the product_ids of this ProductListing.


        :param product_ids: The product_ids of this ProductListing.  # noqa: E501
        :type product_ids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and product_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `product_ids`, must not be `None`")  # noqa: E501

        self._product_ids = product_ids

    @property
    def product_type(self):
        """Gets the product_type of this ProductListing.  # noqa: E501


        :return: The product_type of this ProductListing.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ProductListing.


        :param product_type: The product_type of this ProductListing.  # noqa: E501
        :type product_type: ProductType
        """
        if self.local_vars_configuration.client_side_validation and product_type is None:  # noqa: E501
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def products(self):
        """Gets the products of this ProductListing.  # noqa: E501


        :return: The products of this ProductListing.  # noqa: E501
        :rtype: list[object]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ProductListing.


        :param products: The products of this ProductListing.  # noqa: E501
        :type products: list[object]
        """
        if self.local_vars_configuration.client_side_validation and products is None:  # noqa: E501
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    @property
    def quantifiable(self):
        """Gets the quantifiable of this ProductListing.  # noqa: E501


        :return: The quantifiable of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._quantifiable

    @quantifiable.setter
    def quantifiable(self, quantifiable):
        """Sets the quantifiable of this ProductListing.


        :param quantifiable: The quantifiable of this ProductListing.  # noqa: E501
        :type quantifiable: bool
        """

        self._quantifiable = quantifiable

    @property
    def recurrable(self):
        """Gets the recurrable of this ProductListing.  # noqa: E501


        :return: The recurrable of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._recurrable

    @recurrable.setter
    def recurrable(self, recurrable):
        """Sets the recurrable of this ProductListing.


        :param recurrable: The recurrable of this ProductListing.  # noqa: E501
        :type recurrable: bool
        """
        if self.local_vars_configuration.client_side_validation and recurrable is None:  # noqa: E501
            raise ValueError("Invalid value for `recurrable`, must not be `None`")  # noqa: E501

        self._recurrable = recurrable

    @property
    def refundable(self):
        """Gets the refundable of this ProductListing.  # noqa: E501


        :return: The refundable of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._refundable

    @refundable.setter
    def refundable(self, refundable):
        """Sets the refundable of this ProductListing.


        :param refundable: The refundable of this ProductListing.  # noqa: E501
        :type refundable: bool
        """
        if self.local_vars_configuration.client_side_validation and refundable is None:  # noqa: E501
            raise ValueError("Invalid value for `refundable`, must not be `None`")  # noqa: E501

        self._refundable = refundable

    @property
    def seller_display_name(self):
        """Gets the seller_display_name of this ProductListing.  # noqa: E501


        :return: The seller_display_name of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._seller_display_name

    @seller_display_name.setter
    def seller_display_name(self, seller_display_name):
        """Sets the seller_display_name of this ProductListing.


        :param seller_display_name: The seller_display_name of this ProductListing.  # noqa: E501
        :type seller_display_name: str
        """
        if self.local_vars_configuration.client_side_validation and seller_display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `seller_display_name`, must not be `None`")  # noqa: E501

        self._seller_display_name = seller_display_name

    @property
    def seller_id(self):
        """Gets the seller_id of this ProductListing.  # noqa: E501


        :return: The seller_id of this ProductListing.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this ProductListing.


        :param seller_id: The seller_id of this ProductListing.  # noqa: E501
        :type seller_id: str
        """
        if self.local_vars_configuration.client_side_validation and seller_id is None:  # noqa: E501
            raise ValueError("Invalid value for `seller_id`, must not be `None`")  # noqa: E501

        self._seller_id = seller_id

    @property
    def stackable(self):
        """Gets the stackable of this ProductListing.  # noqa: E501


        :return: The stackable of this ProductListing.  # noqa: E501
        :rtype: bool
        """
        return self._stackable

    @stackable.setter
    def stackable(self, stackable):
        """Sets the stackable of this ProductListing.


        :param stackable: The stackable of this ProductListing.  # noqa: E501
        :type stackable: bool
        """
        if self.local_vars_configuration.client_side_validation and stackable is None:  # noqa: E501
            raise ValueError("Invalid value for `stackable`, must not be `None`")  # noqa: E501

        self._stackable = stackable

    @property
    def store_ids(self):
        """Gets the store_ids of this ProductListing.  # noqa: E501


        :return: The store_ids of this ProductListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._store_ids

    @store_ids.setter
    def store_ids(self, store_ids):
        """Sets the store_ids of this ProductListing.


        :param store_ids: The store_ids of this ProductListing.  # noqa: E501
        :type store_ids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and store_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `store_ids`, must not be `None`")  # noqa: E501

        self._store_ids = store_ids

    @property
    def tags(self):
        """Gets the tags of this ProductListing.  # noqa: E501


        :return: The tags of this ProductListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProductListing.


        :param tags: The tags of this ProductListing.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def updated(self):
        """Gets the updated of this ProductListing.  # noqa: E501


        :return: The updated of this ProductListing.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ProductListing.


        :param updated: The updated of this ProductListing.  # noqa: E501
        :type updated: datetime
        """

        self._updated = updated

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductListing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductListing):
            return True

        return self.to_dict() != other.to_dict()
