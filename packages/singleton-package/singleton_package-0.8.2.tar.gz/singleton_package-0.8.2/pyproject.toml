[build-system]
requires = ["setuptools"] 
build-backend = "setuptools.build_meta"  # If not defined, then legacy behavior can happen.

[project]
name = "singleton_package" 
version = "0.8.2" 
description = "A simple Python package to create singleton objects"
readme = "README.md"
requires-python = ">=3"
license = {file = "LICENSE.txt"}
keywords = ["singleton", "design pattern"]
authors = [
  {name = "Mahdi Kiani", email = "mahdikiany@gmail.com" }
]
maintainers = [
  {name = "Mahdi Kiani", email = "mahdikiany@gmail.com" }
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Typing :: Typed",
]
dependencies = []
[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

[project.urls]
"Homepage" = "https://github.com/mahdikiani/singleton_package"
"Bug Reports" = "https://github.com/mahdikiani/singleton_package/issues"
"Say Thanks!" = "https://saythanks.io/to/mahdikiani"
"Source" = "https://github.com/mahdikiani/singleton_package"

# The following would provide a command line executable called `singleton`
# which executes the function `main` from this package when invoked.
# [project.scripts]
# singleton = "singleton:main"

[tool.setuptools]
package-data = {"singleton" = ["*.dat", "*.pyi", "py.typed"]}

[tool.ruff]
line-length = 79
target-version = "py313"
fix = true
unsafe-fixes = true
preview = true

[tool.ruff.lint]
select = [
  "F",     # Pyflakes: critical errors and unused code
  "E",
  "W",     # PEP8: formatting issues
  "I",     # isort: import sorting
  "UP",    # pyupgrade: modern syntax
  "B",     # bugbear: potential bugs
  "T",     # debugger / print statement checks
  "C",     # complexity: complexity checking
  "A",     # avoids shadowing Python built-ins
  "ASYNC", # async/await syntax
  "SIM",   # simplify: cleaner code
  "PERF",  # performance optimizations
  "TRY",   # better try/excepts
  "N",     # naming conventions
  "S",     # security checks
  "ANN",   # type annotation checks
  "T20",   # no print()
  "C4",    # comprehension: better loops
  "COM",   # enforces trailing commas where needed.
  "EXE",   # executable: executable checking
  "ISC",   # implicit string concatenation
  "G",     # misuse of logging string interpolation
  # "D",     # docstrings: docstring checking
  "ERA", # remove commented code
  "RUF", # ruff-specific improvements
]
per-file-ignores = { "tests/*" = ["G004", "S101"], "server/db.py" = ["TRY"] }
ignore = ["TRY003", "COM812"]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
check_untyped_defs = false
disallow_untyped_defs = false
