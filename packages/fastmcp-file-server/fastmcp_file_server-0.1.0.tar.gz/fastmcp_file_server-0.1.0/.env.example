# FastMCP File Server Configuration
# Copy this file to .env and update with your settings

# ===================================
# REQUIRED CONFIGURATION
# ===================================

# Safe directory for file operations (REQUIRED)
# All file operations will be restricted to this directory and its subdirectories
# Use absolute paths for best compatibility
MCP_ALLOWED_PATH=./allowed

# ===================================
# HTTP SERVER CONFIGURATION
# ===================================

# HTTP server port (default: 8082)
# Used when running in HTTP mode: fastmcp-file-server-http
MCP_HTTP_PORT=8082

# ===================================
# MULTI-TIER AUTHENTICATION
# ===================================

# Read-only access token (optional)
# Allows: list_files, read_file, read_lines, search_in_file, file_exists, get_file_info, 
#         list_files_recursive, find_files, batch_read, compare_files, get_file_diff, get_file_hash
MCP_READ_KEY=

# Read/Write access token (optional)  
# Allows: All read operations plus create_file, write_file, write_lines, insert_lines,
#         append_lines, replace_in_file, find_and_replace_lines, copy_file, move_file,
#         create_directory, move_directory, batch_create, append_to_file, create_zip,
#         extract_zip, convert_to_pdf, convert_image_format, csv_to_json, json_to_csv
MCP_WRITE_KEY=

# Admin access token (optional)
# Allows: All operations including delete_file, delete_directory, batch_delete
MCP_ADMIN_KEY=

# ===================================
# FILE RESTRICTIONS
# ===================================

# Maximum file size in bytes (default: 10485760 = 10MB)
# Prevents uploads of excessively large files
MCP_MAX_FILE_SIZE=10485760

# Allowed file extensions (default: see below)
# Comma-separated list of allowed file extensions (with dots)
# When set, only files with these extensions can be created/modified
MCP_ALLOWED_EXTENSIONS=.txt,.json,.md,.csv,.log,.xml,.yaml,.yml,.conf,.cfg,.zip,.pdf,.jpg,.png

# ===================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# ===================================

# Example 1: Development environment (no authentication)
# MCP_ALLOWED_PATH=/home/dev/projects/my-project
# MCP_HTTP_PORT=8082
# MCP_MAX_FILE_SIZE=52428800
# MCP_ALLOWED_EXTENSIONS=.txt,.py,.js,.json,.md,.yaml,.yml

# Example 2: Production environment (with authentication)
# MCP_ALLOWED_PATH=/var/app/data
# MCP_HTTP_PORT=8082
# MCP_READ_KEY=readonly-abc123def456
# MCP_WRITE_KEY=readwrite-ghi789jkl012
# MCP_ADMIN_KEY=admin-mno345pqr678
# MCP_MAX_FILE_SIZE=104857600

# Example 3: Public temporary access (ngrok)
# MCP_ALLOWED_PATH=/tmp/shared-files
# MCP_HTTP_PORT=8082
# MCP_ADMIN_KEY=temp-secure-token-xyz789
# MCP_MAX_FILE_SIZE=20971520

# ===================================
# SECURITY NOTES
# ===================================

# Token Management:
# - Generate strong tokens: openssl rand -hex 32
# - When ANY token is set, HTTP requests require Authorization: Bearer <token>
# - When NO tokens are set, server runs without authentication (stdio mode safe)
# - Different tokens provide different access levels (read/write/admin)

# Temporary Remote Access:
# 1. Set MCP_ADMIN_KEY before starting HTTP server
# 2. Start server: fastmcp-file-server-http
# 3. Expose via ngrok: ngrok http $MCP_HTTP_PORT
# 4. Use ngrok HTTPS URL with Authorization header
# 5. CRITICAL: Unset MCP_ADMIN_KEY and restart when done

# Access Patterns:
# - stdio mode: No authentication needed (direct process communication)
# - HTTP local: Optional authentication, but system will warn if none set
# - HTTP public: Always use authentication for internet exposure

# Security Warning Bypass:
# Use --ignore-keys flag to bypass HTTP authentication warning (not recommended)
# Example: fastmcp-file-server-http --ignore-keys