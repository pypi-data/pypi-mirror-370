[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "transcriptformer"
version = "0.6.0"
description = "A transformer model for gene expression data"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "anndata==0.11.4",
  "boto3==1.38.27",
  "cellxgene-census==1.17",
  "h5py==3.14",
  "hydra-core==1.3.2",
  "numpy==2.2.6",
  "pandas==2.2.2",
  "psutil==5.9",
  "pynvml==12",
  "pytest==8.4",
  "pytorch-lightning==2.5.1",
  "requests==2.32.3",
  "scanpy==1.11.2",
  "scipy==1.15.3",
  "timeout-decorator==0.5",
  "torch==2.5.1",
]

optional-dependencies.build = [
  "hatch>=1.14.1",
  "twine>=6.1",
  "wheel>=0.45.1",
]

optional-dependencies.dev = [
  "pre-commit",
  "pytest==8.4",
]

urls."Bug Tracker" = "https://github.com/czi-ai/transcriptformer/issues"
urls."Homepage" = "https://github.com/czi-ai/transcriptformer"

scripts.transcriptformer = "transcriptformer.cli:main"

[tool.hatch.build.targets.wheel]
packages = [ "src/transcriptformer" ]
include = [
  "conf/**/*",
]

[tool.ruff]
line-length = 120
src = [ "src" ]
extend-include = [ "*.ipynb" ]
exclude = [ "notebooks/" ]

format.docstring-code-format = true

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008",   # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "BLE001", # Blind excepts
  # docs stuff
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public function
  "D103", # Missing docstring in public method
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don't want a blank line before a class docstring
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn't work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."tests/*" = [ "D", "F" ]
lint.pydocstyle.convention = "numpy"

[tool.coverage.run]
source = [ "src/transcriptformer" ]
