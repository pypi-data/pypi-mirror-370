"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetVersionDiffRequestTypedDict(TypedDict):
    commit: NotRequired[str]
    r"""Commit hash (default is HEAD)"""
    group: NotRequired[str]
    r"""Group ID"""
    filename: NotRequired[str]
    r"""Filename"""
    diff_line_limit: NotRequired[float]
    r"""Limit maximum lines in the diff"""


class GetVersionDiffRequest(BaseModel):
    commit: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Commit hash (default is HEAD)"""

    group: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Group ID"""

    filename: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filename"""

    diff_line_limit: Annotated[
        Optional[float],
        pydantic.Field(alias="diffLineLimit"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit maximum lines in the diff"""


class GetVersionDiffResponseTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class GetVersionDiffResponse(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
