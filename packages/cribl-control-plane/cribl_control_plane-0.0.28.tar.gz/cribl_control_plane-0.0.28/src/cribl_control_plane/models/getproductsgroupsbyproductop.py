"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .configgroup import ConfigGroup, ConfigGroupTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
from enum import Enum
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetProductsGroupsByProductProduct(str, Enum):
    r"""Cribl Product"""

    STREAM = "stream"
    EDGE = "edge"


class GetProductsGroupsByProductRequestTypedDict(TypedDict):
    product: GetProductsGroupsByProductProduct
    r"""Cribl Product"""
    fields: NotRequired[str]
    r"""fields to add to results: git.commit, git.localChanges, git.log"""


class GetProductsGroupsByProductRequest(BaseModel):
    product: Annotated[
        GetProductsGroupsByProductProduct,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Cribl Product"""

    fields: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""fields to add to results: git.commit, git.localChanges, git.log"""


class GetProductsGroupsByProductResponseTypedDict(TypedDict):
    r"""a list of ConfigGroup objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[ConfigGroupTypedDict]]


class GetProductsGroupsByProductResponse(BaseModel):
    r"""a list of ConfigGroup objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[ConfigGroup]] = None
