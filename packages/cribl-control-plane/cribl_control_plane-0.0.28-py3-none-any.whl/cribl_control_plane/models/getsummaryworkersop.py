"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSummaryWorkersRequestTypedDict(TypedDict):
    filter_exp: NotRequired[str]
    r"""Filter expression evaluated against nodes"""


class GetSummaryWorkersRequest(BaseModel):
    filter_exp: Annotated[
        Optional[str],
        pydantic.Field(alias="filterExp"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter expression evaluated against nodes"""


class GetSummaryWorkersResponseTypedDict(TypedDict):
    r"""a list of number objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[float]]


class GetSummaryWorkersResponse(BaseModel):
    r"""a list of number objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[float]] = None
