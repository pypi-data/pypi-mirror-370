"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cribllakedataset import CriblLakeDataset, CriblLakeDatasetTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetCriblLakeDatasetByLakeIDRequestTypedDict(TypedDict):
    lake_id: str
    r"""lake id that contains the Datasets"""


class GetCriblLakeDatasetByLakeIDRequest(BaseModel):
    lake_id: Annotated[
        str,
        pydantic.Field(alias="lakeId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""lake id that contains the Datasets"""


class GetCriblLakeDatasetByLakeIDResponseTypedDict(TypedDict):
    r"""a list of CriblLakeDataset objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[CriblLakeDatasetTypedDict]]


class GetCriblLakeDatasetByLakeIDResponse(BaseModel):
    r"""a list of CriblLakeDataset objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[CriblLakeDataset]] = None
