"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .masterworkerentry import MasterWorkerEntry, MasterWorkerEntryTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetWorkersRequestTypedDict(TypedDict):
    filter_exp: NotRequired[str]
    r"""Filter expression evaluated against nodes"""
    sort: NotRequired[str]
    r"""Sorting object (JSON stringified) expression evaluated against nodes"""
    sort_exp: NotRequired[str]
    r"""Sorting expression evaluated against nodes"""
    limit: NotRequired[int]
    r"""Maximum number of nodes to return"""
    offset: NotRequired[int]
    r"""Pagination offset"""
    filter_: NotRequired[str]
    r"""Filter object (JSON stringified) to select nodes"""


class GetWorkersRequest(BaseModel):
    filter_exp: Annotated[
        Optional[str],
        pydantic.Field(alias="filterExp"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter expression evaluated against nodes"""

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sorting object (JSON stringified) expression evaluated against nodes"""

    sort_exp: Annotated[
        Optional[str],
        pydantic.Field(alias="sortExp"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sorting expression evaluated against nodes"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Maximum number of nodes to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination offset"""

    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter object (JSON stringified) to select nodes"""


class GetWorkersResponseTypedDict(TypedDict):
    r"""a list of MasterWorkerEntry objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[MasterWorkerEntryTypedDict]]


class GetWorkersResponse(BaseModel):
    r"""a list of MasterWorkerEntry objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[MasterWorkerEntry]] = None
