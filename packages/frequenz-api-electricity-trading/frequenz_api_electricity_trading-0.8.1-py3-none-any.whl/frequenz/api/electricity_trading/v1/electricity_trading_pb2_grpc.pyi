"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Electricity Trading API

Specification for Electricity Trading API.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import abc
import collections.abc
import frequenz.api.electricity_trading.v1.electricity_trading_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ElectricityTradingServiceStub:
    """Service providing operations related to order management."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateGridpoolOrder: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderResponse,
    ]
    """Creates a new order for a given Gridpool."""

    UpdateGridpoolOrder: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderResponse,
    ]
    """Updates an existing order for a given Gridpool."""

    CancelGridpoolOrder: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderResponse,
    ]
    """Cancels an existing order for a given Gridpool."""

    CancelAllGridpoolOrders: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersResponse,
    ]
    """Cancels all open orders for a given Gridpool."""

    GetGridpoolOrder: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderResponse,
    ]
    """Fetches the details of a specific order for a given Gridpool."""

    ListGridpoolOrders: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersResponse,
    ]
    """Lists all the orders for a given Gridpool."""

    ReceiveGridpoolOrdersStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamResponse,
    ]
    """Stream order updates for a given Gridpool."""

    ListGridpoolTrades: grpc.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesResponse,
    ]
    """Lists all trades for a given Gridpool."""

    ReceiveGridpoolTradesStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamResponse,
    ]
    """Stream trades for a given Gridpool."""

    ReceivePublicTradesStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamResponse,
    ]
    """This stream provides both historical and real-time public trade data.

    - If `start_time` is set, it retrieves trades from that timestamp onwards.
      If omitted, it streams only new trades from the time the connection is
      established.
    - If `end_time` is set, the stream stops after sending trades up to this
      timestamp.
      If omitted, it remains open and continues streaming new trades.
    """

    ReceivePublicOrderBookStream: grpc.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamResponse,
    ]
    """Stream public order book information."""

class ElectricityTradingServiceAsyncStub:
    """Service providing operations related to order management."""

    CreateGridpoolOrder: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderResponse,
    ]
    """Creates a new order for a given Gridpool."""

    UpdateGridpoolOrder: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderResponse,
    ]
    """Updates an existing order for a given Gridpool."""

    CancelGridpoolOrder: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderResponse,
    ]
    """Cancels an existing order for a given Gridpool."""

    CancelAllGridpoolOrders: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersResponse,
    ]
    """Cancels all open orders for a given Gridpool."""

    GetGridpoolOrder: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderResponse,
    ]
    """Fetches the details of a specific order for a given Gridpool."""

    ListGridpoolOrders: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersResponse,
    ]
    """Lists all the orders for a given Gridpool."""

    ReceiveGridpoolOrdersStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamResponse,
    ]
    """Stream order updates for a given Gridpool."""

    ListGridpoolTrades: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesResponse,
    ]
    """Lists all trades for a given Gridpool."""

    ReceiveGridpoolTradesStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamResponse,
    ]
    """Stream trades for a given Gridpool."""

    ReceivePublicTradesStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamResponse,
    ]
    """This stream provides both historical and real-time public trade data.

    - If `start_time` is set, it retrieves trades from that timestamp onwards.
      If omitted, it streams only new trades from the time the connection is
      established.
    - If `end_time` is set, the stream stops after sending trades up to this
      timestamp.
      If omitted, it remains open and continues streaming new trades.
    """

    ReceivePublicOrderBookStream: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamRequest,
        frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamResponse,
    ]
    """Stream public order book information."""

class ElectricityTradingServiceServicer(metaclass=abc.ABCMeta):
    """Service providing operations related to order management."""

    @abc.abstractmethod
    def CreateGridpoolOrder(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CreateGridpoolOrderResponse]]:
        """Creates a new order for a given Gridpool."""

    @abc.abstractmethod
    def UpdateGridpoolOrder(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.UpdateGridpoolOrderResponse]]:
        """Updates an existing order for a given Gridpool."""

    @abc.abstractmethod
    def CancelGridpoolOrder(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelGridpoolOrderResponse]]:
        """Cancels an existing order for a given Gridpool."""

    @abc.abstractmethod
    def CancelAllGridpoolOrders(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.CancelAllGridpoolOrdersResponse]]:
        """Cancels all open orders for a given Gridpool."""

    @abc.abstractmethod
    def GetGridpoolOrder(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.GetGridpoolOrderResponse]]:
        """Fetches the details of a specific order for a given Gridpool."""

    @abc.abstractmethod
    def ListGridpoolOrders(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolOrdersResponse]]:
        """Lists all the orders for a given Gridpool."""

    @abc.abstractmethod
    def ReceiveGridpoolOrdersStream(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamResponse], collections.abc.AsyncIterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolOrdersStreamResponse]]:
        """Stream order updates for a given Gridpool."""

    @abc.abstractmethod
    def ListGridpoolTrades(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesResponse, collections.abc.Awaitable[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ListGridpoolTradesResponse]]:
        """Lists all trades for a given Gridpool."""

    @abc.abstractmethod
    def ReceiveGridpoolTradesStream(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamResponse], collections.abc.AsyncIterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceiveGridpoolTradesStreamResponse]]:
        """Stream trades for a given Gridpool."""

    @abc.abstractmethod
    def ReceivePublicTradesStream(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamResponse], collections.abc.AsyncIterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicTradesStreamResponse]]:
        """This stream provides both historical and real-time public trade data.

        - If `start_time` is set, it retrieves trades from that timestamp onwards.
          If omitted, it streams only new trades from the time the connection is
          established.
        - If `end_time` is set, the stream stops after sending trades up to this
          timestamp.
          If omitted, it remains open and continues streaming new trades.
        """

    @abc.abstractmethod
    def ReceivePublicOrderBookStream(
        self,
        request: frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamResponse], collections.abc.AsyncIterator[frequenz.api.electricity_trading.v1.electricity_trading_pb2.ReceivePublicOrderBookStreamResponse]]:
        """Stream public order book information."""

def add_ElectricityTradingServiceServicer_to_server(servicer: ElectricityTradingServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
