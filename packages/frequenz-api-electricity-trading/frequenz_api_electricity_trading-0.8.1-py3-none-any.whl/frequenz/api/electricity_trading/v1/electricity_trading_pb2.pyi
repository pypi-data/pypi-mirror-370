"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Electricity Trading API

Specification for Electricity Trading API.

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.v1.grid.delivery_area_pb2
import frequenz.api.common.v1.grid.delivery_duration_pb2
import frequenz.api.common.v1.market.power_pb2
import frequenz.api.common.v1.market.price_pb2
import frequenz.api.common.v1.pagination.pagination_info_pb2
import frequenz.api.common.v1.pagination.pagination_params_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _OrderExecutionOption:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _OrderExecutionOptionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OrderExecutionOption.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ORDER_EXECUTION_OPTION_UNSPECIFIED: _OrderExecutionOption.ValueType  # 0
    """UNSPECIFIED: The order execution option has not been set."""
    ORDER_EXECUTION_OPTION_AON: _OrderExecutionOption.ValueType  # 2
    """All or None: Order must be executed in its entirety, or not executed at
    all.
    """
    ORDER_EXECUTION_OPTION_FOK: _OrderExecutionOption.ValueType  # 3
    """Fill or Kill: Order must be executed immediately in its entirety, or not at
    all.
    """
    ORDER_EXECUTION_OPTION_IOC: _OrderExecutionOption.ValueType  # 4
    """Immediate or Cancel: Any portion of an order that cannot be filled
    immediately will be cancelled.
    """

class OrderExecutionOption(_OrderExecutionOption, metaclass=_OrderExecutionOptionEnumTypeWrapper):
    """OrderExecutionOption defines specific restriction behavior for the execution
    of an order. These options provide control on how an order is handled in the
    market.
    If no OrderExecutionOption is set, the order remains open until it's fully
    fulfilled, cancelled by the client, `valid_until` timestamp is reached, or
    the end of the trading session.
    """

ORDER_EXECUTION_OPTION_UNSPECIFIED: OrderExecutionOption.ValueType  # 0
"""UNSPECIFIED: The order execution option has not been set."""
ORDER_EXECUTION_OPTION_AON: OrderExecutionOption.ValueType  # 2
"""All or None: Order must be executed in its entirety, or not executed at
all.
"""
ORDER_EXECUTION_OPTION_FOK: OrderExecutionOption.ValueType  # 3
"""Fill or Kill: Order must be executed immediately in its entirety, or not at
all.
"""
ORDER_EXECUTION_OPTION_IOC: OrderExecutionOption.ValueType  # 4
"""Immediate or Cancel: Any portion of an order that cannot be filled
immediately will be cancelled.
"""
global___OrderExecutionOption = OrderExecutionOption

class _OrderType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _OrderTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OrderType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ORDER_TYPE_UNSPECIFIED: _OrderType.ValueType  # 0
    """UNSPECIFIED: The order type has not been set."""
    ORDER_TYPE_LIMIT: _OrderType.ValueType  # 1
    """LIMIT: Order to buy or sell at a specific price or better.
    It remains active until it is filled, cancelled, or expired.
    """
    ORDER_TYPE_STOP_LIMIT: _OrderType.ValueType  # 2
    """STOP_LIMIT: An order that will be executed at a specified price, or better,
    after a given stop price has been reached.
    """
    ORDER_TYPE_ICEBERG: _OrderType.ValueType  # 3
    """ICEBERG: A large order divided into smaller lots to hide the actual order
    quantity. Only the visible part of the order is shown in the order book.
    """
    ORDER_TYPE_BLOCK: _OrderType.ValueType  # 4
    """BLOCK: (Not yet supported) User defined block order, generally a large
    quantity order filled all at once.
    """
    ORDER_TYPE_BALANCE: _OrderType.ValueType  # 5
    """BALANCE: (Not yet supported) Balance order aims to balance supply and
    demand, usually at a specific location or within a system.
    """
    ORDER_TYPE_PREARRANGED: _OrderType.ValueType  # 6
    """PRE: (Not yet supported) On exchange prearranged trade, a trade that has
    been privately negotiated and then submitted to the exchange.
    """
    ORDER_TYPE_PRIVATE: _OrderType.ValueType  # 7
    """PRIVATE: (Not yet supported) Private and confidential trade, not visible in
    the public order book and has no market impact.
    """

class OrderType(_OrderType, metaclass=_OrderTypeEnumTypeWrapper):
    """Enum for the order types that can be specified for an order."""

ORDER_TYPE_UNSPECIFIED: OrderType.ValueType  # 0
"""UNSPECIFIED: The order type has not been set."""
ORDER_TYPE_LIMIT: OrderType.ValueType  # 1
"""LIMIT: Order to buy or sell at a specific price or better.
It remains active until it is filled, cancelled, or expired.
"""
ORDER_TYPE_STOP_LIMIT: OrderType.ValueType  # 2
"""STOP_LIMIT: An order that will be executed at a specified price, or better,
after a given stop price has been reached.
"""
ORDER_TYPE_ICEBERG: OrderType.ValueType  # 3
"""ICEBERG: A large order divided into smaller lots to hide the actual order
quantity. Only the visible part of the order is shown in the order book.
"""
ORDER_TYPE_BLOCK: OrderType.ValueType  # 4
"""BLOCK: (Not yet supported) User defined block order, generally a large
quantity order filled all at once.
"""
ORDER_TYPE_BALANCE: OrderType.ValueType  # 5
"""BALANCE: (Not yet supported) Balance order aims to balance supply and
demand, usually at a specific location or within a system.
"""
ORDER_TYPE_PREARRANGED: OrderType.ValueType  # 6
"""PRE: (Not yet supported) On exchange prearranged trade, a trade that has
been privately negotiated and then submitted to the exchange.
"""
ORDER_TYPE_PRIVATE: OrderType.ValueType  # 7
"""PRIVATE: (Not yet supported) Private and confidential trade, not visible in
the public order book and has no market impact.
"""
global___OrderType = OrderType

class _MarketSide:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _MarketSideEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_MarketSide.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MARKET_SIDE_UNSPECIFIED: _MarketSide.ValueType  # 0
    """UNSPECIFIED: The side of the market has not been set."""
    MARKET_SIDE_BUY: _MarketSide.ValueType  # 1
    """BUY: Order to purchase electricity. This is referred to as a 'bid' in the
    order book.
    """
    MARKET_SIDE_SELL: _MarketSide.ValueType  # 2
    """SELL: Order to sell electricity. This is referred to as an 'ask' or 'offer'
    in the order book.
    """

class MarketSide(_MarketSide, metaclass=_MarketSideEnumTypeWrapper):
    """Enum for the side of the market that the order is on."""

MARKET_SIDE_UNSPECIFIED: MarketSide.ValueType  # 0
"""UNSPECIFIED: The side of the market has not been set."""
MARKET_SIDE_BUY: MarketSide.ValueType  # 1
"""BUY: Order to purchase electricity. This is referred to as a 'bid' in the
order book.
"""
MARKET_SIDE_SELL: MarketSide.ValueType  # 2
"""SELL: Order to sell electricity. This is referred to as an 'ask' or 'offer'
in the order book.
"""
global___MarketSide = MarketSide

class _OrderState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _OrderStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_OrderState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ORDER_STATE_UNSPECIFIED: _OrderState.ValueType  # 0
    """UNSPECIFIED: The order state is not known. This is usually the default
    state of a newly created order object before any operations have been
    applied. The order may be unfilled or partially filled.
    """
    ORDER_STATE_PENDING: _OrderState.ValueType  # 1
    """PENDING: The order has been sent to the marketplace but has not yet been
    confirmed. This can be due to awaiting validation or system processing.
    """
    ORDER_STATE_ACTIVE: _OrderState.ValueType  # 2
    """ACTIVE: The order has been confirmed and is open in the market.
    It may be unfilled or partially filled.
    """
    ORDER_STATE_FILLED: _OrderState.ValueType  # 3
    """FILLED: The order has been completely filled and there are no remaining
    quantities on the order.
    """
    ORDER_STATE_CANCELED: _OrderState.ValueType  # 4
    """CANCELED: The order has been cancelled. This can occur due to a
    cancellation request by the market participant, system, or market operator.
    The order may be unfilled or partially filled.
    """
    ORDER_STATE_EXPIRED: _OrderState.ValueType  # 5
    """EXPIRED: The order has not been filled within the defined duration and has
    expired. It may be unfilled or partially filled.
    """
    ORDER_STATE_FAILED: _OrderState.ValueType  # 6
    """FAILED: The order submission failed and was unable to be placed on the
    order book, usually due to a validation error or system issue.
    """
    ORDER_STATE_HIBERNATE: _OrderState.ValueType  # 7
    """HIBERNATE: The order has been entered into the system but is not currently
    exposed to the market. This could be due to certain conditions not yet
    being met. The order may be unfilled or partially filled.
    """

class OrderState(_OrderState, metaclass=_OrderStateEnumTypeWrapper):
    """Enum for the state of an order."""

ORDER_STATE_UNSPECIFIED: OrderState.ValueType  # 0
"""UNSPECIFIED: The order state is not known. This is usually the default
state of a newly created order object before any operations have been
applied. The order may be unfilled or partially filled.
"""
ORDER_STATE_PENDING: OrderState.ValueType  # 1
"""PENDING: The order has been sent to the marketplace but has not yet been
confirmed. This can be due to awaiting validation or system processing.
"""
ORDER_STATE_ACTIVE: OrderState.ValueType  # 2
"""ACTIVE: The order has been confirmed and is open in the market.
It may be unfilled or partially filled.
"""
ORDER_STATE_FILLED: OrderState.ValueType  # 3
"""FILLED: The order has been completely filled and there are no remaining
quantities on the order.
"""
ORDER_STATE_CANCELED: OrderState.ValueType  # 4
"""CANCELED: The order has been cancelled. This can occur due to a
cancellation request by the market participant, system, or market operator.
The order may be unfilled or partially filled.
"""
ORDER_STATE_EXPIRED: OrderState.ValueType  # 5
"""EXPIRED: The order has not been filled within the defined duration and has
expired. It may be unfilled or partially filled.
"""
ORDER_STATE_FAILED: OrderState.ValueType  # 6
"""FAILED: The order submission failed and was unable to be placed on the
order book, usually due to a validation error or system issue.
"""
ORDER_STATE_HIBERNATE: OrderState.ValueType  # 7
"""HIBERNATE: The order has been entered into the system but is not currently
exposed to the market. This could be due to certain conditions not yet
being met. The order may be unfilled or partially filled.
"""
global___OrderState = OrderState

class _TradeState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TradeStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_TradeState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    TRADE_STATE_UNSPECIFIED: _TradeState.ValueType  # 0
    """UNSPECIFIED: The state is not known."""
    TRADE_STATE_ACTIVE: _TradeState.ValueType  # 1
    """ACTIVE: The trade has been executed in the market."""
    TRADE_STATE_CANCEL_REQUESTED: _TradeState.ValueType  # 2
    """CANCEL_REQUESTED: A cancellation request for the trade has been submitted."""
    TRADE_STATE_CANCEL_REJECTED: _TradeState.ValueType  # 3
    """CANCEL_REJECTED: The trade cancellation request was rejected."""
    TRADE_STATE_CANCELED: _TradeState.ValueType  # 4
    """CANCELED: The trade has been cancelled. This can occur due to a
    cancellation request by the market participant, system, or market operator.
    """
    TRADE_STATE_RECALLED: _TradeState.ValueType  # 5
    """RECALL: The trade has been recalled. This could be due to a system issue or
    a request from the market participant or market operator.
    """
    TRADE_STATE_RECALL_REQUESTED: _TradeState.ValueType  # 6
    """RECALL_REQUESTED: A recall request for the trade has been submitted."""
    TRADE_STATE_RECALL_REJECTED: _TradeState.ValueType  # 7
    """RECALL_REJECTED: The trade recall request was rejected."""
    TRADE_STATE_APPROVAL_REQUESTED: _TradeState.ValueType  # 8
    """APPROVAL: An approval has been requested."""

class TradeState(_TradeState, metaclass=_TradeStateEnumTypeWrapper):
    """Enum for the state of a trade."""

TRADE_STATE_UNSPECIFIED: TradeState.ValueType  # 0
"""UNSPECIFIED: The state is not known."""
TRADE_STATE_ACTIVE: TradeState.ValueType  # 1
"""ACTIVE: The trade has been executed in the market."""
TRADE_STATE_CANCEL_REQUESTED: TradeState.ValueType  # 2
"""CANCEL_REQUESTED: A cancellation request for the trade has been submitted."""
TRADE_STATE_CANCEL_REJECTED: TradeState.ValueType  # 3
"""CANCEL_REJECTED: The trade cancellation request was rejected."""
TRADE_STATE_CANCELED: TradeState.ValueType  # 4
"""CANCELED: The trade has been cancelled. This can occur due to a
cancellation request by the market participant, system, or market operator.
"""
TRADE_STATE_RECALLED: TradeState.ValueType  # 5
"""RECALL: The trade has been recalled. This could be due to a system issue or
a request from the market participant or market operator.
"""
TRADE_STATE_RECALL_REQUESTED: TradeState.ValueType  # 6
"""RECALL_REQUESTED: A recall request for the trade has been submitted."""
TRADE_STATE_RECALL_REJECTED: TradeState.ValueType  # 7
"""RECALL_REJECTED: The trade recall request was rejected."""
TRADE_STATE_APPROVAL_REQUESTED: TradeState.ValueType  # 8
"""APPROVAL: An approval has been requested."""
global___TradeState = TradeState

@typing.final
class Order(google.protobuf.message.Message):
    """Represents an order in the electricity market."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    STOP_PRICE_FIELD_NUMBER: builtins.int
    PEAK_PRICE_DELTA_FIELD_NUMBER: builtins.int
    DISPLAY_QUANTITY_FIELD_NUMBER: builtins.int
    EXECUTION_OPTION_FIELD_NUMBER: builtins.int
    VALID_UNTIL_FIELD_NUMBER: builtins.int
    PAYLOAD_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    type: global___OrderType.ValueType
    """The type of order, such as LIMIT, STOP_LIMIT, ICEBERG etc.
    This determines how the order is to be executed in the market.
    """
    side: global___MarketSide.ValueType
    """Indicates if the order is on the Buy or Sell side of the market."""
    execution_option: global___OrderExecutionOption.ValueType
    """Optional execution options such as All or None, Fill or Kill, etc."""
    tag: builtins.str
    """Optional user-defined tag to group related orders."""
    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """The delivery area where the contract is to be delivered. The representation
        of the delivery area may vary by jurisdiction.
        """

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """The delivery period for the contract, specified as a start timestamp in UTC
        and a duration. It represents the period during which the contract is
        expected to be fulfilled.
        """

    @property
    def price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """The limit price at which the contract is to be traded. This is the maximum
        price for a BUY order or the minimum price for a SELL order.
        """

    @property
    def quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """The quantity of the contract being traded, specified in MW."""

    @property
    def stop_price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """Optional; Applicable for STOP_LIMIT orders. This is the stop price
        that triggers the limit order.
        """

    @property
    def peak_price_delta(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """Optional; Applicable for ICEBERG orders.
        This is the price difference between the peak price and the limit price.
        """

    @property
    def display_quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """Optional; Applicable for ICEBERG orders. This is the quantity
        of the order to be displayed in the order book.
        """

    @property
    def valid_until(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional; Do not use if ExecutionOption is set to FOK or IOC.
        This is an optional UTC timestamp defining the time after which
        the order should be cancelled if not filled.
        """

    @property
    def payload(self) -> google.protobuf.struct_pb2.Struct:
        """Optional user-defined payload individual to a specific order. This can be
        any data that needs to be associated with the order.

        The field can store e.g. JSON objects containing details involved in the
        order. This feature can simplify application development by eliminating the
        need for complicated state management to remember the specifics of each
        order.

        By embedding this "state" within the order itself, you can include
        specifics like which microgrids consume or provide how much power. This
        makes it easier to manage complex orders and can simplify the logic
        required in applications.

        Example JSON payload:
        {
          "microgrids": [
            {
              "microgrid_id": "1",
              "mw": 1.0
            },
            {
              "microgrid_id": "2",
              "mw": 0.5
            }
          ]
        }

        In this example, if the order is exectuted, these microgrids might consume
        the electricity mentioned in the example JSON payload.
        """

    def __init__(
        self,
        *,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        type: global___OrderType.ValueType = ...,
        side: global___MarketSide.ValueType = ...,
        price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        stop_price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        peak_price_delta: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        display_quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        execution_option: global___OrderExecutionOption.ValueType | None = ...,
        valid_until: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        payload: google.protobuf.struct_pb2.Struct | None = ...,
        tag: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_tag", b"_tag", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "display_quantity", b"display_quantity", "execution_option", b"execution_option", "payload", b"payload", "peak_price_delta", b"peak_price_delta", "price", b"price", "quantity", b"quantity", "stop_price", b"stop_price", "tag", b"tag", "valid_until", b"valid_until"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_tag", b"_tag", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "display_quantity", b"display_quantity", "execution_option", b"execution_option", "payload", b"payload", "peak_price_delta", b"peak_price_delta", "price", b"price", "quantity", b"quantity", "side", b"side", "stop_price", b"stop_price", "tag", b"tag", "type", b"type", "valid_until", b"valid_until"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_execution_option", b"_execution_option"]) -> typing.Literal["execution_option"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_tag", b"_tag"]) -> typing.Literal["tag"] | None: ...

global___Order = Order

@typing.final
class OrderDetail(google.protobuf.message.Message):
    """Represents an order with full details, including its ID, state and associated
    UTC timestamps.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class StateDetail(google.protobuf.message.Message):
        """Inner message providing details about the current state of the order."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _StateReason:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _StateReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[OrderDetail.StateDetail._StateReason.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            STATE_REASON_UNSPECIFIED: OrderDetail.StateDetail._StateReason.ValueType  # 0
            STATE_REASON_ADD: OrderDetail.StateDetail._StateReason.ValueType  # 1
            """The order was added."""
            STATE_REASON_MODIFY: OrderDetail.StateDetail._StateReason.ValueType  # 2
            """The order was modified."""
            STATE_REASON_DELETE: OrderDetail.StateDetail._StateReason.ValueType  # 3
            """The order was deleted."""
            STATE_REASON_DEACTIVATE: OrderDetail.StateDetail._StateReason.ValueType  # 4
            """The order was deactivated."""
            STATE_REASON_REJECT: OrderDetail.StateDetail._StateReason.ValueType  # 5
            """The order was rejected."""
            STATE_REASON_FULL_EXECUTION: OrderDetail.StateDetail._StateReason.ValueType  # 6
            """The order was fully executed."""
            STATE_REASON_PARTIAL_EXECUTION: OrderDetail.StateDetail._StateReason.ValueType  # 7
            """The order was partially executed."""
            STATE_REASON_ICEBERG_SLICE_ADD: OrderDetail.StateDetail._StateReason.ValueType  # 8
            """An iceberg slice was added."""
            STATE_REASON_VALIDATION_FAIL: OrderDetail.StateDetail._StateReason.ValueType  # 9
            """The order failed validation."""
            STATE_REASON_UNKNOWN_STATE: OrderDetail.StateDetail._StateReason.ValueType  # 10
            """The state of the order is unknown."""
            STATE_REASON_QUOTE_ADD: OrderDetail.StateDetail._StateReason.ValueType  # 11
            """A quote was added."""
            STATE_REASON_QUOTE_FULL_EXECUTION: OrderDetail.StateDetail._StateReason.ValueType  # 12
            """A quote was fully executed."""
            STATE_REASON_QUOTE_PARTIAL_EXECUTION: OrderDetail.StateDetail._StateReason.ValueType  # 13
            """A quote was partially executed."""

        class StateReason(_StateReason, metaclass=_StateReasonEnumTypeWrapper):
            """Enum describing the action that led to the state change."""

        STATE_REASON_UNSPECIFIED: OrderDetail.StateDetail.StateReason.ValueType  # 0
        STATE_REASON_ADD: OrderDetail.StateDetail.StateReason.ValueType  # 1
        """The order was added."""
        STATE_REASON_MODIFY: OrderDetail.StateDetail.StateReason.ValueType  # 2
        """The order was modified."""
        STATE_REASON_DELETE: OrderDetail.StateDetail.StateReason.ValueType  # 3
        """The order was deleted."""
        STATE_REASON_DEACTIVATE: OrderDetail.StateDetail.StateReason.ValueType  # 4
        """The order was deactivated."""
        STATE_REASON_REJECT: OrderDetail.StateDetail.StateReason.ValueType  # 5
        """The order was rejected."""
        STATE_REASON_FULL_EXECUTION: OrderDetail.StateDetail.StateReason.ValueType  # 6
        """The order was fully executed."""
        STATE_REASON_PARTIAL_EXECUTION: OrderDetail.StateDetail.StateReason.ValueType  # 7
        """The order was partially executed."""
        STATE_REASON_ICEBERG_SLICE_ADD: OrderDetail.StateDetail.StateReason.ValueType  # 8
        """An iceberg slice was added."""
        STATE_REASON_VALIDATION_FAIL: OrderDetail.StateDetail.StateReason.ValueType  # 9
        """The order failed validation."""
        STATE_REASON_UNKNOWN_STATE: OrderDetail.StateDetail.StateReason.ValueType  # 10
        """The state of the order is unknown."""
        STATE_REASON_QUOTE_ADD: OrderDetail.StateDetail.StateReason.ValueType  # 11
        """A quote was added."""
        STATE_REASON_QUOTE_FULL_EXECUTION: OrderDetail.StateDetail.StateReason.ValueType  # 12
        """A quote was fully executed."""
        STATE_REASON_QUOTE_PARTIAL_EXECUTION: OrderDetail.StateDetail.StateReason.ValueType  # 13
        """A quote was partially executed."""

        class _MarketActor:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _MarketActorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[OrderDetail.StateDetail._MarketActor.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            MARKET_ACTOR_UNSPECIFIED: OrderDetail.StateDetail._MarketActor.ValueType  # 0
            MARKET_ACTOR_USER: OrderDetail.StateDetail._MarketActor.ValueType  # 1
            """The user was the actor."""
            MARKET_ACTOR_MARKET_OPERATOR: OrderDetail.StateDetail._MarketActor.ValueType  # 2
            """The market operator was the actor."""
            MARKET_ACTOR_SYSTEM: OrderDetail.StateDetail._MarketActor.ValueType  # 3
            """The system was the actor."""

        class MarketActor(_MarketActor, metaclass=_MarketActorEnumTypeWrapper):
            """Enum describing the actor responsible for an order state change."""

        MARKET_ACTOR_UNSPECIFIED: OrderDetail.StateDetail.MarketActor.ValueType  # 0
        MARKET_ACTOR_USER: OrderDetail.StateDetail.MarketActor.ValueType  # 1
        """The user was the actor."""
        MARKET_ACTOR_MARKET_OPERATOR: OrderDetail.StateDetail.MarketActor.ValueType  # 2
        """The market operator was the actor."""
        MARKET_ACTOR_SYSTEM: OrderDetail.StateDetail.MarketActor.ValueType  # 3
        """The system was the actor."""

        STATE_FIELD_NUMBER: builtins.int
        STATE_REASON_FIELD_NUMBER: builtins.int
        MARKET_ACTOR_FIELD_NUMBER: builtins.int
        state: global___OrderState.ValueType
        """Current state of the order."""
        state_reason: global___OrderDetail.StateDetail.StateReason.ValueType
        """Reason for the current state."""
        market_actor: global___OrderDetail.StateDetail.MarketActor.ValueType
        """Actor responsible for the current state."""
        def __init__(
            self,
            *,
            state: global___OrderState.ValueType = ...,
            state_reason: global___OrderDetail.StateDetail.StateReason.ValueType = ...,
            market_actor: global___OrderDetail.StateDetail.MarketActor.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["market_actor", b"market_actor", "state", b"state", "state_reason", b"state_reason"]) -> None: ...

    ORDER_ID_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    STATE_DETAIL_FIELD_NUMBER: builtins.int
    OPEN_QUANTITY_FIELD_NUMBER: builtins.int
    FILLED_QUANTITY_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    MODIFICATION_TIME_FIELD_NUMBER: builtins.int
    order_id: builtins.int
    """Unique identifier of the order."""
    @property
    def order(self) -> global___Order:
        """The details of the order."""

    @property
    def state_detail(self) -> global___OrderDetail.StateDetail:
        """Details of the order's current state."""

    @property
    def open_quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """Remaining open quantity for this order."""

    @property
    def filled_quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """Filled quantity for this order."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """UTC Timestamp when the order was created."""

    @property
    def modification_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """UTC Timestamp of the last update to the order."""

    def __init__(
        self,
        *,
        order_id: builtins.int = ...,
        order: global___Order | None = ...,
        state_detail: global___OrderDetail.StateDetail | None = ...,
        open_quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        filled_quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        modification_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["create_time", b"create_time", "filled_quantity", b"filled_quantity", "modification_time", b"modification_time", "open_quantity", b"open_quantity", "order", b"order", "state_detail", b"state_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["create_time", b"create_time", "filled_quantity", b"filled_quantity", "modification_time", b"modification_time", "open_quantity", b"open_quantity", "order", b"order", "order_id", b"order_id", "state_detail", b"state_detail"]) -> None: ...

global___OrderDetail = OrderDetail

@typing.final
class Trade(google.protobuf.message.Message):
    """Represents a private trade in the electricity market.

    !!! note
       This represents either the buy or sell side of a trade which is
       different to public trade information which always represents both
       sides of a market.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    EXECUTION_TIME_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    id: builtins.int
    """ID of the trade."""
    order_id: builtins.int
    """ID of the order."""
    side: global___MarketSide.ValueType
    """Indicates if the trades order was on the Buy or Sell side of the market."""
    state: global___TradeState.ValueType
    """Current state of the trade."""
    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Delivery area of the trade."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """The delivery period for the contract."""

    @property
    def execution_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """UTC Timestamp of the trades execution time."""

    @property
    def price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """The price at which the trade was executed."""

    @property
    def quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """The executed quantity of the trade."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        order_id: builtins.int = ...,
        side: global___MarketSide.ValueType = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        execution_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        state: global___TradeState.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "execution_time", b"execution_time", "price", b"price", "quantity", b"quantity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "execution_time", b"execution_time", "id", b"id", "order_id", b"order_id", "price", b"price", "quantity", b"quantity", "side", b"side", "state", b"state"]) -> None: ...

global___Trade = Trade

@typing.final
class PublicTrade(google.protobuf.message.Message):
    """Represents a public trade in the market.

    Each `trade` within this response message represents two orders that were
    previously active in the public order book and matched, along with its key
    attributes and final state.

    !!! note
         A `trade` refers to the event where a buy order and a sell order are
         matched and executed, representing the final state of those orders.
         While "executed" or "filled" orders pertain to the completion of
         individual buy or sell orders, a "trade" signifies the actual
         transaction where both types of orders (buy and sell) are successfully
         matched and carried out. This distinction is crucial, as a trade is the
         broader occurrence resulting from the execution of both sides of the
         transaction, although post-trade processes like settlement may still
         follow. The term 'trade' is sometimes used interchangeably with
         'executed order' in trading platforms, but it technically encompasses
         the completion of both a buy and a sell order.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    BUY_DELIVERY_AREA_FIELD_NUMBER: builtins.int
    SELL_DELIVERY_AREA_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    EXECUTION_TIME_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    id: builtins.int
    """ID of the trade from the public order book."""
    state: global___TradeState.ValueType
    """Final state of the trade."""
    @property
    def buy_delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Delivery area code of the buy side."""

    @property
    def sell_delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Delivery area code of the sell side."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """The delivery period for the contract."""

    @property
    def execution_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """UTC Timestamp of the trades execution time."""

    @property
    def price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """The price at which the trade was executed."""

    @property
    def quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """The executed quantity of the contract traded."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        buy_delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        sell_delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        execution_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        state: global___TradeState.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["buy_delivery_area", b"buy_delivery_area", "delivery_period", b"delivery_period", "execution_time", b"execution_time", "price", b"price", "quantity", b"quantity", "sell_delivery_area", b"sell_delivery_area"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["buy_delivery_area", b"buy_delivery_area", "delivery_period", b"delivery_period", "execution_time", b"execution_time", "id", b"id", "price", b"price", "quantity", b"quantity", "sell_delivery_area", b"sell_delivery_area", "state", b"state"]) -> None: ...

global___PublicTrade = PublicTrade

@typing.final
class GridpoolOrderFilter(google.protobuf.message.Message):
    """Parameters for filtering Gridpool orders.

    !!! note
        Multiple filters can be used in combination to narrow down the returned
        results. For example, you can apply both state and side filters
        simultaneously to list only the open orders on the buy side of the
        market.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATES_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    ORDER_IDS_FIELD_NUMBER: builtins.int
    side: global___MarketSide.ValueType
    """Optional filter for order side."""
    tag: builtins.str
    """Optional filters the listed orders by their associated tag."""
    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___OrderState.ValueType]:
        """Optional filter for order state."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """Optional filter for delivery period."""

    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Optional filter for delivery area."""

    @property
    def order_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Optional filter for the given order IDs."""

    def __init__(
        self,
        *,
        states: collections.abc.Iterable[global___OrderState.ValueType] | None = ...,
        side: global___MarketSide.ValueType | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        tag: builtins.str | None = ...,
        order_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_side", b"_side", "_tag", b"_tag", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "side", b"side", "tag", b"tag"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_side", b"_side", "_tag", b"_tag", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "order_ids", b"order_ids", "side", b"side", "states", b"states", "tag", b"tag"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_side", b"_side"]) -> typing.Literal["side"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_tag", b"_tag"]) -> typing.Literal["tag"] | None: ...

global___GridpoolOrderFilter = GridpoolOrderFilter

@typing.final
class GridpoolTradeFilter(google.protobuf.message.Message):
    """Parameters for filtering Gridpool trades.

    !!! note
        Multiple filters can be used in combination to narrow down the returned
        results. For example, you can apply both state and side filters
        simultaneously to list only the trades on the buy side of the
        market.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATES_FIELD_NUMBER: builtins.int
    TRADE_IDS_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    side: global___MarketSide.ValueType
    """Optional filter for the trades order side."""
    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___TradeState.ValueType]:
        """Optional filter for the trade state."""

    @property
    def trade_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Optional filter for the given trade id´s."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """Optional filter for delivery period."""

    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Optional filter for delivery area."""

    def __init__(
        self,
        *,
        states: collections.abc.Iterable[global___TradeState.ValueType] | None = ...,
        trade_ids: collections.abc.Iterable[builtins.int] | None = ...,
        side: global___MarketSide.ValueType | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_side", b"_side", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "side", b"side"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_side", b"_side", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "side", b"side", "states", b"states", "trade_ids", b"trade_ids"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_side", b"_side"]) -> typing.Literal["side"] | None: ...

global___GridpoolTradeFilter = GridpoolTradeFilter

@typing.final
class PublicTradeFilter(google.protobuf.message.Message):
    """Parameters for filtering historic public trades.

    !!! note
        In some countries or regions the buy and sell delivery area can be
        different. This is usually referred to as cross bid.

    !!! note
        Multiple filters can be used in combination to narrow down the returned
        results. For example, you can apply both state and delivery area filters
        simultaneously to list only the trades that occurred at a certain time in
        a specific delivery area.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATES_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    BUY_DELIVERY_AREA_FIELD_NUMBER: builtins.int
    SELL_DELIVERY_AREA_FIELD_NUMBER: builtins.int
    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___TradeState.ValueType]:
        """If set, only trades in this state are returned."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """Optional; If set, only trades with this delivery period are returned."""

    @property
    def buy_delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Optional; If set, only trades in this buy delivery area are returned."""

    @property
    def sell_delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Optional; If set, only trades in this sell delivery area are returned."""

    def __init__(
        self,
        *,
        states: collections.abc.Iterable[global___TradeState.ValueType] | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        buy_delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        sell_delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["buy_delivery_area", b"buy_delivery_area", "delivery_period", b"delivery_period", "sell_delivery_area", b"sell_delivery_area"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["buy_delivery_area", b"buy_delivery_area", "delivery_period", b"delivery_period", "sell_delivery_area", b"sell_delivery_area", "states", b"states"]) -> None: ...

global___PublicTradeFilter = PublicTradeFilter

@typing.final
class CreateGridpoolOrderRequest(google.protobuf.message.Message):
    """Represents a request to create a new order for a specific Gridpool.

    A Gridpool is a collection of microgrids that can span multiple delivery
    areas. It's important to note that when submitting an order for a Gridpool,
    you must group microgrids by their respective delivery areas. This means you
    should submit separate orders for each delivery area within the Gridpool.
    Failing to do so could lead to inaccuracies in the bidding process and may
    not fully represent the capabilities or constraints of the microgrids in
    different delivery areas. However, in most countries only one delivery area
    exists, exceptions are countries like e.g. Australia, Germany and the US.

    !!! caution
         If a Gridpool contains microgrids in both Delivery Area A and Delivery
         Area B, you should submit one order for Delivery Area A and another for
         Delivery Area B, specifying the details for each.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """Unique identifier for the Gridpool to which the bid belongs."""
    @property
    def order(self) -> global___Order:
        """The details of the order being placed."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order: global___Order | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order", b"order"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order", b"order"]) -> None: ...

global___CreateGridpoolOrderRequest = CreateGridpoolOrderRequest

@typing.final
class CreateGridpoolOrderResponse(google.protobuf.message.Message):
    """Represents the server's response after a new order has been successfully
    created for a specific Gridpool.

    This response provides essential details about the newly created order, such
    as the unique order ID and the state of the order. By receiving this
    response, users can be sure that their order has been placed successfully for
    the designated Gridpool.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_DETAIL_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool the order belongs to."""
    @property
    def order_detail(self) -> global___OrderDetail:
        """Details of the newly created order."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_detail: global___OrderDetail | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_detail", b"order_detail"]) -> None: ...

global___CreateGridpoolOrderResponse = CreateGridpoolOrderResponse

@typing.final
class UpdateGridpoolOrderRequest(google.protobuf.message.Message):
    """Request to update an existing order for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class UpdateOrder(google.protobuf.message.Message):
        """Represents the order properties that can be updated after an order has been
        placed. At least one of the optional fields must be set for an update to
        take place.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PRICE_FIELD_NUMBER: builtins.int
        QUANTITY_FIELD_NUMBER: builtins.int
        STOP_PRICE_FIELD_NUMBER: builtins.int
        PEAK_PRICE_DELTA_FIELD_NUMBER: builtins.int
        DISPLAY_QUANTITY_FIELD_NUMBER: builtins.int
        EXECUTION_OPTION_FIELD_NUMBER: builtins.int
        VALID_UNTIL_FIELD_NUMBER: builtins.int
        PAYLOAD_FIELD_NUMBER: builtins.int
        TAG_FIELD_NUMBER: builtins.int
        execution_option: global___OrderExecutionOption.ValueType
        """Optional; Updated execution options such as All or None,
        Fill or Kill, etc.

        !!! note "Update with FieldMask"
            – not in `update_mask: leave unchanged,
            – present in payload: set to new value,
            – absent in payload: clear (unrestricted)
        """
        tag: builtins.str
        """Optional; Updated user-defined tag to group related orders."""
        @property
        def price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
            """Optional; The updated limit price at which the contract is to be traded.
            This is the maximum price for a BUY order or the minimum price for a SELL
            order.
            """

        @property
        def quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
            """Optional; The updated quantity of the contract being traded,
            specified in MW.
            """

        @property
        def stop_price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
            """Optional; Applicable for STOP_LIMIT orders. This is the updated
            stop price that triggers the limit order.
            """

        @property
        def peak_price_delta(self) -> frequenz.api.common.v1.market.price_pb2.Price:
            """Optional; Applicable for ICEBERG orders. This is the updated price
            difference between the peak price and the limit price.
            """

        @property
        def display_quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
            """Optional; Applicable for ICEBERG orders. This is the updated quantity
            of the order to be displayed in the order book.
            """

        @property
        def valid_until(self) -> google.protobuf.timestamp_pb2.Timestamp:
            """Optional; This is an updated timestamp defining the time after
            which the order should be cancelled if not filled.
            The timestamp is in UTC.
            """

        @property
        def payload(self) -> google.protobuf.struct_pb2.Struct:
            """Optional; Updated user-defined payload individual to a specific order.
            This can be any data that the user wants to associate with the order.
            """

        def __init__(
            self,
            *,
            price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
            quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
            stop_price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
            peak_price_delta: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
            display_quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
            execution_option: global___OrderExecutionOption.ValueType | None = ...,
            valid_until: google.protobuf.timestamp_pb2.Timestamp | None = ...,
            payload: google.protobuf.struct_pb2.Struct | None = ...,
            tag: builtins.str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_tag", b"_tag", "display_quantity", b"display_quantity", "execution_option", b"execution_option", "payload", b"payload", "peak_price_delta", b"peak_price_delta", "price", b"price", "quantity", b"quantity", "stop_price", b"stop_price", "tag", b"tag", "valid_until", b"valid_until"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_tag", b"_tag", "display_quantity", b"display_quantity", "execution_option", b"execution_option", "payload", b"payload", "peak_price_delta", b"peak_price_delta", "price", b"price", "quantity", b"quantity", "stop_price", b"stop_price", "tag", b"tag", "valid_until", b"valid_until"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_execution_option", b"_execution_option"]) -> typing.Literal["execution_option"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_tag", b"_tag"]) -> typing.Literal["tag"] | None: ...

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    UPDATE_ORDER_FIELDS_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the Gridpool the order belongs to."""
    order_id: builtins.int
    """The order identifier"""
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Field mask specifying which fields should be updated"""

    @property
    def update_order_fields(self) -> global___UpdateGridpoolOrderRequest.UpdateOrder:
        """The fields that can be updated"""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_id: builtins.int = ...,
        update_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        update_order_fields: global___UpdateGridpoolOrderRequest.UpdateOrder | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["update_mask", b"update_mask", "update_order_fields", b"update_order_fields"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_id", b"order_id", "update_mask", b"update_mask", "update_order_fields", b"update_order_fields"]) -> None: ...

global___UpdateGridpoolOrderRequest = UpdateGridpoolOrderRequest

@typing.final
class UpdateGridpoolOrderResponse(google.protobuf.message.Message):
    """Response from updating an existing order for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_DETAIL_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the Gridpool the order belongs to."""
    @property
    def order_detail(self) -> global___OrderDetail:
        """Details of the updated order."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_detail: global___OrderDetail | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_detail", b"order_detail"]) -> None: ...

global___UpdateGridpoolOrderResponse = UpdateGridpoolOrderResponse

@typing.final
class CancelGridpoolOrderRequest(google.protobuf.message.Message):
    """Request to cancel an existing order for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool the order belongs to."""
    order_id: builtins.int
    """ID of the order to be cancelled."""
    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_id", b"order_id"]) -> None: ...

global___CancelGridpoolOrderRequest = CancelGridpoolOrderRequest

@typing.final
class CancelGridpoolOrderResponse(google.protobuf.message.Message):
    """Response from canceling an existing order for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_DETAIL_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool the order belongs to."""
    @property
    def order_detail(self) -> global___OrderDetail:
        """Details of the cancelled order."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_detail: global___OrderDetail | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_detail", b"order_detail"]) -> None: ...

global___CancelGridpoolOrderResponse = CancelGridpoolOrderResponse

@typing.final
class CancelAllGridpoolOrdersRequest(google.protobuf.message.Message):
    """Request to cancel all currently open orders for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool containing the orders to be cancelled."""
    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id"]) -> None: ...

global___CancelAllGridpoolOrdersRequest = CancelAllGridpoolOrdersRequest

@typing.final
class CancelAllGridpoolOrdersResponse(google.protobuf.message.Message):
    """Response to canceling all currently open orders for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool to cancel the orders for."""
    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id"]) -> None: ...

global___CancelAllGridpoolOrdersResponse = CancelAllGridpoolOrdersResponse

@typing.final
class GetGridpoolOrderRequest(google.protobuf.message.Message):
    """Request to retrieve a single order for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_ID_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool containing the order to be retrieved."""
    order_id: builtins.int
    """ID of the order to be retrieved."""
    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_id", b"order_id"]) -> None: ...

global___GetGridpoolOrderRequest = GetGridpoolOrderRequest

@typing.final
class GetGridpoolOrderResponse(google.protobuf.message.Message):
    """Response from requesting order details for a specific order."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    ORDER_DETAIL_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """ID of the gridpool containing the retrieved order."""
    @property
    def order_detail(self) -> global___OrderDetail:
        """Details of the retrieved order."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        order_detail: global___OrderDetail | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gridpool_id", b"gridpool_id", "order_detail", b"order_detail"]) -> None: ...

global___GetGridpoolOrderResponse = GetGridpoolOrderResponse

@typing.final
class ListGridpoolOrdersRequest(google.protobuf.message.Message):
    """Request to retrieve a list of orders for a specific Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGINATION_PARAMS_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """The Gridpool to retrieve the orders for."""
    @property
    def filter(self) -> global___GridpoolOrderFilter:
        """Optional Gridpool orders filter."""

    @property
    def pagination_params(self) -> frequenz.api.common.v1.pagination.pagination_params_pb2.PaginationParams:
        """Pagination parameters."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        filter: global___GridpoolOrderFilter | None = ...,
        pagination_params: frequenz.api.common.v1.pagination.pagination_params_pb2.PaginationParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "pagination_params", b"pagination_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "gridpool_id", b"gridpool_id", "pagination_params", b"pagination_params"]) -> None: ...

global___ListGridpoolOrdersRequest = ListGridpoolOrdersRequest

@typing.final
class ListGridpoolOrdersResponse(google.protobuf.message.Message):
    """Response from listing orders for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ORDER_DETAILS_FIELD_NUMBER: builtins.int
    PAGINATION_INFO_FIELD_NUMBER: builtins.int
    @property
    def order_details(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OrderDetail]:
        """List of all listed orders with their details."""

    @property
    def pagination_info(self) -> frequenz.api.common.v1.pagination.pagination_info_pb2.PaginationInfo:
        """Metadata for pagination, including token for next page to retrieve."""

    def __init__(
        self,
        *,
        order_details: collections.abc.Iterable[global___OrderDetail] | None = ...,
        pagination_info: frequenz.api.common.v1.pagination.pagination_info_pb2.PaginationInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pagination_info", b"pagination_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["order_details", b"order_details", "pagination_info", b"pagination_info"]) -> None: ...

global___ListGridpoolOrdersResponse = ListGridpoolOrdersResponse

@typing.final
class ReceiveGridpoolOrdersStreamRequest(google.protobuf.message.Message):
    """Subscribe to Gridpool order stream.
    This method provides real-time updates on Gridpool orders, making it useful
    for dynamic analytics and real-time decision-making.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """The gridpool to retrieve the orders for."""
    @property
    def filter(self) -> global___GridpoolOrderFilter:
        """Optional public orders filter.

        !!! Important Note Regarding "DeliveryPeriod Filter"
            Ensure that the specified DeliveryPeriod is set for a future timeframe.
            If a past or present period is selected, the stream will automatically
            close and return no entries.
        """

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        filter: global___GridpoolOrderFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "gridpool_id", b"gridpool_id"]) -> None: ...

global___ReceiveGridpoolOrdersStreamRequest = ReceiveGridpoolOrdersStreamRequest

@typing.final
class ReceiveGridpoolOrdersStreamResponse(google.protobuf.message.Message):
    """Response to a subscription request for a stream of Gridpool orders.
    Real-time information on gridpool orders is pushed through this response.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ORDER_DETAIL_FIELD_NUMBER: builtins.int
    @property
    def order_detail(self) -> global___OrderDetail:
        """Order detail response."""

    def __init__(
        self,
        *,
        order_detail: global___OrderDetail | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["order_detail", b"order_detail"]) -> None: ...

global___ReceiveGridpoolOrdersStreamResponse = ReceiveGridpoolOrdersStreamResponse

@typing.final
class ListGridpoolTradesRequest(google.protobuf.message.Message):
    """Request to retrieve a list of trades for a specific Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    PAGINATION_PARAMS_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """The Gridpool to retrieve the trades for."""
    @property
    def filter(self) -> global___GridpoolTradeFilter:
        """Optional Gridpool trades filter."""

    @property
    def pagination_params(self) -> frequenz.api.common.v1.pagination.pagination_params_pb2.PaginationParams:
        """Pagination parameters."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        filter: global___GridpoolTradeFilter | None = ...,
        pagination_params: frequenz.api.common.v1.pagination.pagination_params_pb2.PaginationParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter", "pagination_params", b"pagination_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "gridpool_id", b"gridpool_id", "pagination_params", b"pagination_params"]) -> None: ...

global___ListGridpoolTradesRequest = ListGridpoolTradesRequest

@typing.final
class ListGridpoolTradesResponse(google.protobuf.message.Message):
    """Response from listing trades for a given Gridpool."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRADES_FIELD_NUMBER: builtins.int
    PAGINATION_INFO_FIELD_NUMBER: builtins.int
    @property
    def trades(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Trade]:
        """List of all listed trades with their details."""

    @property
    def pagination_info(self) -> frequenz.api.common.v1.pagination.pagination_info_pb2.PaginationInfo:
        """Metadata for pagination, including token for next page to retrieve."""

    def __init__(
        self,
        *,
        trades: collections.abc.Iterable[global___Trade] | None = ...,
        pagination_info: frequenz.api.common.v1.pagination.pagination_info_pb2.PaginationInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pagination_info", b"pagination_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["pagination_info", b"pagination_info", "trades", b"trades"]) -> None: ...

global___ListGridpoolTradesResponse = ListGridpoolTradesResponse

@typing.final
class ReceiveGridpoolTradesStreamRequest(google.protobuf.message.Message):
    """Subscribe to the stream of gridpool trades.
    This method provides real-time updates on newly executed gridpool trades,
    making it useful dynamic analytics and real-time decision-making.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GRIDPOOL_ID_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    gridpool_id: builtins.int
    """The Gridpool to retrieve the trades for."""
    @property
    def filter(self) -> global___GridpoolTradeFilter:
        """Optional filter to specify which trades should be included in the stream."""

    def __init__(
        self,
        *,
        gridpool_id: builtins.int = ...,
        filter: global___GridpoolTradeFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["filter", b"filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filter", b"filter", "gridpool_id", b"gridpool_id"]) -> None: ...

global___ReceiveGridpoolTradesStreamRequest = ReceiveGridpoolTradesStreamRequest

@typing.final
class ReceiveGridpoolTradesStreamResponse(google.protobuf.message.Message):
    """Response to a subscription request for a stream of Gridpool trades.
    Real-time information on trades is pushed through this response.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRADE_FIELD_NUMBER: builtins.int
    @property
    def trade(self) -> global___Trade:
        """The trade that has been executed and is being broadcasted in
        real-time.
        """

    def __init__(
        self,
        *,
        trade: global___Trade | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["trade", b"trade"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["trade", b"trade"]) -> None: ...

global___ReceiveGridpoolTradesStreamResponse = ReceiveGridpoolTradesStreamResponse

@typing.final
class ReceivePublicTradesStreamRequest(google.protobuf.message.Message):
    """Subscribe to the stream of public trades.
    This method provides real-time updates on newly executed public trades,
    making it useful dynamic analytics and real-time decision-making.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTER_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def filter(self) -> global___PublicTradeFilter:
        """Optional filter to specify which trades should be included in the stream."""

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional; if set, retrieves trades executed at or after this timestamp.
        If omitted, streams only new trades from the time of connection.
        """

    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional; if set, the stream stops after sending trades up to this
        timestamp.
        If omitted, the stream continues to stream new trades as they occur.
        """

    def __init__(
        self,
        *,
        filter: global___PublicTradeFilter | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end_time", b"end_time", "filter", b"filter", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["end_time", b"end_time", "filter", b"filter", "start_time", b"start_time"]) -> None: ...

global___ReceivePublicTradesStreamRequest = ReceivePublicTradesStreamRequest

@typing.final
class ReceivePublicTradesStreamResponse(google.protobuf.message.Message):
    """Response to a subscription request for a stream of public trades.
    Real-time information on public trades is pushed through this response.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_TRADE_FIELD_NUMBER: builtins.int
    @property
    def public_trade(self) -> global___PublicTrade:
        """The public trade that has been executed and is being broadcasted in
        real-time.
        """

    def __init__(
        self,
        *,
        public_trade: global___PublicTrade | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["public_trade", b"public_trade"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["public_trade", b"public_trade"]) -> None: ...

global___ReceivePublicTradesStreamResponse = ReceivePublicTradesStreamResponse

@typing.final
class PublicOrderBookRecord(google.protobuf.message.Message):
    """PublicOrderBookRecord represents a snapshot of an order book entry at
    a specific point in time.

    Each record captures the state of an individual order when it is first
    entered and subsequently updated.

    !!! note
        An order may generate multiple records over time, each corresponding to a
    different update event on the order book.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    PRICE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    EXECUTION_OPTION_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The order book identifier."""
    type: global___OrderType.ValueType
    """Optional: The type of order (e.g., LIMIT, STOP_LIMIT, ICEBERG).

    If not set, the order type is unknown (for example, if the source market
    does not expose the order type).
    """
    side: global___MarketSide.ValueType
    """Indicates if the order was on the Buy or Sell side."""
    execution_option: global___OrderExecutionOption.ValueType
    """Execution option (e.g., AON)."""
    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Frequenz Delivery area, using the common API type."""

    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """Frequenz Delivery period, using the common API type."""

    @property
    def price(self) -> frequenz.api.common.v1.market.price_pb2.Price:
        """Order price, using the common API definition for price."""

    @property
    def quantity(self) -> frequenz.api.common.v1.market.power_pb2.Power:
        """Open order quantity, using the common API definition for power."""

    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp when the order was created on the order book."""

    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp when this particular update event occurred.
        Each update to an order will have its own update_time reflecting
        the moment that specific change occurred.
        """

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        type: global___OrderType.ValueType | None = ...,
        side: global___MarketSide.ValueType = ...,
        price: frequenz.api.common.v1.market.price_pb2.Price | None = ...,
        quantity: frequenz.api.common.v1.market.power_pb2.Power | None = ...,
        execution_option: global___OrderExecutionOption.ValueType | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        update_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_type", b"_type", "create_time", b"create_time", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "execution_option", b"execution_option", "price", b"price", "quantity", b"quantity", "type", b"type", "update_time", b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_execution_option", b"_execution_option", "_type", b"_type", "create_time", b"create_time", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "execution_option", b"execution_option", "id", b"id", "price", b"price", "quantity", b"quantity", "side", b"side", "type", b"type", "update_time", b"update_time"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_execution_option", b"_execution_option"]) -> typing.Literal["execution_option"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_type", b"_type"]) -> typing.Literal["type"] | None: ...

global___PublicOrderBookRecord = PublicOrderBookRecord

@typing.final
class PublicOrderBookFilter(google.protobuf.message.Message):
    """Parameters for filtering order book stream results.

    !!! note
        Multiple filters can be used in combination to narrow down the returned
        order book entries. For example, you can apply both delivery period and
        delivery area filters simultaneously to list only the order book entries
        for a specific time period in a given delivery area.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DELIVERY_PERIOD_FIELD_NUMBER: builtins.int
    DELIVERY_AREA_FIELD_NUMBER: builtins.int
    SIDE_FIELD_NUMBER: builtins.int
    side: global___MarketSide.ValueType
    """Optional; if set, only order book entries for this delivery period are
    returned.
    """
    @property
    def delivery_period(self) -> frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod:
        """Optional; if set, only order book entries for this delivery period are
        returned.
        """

    @property
    def delivery_area(self) -> frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea:
        """Optional; if set, only order book entries for this delivery area are
        returned.
        """

    def __init__(
        self,
        *,
        delivery_period: frequenz.api.common.v1.grid.delivery_duration_pb2.DeliveryPeriod | None = ...,
        delivery_area: frequenz.api.common.v1.grid.delivery_area_pb2.DeliveryArea | None = ...,
        side: global___MarketSide.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_side", b"_side", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "side", b"side"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_side", b"_side", "delivery_area", b"delivery_area", "delivery_period", b"delivery_period", "side", b"side"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_side", b"_side"]) -> typing.Literal["side"] | None: ...

global___PublicOrderBookFilter = PublicOrderBookFilter

@typing.final
class ReceivePublicOrderBookStreamRequest(google.protobuf.message.Message):
    """Request to subscribe to the public order book stream.

    This RPC provides real-time updates on public order book entries for use in
    live trading and backtesting. When a client application initially connects,
    it may specify a start_time to retrieve historical order book updates.
    For example, setting start_time to "now - X hours" causes the server to
    replay all stored order book updates from that time onward. If start_time is
    omitted, only new order book updates from the moment of connection will be
    streamed. If an end_time is provided, it must be set to a timestamp in the
    past. This ensures that the historical data window is complete, and no future
    (incomplete) data is expected.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTER_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    @property
    def filter(self) -> global___PublicOrderBookFilter:
        """Optional filter to narrow down the public order book entries returned."""

    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional; if set, retrieves order book updates executed at or after this
        timestamp. For example, setting this to "now - X hours" allows a client to
        receive historical updates covering the last X hours. If omitted, only new
        order book updates from the time of connection are streamed.
        """

    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Optional; if set, stops streaming order book updates after this timestamp.
        !!! note
            end_time must be in the past.
        """

    def __init__(
        self,
        *,
        filter: global___PublicOrderBookFilter | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end_time", b"end_time", "filter", b"filter", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["end_time", b"end_time", "filter", b"filter", "start_time", b"start_time"]) -> None: ...

global___ReceivePublicOrderBookStreamRequest = ReceivePublicOrderBookStreamRequest

@typing.final
class ReceivePublicOrderBookStreamResponse(google.protobuf.message.Message):
    """Response message for the public order book stream, returning multiple order
    book records.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_ORDER_BOOK_RECORDS_FIELD_NUMBER: builtins.int
    @property
    def public_order_book_records(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___PublicOrderBookRecord]: ...
    def __init__(
        self,
        *,
        public_order_book_records: collections.abc.Iterable[global___PublicOrderBookRecord] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["public_order_book_records", b"public_order_book_records"]) -> None: ...

global___ReceivePublicOrderBookStreamResponse = ReceivePublicOrderBookStreamResponse
