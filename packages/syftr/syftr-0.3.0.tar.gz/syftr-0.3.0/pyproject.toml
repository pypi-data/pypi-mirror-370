[project]
name = "syftr"
description = "syftr is an agent optimizer that helps you find the best agentic workflows for your budget."
readme = "README.md"
license = "MIT"
dynamic = ["version"]
requires-python = ">=3.11.1,<3.13"
dependencies = [
    "adjusttext",
    "aiolimiter",
    "altair",
    "arize-phoenix",
    "boto3",
    "botocore",
    "click",
    "cloudpickle",
    "colorlog",
    "datasets>=3.3",
    "dataframe-image",
    "diskcache",
    "faiss-cpu",
    "filelock",
    "flock",
    "fsspec",
    "google-cloud-aiplatform",
    "gitpython",
    "html2text",
    "huggingface-hub",
    "ipdb",
    "kaleido==0.2.1",
    "kneed",
    "langchain>0.3",
    "langchain-community",
    "llama-index",
    "llama-index-agent-coa>=0.3.2",
    "llama-index-agent-introspective",
    "llama-index-agent-lats",
    "llama-index-agent-openai",
    "llama-index-callbacks-arize-phoenix",
    "llama-index-cli",
    "llama-index-core>=0.12.52",
    "llama-index-embeddings-azure-openai",
    "llama-index-embeddings-fastembed",
    "llama-index-embeddings-huggingface",
    "llama-index-embeddings-huggingface-optimum",
    "llama-index-embeddings-openai",
    "llama-index-embeddings-openai-like",
    "llama-index-indices-managed-llama-cloud",
    "llama-index-legacy",
    "llama-index-llms-anthropic",
    "llama-index-llms-azure-inference",
    "llama-index-llms-azure-openai",
    "llama-index-llms-cerebras",
    "llama-index-llms-huggingface",
    "llama-index-llms-ollama",
    "llama-index-llms-openai",
    "llama-index-llms-vertex==0.4.3",
    "llama-index-llms-vllm",
    "llama-index-multi-modal-llms-openai",
    "llama-index-packs-agents-coa>=0.3.2",
    "llama-index-program-openai",
    "llama-index-question-gen-openai",
    "llama-index-readers-file",
    "llama-index-readers-llama-parse",
    "llama-index-retrievers-bm25",
    "llama-index-vector-stores-faiss",
    "llama-index-vector-stores-qdrant",
    "llvmlite>=0.44", # Explicitly installed and pinned to avoid package conflicts
    "lz4",
    "maincontentextractor",
    "numba>=0.60", # Explicitly pinned to avoid package conflicts
    "numpy",
    "openinference-instrumentation-llama-index==3.3.1",
    "opentelemetry-exporter-otlp",
    "opentelemetry-sdk",
    "optimum[exporters]>=1.24.0",
    "optuna==4.2.1",
    "overrides",
    "pals",
    "pandas",
    "paretoset",
    "pip",
    "plotly",
    "psycopg2-binary",
    "pydantic-file-secrets",
    "pydantic-settings",
    "python-dotenv",
    "python-slugify",
    "rapidfuzz",
    "ray[client,data,default,serve,tune]==2.46.0",
    "rich",
    "rouge_score",
    "s3fs",
    "scikit-learn",
    "seaborn",
    "sentencepiece",
    "sqlalchemy",
    "statsmodels",
    "tabulate",
    "trace-opt",
    "transformers==4.48.3",
    "tree-sitter-languages",
    "tree-sitter",
    "tree_sitter_language_pack>=0.7.3",
    "types-protobuf",
    "types-pytz",
    "types-tabulate",
    "uv-dynamic-versioning",
    "vertexai==1.68.0",
    "torch==2.7.0",
]

[project.urls]
"Homepage" = "https://datarobot.com"
"Source" = "https://github.com/datarobot/syftr"
"Issues" = "https://github.com/datarobot/syftr/issues"

[project.scripts]
syftr = "syftr.cli:main"

[tool.hatch.version]
path = "syftr/__init__.py"
requires-python = ">=3.11.1,<3.13"
source = "uv-dynamic-versioning"

[project.optional-dependencies]
dev = [
    "altair",
    "ansible",
    "beautifulsoup4",
    "ipykernel",
    "ipython",
    "ipywidgets",
    "isort",
    "jupyter",
    "kneed",
    "matplotlib",
    "mypy",
    "nbformat",
    "nbstripout",
    "optuna-dashboard",
    "paretoset",
    "pre-commit",
    "py-irt",
    "pyro-ppl",
    "pytest-rerunfailures",
    "python-slugify",
    "pytz",
    "rpdb",
    "ruff",
    "scipy",
    "spacy",
    "types-PyYAML",
    "types-python-slugify",
    "types-requests",
    "types-tabulate",
    "xgboost",
    "yawsso",
]

[tool.setuptools.package-dir]
syftr = "syftr"

[tool.ruff]
target-version = "py311"
exclude = ["notebooks", "examples"]
line-length = 88
indent-width = 4
lint.select = [
    "E4",   # Enable pycodestyle import checks
    "E7",   # Enable pycodestyle 
    "E9",   # Enable pycodestyle errors checks
    "F",    # Enable pyflakes
    "PLE",  # Enable pylint errors
    "PLW",  # Enable pylint warnings
    "I001", # Enable import sorting
]
lint.ignore = [
    "E712", # Allow equality comparisons to `True`
]

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
exclude = ['.venv', 'build', 'notebooks']

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
addopts = "--ignore=scratch"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"
