Metadata-Version: 2.4
Name: tt-topology
Version: 1.2.13
Summary: ethernet topology configuration tool for Tenstorrent silicon
Author-email: Sam Bansal <sbansal@tenstorrent.com>
Maintainer-email: Sam Bansal <sbansal@tenstorrent.com>
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                https://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
Project-URL: Homepage, http://tenstorrent.com
Project-URL: Bug Reports, https://github.com/tenstorrent/tt-topology/issues
Project-URL: Source, https://github.com/tenstorrent/tt-topology
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console :: Curses
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE_understanding.txt
Requires-Dist: tt_tools_common>=1.4.19
Requires-Dist: pyluwen>=0.7.9
Requires-Dist: black==24.3.0
Requires-Dist: elasticsearch==8.11.0
Requires-Dist: pydantic>=1.2
Requires-Dist: pre-commit==3.5.0
Requires-Dist: networkx==3.1
Requires-Dist: matplotlib==3.7.4
Requires-Dist: setuptools==78.1.1
Dynamic: license-file
Dynamic: requires-python

# TT-Topology

Tenstorrent Topology (TT-Topology) is a command line utility
used to flash multiple NB cards on a system to use specific eth routing configurations.

It curretly supports three configurtions - mesh, linear and torus

## Official Repository

[https://github.com/tenstorrent/tt-topology/](https://github.com/tenstorrent/tt-topology/)

# Warning
tt-topology is not applicable on the following:
- BH pcie cards
- WH 6U Galaxy systems
- BH 6U Galaxy systems
The tool will error out if used with unsupported baords

# Getting started
Build and editing instruction are as follows -

## Building from Git

Install and source rust for the luwen library
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source "$HOME/.cargo/env"
```

## Optional
Generate and source a python environment.  This is useful not only to isolate
your environment, but potentially easier to debug and use.  This environment
can be shared if you want to use a single environment for all your Tenstorrent
tools

```
python3 -m venv .venv
source .venv/bin/activate
```
## Required

Install tt-topology - clone the repo, enter the folder and pip install
```
git clone https://github.com/tenstorrent/tt-topology.git
cd tt-topology
pip3 install --upgrade pip
pip3 install .
```

## Optional - for TT-Topology developers

Generate and source a python3 environment
```
python3 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip
pip install pre-commit
```

For users who would like to edit the code without re-building, install SMI in editable mode.
```
pip install --editable .
```
Recommended: install the pre-commit hooks so there is auto formatting for all files on committing.
```
pre-commit install
```

# Usage

Command line arguments
```
usage: tt-topology [-h] [-v] [-l {linear,torus,mesh,isolated}] [-o] [-f [filename]] [-g] [-ls] [--log [log]] [-p [plot]] [-r [config.json ...]]

Tenstorrent Topology (TT-Topology) is a command line utility to flash ethernet coordinates when multiple NB's are connected together.

options:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  -l {linear,torus,mesh,isolated}, --layout {linear,torus,mesh,isolated}
                        Select the layout (linear, torus, mesh, isolated). Default is linear.
  -o, --octopus
  -f [filename], --filename [filename]
                        Change filename for test log. Default: ~/tt_smi/<timestamp>_snapshot.json
  -g, --generate_reset_json
                        Generate default reset json file that reset consumes. Update the generated file and use it as an input for the --reset option
  -ls, --list           List out all the boards on host with their coordinates and layout.
  --log [log]           Change filename for the topology flash log. Default: ~/tt_topology_logs/<timestamp>_log.json
  -p [plot], --plot_filename [plot]
                        Change the plot of the png that will have the graph layout of the chips. Default: chip_layout.png
  -r [config.json ...], --reset [config.json ...]
                        Provide a valid reset JSON

```
# TT-Topology Procedure

TT-Topology does the following when calculating and flashing the coordinates -
1. Flash all the boards to default - set all eth port disables to 0 and reset coordinates to (0,0) for local chips and (1,0) for n300 remote chips.
2. Issue a board level reset to apply the new flash to the chips.
3. Generate a mapping of all possible connections and their type between the available chips.
4. Using a graph algorithm generate coordinates for each chip based on user input. These layouts are discussed in detail in the sections below.
5. Write the new coordinates to the chips.
6. Issue a board level reset to apply the new flash to the chips.
7. Return a png with a graphic representation of the layout and a .json log file with details of the above steps.


# Chip layouts

TT-topology can be used to flash one of the three chip layouts - mesh, linear and torus.

## Mesh

In the mesh layout is a trivalent graph where each node can have a max of 3 connection. A BFS algorithm is used to assign the coordinates.
Command to generate a mesh layout
```
$ tt-topology -l mesh -p mesh_layout.png
```
For a host with 2 n300 cards and 4 n300 cards, the command will generate a layouts that look as follows -

<p align="center">
  <img src="images/mesh_layout_2x4.png?raw=true" alt="mesh_layout_2x4" width="47%"/>
  &nbsp; &nbsp;
  <img src="images/mesh_layout.png?raw=true" alt="mesh_layout_2x8" width="47%"/>
</p>

## Linear

The linear layout, as the name suggests is a layout where all chips are connected by a single line. The coordinates are assigned by finding a cycle in the graph and then assigning coordinates in order.
Command to generate a linear layout
```
$ tt-topology -l linear -f linear_layout.png
```
For a host with 2 n300 cards and 4 n300 cards, the command will generate a layouts that look as follows -

<p align="center">
  <img src="images/linear_layout_2x4.png?raw=true" alt="linear_layout_2x4" width="47%"/>
  &nbsp; &nbsp;
  <img src="images/linear_layout.png?raw=true" alt="linear_layout_2x8" width="47%"/>
</p>


## Torus

The torus layout is a cyclic graph where all chips have a single line connecting all nodes.
The coordinates are assigned by finding a cycle in the graph and then assigning coordinates in order.
Command to generate a torus layout
```
$ tt-topology -l torus -p torus_layout.png
```
For a host with four n300 cards, the command will generate a layout that looks as follows

<p align="center">
  <img src="images/torus_layout_2x4.png?raw=true" alt="torus_layout_2x4" width="47%"/>
  &nbsp; &nbsp;
  <img src="images/torus_layout.png?raw=true" alt="torus_layout_2x8" width="47%"/>
</p>

# Octopus(TGG/TG) Support in TT-Topology
- TGG setting: 8 n150s connected to 2 galaxies
- TG setting: 4 n150s connected to 1 galaxy

## Usage
1. Generate a default mobo reset json file saved at ```~/.config/tenstorrent/reset_config.json``` by running the following command

    ```
    $ tt-topology -g
    ```

2. Fill in *"mobo"*, *"credo"*, and *"disabled_ports"* under *"wh_mobo_reset"*

    Here is an example of what your reset_config.json file may look like:
    ```
    {
        "time": "2024-03-06T20:12:27.640859",
        "host_name": "yyz-lab-212",
        "gs_tensix_reset": {
            "pci_index": []
        },
        "wh_link_reset": {
            "pci_index": [
                0,
                1,
                2,
                3
            ]
        },
        "re_init_devices": true,
        "wh_mobo_reset": [
            {
                "nb_host_pci_idx": [
                    0,
                    1,
                    2,
                    3
                  ],
                "mobo": "mobo-ce-44",
                "credo": [
                    "6:0",
                    "6:1",
                    "7:0",
                    "7:1"
                ],
                "disabled_ports": [
                    "0:2",
                    "1:2",
                    "6:2",
                    "7:2"
                ]
            }
        ]
    }
    ```

3. Flashing multiple NB cards to use specific eth routing configurations by running the following command

    ```
    $ tt-topology -o -r ~/.config/tenstorrent/reset_config.json
    ```

## Internal Procedure
1. Setup `mobo_eth_en` on every local n150 to train with the Galaxy
2. Program the shelf/rack of the Galaxies
3. Program all local n150s to rack 0, shelf 0, x 0, y 0
4. Reset with the following `retimer_sel` and `disable_sel` and wait for training
    - `retimer_sel`: From the `credo` field of the reset json file for the specific Galaxy
    - `disable_sel`: All the other ports not specified by the `retimer_sel`
5. Check QSFP link and change shelf number for each n150 according to the shelf on the connected Galaxy
6. Program the x, y coords of the local n150s based on the other side of the link
7. Reset again with the `retimer_sel` and `disable_sel` and wait for training, and verify all chips show up
    - `retimer_sel`: From the `credo` field of the reset json file for the specific Galaxy
    - `disable_sel`: From the `disabled_ports` field of the reset json file for the specific Galaxy

# Logging

TT-Topology records the pre and post flash relevant SPI registers, connection map and coordinates of the chips in a .json file for record keeping and debugging.
By default it is stored at ```~/tt_topology_logs/<timestamp>_log.json```. This can be changed by using the log command line argument as follows
```
$ tt-topology -log new_log.json ...
```

# License

Apache 2.0 - https://www.apache.org/licenses/LICENSE-2.0.txt
