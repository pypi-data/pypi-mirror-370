[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "logstory"
version = "1.1.1"
authors = [
  { name = "Google Cloud Security" },
]
description =  "Replay SecOps logs with updated timestamps."
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "typer[all] >= 0.12.0",
    "google-cloud-storage == 2.10",
    "google-cloud-secret-manager ~= 2.16.0", # Updated version
    "setuptools >= 61.0", # Added setuptools
    "google-api-python-client == 2.98",
    "google-auth == 2.23",
    "google-auth-httplib2 >= 0.2.0",  # For REST API auth
    "google-auth-oauthlib >= 1.0.0",  # For OAuth flows
    "oyaml >= 1.0",
    "requests ~= 2.32.3",
    "python-dotenv >= 1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/chronicle/logstory"

[tool.setuptools.packages.find]
where = ["src"]
include = ["logstory*"]

[project.scripts]
logstory = "logstory.logstory:entry_point"

[tool.setuptools.package-data]
"logstory" = [
    "usecases/**/*.log",
    "*.yaml",
    "usecases/**/*.yl2",
    "usecases/**/*.json",
    "usecases/**/*.md",
    "usecases/**/*.proto"
]

[tool.ruff]
# Ruff linting configuration - ENFORCED via pre-commit hooks
# Automatically runs on all commits and in CI/CD pipeline

# Same as Black's default line length
line-length = 88

# Assume Python 3.11+
target-version = "1.1.1"

exclude = [
    "cloudfunctions/",
    "docs/",
    "dist/",
    "*.egg-info/",
    ".git/",
    "__pycache__/",
    "*.pyc"
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "S", "B", "A", "C4", "ISC", "T20", "PT", "Q", "RSE", "RET", "SIM", "TID", "ARG", "ERA", "PL", "SLF", "PIE", "G"]
ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "E501",  # Line too long (we'll use a longer line length for existing code)
    "S101",  # Use of assert detected (common in tests)
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",  # Function is too complex
    "W293",  # Blank line contains whitespace (existing code)
    "F841",  # Local variable assigned but never used (existing code)
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
# Tests can use assertions and have more relaxed rules
"tests/*" = ["S101", "D", "PLR2004", "T201", "B904", "F541"]
# Scripts and CLI entry points can have print statements and more relaxed rules
"src/logstory/logstory.py" = ["T201", "PLR0911", "PLR2004", "PLW2901", "UP031", "D415"]
# Main module can have some relaxed rules for Cloud Functions compatibility
"src/logstory/main.py" = ["PLW2901", "ARG001"]

[tool.ruff.lint.isort]
# Sort imports according to Google style
force-single-line = false
split-on-trailing-comma = true
known-first-party = ["logstory"]

[tool.ruff.format]
# Note: This project uses pyink for formatting with 2-space indentation
# Ruff is only used for linting, not formatting

[tool.pyink]
# Format py files following Google style-guide with 2-space indentation
line-length = 88
unstable = true
pyink-indentation = 2
pyink-use-majority-quotes = true
