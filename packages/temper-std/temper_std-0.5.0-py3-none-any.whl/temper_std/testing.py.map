{ "version": 3, "file": "py/std/temper_std/testing.py", "sources": [ "std/testing/testing.temper.md" ], "sourcesContent": [ "# Temper test framework\n\n## Test instance\n\nWe currently convert assert and check macro calls into method calls on a `Test`\ninstance.\n\n    export class Test {\n\nRecommended default Temper assert is soft, meaning that it records failures for\nreporting but doesn't immediately end test execution on a false value. This lets\nyou check multiple conditions more easily.\n\n      @connected(\u0022Test::assert\u0022)\n      public assert(success: Boolean, message: fn (): String): Void {\n        if (!success) {\n          _passing = false;\n          _messages.add(message());\n        }\n      }\n\nTypical hard asserts that end the test on false condition also are available.\n\n      @connected(\u0022Test::assertHard\u0022)\n      public assertHard(\n        success: Boolean,\n        message: fn (): String,\n      ): Void | Bubble {\n        assert(success, message);\n        if (!success) {\n          // Attempt to distinguish assert fails from others.\n          // Sadly, they can still orelse an assert failure, so this isn't\n          // flawless.\n          _failedOnAssert = true;\n          bail();\n        }\n      }\n\nHarden and end current test on any pending failure if not previously hardened.\nBackends typically insert calls to this if needed, but you can also call it\nmanually at any desired point in your test.\n\n      public softFailToHard(): Void | Bubble {\n        if (hasUnhandledFail) {\n          _failedOnAssert = true;\n          bail();\n        }\n      }\n\nProvide a bailing `Bubble` method here that enables backends to customize\nmessage delivery on failure.\n\n      @connected(\u0022Test::bail\u0022)\n      private bail(): Bubble {\n        bubble()\n      }\n\nYou can check the current passing state of the test at any time. A test is\ncurrently passing if all soft checks and hard asserts have been succesful.\n\nTODO Does this need to be function call syntax for macro purposes?\n\n      @connected(\u0022Test::passing\u0022)\n      public get passing(): Boolean { _passing }\n\nMessages access is presented as a function because it likely allocates. Also,\nmessages might be automatically constructed in some cases, so it's possibly\nunwise to depend on their exact formatting.\n\n      @connected(\u0022Test::messages\u0022)\n      public messages(): List\u003cString\u003e { _messages.toList() }\n\n### Backend helper methods\n\nAvoid using backend helper methods in user code. Their behavior might be\nunreliable on some backends and/or have high risk of changing in future releases\nof Temper.\n\n      @connected(\u0022Test::failedOnAssert\u0022)\n      public get failedOnAssert(): Boolean { _failedOnAssert }\n\nAdditional helper methods to simplify backend code generation in some contexts.\n\n      public get hasUnhandledFail(): Boolean { !(_failedOnAssert || _passing) }\n\nSimple helper to get multiple messages combined for now. We probably want to do\nfancier things in the future, but this can simplify backends for now.\n\n      public messagesCombined(): String? {\n        if (_messages.isEmpty) {\n          // Unexpected, but most backends can do something with null.\n          null\n        } else {\n          _messages.join(\u0022, \u0022) { (it);; it }\n        }\n      }\n\n      private var _failedOnAssert: Boolean = false;\n      private var _passing: Boolean = true;\n      private _messages: ListBuilder\u003cString\u003e = new ListBuilder\u003cString\u003e();\n    }\n\n## Interpreter testing support\n\nNOTICE: Don't directly use anything in this section. It just exists for the\nimplementation of testing within the interpreter.\n\n    export let TestCase = Pair\u003cTestName, TestFun\u003e;\n    export let TestFailureMessage = String;\n    export let TestFun = fn (Test): Void | Bubble;\n    export let TestName = String;\n    export let TestResult = Pair\u003cTestName, List\u003cTestFailureMessage\u003e\u003e;\n\n    @connected(\u0022::processTestCases\u0022)\n    export let processTestCases(testCases: List\u003cTestCase\u003e): List\u003cTestResult\u003e {\n      testCases.map { (testCase): TestResult;;\n        let { key, value as fun } = testCase;\n        let test = new Test();\n        // Actually call the test.\n        var hadBubble = false;\n        fun(test) orelse do { hadBubble = true };\n        // Now get the messages.\n        let messages = test.messages();\n        let failures: List\u003cTestFailureMessage\u003e = if (test.passing \u0026\u0026 !hadBubble) {\n          []\n        } else if (hadBubble \u0026\u0026 !test.failedOnAssert) {\n          // Despite having 1+ failure messages, we seem to have failed on some\n          // Bubble separate from asserts, so add that on.\n          let allMessages = messages.toListBuilder();\n          allMessages.add(\u0022Bubble\u0022);\n          allMessages.toList()\n        } else {\n          messages\n        };\n        // Package up with test name.\n        new Pair(key, failures)\n      }\n    }\n\n    @connected(\u0022::reportTestResults\u0022)\n    export let reportTestResults(\n      testResults: List\u003cTestResult\u003e,\n      writeLine: fn (String): Void,\n    ): Void {\n      // Write as junit xml for consistency with our other backends.\n      // TODO Inject some call to gather this info in structured form?\n      writeLine(\u0022\u003ctestsuites\u003e\u0022);\n      let total = testResults.length.toString();\n      let fails = testResults.reduceFrom(0) { (fails: Int, testResult): Int;;\n        fails + (if (testResult.value.isEmpty) { 0 } else { 1 })\n      }.toString();\n      let totals = \u0022tests='\u0024{total}' failures='\u0024{fails}'\u0022;\n      // Just lie about time for now since it's required.\n      writeLine(\u0022  \u003ctestsuite name='suite' \u0024{totals} time='0.0'\u003e\u0022);\n      let escape(s: String): String { s.split(\u0022'\u0022).join(\u0022\u0026apos;\u0022) { (x);; x } }\n      for (var i = 0; i \u003c testResults.length; i += 1) {\n        let testResult = testResults[i];\n        let failureMessages = testResult.value;\n        let name = escape(testResult.key);\n        let basics = \u0022name='\u0024{name}' classname='\u0024{name}' time='0.0'\u0022;\n        if (failureMessages.isEmpty) {\n          writeLine(\u0022    \u003ctestcase \u0024{basics} /\u003e\u0022);\n        } else {\n          writeLine(\u0022    \u003ctestcase \u0024{basics}\u003e\u0022);\n          let message = escape(failureMessages.join(\u0022, \u0022) { (it);; it });\n          writeLine(\u0022      \u003cfailure message='\u0024{message}' /\u003e\u0022)\n          writeLine(\u0022    \u003c/testcase\u003e\u0022);\n        }\n      }\n      writeLine(\u0022  \u003c/testsuite\u003e\u0022);\n      writeLine(\u0022\u003c/testsuites\u003e\u0022);\n    }\n\n    @connected(\u0022::runTestCases\u0022)\n    export let runTestCases(testCases: List\u003cTestCase\u003e): String {\n      let report = new StringBuilder();\n      reportTestResults(processTestCases(testCases)) { (line);;\n        report.append(line);\n        report.append(\u0022\\n\u0022);\n      }\n      report.toString()\n    }\n\nTODO Is this a better idea than inlining each case? We'd need to generate\n`fn testFunction() { runTest(originalFunctionAsCallback) }` or some such.\n\n    export let runTest(testFun: TestFun): Void | Bubble {\n      let test = new Test();\n      testFun(test) orelse test.assert(false) { \u0022bubble during test running\u0022 };\n      test.softFailToHard();\n    }\n" ], "names": [ "bool", "str", "Exception", "int", "list", "tuple", "len", "MutableSequence", "Callable", "Sequence", "Union", "Pair", "list_join", "list_map", "int_to_string", "listed_reduce_from", "str_cat", "string_split", "list_get", "tuple#2443", "list_join#2445", "list#2446", "Pair#2447", "list_map#2448", "len#2449", "int_to_string#2450", "listed_reduce_from#2451", "str_cat#2452", "string_split#2453", "list_get#2454", "Test", "_failedOnAssert", "_passing", "_messages", "this", "success", "message", "t#353", "t#224", "return", "fn", "it", "t#345", "processTestCases", "testCases", "testCase", "t#337", "t#340", "t#206", "t#208", "key", "fun", "test", "hadBubble", "messages", "failures", "allMessages", "reportTestResults", "testResults", "writeLine", "t#317", "total", "fails", "testResult", "t#180", "totals", "escape", "s", "t#303", "x", "i", "failureMessages", "name", "basics", "runTestCases", "report", "t#298", "line", "runTest", "testFun" ], "mappings": "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" }