{ "version": 3, "file": "py/std/temper_std/net.py", "sources": [ "std/net/net.temper.md" ], "sourcesContent": [ "# Network Access\n\n*NetRequest* is a builder class for an HTTP send.\nNone of the methods except *send* actually initiate anything.\n\n    export class NetRequest(\n\nThe URL to request.\n\n      private url: String,\n    ) {\n      private var method: String = \u0022GET\u0022;\n      private var bodyContent: String? = null;\n      private var bodyMimeType: String? = null;\n\n*Post* switches the HTTP method to \u0022POST\u0022 and makes sure that\na body with the given textual content and mime-type will be sent\nalong.\n\n      public post(content: String, mimeType: String): Void {\n        this.method = \u0022POST\u0022;\n        this.bodyContent = content;\n        this.bodyMimeType = bodyMimeType;\n      }\n\n*Send* makes a best effort to actual send an HTTP method.\nBackends may or may not support all request features in which\ncase, send should return a broken promise.\n\n      public send(): Promise\u003cNetResponse\u003e {\n        sendRequest(\n          this.url,\n          this.method,\n          this.bodyContent,\n          this.bodyMimeType,\n        )\n      }\n    }\n\nResponse bundles together parts of an HTTP response.\n\n    @connected(\u0022NetResponse\u0022)\n    export interface NetResponse {\n\n*status* is an [HTTP Status Code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status).\n\n      @connected(\u0022NetResponse::getStatus\u0022)\n      get status(): Int;\n\n*contentType* describes the content type of the body if any.\n\n      @connected(\u0022NetResponse::getContentType\u0022)\n      get contentType(): String?;\n\n*bodyContent* is the textual content of the body if it is textual.\n\n      @connected(\u0022NetResponse::getBodyContent\u0022)\n      get bodyContent(): Promise\u003cString?\u003e;\n    }\n\nThis connected method does the work but is not directly\naccessible to Temper code.\n\n    @connected(\u0022stdNetSend\u0022)\n    let sendRequest(\n      url: String,\n      method: String,\n      bodyContent: String?,\n      bodyMimeType: String?,\n    ): Promise\u003cNetResponse\u003e {\n      panic()\n    }\n" ], "names": [ "str", "int", "RuntimeError", "Union", "Future", "ABCMeta", "abstractmethod", "std_net_send", "std_net_send#2498", "NetRequest", "url", "method", "bodyContent", "bodyMimeType", "this", "content", "mimeType", "t#51", "NetResponse", "sendRequest" ], "mappings": "A,qB,G,I,K,E,G,I,K,E,Y,I;A,mB,K,I;A,+B,M,I;A,gB,O,I,S,E,c,I;A,wB,Y,I;AA8BQQ,iBAAW,EAAA,AAAX,CAAAD,cAAW;AAzBF,MAAAE,UAAA;AAAA;AAIH,IAAAC,MAAG,CAAE;AAED,IAAAC,SAAM,CAAE;AACR,IAAAC,eAAW,CAAE;AACb,IAAAC,iBAAY,CAAE,uBAAc;AAR7B,aA+BV,EAAA,AA/BU,EAIH,QAAW,CAER,YAAuB,CACvB,kBAA4B,CAC5B,oBAA6B,CAuBvC;AAjBM,YAIN,CAAA,AAJWC,MAAA,EAAAC,UAAO,CAAE,QAAM,CAAE,CAAAC,YAAQ,CAAE,QAItC,IAAA,AAJ+C,OAAI,CAAA;AAA7C;AACL,QAAAF,MAAI,CAAgBH,SAAA,EAAA,AAAN;AACd,QAAAG,MAAI,CAAsBF,eAAA,EAAA,AAAP,CAAAG;AACa,QAAAE,IAAA,0BAAA,AAAZ,CAAAH,MAAY,CAAAD,iBAAA;AAAhC,QAAAC,MAAI,CAA4BD,iBAAA,EAAA,AAAZ,CAAAI;AAOf,YAON,CAAA,AAPYH,MAOZ,IAAA,AAPc,wBAAoB,CAAA;AAA5B;AACL,eAAAN,iBAAW,CACTM,MAAI,CAAIJ,MAAA,CACR,CAAAI,MAAI,CAAOH,SAAA,CACX,CAAAG,MAAI,CAAYF,eAAA,CAChB,CAAAE,MAAI,CAAaD,iBAAA,CAEpB;AA/BU,OAKX,UAAAC,MAAA,CAAA,AADQ,CAAAJ,MAAG,CAAE,QACb,UAAA;AADQ,QAAAI,MAAA,CAAWJ,MAAA,EAAA,AAAX,CAAAA;AAEI,QAAAI,MAAA,CAAsBH,SAAA,EAAA,AAAL;AACjB,QAAAG,MAAA,CAA2BF,eAAA,EAAA,AAAJ;AACvB,QAAAE,MAAA,CAA4BD,iBAAA,EAAA,AAAJ;AA6BrB,MAAAK,WAAA,UAeoB,EAAA,AAfpB,CAAAb,SAeoB,EAAA;AAVnC;AAAA,KAAAC;AAAA,uBAAA,AALe,QAeoB,CAAA;AAVnC;AAKA;AAAA,KAAAA;AAAA,6BAAA,AAVe,uBAeoB,CAAA;AALnC;AAKA;AAAA,KAAAA;AAAA,6BAAA,AAfe,mCAeoB,CAAA;AAAnC;AAOF,GAAI,CAAAa,eAAW,CAAA,AACbT,MAAG,CAAE,QAAM,CACX,CAAAC,SAAM,CAAE,QAAM,CACd,CAAAC,eAAW,CAAE,uBAAO,CACpB,CAAAC,iBAAY,CAAE,uBAGf,IAAA,AAFE,wBAAoB;AACrB,UAAAX,cAAO" }