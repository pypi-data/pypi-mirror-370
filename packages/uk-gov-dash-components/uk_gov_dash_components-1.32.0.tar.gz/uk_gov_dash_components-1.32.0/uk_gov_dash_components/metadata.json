{"src/lib/components/Accordion.react.js":{"description":"Lazy loaded Accordion Component\n\nThis Accordion component dynamically creates sections based on the provided `accordionHeadings`.\nEach section can be independently opened or closed. The `defaultSectionsOpen` array corresponds\nto the sections defined by `accordionHeadings`, where each element in the array represents the \nopen (true) or closed (false) state of the respective section on initial render.\n\n@param {{\n  id: string,                            // Unique identifier for the accordion component\n  accordionHeadings: string[],           // Array of headings for each section of the accordion\n  children: React.ReactNode,             // Content to be rendered inside the accordion\n  showToggleText: boolean,               // Flag to show or hide toggle text  \n  defaultSectionsOpen: boolean[],        // Array indicating the initial open state of each section\n}} [props={}]                            // Component props with default empty object\n@return {React.ReactElement}             // Returns a React element representing the accordion","displayName":"Accordion","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."},"accordionHeadings":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"Array of accordion headings."},"children":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"node"}},{"name":"node"}]},"required":false,"description":"Array of accordion children."},"bannerSections":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"number"},{"name":"enum","value":[{"value":"null","computed":false}]}]}},"required":false,"description":"Array that determines the creation of banners for each section.\nEach item in the array corresponds to a section on the page.\nIf an item is an integer, a banner with a button is created. \nThe button focuses on the child content with the corresponding index.\nIf an item is null, no banner is created for that section."},"showToggleText":{"type":{"name":"bool"},"required":false,"description":"Whether to display \"Show\" / \"Hide\" text before Accordion heading","defaultValue":{"value":"true","computed":false}},"defaultSectionsOpen":{"type":{"name":"arrayOf","value":{"name":"bool"}},"required":false,"description":"Array of booleans that determines the initial open/closed state of each section in the component.\nEach item in the array corresponds to a section. If an item is true, the corresponding section is open \nby default when the component is first rendered. If an item is false, the corresponding section is closed by default."}}},"src/lib/components/AdditionalDetails.react.js":{"description":"","displayName":"AdditionalDetails","methods":[],"props":{"id":{"type":{"name":"string"},"required":true,"description":"Id of component"},"summaryText":{"type":{"name":"string"},"required":false,"description":"Text to be shown as a summary","defaultValue":{"value":"\"Add summary text\"","computed":false}},"detailsText":{"type":{"name":"string"},"required":false,"description":"Detailed text to be shown when expanded","defaultValue":{"value":"\"Add details text\"","computed":false}},"hidden":{"type":{"name":"bool"},"required":false,"description":"Whether the component renders or not","defaultValue":{"value":"false","computed":false}}}},"src/lib/components/AutoComplete.react.js":{"description":"Lazy loaded Autocomplete\n\n@param {\n\tid,\n\tautoselect,\n\tcssNamespace,\n\tdefaultValue,\n\tdisplayMenu,\n\tminLength,\n\tname,\n\tplaceholder,\n\tonConfirm,\n\tconfirmOnBlur,\n\tshowNoOptionsFound,\n\tshowAllValues,\n\trequired,\n\ttNoResults,\n\ttAssistiveHint,\n\tsource,\n\ttemplates,\n\tdropdownArrow: dropdownArrowFactory,\n\ttStatusQueryTooShort,\n\ttStatusNoResults,\n\ttStatusSelectedOption,\n\ttStatusResults,\n\tstyle,\n errorMessage,\n errorMessageWhenEmpty,\n menu_open, \n} [props={}]\n@return {*}","displayName":"AutoComplete","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"autoselect":{"type":{"name":"bool"},"required":false,"description":"Should auto select"},"cssNamespace":{"type":{"name":"string"},"required":false,"description":"cssNamespace"},"displayMenu":{"type":{"name":"string"},"required":false,"description":"No Description"},"minLength":{"type":{"name":"number"},"required":false,"description":"No Description"},"name":{"type":{"name":"string"},"required":false,"description":"No Description"},"placeholder":{"type":{"name":"string"},"required":false,"description":"No Description"},"onConfirm":{"type":{"name":"func"},"required":false,"description":"No Description"},"confirmOnBlur":{"type":{"name":"bool"},"required":false,"description":"No Description"},"showNoOptionsFound":{"type":{"name":"bool"},"required":false,"description":"No Description"},"showAllValues":{"type":{"name":"bool"},"required":false,"description":"No Description"},"required":{"type":{"name":"bool"},"required":false,"description":"No Description"},"tNoResults":{"type":{"name":"func"},"required":false,"description":"No Description"},"tAssistiveHint":{"type":{"name":"func"},"required":false,"description":"No Description"},"source":{"type":{"name":"any"},"required":false,"description":"No Description"},"templates":{"type":{"name":"any"},"required":false,"description":"No Description"},"tStatusQueryTooShort":{"type":{"name":"func"},"required":false,"description":"No Description"},"tStatusNoResults":{"type":{"name":"any"},"required":false,"description":"No Description"},"tStatusSelectedOption":{"type":{"name":"func"},"required":false,"description":"No Description"},"tStatusResults":{"type":{"name":"any"},"required":false,"description":"No Description"},"dropdownArrow":{"type":{"name":"any"},"required":false,"description":"React component for dropdown arrow"},"selectElement":{"type":{"name":"any"},"required":false,"description":"Accessible element"},"value":{"type":{"name":"string"},"required":false,"description":"The value displayed in the input."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."},"alwaysDisplayArrow":{"type":{"name":"bool"},"required":false,"description":"alwaysDisplayArrow"},"wrapperRef":{"type":{"name":"any"},"required":false,"description":"wrapperRef"},"style":{"type":{"name":"any"},"required":false,"description":"Override the css style of the wrapper"},"errorMessage":{"type":{"name":"string"},"required":false,"description":"Error message to display when invalid input entered in dropdown"},"errorMessageWhenEmpty":{"type":{"name":"bool"},"required":false,"description":"Whether to display error message when query is empty in dropdown"},"menu_open":{"type":{"name":"bool"},"required":false,"description":"Whether the dropdown menu is open. Used to fire a callback  \nwhen the menu is opened."},"ariaLabelledBy":{"type":{"name":"string"},"required":false,"description":"This is the ID for the label field"}}},"src/lib/components/ChangeLogBanner.react.js":{"description":"","displayName":"ChangeLogBanner","methods":[],"props":{"updates":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"type":{"name":"string","required":true},"date":{"name":"string","required":false},"heading":{"name":"string","required":true},"link":{"name":"string","required":false},"linkTitle":{"name":"string","required":false}}}},"required":false,"description":"Array of dictionaries representing changelog updates","defaultValue":{"value":"[]","computed":false}}}},"src/lib/components/CheckboxList.react.js":{"description":"Lazy loaded CheckboxList\n\n@param {\n\tid,\n\toptions,\n\tvalue,\n} [props={}]\n@return {*}","displayName":"CheckboxList","methods":[],"props":{"options":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"description":"Array of options where the label and the value are the same thing - [string|number|bool]"},{"name":"object","description":"Simpler `options` representation in dictionary format. The order is not guaranteed.\n{`value1`: `label1`, `value2`: `label2`, ... }\nwhich is equal to\n[{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]"},{"name":"arrayOf","value":{"name":"exact","value":{"label":{"name":"node","description":"The option's label","required":true},"value":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}],"description":"The value of the option. This value\ncorresponds to the items specified in the\n`value` property.","required":true},"disabled":{"name":"bool","description":"If true, this option is disabled and cannot be selected.","required":false},"title":{"name":"string","description":"The HTML 'title' attribute for the option. Allows for\ninformation on hover. For more information on this attribute,\nsee https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title","required":false}}},"description":"An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option"}]},"required":false,"description":"An array of options","defaultValue":{"value":"[]","computed":false}},"value":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]}},"required":false,"description":"The currently selected value","defaultValue":{"value":"[]","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."}}},"src/lib/components/ComponentTemplate.react.js":{"description":"Lazy loaded ComponentTemplate\n\n@param {\n\tid,\n} [props={}]\n@return {*}","displayName":"ComponentTemplate","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."}}},"src/lib/components/CookieBanner.react.js":{"description":"Lazy loaded CookieBanner\n\nThis CookieBanner component creates a banner to allow users to accept or reject cookies which\nare not essential to making the service work. The banner displays until a user has saved their\ncookie preference. Once a user has accepted or rejected cookies, the cookies banner shows a\nconfirmation message.\n\n@param {\nid: string,                            // Unique identifier for the cookie component\ntag: string                            // Google Analytics tag string\nappTitle: string                       // Name of the app\ndomain: string                         // Domain of the website\n} [props={}]\n@return {*}","displayName":"CookieBanner","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"tag":{"type":{"name":"string"},"required":false,"description":"The Google Analytics tag."},"appTitle":{"type":{"name":"string"},"required":false,"description":"The name of the app to be referenced in CookieBanner."},"domain":{"type":{"name":"string"},"required":false,"description":"The domain of the app to be referenced in the cookies, needed for deletion of cookies."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."}}},"src/lib/components/CookiesPage.react.js":{"description":"Lazy loaded CookiesPage\n\nThis CookiesPage component tells users about the cookies you\u2019re setting on their device and lets\nthem accept or reject different types of non-essential cookies.\n\n@param {\nid: string,                            // Unique identifier for the cookie component\ntag: string                            // Google Analytics tag string\nappTitle: string                       // Name of the app\npreviousPage: string                   // The path to the previous page                   \n} [props={}]\n@return {*}","displayName":"CookiesPage","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"tag":{"type":{"name":"string"},"required":false,"description":"The Google Analytics tag."},"appTitle":{"type":{"name":"string"},"required":false,"description":"The name of the app to be referenced in CookiesPage."},"previousPage":{"type":{"name":"string"},"required":false,"description":"The path to the previous page, which is used in success banner on CookiesPage when cookies\naccepted/rejected."},"domain":{"type":{"name":"string"},"required":false,"description":"The domain of the app to be referenced in the cookies, needed for deletion of cookies."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."}}},"src/lib/components/Dropdown.react.js":{"description":"@param {{\n\tlabel: string,\n\tlabelStyle,\n\tid,\n\tautoselect,\n\tcssNamespace,\n\tvalue,\n\tminLength,\n\tname,\n\tplaceholder,\n\tonConfirm,\n\tconfirmOnBlur,\n\tshowNoOptionsFound,\n\trequired,\n\ttNoResults,\n\ttAssistiveHint,\n\tsource,\n\ttemplates,\n\tdropdownArrow: dropdownArrowFactory,\n\ttStatusQueryTooShort,\n\ttStatusNoResults,\n\ttStatusSelectedOption,\n\ttStatusResults,\n errorMessage,\n errorMessageWhenEmpty,\n menu_open,\n}} [props={}]\n\n@return {*}","displayName":"Dropdown","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"label":{"type":{"name":"string"},"required":false,"description":"Label text"},"labelStyle":{"type":{"name":"any"},"required":false,"description":"Override the css style of the dropdown label text"},"autoselect":{"type":{"name":"bool"},"required":false,"description":"Should auto select"},"cssNamespace":{"type":{"name":"string"},"required":false,"description":"cssNamespace"},"minLength":{"type":{"name":"number"},"required":false,"description":"No Description"},"name":{"type":{"name":"string"},"required":false,"description":"No Description"},"placeholder":{"type":{"name":"string"},"required":false,"description":"No Description"},"onConfirm":{"type":{"name":"func"},"required":false,"description":"No Description"},"confirmOnBlur":{"type":{"name":"bool"},"required":false,"description":"No Description"},"showNoOptionsFound":{"type":{"name":"bool"},"required":false,"description":"No Description"},"required":{"type":{"name":"bool"},"required":false,"description":"No Description"},"tNoResults":{"type":{"name":"func"},"required":false,"description":"No Description"},"tAssistiveHint":{"type":{"name":"func"},"required":false,"description":"No Description"},"source":{"type":{"name":"any"},"required":false,"description":"No Description"},"templates":{"type":{"name":"any"},"required":false,"description":"No Description"},"tStatusQueryTooShort":{"type":{"name":"func"},"required":false,"description":"No Description"},"tStatusNoResults":{"type":{"name":"any"},"required":false,"description":"No Description"},"tStatusSelectedOption":{"type":{"name":"func"},"required":false,"description":"No Description"},"tStatusResults":{"type":{"name":"any"},"required":false,"description":"No Description"},"dropdownArrow":{"type":{"name":"any"},"required":false,"description":"React component for dropdown arrow"},"selectElement":{"type":{"name":"any"},"required":false,"description":"Accessible element"},"value":{"type":{"name":"string"},"required":false,"description":"The value displayed in the input."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."},"wrapperRef":{"type":{"name":"any"},"required":false,"description":"wrapperRef"},"style":{"type":{"name":"any"},"required":false,"description":"Override the css style of the wrapper"},"errorMessage":{"type":{"name":"string"},"required":false,"description":"Error message to display when invalid input entered in dropdown"},"errorMessageWhenEmpty":{"type":{"name":"bool"},"required":false,"description":"Whether to display error message when query is empty in dropdown"},"menu_open":{"type":{"name":"bool"},"required":false,"description":"Whether the dropdown menu is open. Used to fire a callback  \nwhen the menu is opened."}}},"src/lib/components/ExpandableMenuItem.react.js":{"description":"Lazy loaded ExpandableMenuItem\n\n@param {\n\tid,\n title,\n collapsedByDefault,\n children,\n expandedClass,\n collapsedClass,\n ariaLabel,\n subMenuClass,\n titleClass,\n} [props={}]\n@return {*}","displayName":"ExpandableMenuItem","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"title":{"type":{"name":"string"},"required":false,"description":"The clickable text to display sub-menu"},"collapsedByDefault":{"type":{"name":"bool"},"required":false,"description":"Default behaviour of whether or not the sub-menu is collapsed on load","defaultValue":{"value":"true","computed":false}},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."},"children":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"node"}},{"name":"node"}]},"required":false,"description":"An array of li HTML elements that will displayed on click or a single html element"},"expandedClass":{"type":{"name":"string"},"required":false,"description":"CSS class that will be applied when the menu is expanded"},"collapsedClass":{"type":{"name":"string"},"required":false,"description":"CSS class that will be applied when the menu is collapsed"},"ariaLabel":{"type":{"name":"string"},"required":false,"description":"Accessible text to describe the expandable menu element, attached to Li element that wraps the children"},"subMenuClass":{"type":{"name":"string"},"required":false,"description":"CSS class that will be applied to the sub nav menu"},"titleClass":{"type":{"name":"string"},"required":false,"description":"CSS class that will be applied to the title of the sub nav menu"}}},"src/lib/components/Radios.react.js":{"description":"Lazy loaded Radios\n\n@param {\n\tid,\n title,\n options,\n value,\n} [props={}]\n@return {*}","displayName":"Radios","methods":[],"props":{"options":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"description":"Array of options where the label and the value are the same thing - [string|number|bool]"},{"name":"object","description":"Simpler `options` representation in dictionary format. The order is not guaranteed.\n{`value1`: `label1`, `value2`: `label2`, ... }\nwhich is equal to\n[{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]"},{"name":"arrayOf","value":{"name":"exact","value":{"label":{"name":"node","description":"The option's label","required":true},"value":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}],"description":"The value of the option. This value\ncorresponds to the items specified in the\n`value` property.","required":true},"disabled":{"name":"bool","description":"If true, this option is disabled and cannot be selected.","required":false},"title":{"name":"string","description":"The HTML 'title' attribute for the option. Allows for\ninformation on hover. For more information on this attribute,\nsee https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title","required":false}}},"description":"An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option"}]},"required":false,"description":"An array of options","defaultValue":{"value":"[]","computed":false}},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"bool"}]},"required":false,"description":"The currently selected value","defaultValue":{"value":"[]","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"title":{"type":{"name":"string"},"required":false,"description":"The title to be displayed above all Radio items."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."}}},"src/lib/components/Tabs.react.js":{"description":"Lazy loaded Tabs\n\n@param {\n\tid,\n tabHeadings,\n defaultTab,\n children,\n} [props={}]\n@return {*}","displayName":"Tabs","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."},"setProps":{"type":{"name":"func"},"required":false,"description":"Dash-assigned callback that gets fired when the value changes."},"tabHeadings":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"Array of accordion headings."},"defaultTab":{"type":{"name":"number"},"required":false,"description":"The default active tab"},"children":{"type":{"name":"arrayOf","value":{"name":"node"}},"required":false,"description":"Array of tab children."}}},"src/lib/components/dropdownArrowDown.react.js":{"description":"Default dropdown arrow\n\n@param {string} { className }","displayName":"DropdownArrowDown","methods":[],"props":{"className":{"type":{"name":"string"},"required":false,"description":"Class name to add to SVG"}}},"src/lib/components/status.js":{"description":"Display ststus\n\n@export\n@class Status\n@extends {Component}","displayName":"Status","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"length":{"type":{"name":"number"},"required":false,"description":"length"},"minQueryLength":{"type":{"name":"number"},"required":false,"description":"min Query Length"},"queryLength":{"type":{"name":"number"},"required":false,"description":"Query Length"},"selectedOption":{"type":{"name":"any"},"required":false,"description":"Selected option"},"selectedOptionIndex":{"type":{"name":"number"},"required":false,"description":"Selected Option Index"},"tQueryTooShort":{"type":{"name":"func"},"required":false,"description":"tQueryTooShort","defaultValue":{"value":"(minQueryLength) => `Type in ${minQueryLength} or more characters for results`","computed":false}},"tNoResults":{"type":{"name":"func"},"required":false,"description":"tNoResults","defaultValue":{"value":"() => 'No search results'","computed":false}},"tSelectedOption":{"type":{"name":"func"},"required":false,"description":"tSelectedOption","defaultValue":{"value":"(selectedOption, length, index) => `${selectedOption} ${index + 1} of ${length} is highlighted`","computed":false}},"tResults":{"type":{"name":"func"},"required":false,"description":"tResults","defaultValue":{"value":"(length, contentSelectedOption) => {\n    const words = {\n        result: (length === 1) ? 'result' : 'results',\n        is: (length === 1) ? 'is' : 'are'\n    }\n\n    return `${length} ${words.result} ${words.is} available. ${contentSelectedOption}`\n}","computed":false}}}},"src/lib/components/ui/ComboBox.react.js":{"description":"","displayName":"ComboBox","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."},"label":{"type":{"name":"string"},"required":false,"description":""},"defaultInputValue":{"type":{"name":"string"},"required":false,"description":""},"defaultItems":{"type":{"name":"any"},"required":false,"description":""},"items":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"custom","raw":"{\n    key: PropTypes.String,\n    name: PropTypes.string,\n}"}},{"name":"arrayOf","value":{"name":"custom","raw":"{\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    name: PropTypes.string,\n}"}}]},"required":false,"description":""},"onSelectionChange":{"type":{"name":"func"},"required":false,"description":""},"allowsCustomValue":{"type":{"name":"bool"},"required":false,"description":""},"onInputChange":{"type":{"name":"func"},"required":false,"description":""},"selectedKey":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":""},"menuTrigger":{"type":{"name":"string"},"required":false,"description":""}}},"src/lib/components/ui/ListBox.react.js":{"description":"Listbox\n\n@param {*} [props={}]\n@return {*}","displayName":"ListBox","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."}}},"src/lib/components/ui/Popover.react.js":{"description":"Propover\n\n@export\n@param {*} props\n@return {*}","displayName":"Popover","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The ID used to identify this component in Dash callbacks."}}}}