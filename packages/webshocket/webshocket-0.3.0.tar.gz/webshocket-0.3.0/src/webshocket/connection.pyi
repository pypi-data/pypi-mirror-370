import websockets
from typing import Any, Union

from .handler import WebSocketHandler
from .enum import ConnectionState
from .packets import Packet, RPCResponse

class ClientConnection(websockets.ServerConnection):
    def __init__(
        self,
        websocket_protocol: websockets.ServerConnection,
        handler: WebSocketHandler,
        packet_qsize: int = 1,
    ) -> None: ...
    session_state: dict[str, Any] = dict()
    connection_state: ConnectionState = ConnectionState.CONNECTED

    @staticmethod
    def string_to_packet(data: str | bytes) -> Packet: ...
    @property
    def subscribed_channel(self) -> set[str]: ...
    async def _send_rpc_response(self, rpc_response: "RPCResponse") -> None: ...
    async def send(self, data: Union[Any, Packet]) -> None: ...
    async def recv(self, timeout: float = 30.0) -> Packet: ...
    async def close(self, code: int = 1000, reason: str = "") -> None: ...
    def subscribe(self, channel: str) -> None: ...
    def unsubscribe(self, channel: str) -> None: ...
    def __setitem__(self, name: str, value: Any) -> None: ...
    def __delitem__(self, name: str) -> None: ...
    def __getitem__(self, name: str) -> None: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __getattr__(self, name: str) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
