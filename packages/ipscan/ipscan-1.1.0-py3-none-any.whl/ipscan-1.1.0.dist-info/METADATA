Metadata-Version: 2.4
Name: ipscan
Version: 1.1.0
Summary: Fast IP scanner — multithreaded Ping and ARP scanning
Home-page: https://github.com/Wing9897/ipscan.git
Author: Wing
Author-email: tomt99688@gmail.com
License: MIT
Project-URL: Source, https://github.com/Wing9897/ipscan
Project-URL: English README, https://github.com/Wing9897/ipscan/blob/main/README.md
Project-URL: 繁體中文 README, https://github.com/Wing9897/ipscan/blob/main/README.zh-TW.md
Keywords: ip scan ping arp network scanner
Classifier: Development Status :: 5 - Production/Stable
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: System :: Networking
Classifier: Natural Language :: English
Classifier: Natural Language :: Chinese (Traditional)
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ping3>=4.0.0
Requires-Dist: tqdm>=4.60.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# ipscan

Fast IP scanner — multithreaded Ping and ARP scanning for Windows

Language: English | 繁體中文 (Traditional Chinese)

- English (current)
- Traditional Chinese: README.zh-TW.md

---

## English

Fast IP scanner — multithreaded Ping and ARP scanning for Windows

### Installation

```bash
pip install ipscan
```

### Usage

#### Ping scan

```python
from ipscan import ping_range, PingScanner

# Scan an IP range
online_hosts = ping_range("192.168.1.1", "192.168.1.254")
print(f"Online hosts: {online_hosts}")

# Class-based API
scanner = PingScanner(timeout=1.0)
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

#### ARP scan

```python
from ipscan import arp_range, ArpScanner

# Scan an IP range and get MAC addresses
host_info = arp_range("192.168.1.1", "192.168.1.254")
for ip, mac in host_info.items():
    print(f"{ip} -> {mac}")

# Class-based API
scanner = ArpScanner()
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

#### CLI tools

```bash
# High-speed continuous ping (interactive)
fping

# Simple range scans
sping
sarp
```

### Features

- Multithreaded scanning for high speed
- Supports both Ping and ARP scans
- Progress bar display
- Clean, minimal API

### Requirements

- Python 3.7+
- Windows (required for ARP scan)

---

## 繁體中文

快速IP掃描工具 - 多線程 Ping 和 ARP 掃描（Windows）

### 安裝

```bash
pip install ipscan
```

### 使用方法

#### Ping 掃描

```python
from ipscan import ping_range, PingScanner

# 掃描 IP 範圍
online_hosts = ping_range("192.168.1.1", "192.168.1.254")
print(f"在線主機: {online_hosts}")

# 使用類接口
scanner = PingScanner(timeout=1.0)
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

#### ARP 掃描

```python
from ipscan import arp_range, ArpScanner

# 掃描 IP 範圍並獲取 MAC 地址
host_info = arp_range("192.168.1.1", "192.168.1.254")
for ip, mac in host_info.items():
    print(f"{ip} -> {mac}")

# 使用類接口
scanner = ArpScanner()
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

#### 命令行工具

```bash
# 高速連續 Ping（互動式）
fping

# 範圍掃描
sping
sarp
```

### 特點

- 多線程掃描，速度極快（Ping 掃描 65535 個裝置約 30–60 秒；ARP 掃描約 15–30 秒）
- 支援 Ping 與 ARP 掃描
- 顯示進度條
- 簡潔的 API 設計

### 系統需求

- Python 3.7+
- Windows（ARP 掃描需要）

## Installation

```bash
pip install ipscan
```

## Usage

### Ping scan

```python
from ipscan import ping_range, PingScanner

# Scan an IP range
online_hosts = ping_range("192.168.1.1", "192.168.1.254")
print(f"Online hosts: {online_hosts}")

# Class-based API
scanner = PingScanner(timeout=1.0)
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

### ARP scan

```python
from ipscan import arp_range, ArpScanner

# Scan an IP range and get MAC addresses
host_info = arp_range("192.168.1.1", "192.168.1.254")
for ip, mac in host_info.items():
    print(f"{ip} -> {mac}")

# Class-based API
scanner = ArpScanner()
results = scanner.scan_range("10.0.0.1", "10.0.0.100")
```

### CLI tools

```bash
# High-speed continuous ping (interactive)
fping

# Simple range scans
sping
sarp
```

## Features

- Multithreaded scanning for high speed
- Supports both Ping and ARP scans
- Progress bar display
- Clean, minimal API

## Requirements

- Python 3.7+
- Windows (required for ARP scan)
