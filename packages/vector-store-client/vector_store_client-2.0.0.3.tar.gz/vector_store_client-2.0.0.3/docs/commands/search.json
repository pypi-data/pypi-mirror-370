{
  "command": "search",
  "summary": "Search for chunks by semantic string and/or metadata filter",
  "description": "Perform semantic search using 384-dimensional vector embeddings with optional metadata filtering",
  "parameters": {
    "search_str": {
      "type": "string",
      "description": "Semantic search string that will be converted to 384-dimensional embedding vector and matched by vector similarity. Use for natural language queries. Example: 'machine learning algorithms', 'python programming tips'"
    },
    "embedding": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 384,
      "maxItems": 384,
      "description": "Precomputed 384-dim embedding vector for direct similarity search. Use when you already have the embedding vector. Must be exactly 384 float values."
    },
    "metadata_filter": {
      "type": "object",
      "description": "Metadata filter for filtering results. Supports: $eq, $in, $range, $gte, $lte, $gt, $lt for scalar and array fields. Can be combined with search_str or embedding.",
      "additionalProperties": true
    },
    "ast_filter": {
      "type": "object",
      "description": "AST-based filter expression for advanced filtering. Provides structured query language with operators like AND, OR, NOT, comparison operators, and field-specific filters. Example: {\"operator\": \"AND\", \"left\": {\"field\": \"category\", \"operator\": \"=\", \"value\": \"technical\"}, \"right\": {\"field\": \"language\", \"operator\": \"=\", \"value\": \"en\"}}",
      "additionalProperties": true
    },
    "limit": {
      "type": "integer",
      "minimum": 1,
      "maximum": 1000,
      "default": 10,
      "description": "Maximum number of results to return (1-1000)"
    },
    "level_of_relevance": {
      "type": "number",
      "minimum": 0.0,
      "maximum": 1.0,
      "default": 0.0,
      "description": "Minimum similarity threshold (0.0-1.0)"
    },
    "offset": {
      "type": "integer",
      "minimum": 0,
      "default": 0,
      "description": "Number of results to skip for pagination"
    }
  },
  "required": [],
  "examples": {
    "semantic_search": {
      "description": "Search by semantic string",
      "request": {
        "jsonrpc": "2.0",
        "method": "search",
        "params": {
          "search_str": "machine learning algorithms",
          "limit": 5,
          "level_of_relevance": 0.7
        },
        "id": 1
      }
    },
    "search_with_metadata_filter": {
      "description": "Search with metadata filter",
      "request": {
        "jsonrpc": "2.0",
        "method": "search",
        "params": {
          "search_str": "python programming",
          "metadata_filter": {
            "language": "en",
            "category": "programming"
          },
          "limit": 10
        },
        "id": 1
      }
    },
    "search_with_ast_filter": {
      "description": "Search with AST filter",
      "request": {
        "jsonrpc": "2.0",
        "method": "search",
        "params": {
          "search_str": "data science",
          "ast_filter": {
            "operator": "AND",
            "left": {
              "field": "category",
              "operator": "=",
              "value": "technical"
            },
            "right": {
              "field": "language",
              "operator": "=",
              "value": "en"
            }
          },
          "limit": 5
        },
        "id": 1
      }
    },
    "search_by_embedding": {
      "description": "Search using precomputed embedding",
      "request": {
        "jsonrpc": "2.0",
        "method": "search",
        "params": {
          "embedding": [0.1, 0.2, 0.3],
          "limit": 5
        },
        "id": 1
      }
    }
  }
} 