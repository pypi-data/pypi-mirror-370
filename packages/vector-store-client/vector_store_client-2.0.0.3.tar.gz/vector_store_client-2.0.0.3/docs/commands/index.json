{
  "service_info": {
    "name": "Vector Store Database",
    "description": "High-performance service for storing, retrieving, and searching vector embeddings",
    "version": "1.0.0",
    "features": [
      "Storage and retrieval of vector embeddings",
      "Semantic search by text and vectors",
      "Metadata filtering",
      "Efficient vector operations",
      "Standardized API response format"
    ]
  },
  "commands": [
    {
      "name": "config",
      "file": "config.json",
      "summary": "Command for managing service configuration",
      "description": "Get or set configuration parameters for the service"
    },
    {
      "name": "health",
      "file": "health.json",
      "summary": "Command that returns information about server health and status",
      "description": "Check the health status of the service and get basic information"
    },
    {
      "name": "help",
      "file": "help.json",
      "summary": "Command for getting help information about available commands",
      "description": "Get information about available commands and their usage"
    },
    {
      "name": "chunk_create",
      "file": "chunk_create.json",
      "summary": "Create chunks in the vector store",
      "description": "Create one or many chunk records with 384-dimensional embeddings"
    },
    {
      "name": "chunk_delete",
      "file": "chunk_delete.json",
      "summary": "Delete chunks from the vector store",
      "description": "Delete chunks based on metadata filters or AST-based filter expressions"
    },
    {
      "name": "chunk_hard_delete",
      "file": "chunk_hard_delete.json",
      "summary": "Hard delete chunks by UUIDs",
      "description": "Physically remove chunks from FAISS and Redis by their UUIDs"
    },
    {
      "name": "chunk_deferred_cleanup",
      "file": "chunk_deferred_cleanup.json",
      "summary": "Perform deferred cleanup of deleted chunks",
      "description": "Clean up chunks that have been marked for deletion but not yet physically removed"
    },
    {
      "name": "search",
      "file": "search.json",
      "summary": "Search for chunks by semantic string and/or metadata filter",
      "description": "Perform semantic search using 384-dimensional vector embeddings with optional metadata filtering"
    },
    {
      "name": "find_duplicate_uuids",
      "file": "find_duplicate_uuids.json",
      "summary": "Find all UUIDs with duplicate records and return their metadata",
      "description": "Find and return UUIDs that have duplicate records in the vector store"
    },
    {
      "name": "clean_faiss_orphans",
      "file": "clean_faiss_orphans.json",
      "summary": "Clean FAISS orphan records",
      "description": "Remove orphaned records from FAISS index that have no corresponding metadata in Redis"
    },
    {
      "name": "reindex_missing_embeddings",
      "file": "reindex_missing_embeddings.json",
      "summary": "Reindex chunks with missing embeddings",
      "description": "Regenerate embeddings for chunks that have metadata but missing vector embeddings"
    },
    {
      "name": "force_delete_by_uuids",
      "file": "force_delete_by_uuids.json",
      "summary": "Force delete chunks by UUIDs",
      "description": "Force delete chunks by their UUIDs, bypassing normal deletion checks"
    },
    {
      "name": "count",
      "file": "count.json",
      "summary": "Count chunks in the vector store",
      "description": "Count chunks based on metadata filters or AST-based filter expressions"
    },
    {
      "name": "info",
      "file": "info.json",
      "summary": "Get service information",
      "description": "Get detailed information about the vector store service"
    }
  ],
  "api_endpoints": {
    "execute_command": {
      "path": "/cmd",
      "method": "POST",
      "description": "Execute Command via JSON-RPC protocol"
    },
    "health_check": {
      "path": "/health",
      "method": "GET",
      "description": "Check service health status"
    },
    "openapi_schema": {
      "path": "/openapi.json",
      "method": "GET",
      "description": "Get OpenAPI schema"
    },
    "commands_list": {
      "path": "/api/commands",
      "method": "GET",
      "description": "Get list of available commands"
    }
  },
  "json_rpc_info": {
    "version": "2.0",
    "content_type": "application/json",
    "base_url": "http://localhost:8007"
  }
} 