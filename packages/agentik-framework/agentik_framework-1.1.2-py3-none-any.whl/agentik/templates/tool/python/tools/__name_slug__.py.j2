"""
Tool: {{ name }}
Generated by Agentik template 'tool/python'.

What this is:
- A tiny, ready-to-use skeleton for building a custom tool.

How to use:
1) Replace placeholders:
   - {{ name }} (human title)
   - {{ name_slug }} (CLI slug; lowercase, no spaces)
   - {{ class_name }} (Python class name, e.g., MyTool)
2) Describe your tool in `description`.
3) Define inputs in `schema["properties"]` and `schema["required"]`.
4) Implement your logic inside `run()` and return {"ok": True, ...}.
5) Run via:
   agentik tools run {{ name_slug }} --json '{"your":"params"}'
"""

from __future__ import annotations
from typing import Any, Dict
from .base import ToolBase


class {{ class_name }}(ToolBase):
    # CLI: agentik tools run {{ name_slug }}
    name = "{{ name_slug }}"
    description = "Briefly describe what this tool does and what it returns."

    # JSON Schema for inputs (keep simple; tighten later)
    schema: Dict[str, Any] = {
        "type": "object",
        "properties": {
            # Example fields â€” replace with your own:
            # "query": {"type": "string", "description": "Main input text"},
            # "limit": {"type": "number", "description": "Max items to process"},
            # "verbose": {"type": "boolean", "description": "Extra details"},
        },
        "required": [
            # e.g., "query"
        ],
        "additionalProperties": True,  # set to False to reject unknown fields
    }

    def run(self, **kwargs: Any) -> Dict[str, Any]:
        """
        Implement your tool logic here.

        Steps:
        - Read inputs from `kwargs`, validate as needed.
        - Do your processing.
        - Return a dict with "ok": True and your result fields.
        - Raise ValueError for user-correctable issues (missing/invalid inputs).
        """
        # --- minimal example (remove and replace) ---
        # if "query" not in kwargs:
        #     raise ValueError("Missing required field: 'query'")
        # result = do_something(kwargs["query"], limit=kwargs.get("limit"))
        # return {"ok": True, "result": result}

        # Default starter: echo inputs so you see the shape end-to-end
        return {"ok": True, "echo": kwargs}
