# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files in version control:
#  - .idea/inspectionProfiles/profiles_settings.xml
#  - .idea/inspectionProfiles/Project_Default.xml
#  - .idea/misc.xml
#  - .idea/modules.xml
#  - .idea/scopes/scope_settings.xml
#  - .idea/vcs.xml
#  - .idea/workspace.xml
#  - .idea/tasks.xml
#  - .idea/gradle.xml
#  - .idea/assetWizardSettings.xml
#  - .idea/dictionaries
#  - .idea/libraries
# Sensitive or high-churn files:
#  - .idea/dataSources/
#  - .idea/dataSources.ids
#  - .idea/dataSources.local.xml
#  - .idea/sqlDataSources.xml
#  - .idea/dynamic.xml
#  - .idea/uiDesigner.xml
#  - .idea/dbnavigator.xml
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# =============================================================================
# PROJECT SPECIFIC IGNORES
# =============================================================================

# Log files from unrealon-rpc
logs/
*.log

# Redis dump files
dump.rdb
*.rdb

# IPFS data
.ipfs/
ipfs_data/

# WebSocket connection files
*.sock

# Configuration files with secrets
config.local.yml
config.local.yaml
.env.local
.env.production
secrets.yml
secrets.yaml

# API keys and credentials
api_keys.txt
credentials.json
*.pem
*.key
*.crt

# Parser data and cache
parser_cache/
scraped_data/
temp_data/

# Development databases
dev.db
test.db
*.sqlite

# Backup files
*.bak
*.backup
*.old

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Editor backup files
*~
*.swp
*.swo

# Node.js (for any JS tooling)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Docker
.dockerignore
docker-compose.override.yml

# Kubernetes
*.kubeconfig

# Monitoring and profiling
*.prof
*.pprof

# Coverage reports
.coverage*
coverage/
htmlcov/

# Benchmark results
benchmarks/results/
*.bench

# Documentation build artifacts
docs/build/
docs/_build/
site/

# Generated API documentation
api_docs/

# Local development overrides
local/
dev/
development/

# IDE and editor files
*.sublime-project
*.sublime-workspace
.vscode/settings.json

# macOS
.AppleDouble
.LSOverride

# Windows
*.exe
*.msi
*.msm
*.msp

# Linux
*.AppImage

# =============================================================================
# KEEP THESE FILES (override common ignores)
# =============================================================================

# Keep important config templates
!config.example.yml
!config.template.yaml
!.env.example

# Keep documentation
!README.md
!CHANGELOG.md
!LICENSE
!@docs/

# Keep test configuration
!pytest.ini
!pyproject.toml
!poetry.lock
.benchmarks*/

# Keep CI/CD files
!.github/
!.gitlab-ci.yml
!Dockerfile
!docker-compose.yml

# Keep example files
!examples/
