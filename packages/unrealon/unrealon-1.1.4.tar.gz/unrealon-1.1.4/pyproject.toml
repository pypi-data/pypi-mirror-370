[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "unrealon"
version = "1.1.4"
description = "ðŸš€ Revolutionary web scraping platform with unbreakable stealth, AI-powered extraction, and zero-config setup. Build enterprise parsers in minutes, not months!"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "UnrealOS Team", email = "dev@unrealos.com"},
]
maintainers = [
    {name = "UnrealOS Team", email = "dev@unrealos.com"},
]
keywords = [
    "web-scraping",
    "browser-automation", 
    "stealth-scraping",
    "ai-parsing",
    "zero-config",
    "enterprise-scraping",
    "playwright",
    "anti-detection",
    "websocket-bridge",
    "distributed-parsing",
    "captcha-bypass",
    "proxy-rotation",
    "html-extraction",
    "data-mining",
    "bot-protection",
    "scalable-scraping",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Communications",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database",
    "Topic :: Office/Business",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
requires-python = ">=3.10,<4.0"

# Core dependencies - ALL functionality for local development
dependencies = [
    # Core validation and models
    "pydantic>=2.11,<3.0",
    "redis>=5.0.0",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    
    # Browser automation
    "playwright>=1.54.0",
    "playwright-stealth>=2.0.0",
    "beautifulsoup4>=4.13.4",
    "lxml>=6.0.0",
    
    # CLI and UI
    "click>=8.2.0",
    "rich>=13.0.0",
    
    # Configuration and serialization
    "PyYAML>=6.0",
    "tomlkit>=0.13.0",
    
    # HTTP client
    "httpx>=0.26.0",
    
    # IPFS storage
    "ipfshttpclient>=0.8.0a2",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "asyncio-mqtt>=0.16.0",
    "python-dateutil>=2.8",
    "pydantic-yaml (>=1.6.0,<2.0.0)",
]

[project.optional-dependencies]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "pydocstyle>=6.3.0",
    
    # Build and publish tools
    "build>=1.0.0",
    "twine>=4.0.0",
    "questionary>=2.1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# Testing dependencies
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "factory-boy>=3.2.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    "pymdown-extensions>=10.0.0",
]

[project.urls]
Homepage = "https://github.com/unrealos/unrealon-rpc"
Documentation = "https://unrealon-rpc.readthedocs.io"
Repository = "https://github.com/unrealos/unrealon-rpc.git"
Issues = "https://github.com/unrealos/unrealon-rpc/issues"
Changelog = "https://github.com/unrealos/unrealon-rpc/blob/main/CHANGELOG.md"

[project.scripts]
unrealon = "unrealon_driver.cli:main"
unrealon-bridge = "unrealon_server.cli:main"
unrealon-rpc = "unrealon_rpc.cli.main:main"

# Browser CLI scripts
unrealon-browser = "unrealon_browser.cli.main:cli"
browser-stealth = "unrealon_browser.cli.main:stealth_command"
browser-cookies = "unrealon_browser.cli.cookies_cli:main"
browser-profiles = "unrealon_browser.cli.main:profiles_command"
browser-interactive = "unrealon_browser.cli.interactive_mode:main"

[tool.hatch.build.targets.wheel]
# Main package + Driver + Bridge + Browser (NO RPC!)
packages = ["src/unrealon", "src/unrealon_driver", "src/unrealon_server", "src/unrealon_browser"]

[tool.hatch.build.targets.sdist]
include = [
    "src/unrealon",
    "src/unrealon_driver",
    "src/unrealon_browser",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "requirements*.txt",
    "MANIFEST.in",
]
exclude = [
    "@*",
    "scripts",
    "*.log",
    ".env*",
    "logs/",
    "tmp/",
    # EXCLUDE from public package
    "src/unrealon_rpc",
    "tests/",
    "examples/",
    "src/*/tests/",
    # Exclude test and config files
    "**/pytest.ini",
    "src/*/pyproject.toml",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | tmp
  | src/unrealon_rpc
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["unrealon_driver", "unrealon_server", "unrealon_browser", "unrealon_rpc"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "websockets.*",
    "ipfshttpclient.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests", "src/*/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "rpc: marks tests as RPC tests",
    "bridge: marks tests as Bridge tests",
    "driver: marks tests as Driver tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "logs/*",
    "tmp/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "S311",  # pseudo-random generators are not suitable for cryptographic purposes
    "S603",  # subprocess call without shell=True
    "S607",  # starting a process with a partial executable path
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106"]  # Allow assert and hardcoded passwords in tests
"examples/*" = ["S101", "S106"]  # Allow assert and hardcoded passwords in examples

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (handled by other tools)