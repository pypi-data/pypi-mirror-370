# Tool { #chatlas.Tool }

```python
Tool(func, name, description, parameters)
```

Define a tool

Define a Python function for use by a chatbot. The function will always be
invoked in the current Python process.

## Parameters {.doc-section .doc-section-parameters}

| Name        | Type                                                                                                                                                      | Description                                                   | Default    |
|-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------|------------|
| func        | [Callable](`typing.Callable`)\[..., [Any](`typing.Any`)\] \| [Callable](`typing.Callable`)\[..., [Awaitable](`typing.Awaitable`)\[[Any](`typing.Any`)\]\] | The function to be invoked when the tool is called.           | _required_ |
| name        | [str](`str`)                                                                                                                                              | The name of the tool.                                         | _required_ |
| description | [str](`str`)                                                                                                                                              | A description of what the tool does.                          | _required_ |
| parameters  | [dict](`dict`)\[[str](`str`), [Any](`typing.Any`)\]                                                                                                       | A dictionary describing the input parameters and their types. | _required_ |

## Methods

| Name | Description |
| --- | --- |
| [from_func](#chatlas.Tool.from_func) | Create a Tool from a Python function |
| [from_mcp](#chatlas.Tool.from_mcp) | Create a Tool from an MCP tool |

### from_func { #chatlas.Tool.from_func }

```python
Tool.from_func(func, *, model=None)
```

Create a Tool from a Python function

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type                                                                                                                                                      | Description                                                                                                                                                                                                                                                                                                                | Default    |
|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| func   | [Callable](`typing.Callable`)\[..., [Any](`typing.Any`)\] \| [Callable](`typing.Callable`)\[..., [Awaitable](`typing.Awaitable`)\[[Any](`typing.Any`)\]\] | The function to wrap as a tool.                                                                                                                                                                                                                                                                                            | _required_ |
| model  | [Optional](`typing.Optional`)\[[type](`type`)\[[BaseModel](`pydantic.BaseModel`)\]\]                                                                      | A Pydantic model that describes the input parameters for the function. If not provided, the model will be inferred from the function's type hints. The primary reason why you might want to provide a model in Note that the name and docstring of the model takes precedence over the name and docstring of the function. | `None`     |

#### Returns {.doc-section .doc-section-returns}

| Name   | Type                          | Description                                         |
|--------|-------------------------------|-----------------------------------------------------|
|        | [Tool](`chatlas._tools.Tool`) | A new Tool instance wrapping the provided function. |

#### Raises {.doc-section .doc-section-raises}

| Name   | Type                       | Description                                                          |
|--------|----------------------------|----------------------------------------------------------------------|
|        | [ValueError](`ValueError`) | If there is a mismatch between model fields and function parameters. |

### from_mcp { #chatlas.Tool.from_mcp }

```python
Tool.from_mcp(session, mcp_tool)
```

Create a Tool from an MCP tool

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                    | Description                                         | Default    |
|----------|-----------------------------------------|-----------------------------------------------------|------------|
| session  | [MCPClientSession](`mcp.ClientSession`) | The MCP client session to use for calling the tool. | _required_ |
| mcp_tool | [MCPTool](`mcp.Tool`)                   | The MCP tool to wrap.                               | _required_ |

#### Returns {.doc-section .doc-section-returns}

| Name   | Type                          | Description                                |
|--------|-------------------------------|--------------------------------------------|
|        | [Tool](`chatlas._tools.Tool`) | A new Tool instance wrapping the MCP tool. |