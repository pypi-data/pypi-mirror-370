# Function reference {.doc .doc-index}

## Chat model providers

Start a chat with a particular large language model (llm) provider.

| | |
| --- | --- |
| [ChatAnthropic](ChatAnthropic.qmd#chatlas.ChatAnthropic) | Chat with an Anthropic Claude model. |
| [ChatAuto](ChatAuto.qmd#chatlas.ChatAuto) | Use environment variables (env vars) to configure the Chat provider and model. |
| [ChatAzureOpenAI](ChatAzureOpenAI.qmd#chatlas.ChatAzureOpenAI) | Chat with a model hosted on Azure OpenAI. |
| [ChatBedrockAnthropic](ChatBedrockAnthropic.qmd#chatlas.ChatBedrockAnthropic) | Chat with an AWS bedrock model. |
| [ChatDatabricks](ChatDatabricks.qmd#chatlas.ChatDatabricks) | Chat with a model hosted on Databricks. |
| [ChatGithub](ChatGithub.qmd#chatlas.ChatGithub) | Chat with a model hosted on the GitHub model marketplace. |
| [ChatGoogle](ChatGoogle.qmd#chatlas.ChatGoogle) | Chat with a Google Gemini model. |
| [ChatGroq](ChatGroq.qmd#chatlas.ChatGroq) | Chat with a model hosted on Groq. |
| [ChatOllama](ChatOllama.qmd#chatlas.ChatOllama) | Chat with a local Ollama model. |
| [ChatOpenAI](ChatOpenAI.qmd#chatlas.ChatOpenAI) | Chat with an OpenAI model. |
| [ChatPerplexity](ChatPerplexity.qmd#chatlas.ChatPerplexity) | Chat with a model hosted on perplexity.ai. |
| [ChatSnowflake](ChatSnowflake.qmd#chatlas.ChatSnowflake) | Chat with a Snowflake Cortex LLM |
| [ChatVertex](ChatVertex.qmd#chatlas.ChatVertex) | Chat with a Google Vertex AI model. |

## The chat object

Methods and attributes available on a chat instance

| | |
| --- | --- |
| [Chat](Chat.qmd#chatlas.Chat) | A chat object that can be used to interact with a language model. |

## Image input

Submit image input to the chat

| | |
| --- | --- |
| [content_image_file](content_image_file.qmd#chatlas.content_image_file) | Encode image content from a file for chat input. |
| [content_image_plot](content_image_plot.qmd#chatlas.content_image_plot) | Encode the current matplotlib plot as an image for chat input. |
| [content_image_url](content_image_url.qmd#chatlas.content_image_url) | Encode image content from a URL for chat input. |

## PDF input

Submit pdf input to the chat

| | |
| --- | --- |
| [content_pdf_file](content_pdf_file.qmd#chatlas.content_pdf_file) | Prepare a local PDF for input to a chat. |
| [content_pdf_url](content_pdf_url.qmd#chatlas.content_pdf_url) | Use a remote PDF for input to a chat. |

## Prompt interpolation

Interpolate variables into prompt templates

| | |
| --- | --- |
| [interpolate](interpolate.qmd#chatlas.interpolate) | Interpolate variables into a prompt |
| [interpolate_file](interpolate_file.qmd#chatlas.interpolate_file) | Interpolate variables into a prompt from a file |

## Tool calling

Add context to python function before registering it as a tool.

| | |
| --- | --- |
| [Tool](Tool.qmd#chatlas.Tool) | Define a tool |
| [ToolRejectError](ToolRejectError.qmd#chatlas.ToolRejectError) | Error to represent a tool call being rejected. |

## Turns

A provider-agnostic representation of content generated during an assistant/user turn.

| | |
| --- | --- |
| [Turn](Turn.qmd#chatlas.Turn) | A user or assistant turn |

## Query token usage

| | |
| --- | --- |
| [token_usage](token_usage.qmd#chatlas.token_usage) | Report on token usage in the current session |

## Implement a model provider

| | |
| --- | --- |
| [Provider](Provider.qmd#chatlas.Provider) | A model provider interface for a [](`~chatlas.Chat`). |

## User-facing types

| | |
| --- | --- |
| [types.Content](types.Content.qmd#chatlas.types.Content) | Base class for all content types that can be appear in a [](`~chatlas.Turn`) |
| [types.ContentImage](types.ContentImage.qmd#chatlas.types.ContentImage) | Base class for image content. |
| [types.ContentImageInline](types.ContentImageInline.qmd#chatlas.types.ContentImageInline) | Inline image content. |
| [types.ContentImageRemote](types.ContentImageRemote.qmd#chatlas.types.ContentImageRemote) | Image content from a URL. |
| [types.ContentJson](types.ContentJson.qmd#chatlas.types.ContentJson) | JSON content |
| [types.ContentText](types.ContentText.qmd#chatlas.types.ContentText) | Text content for a [](`~chatlas.Turn`) |
| [types.ContentToolRequest](types.ContentToolRequest.qmd#chatlas.types.ContentToolRequest) | A request to call a tool/function |
| [types.ContentToolResult](types.ContentToolResult.qmd#chatlas.types.ContentToolResult) | The result of calling a tool/function |
| [types.ChatResponse](types.ChatResponse.qmd#chatlas.types.ChatResponse) | Chat response object. |
| [types.ChatResponseAsync](types.ChatResponseAsync.qmd#chatlas.types.ChatResponseAsync) | Chat response (async) object. |
| [types.ImageContentTypes](types.ImageContentTypes.qmd#chatlas.types.ImageContentTypes) | Allowable content types for images. |
| [types.MISSING_TYPE](types.MISSING_TYPE.qmd#chatlas.types.MISSING_TYPE) | A singleton representing a missing value. |
| [types.MISSING](types.MISSING.qmd#chatlas.types.MISSING) |  |
| [types.SubmitInputArgsT](types.SubmitInputArgsT.qmd#chatlas.types.SubmitInputArgsT) | A TypedDict representing the arguments that can be passed to the `.chat()` |
| [types.TokenUsage](types.TokenUsage.qmd#chatlas.types.TokenUsage) | Token usage for a given provider (name). |