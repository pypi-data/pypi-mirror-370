[build-system]
requires = [
    "poetry-core>=1.8.0",
    "wheel",
    "setuptools>=45"
]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
generate-setup-file = false

[project]
name = "appserver-sdk-python-ai"
dynamic = ["version"]
description = "SDK Python para serviços de IA da AppServer"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AppServer Team", email = "suporte@appserver.com.br"}
]
maintainers = [
    {name = "AppServer Team", email = "suporte@appserver.com.br"}
]
keywords = ["ai", "tokens", "llm", "openai", "huggingface", "sdk", "tokenizer"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.0.0,<3.0.0",
    "httpx>=0.24.0,<1.0.0",
    "structlog>=23.0.0,<25.0.0",
    "typing-extensions>=4.0.0,<5.0.0",
    "requests>=2.28.0,<3.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "lxml>=4.9.0,<6.0.0"
]

[project.optional-dependencies]
# Dependências adicionais do módulo LLM
llm = [
    "psutil>=5.9.0,<6.0.0",
    "httpx>=0.24.0,<1.0.0",
    "requests>=2.28.0,<3.0.0"
]
# Dependências para modelos OpenAI
openai = ["tiktoken>=0.5.0,<1.0.0"]
# Dependências para modelos HuggingFace
huggingface = [
    "transformers>=4.30.0,<5.0.0",
    "torch>=2.2.2,<3.0.0"
]
# Dependências para modelos locais
local-models = [
    "transformers>=4.20.0,<5.0.0",
    "torch>=1.12.0,<3.0.0",
    "llama-cpp-python>=0.2.0,<1.0.0",
    "onnxruntime>=1.12.0,<2.0.0"
]
# Dependências para webscraping avançado
webscraping = [
    "docling>=2.40.0,<3.0.0"  # Versão 2.x com melhor compatibilidade de dependências
]
# Dependências para análise avançada
analysis = [
    "nltk>=3.8,<4.0.0",
    "spacy>=3.7.0,<4.0.0",
    "textblob>=0.17.0,<1.0.0",
    "numpy>=2.0.0,<3.0.0",
    "scipy>=1.11.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0"
]
# Instalação completa (todas as funcionalidades)
full = [
    "psutil>=5.9.0,<6.0.0",
    "tiktoken>=0.5.0,<1.0.0",
    "transformers>=4.30.0,<5.0.0",
    "torch>=2.2.2,<3.0.0",
    "numpy>=2.0.0,<3.0.0",
    "scipy>=1.11.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
    "nltk>=3.8,<4.0.0",
    "spacy>=3.7.0,<4.0.0",
    "textblob>=0.17.0,<1.0.0",
    "docling>=2.40.0,<3.0.0"  # Versão 2.x com melhor compatibilidade de dependências
]
# Dependências de desenvolvimento
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "mypy>=1.8.0",
    "ruff>=0.12.7",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0"
]

[project.urls]
Homepage = "https://appserver.com.br"
Documentation = "https://appserver.com.br/docs"

# Poetry configuration (APENAS controle de versão e dependências)
[tool.poetry]
version = "0.0.21"
packages = [{include = "appserver_sdk_python_ai", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Dependências principais (sincronizadas com [project.dependencies])
pydantic = "^2.0.0"
httpx = "^0.24.0"
structlog = "^23.0.0"
typing-extensions = "^4.0.0"
requests = "^2.28.0"
beautifulsoup4 = "^4.12.0"
lxml = "^4.9.0"
# Dependências opcionais com versões específicas para wheels pré-compilados
psutil = {version = "^5.9.0", optional = true}
tiktoken = {version = "^0.5.0", optional = true}
transformers = {version = "^4.30.0", optional = true}
torch = {version = "^2.2.2", optional = true}
nltk = {version = "^3.8", optional = true}
spacy = {version = ">=3.7.0,<4.0.0", optional = true}  # spaCy 3.7+ compatível com NumPy 2.x
textblob = {version = "^0.17.0", optional = true}
# Versões específicas com wheels disponíveis para Windows
numpy = {version = ">=2.0.0,<3.0.0", optional = true}  # NumPy 2.x tem wheels pré-compilados para Python 3.13
scipy = {version = ">=1.11.0,<2.0.0", optional = true}  # SciPy 1.11+ tem wheels para Python 3.13
pandas = {version = ">=2.0.0,<3.0.0", optional = true}  # Pandas 2.x tem wheels para Python 3.13
matplotlib = {version = ">=3.8.0,<4.0.0", optional = true}  # Matplotlib 3.8+ tem wheels para Python 3.13
seaborn = {version = ">=0.12.0,<1.0.0", optional = true}  # Seaborn 0.12+ compatível com NumPy 2.x
llama-cpp-python = {version = "^0.2.0", optional = true}
onnxruntime = {version = "^1.12.0", optional = true}
docling = {version = ">=2.40.0,<3.0.0", optional = true}  # Versão 2.x com melhor compatibilidade

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.23.0"
mypy = "^1.8.0"
ruff = "^0.12.7"
pre-commit = "^3.6.0"
types-requests = "^2.31.0"

# Configuração do Ruff
[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",   # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]
"__init__.py" = ["F401"]
"demo*.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# MyPy
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
show_error_codes = true
mypy_path = "src"
packages = ["appserver_sdk_python_ai"]
exclude = [
    "^src\\.appserver_sdk_python_ai\\..*",  # Evitar imports com 'src.'
]
# Desabilitar warnings de annotation-unchecked
check_untyped_defs = false
disable_error_code = ["annotation-unchecked"]

[[tool.mypy.overrides]]
module = [
    "tiktoken.*",
    "transformers.*", 
    "torch.*",
]
ignore_missing_imports = true

# Pytest
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
markers = [
    "integration: marks tests as integration tests",
]

[tool.poetry.group.webscraping]
optional = true

# Nota: Extras definidos em [project.optional-dependencies] acima
# Poetry automaticamente reconhece e usa essas definições

[tool.poetry.group.webscraping.dependencies]
docling = ">=2.40.0,<3.0.0"  # Versão 2.x com melhor compatibilidade

[tool.poetry.group.ocr]
optional = true

[tool.poetry.group.ocr.dependencies]
pytesseract = "^0.3.10"
# easyocr = "^1.7.0"       # Comentado temporariamente devido a conflitos de compilação
# paddlepaddle = "^2.5.0"  # Comentado temporariamente devido a conflitos de compilação
# paddleocr = "^2.7.0"     # Comentado temporariamente devido a conflitos de compilação
opencv-python-headless = ">=4.8.0,<4.12.0"
pillow = "^10.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocs-macros-plugin = "^1.3.0"
mkdocs-include-markdown-plugin = "^3.0.0"
mkdocs-autorefs = "^0.5.0"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.5.0"