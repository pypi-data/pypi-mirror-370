"""Auto-generated stub for module: client_utils."""
from typing import Any, List

import cv2
import json
import logging
import math
import os
import random
import requests
import shutil
import tempfile
import zipfile

# Constants
ANNOTATION_EXTENSIONS: List[Any]
ANNOTATION_PARTITION_TYPE: str
COMPRESSED_EXTENSIONS: List[Any]
MAX_PARTITION_SIZE_BYTES: Any
SAMPLES_EXTENSIONS: List[Any]
SAMPLES_PARTITION_TYPE: str

# Functions
def complete_dataset_items_upload(rpc: Any, dataset_id: Any, partition_stats: Any, target_version: Any = 'v1.0', source_version: Any = '', action_type: Any = 'data_import') -> Any: ...
def compress_annotation_files(file_paths: Any, base_dataset_path: Any) -> Any: ...
def create_partition_stats(rpc: Any, partition_stats: Any, dataset_id: Any, target_version: Any, source_version: Any = '') -> Any: ...
def create_video_blank_dataset_items(partition_number: Any, rpc: Any, dataset_id: Any, dataset_version: Any, num_dataset_items: Any, project_id: Any) -> Any: ...
def extract_frames_from_videos(file_paths: Any) -> Any: ...
def get_annotations_partition(annotation_files: Any) -> Any: ...
def get_batch_pre_signed_upload_urls(cloud_file_paths: Any, rpc: Any, type: Any, bucket_alias: Any = '', account_number: Any = '', project_id: Any = '') -> Any: ...
def get_cloud_file_path(dataset_id: Any, dataset_version: Any, base_dataset_path: Any, file_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_davis_partitions(video_files: Any) -> Any: ...
def get_davis_relative_path(abs_path: str) -> str: ...
    """
    Extract the relative path starting from the grand-grandparent directory.
    
    Args:
        abs_path (str): Absolute path to the file
    
    Returns:
        str: Relative path starting from the grand-grandparent directory
    """
def get_images_partitions(image_files: Any) -> Any: ...
    """
    Split image files into partitions and return partition stats.
    """
def get_kinetics_partitions(video_files: Any) -> Any: ...
def get_mot_partitions(video_files: Any) -> Any: ...
def get_size_mb(path: Any) -> Any: ...
    """
    Calculate total size in MB for a file, folder, or list of paths.
    """
def get_video_imagenet_partitions(video_files: Any) -> Any: ...
def get_video_mot_cloud_file_path(dataset_id: Any, dataset_version: Any, base_dataset_path: Any, file_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_mscoco_cloud_file_path(dataset_id: Any, dataset_version: Any, base_dataset_path: Any, file_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_mscoco_partitions(video_files: Any) -> Any: ...
def get_youtube_bb_partitions(video_files: Any) -> Any: ...
def get_youtube_bb_relative_path(abs_path: Any) -> Any: ...
    """
    Extract the relative path starting from the folder containing train/test/val directories.
    
    Args:
        abs_path (str): Absolute path to the file
    
    Returns:
        str: Relative path starting from the folder containing the parent directory of
            train/test/val
    """
def is_file_compressed(file_path: Any) -> Any: ...
def rename_davis_file(file_path: str) -> str: ...
def rename_mot_file(file_path: str) -> str: ...
def restructure_davis_dataset(base_path: Any) -> Any: ...
    """
    Restructure the DAVIS dataset to organize frames into segments and distribute them across train/test/val splits.
    All categories will be present in all splits, with segments of frames distributed across splits.
    
    Args:
        base_path (str): Path to the root of the DAVIS dataset
    """
def scan_dataset(base_path: Any, rename_annotation_files: Any = False, input_type: Any = None) -> Any: ...
def scan_folder(folder_path: Any) -> Any: ...
def update_annotation_bucket_url(rpc: Any, dataset_id: Any, partition_number: Any, annotation_bucket_url: Any) -> Any: ...
def update_partitions_numbers(rpc: Any, dataset_id: Any, items: Any, partition_key: Any = 'partitionNum') -> Any: ...
def upload_compressed_dataset(rpc: Any, dataset_path: Any, bucket_alias: Any = '', account_number: Any = '', project_id: Any = '') -> Any: ...
def upload_file(local_path: Any, presigned_url: Any, max_attempts: Any = 5) -> Any: ...
