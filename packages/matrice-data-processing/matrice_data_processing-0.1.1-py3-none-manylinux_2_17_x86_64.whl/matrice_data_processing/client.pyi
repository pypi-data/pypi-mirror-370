"""Auto-generated stub for module: client."""
from typing import Any

from concurrent.futures import ThreadPoolExecutor, as_completed
from matrice_data_processing.client_utils import ANNOTATION_PARTITION_TYPE, SAMPLES_PARTITION_TYPE, scan_dataset, get_annotations_partition, get_images_partitions, get_youtube_bb_partitions, get_cloud_file_path, update_annotation_bucket_url, get_batch_pre_signed_upload_urls, upload_file, compress_annotation_files, update_partitions_numbers, create_partition_stats, get_youtube_bb_relative_path, get_mot_partitions, get_video_mot_cloud_file_path, get_video_mscoco_cloud_file_path, get_davis_partitions, get_davis_relative_path, get_video_imagenet_partitions, get_kinetics_partitions, get_video_mscoco_partitions, create_video_blank_dataset_items, extract_frames_from_videos, restructure_davis_dataset
from matrice_data_processing.pipeline import Pipeline
from queue import Queue
import logging
import os

# Functions
def add_batch_presigned_upload_urls(batch: Any, rpc: Any, partition_type: Any, bucket_alias: Any = '', account_number: Any = '', project_id: Any = None) -> Any: ...
def add_video_batch_presigned_upload_urls(batch: Any, rpc: Any, partition_type: Any, bucket_alias: Any = '', account_number: Any = '') -> Any: ...
def add_video_imagenet_presigned_upload_urls(batch: Any, rpc: Any, partition_type: Any, bucket_alias: Any = '', account_number: Any = '') -> Any: ...
def batch_create_dataset_items(batch: Any, dataset_id: Any, dataset_version: Any, rpc: Any) -> Any: ...
def batch_create_video_dataset_items(batch: Any, dataset_id: Any, dataset_version: Any, project_id: Any, rpc: Any, input_type: Any = None, num_dataset_items: Any = 0, dataset_item_ids: Any = []) -> Any: ...
def batch_create_video_imagenet_dataset_items(batch: Any, dataset_id: Any, dataset_version: Any, project_id: Any, rpc: Any, input_type: Any = None) -> Any: ...
def batch_create_video_imagenet_items(batch: Any, dataset_id: Any, dataset_version: Any, project_id: Any, rpc: Any, input_type: Any = None) -> Any: ...
def batch_create_video_youtube_bb_dataset_items(batch: Any, dataset_id: Any, dataset_version: Any, project_id: Any, rpc: Any, input_type: Any = None, num_dataset_items: Any = 0, dataset_item_ids: Any = None) -> Any: ...
def get_client_annotations_processing_pipeline(annotations_partition: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, rpc: Any, compress_annotations: Any = False, max_attempts: Any = 5, batch_size: Any = 16, bucket_alias: Any = '', account_number: Any = '', project_id: Any = None) -> Any: ...
def get_client_images_processing_pipeline(images_partitions: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, rpc: Any, max_attempts: Any = 5, batch_size: Any = 16, bucket_alias: Any = '', account_number: Any = '', project_id: Any = None) -> Any: ...
def get_client_processing_pipelines(rpc: Any, dataset_id: Any, dataset_version: Any, images_partition_status: list, annotation_partition_status: list, dataset_path: str, is_annotations_compressed: bool, destination_bucket_alias: str, account_number: str, project_id: Any = None) -> Any: ...
def get_client_video_processing_pipeline(images_partitions: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, rpc: Any, project_id: Any, max_attempts: Any = 5, batch_size: Any = 16, bucket_alias: Any = '', account_number: Any = '', input_type: Any = 'youtube_bb', num_dataset_items: Any = 0) -> Any: ...
def get_client_video_processing_pipelines(project_id: Any, rpc: Any, dataset_id: Any, dataset_version: Any, images_partition_status: list, annotation_partition_status: list, dataset_path: str, is_annotations_compressed: bool, destination_bucket_alias: str, account_number: str, input_type: str = 'youtube_bb', num_dataset_items: int = 0) -> Any: ...
def get_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_partition_status(base_path: Any, skip_annotation_partition: Any = False) -> Any: ...
def get_video_davis_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_imagenet_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_kinetics_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_mot_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_mscoco_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def get_video_partition_status(base_path: Any, skip_annotation_partition: Any = False, get_partitions: Any = get_youtube_bb_partitions, rename_annotation_files: Any = False, input_type: Any = None) -> Any: ...
def get_video_youtube_bb_partition_batches(partition: Any, batch_size: Any, dataset_id: Any, dataset_version: Any, base_dataset_path: Any, include_version_in_cloud_path: Any = False) -> Any: ...
def handle_client_processing_pipelines(rpc: Any, dataset_id: Any, source_dataset_version: Any, target_dataset_version: Any, input_type: Any, source_URL: Any = '', dataset_path: Any = '', destination_bucket_alias: Any = '', account_number: Any = '', skip_partition_status: Any = False, annotation_partition_status: Any = None, images_partition_status: Any = None, project_id: Any = None) -> Any: ...
def handle_client_video_processing_pipelines(project_id: Any, rpc: Any, dataset_id: Any, source_dataset_version: Any, target_dataset_version: Any, input_type: Any, source_URL: Any = '', dataset_path: Any = '', destination_bucket_alias: Any = '', account_number: Any = '', skip_partition_status: Any = False, annotation_partition_status: Any = None, images_partition_status: Any = None, unique_videos: Any = 0) -> Any: ...
def handle_partition_stats(rpc: Any, dataset_id: Any, source_dataset_version: Any, target_dataset_version: Any, dataset_path: Any, skip_annotation_pipeline: Any) -> Any: ...
def handle_video_partition_stats(rpc: Any, dataset_id: Any, source_dataset_version: Any, target_dataset_version: Any, dataset_path: Any, skip_annotation_pipeline: Any, input_type: Any = 'youtube_bb') -> Any: ...
def start_client_processing_pipelines(rpc: Any, dataset_id: Any, dataset_version: Any, images_partition_status: Any, annotation_partition_status: Any, dataset_path: Any, is_annotations_compressed: Any, destination_bucket_alias: Any, account_number: Any, project_id: Any = None) -> Any: ...
def start_client_video_processing_pipelines(project_id: Any, rpc: Any, dataset_id: Any, dataset_version: Any, images_partition_status: Any, annotation_partition_status: Any, dataset_path: Any, is_annotations_compressed: Any, destination_bucket_alias: Any, account_number: Any, input_type: Any, num_dataset_items: Any) -> Any: ...
def upload_batch_files(batch: Any, max_attempts: Any = 5) -> Any: ...
def upload_video_batch_files(batch: Any, max_attempts: Any = 5) -> Any: ...
def upload_video_imagenet_batch_files(batch: Any, max_attempts: Any = 5) -> Any: ...
def upload_video_mot_batch_files(batch: Any, max_attempts: Any = 5) -> Any: ...
