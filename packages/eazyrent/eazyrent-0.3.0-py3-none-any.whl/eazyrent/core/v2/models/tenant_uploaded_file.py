# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from eazyrent.core.v2.models.reject_reason import RejectReason
from typing import Optional, Set
from typing_extensions import Self


class TenantUploadedFile(BaseModel):
    """
    TenantUploadedFile
    """  # noqa: E501

    name: StrictStr
    number_of_pages: Optional[StrictInt] = None
    size: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    status: Optional[StrictStr] = "RECEIVED"
    mime_type: StrictStr
    uploaded_for_section: Optional[StrictStr] = None
    document_type: Optional[StrictStr] = None
    applicant: StrictStr
    created_by: Optional[StrictStr] = None
    meta: Optional[Any] = None
    reject_reason: Optional[RejectReason] = None
    id: StrictStr
    __properties: ClassVar[List[str]] = [
        "name",
        "number_of_pages",
        "size",
        "created_at",
        "updated_at",
        "status",
        "mime_type",
        "uploaded_for_section",
        "document_type",
        "applicant",
        "created_by",
        "meta",
        "reject_reason",
        "id",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["RECEIVED", "REJECTED", "PROCESSED", "EXTRACTING", "EXTRACTED"]
        ):
            raise ValueError(
                "must be one of enum values ('RECEIVED', 'REJECTED', 'PROCESSED', 'EXTRACTING', 'EXTRACTED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantUploadedFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reject_reason
        if self.reject_reason:
            _dict["reject_reason"] = self.reject_reason.to_dict()
        # set to None if number_of_pages (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_pages is None and "number_of_pages" in self.model_fields_set:
            _dict["number_of_pages"] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict["size"] = None

        # set to None if uploaded_for_section (nullable) is None
        # and model_fields_set contains the field
        if (
            self.uploaded_for_section is None
            and "uploaded_for_section" in self.model_fields_set
        ):
            _dict["uploaded_for_section"] = None

        # set to None if document_type (nullable) is None
        # and model_fields_set contains the field
        if self.document_type is None and "document_type" in self.model_fields_set:
            _dict["document_type"] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict["created_by"] = None

        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict["meta"] = None

        # set to None if reject_reason (nullable) is None
        # and model_fields_set contains the field
        if self.reject_reason is None and "reject_reason" in self.model_fields_set:
            _dict["reject_reason"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantUploadedFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "number_of_pages": obj.get("number_of_pages"),
                "size": obj.get("size"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "status": obj.get("status")
                if obj.get("status") is not None
                else "RECEIVED",
                "mime_type": obj.get("mime_type"),
                "uploaded_for_section": obj.get("uploaded_for_section"),
                "document_type": obj.get("document_type"),
                "applicant": obj.get("applicant"),
                "created_by": obj.get("created_by"),
                "meta": obj.get("meta"),
                "reject_reason": RejectReason.from_dict(obj["reject_reason"])
                if obj.get("reject_reason") is not None
                else None,
                "id": obj.get("id"),
            }
        )
        return _obj
