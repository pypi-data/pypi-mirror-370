# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing_extensions import Self

from eazyrent.core.v2.models.alert import Alert
from eazyrent.core.v2.models.document_slice import DocumentSlice
from eazyrent.core.v2.models.list_accepted_document import ListAcceptedDocument
from eazyrent.core.v2.models.reject_reason import RejectReason


class DocumentView(BaseModel):
    """
    DocumentView
    """  # noqa: E501

    id: Optional[StrictStr] = None
    document_type: Optional[StrictStr] = None
    status: Optional[StrictStr] = "RECEIVED"
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    detected_model: Optional[StrictStr] = None
    alerts: Optional[List[Alert]] = None
    extraction_results: Optional[Any] = None
    uploaded_for_section: Optional[StrictStr] = None
    files: Optional[List[DocumentSlice]] = None
    reject_reason: Optional[RejectReason] = None
    admin_attention_required: Optional[StrictBool] = False
    tenant: StrictStr
    applicant: StrictStr
    document_info: Optional[ListAcceptedDocument] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "document_type",
        "status",
        "created_at",
        "updated_at",
        "detected_model",
        "alerts",
        "extraction_results",
        "uploaded_for_section",
        "files",
        "reject_reason",
        "admin_attention_required",
        "tenant",
        "applicant",
        "document_info",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "RECEIVED",
                "PROCESSING",
                "PROCESSED",
                "EXTRACTING",
                "EXTRACTED",
                "VALIDATING",
                "VALIDATED",
                "COLLECTED",
                "ACTION_REQUIRED",
                "APPLICANT_ACTION_REQUIRED",
                "REJECTED",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('RECEIVED', 'PROCESSING', 'PROCESSED', 'EXTRACTING', 'EXTRACTED', 'VALIDATING', 'VALIDATED', 'COLLECTED', 'ACTION_REQUIRED', 'APPLICANT_ACTION_REQUIRED', 'REJECTED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alerts (list)
        _items = []
        if self.alerts:
            for _item_alerts in self.alerts:
                if _item_alerts:
                    _items.append(_item_alerts.to_dict())
            _dict["alerts"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict["files"] = _items
        # override the default output from pydantic by calling `to_dict()` of reject_reason
        if self.reject_reason:
            _dict["reject_reason"] = self.reject_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_info
        if self.document_info:
            _dict["document_info"] = self.document_info.to_dict()
        # set to None if document_type (nullable) is None
        # and model_fields_set contains the field
        if self.document_type is None and "document_type" in self.model_fields_set:
            _dict["document_type"] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict["updated_at"] = None

        # set to None if detected_model (nullable) is None
        # and model_fields_set contains the field
        if self.detected_model is None and "detected_model" in self.model_fields_set:
            _dict["detected_model"] = None

        # set to None if extraction_results (nullable) is None
        # and model_fields_set contains the field
        if (
            self.extraction_results is None
            and "extraction_results" in self.model_fields_set
        ):
            _dict["extraction_results"] = None

        # set to None if uploaded_for_section (nullable) is None
        # and model_fields_set contains the field
        if (
            self.uploaded_for_section is None
            and "uploaded_for_section" in self.model_fields_set
        ):
            _dict["uploaded_for_section"] = None

        # set to None if reject_reason (nullable) is None
        # and model_fields_set contains the field
        if self.reject_reason is None and "reject_reason" in self.model_fields_set:
            _dict["reject_reason"] = None

        # set to None if document_info (nullable) is None
        # and model_fields_set contains the field
        if self.document_info is None and "document_info" in self.model_fields_set:
            _dict["document_info"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "document_type": obj.get("document_type"),
                "status": obj.get("status")
                if obj.get("status") is not None
                else "RECEIVED",
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "detected_model": obj.get("detected_model"),
                "alerts": [Alert.from_dict(_item) for _item in obj["alerts"]]
                if obj.get("alerts") is not None
                else None,
                "extraction_results": obj.get("extraction_results"),
                "uploaded_for_section": obj.get("uploaded_for_section"),
                "files": [DocumentSlice.from_dict(_item) for _item in obj["files"]]
                if obj.get("files") is not None
                else None,
                "reject_reason": RejectReason.from_dict(obj["reject_reason"])
                if obj.get("reject_reason") is not None
                else None,
                "admin_attention_required": obj.get("admin_attention_required")
                if obj.get("admin_attention_required") is not None
                else False,
                "tenant": obj.get("tenant"),
                "applicant": obj.get("applicant"),
                "document_info": ListAcceptedDocument.from_dict(obj["document_info"])
                if obj.get("document_info") is not None
                else None,
            }
        )
        return _obj
