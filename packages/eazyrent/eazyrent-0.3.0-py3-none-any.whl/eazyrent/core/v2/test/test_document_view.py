# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from eazyrent.core.v2.models.document_view import DocumentView


class TestDocumentView(unittest.TestCase):
    """DocumentView unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentView:
        """Test DocumentView
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DocumentView`
        """
        model = DocumentView()
        if include_optional:
            return DocumentView(
                id = '',
                document_type = '',
                status = 'RECEIVED',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                detected_model = '',
                alerts = [
                    core.v2.models.alert.Alert(
                        code = '', 
                        status = 'SUCCESS', 
                        comment = '', 
                        alert_type = core.v2.models.base_alert_type.BaseAlertType(
                            id = '', 
                            name = '', 
                            description = '', ), )
                    ],
                extraction_results = None,
                uploaded_for_section = '',
                files = [
                    core.v2.models.document_slice.DocumentSlice(
                        file_id = '', 
                        file = null, 
                        thumbnail = null, 
                        images = null, 
                        pages = [
                            56
                            ], )
                    ],
                reject_reason = core.v2.models.reject_reason.RejectReason(
                    reason = 'TOO_MANY_PAGES', 
                    comment = '', ),
                admin_attention_required = True,
                tenant = '',
                applicant = '',
                document_info = core.v2.models.list_accepted_document.ListAcceptedDocument(
                    name = '', 
                    max_pages = 56, 
                    analyzed_as = 'NOT_ANALYZED', 
                    examples = [
                        ''
                        ], 
                    to_download = null, 
                    id = '', 
                    tenant = '', )
            )
        else:
            return DocumentView(
                tenant = '',
                applicant = '',
        )
        """

    def testDocumentView(self):
        """Test DocumentView"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
