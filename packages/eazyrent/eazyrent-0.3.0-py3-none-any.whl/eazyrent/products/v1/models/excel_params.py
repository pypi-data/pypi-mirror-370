# coding: utf-8

"""
    Eazyrent products API

    EazyRent Products API ======================  Description ------------  The EazyRent Product API offers a comprehensive solution for managing rental and sale listings, including property details, media distribution, and data import capabilities. Designed for real estate professionals, this API allows users to create, update, and manage property listings efficiently while ensuring accurate data and broad market reach. With features to streamline listing distribution and import property data from other platforms, the Product API simplifies property management, helping agencies maintain up-to-date and comprehensive property portfolios.  Target Audience -----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a centralized system to manage property listings, including rental and sale offerings, media distribution, and data synchronization across various platforms.   * **Property Managers:** Organizations looking to efficiently organize and promote property listings, manage property details, and ensure accurate, consistent information across marketing channels.  Purpose ---------  The purpose of the EazyRent Product API is to enable streamlined property management within the EazyRent platform. By integrating this API, businesses can centralize their property data, automate distribution to marketing channels, and simplify the process of keeping listings updated. This provides agencies with a scalable, efficient way to manage property portfolios, ensuring quick, effective exposure to potential tenants and buyers.  How to use this API ---------------------  To get started with the EazyRent Product API, please refer to our comprehensive documentation for authentication details, endpoint descriptions, and integration guides. This resource will help you set up efficient property management workflows, from data import to listing updates and distribution, all accessible within your existing systems.

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from eazyrent.products.v1.models.sheet_name import SheetName
from eazyrent.products.v1.models.usecols import Usecols
from typing import Optional, Set
from typing_extensions import Self


class ExcelParams(BaseModel):
    """
    ExcelParams
    """  # noqa: E501

    sheet_name: Optional[SheetName] = None
    skiprows: Optional[StrictInt] = None
    header: Optional[StrictInt] = None
    usecols: Optional[Usecols] = None
    skipfooter: Optional[StrictInt] = None
    dtype: Optional[Dict[str, Any]] = None
    na_values: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "sheet_name",
        "skiprows",
        "header",
        "usecols",
        "skipfooter",
        "dtype",
        "na_values",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExcelParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sheet_name
        if self.sheet_name:
            _dict["sheet_name"] = self.sheet_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usecols
        if self.usecols:
            _dict["usecols"] = self.usecols.to_dict()
        # set to None if sheet_name (nullable) is None
        # and model_fields_set contains the field
        if self.sheet_name is None and "sheet_name" in self.model_fields_set:
            _dict["sheet_name"] = None

        # set to None if skiprows (nullable) is None
        # and model_fields_set contains the field
        if self.skiprows is None and "skiprows" in self.model_fields_set:
            _dict["skiprows"] = None

        # set to None if header (nullable) is None
        # and model_fields_set contains the field
        if self.header is None and "header" in self.model_fields_set:
            _dict["header"] = None

        # set to None if usecols (nullable) is None
        # and model_fields_set contains the field
        if self.usecols is None and "usecols" in self.model_fields_set:
            _dict["usecols"] = None

        # set to None if skipfooter (nullable) is None
        # and model_fields_set contains the field
        if self.skipfooter is None and "skipfooter" in self.model_fields_set:
            _dict["skipfooter"] = None

        # set to None if dtype (nullable) is None
        # and model_fields_set contains the field
        if self.dtype is None and "dtype" in self.model_fields_set:
            _dict["dtype"] = None

        # set to None if na_values (nullable) is None
        # and model_fields_set contains the field
        if self.na_values is None and "na_values" in self.model_fields_set:
            _dict["na_values"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExcelParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "sheet_name": SheetName.from_dict(obj["sheet_name"])
                if obj.get("sheet_name") is not None
                else None,
                "skiprows": obj.get("skiprows"),
                "header": obj.get("header"),
                "usecols": Usecols.from_dict(obj["usecols"])
                if obj.get("usecols") is not None
                else None,
                "skipfooter": obj.get("skipfooter"),
                "dtype": obj.get("dtype"),
                "na_values": obj.get("na_values"),
            }
        )
        return _obj
