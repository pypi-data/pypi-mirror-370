# coding: utf-8

"""
    Eazyrent IAM API

    EazyRent IAM API ==================  Description -------------  The EazyRent IAM API provides robust identity and access management capabilities, enabling efficient account management and permission controls across the platform. Tailored for the SaaS environment, this API allows administrators to handle user authentication, manage roles, and define permissions to secure access to various resources. By centralizing user accounts and access rules, the IAM API ensures a secure, organized, and scalable approach to managing tenant and staff permissions.  Target Audience ------------------   * **Real Estate Agencies and Social Housing Providers:** Organizations requiring a secure, structured way to manage access for staff and tenants, ensuring that only authorized users can access specific resources and functionalities.   * **Rent Guarantee Insurers:** Companies that need to manage and restrict access to sensitive information, allowing only certain roles to handle tenant verification and risk assessment data.  Purpose --------  The purpose of the EazyRent IAM API is to centralize identity and permission management for platform users. Through this API, businesses can handle account creation, manage user roles, assign permissions, and track access to critical resources, all while ensuring compliance and data security. This results in streamlined operations, allowing clients to configure role-based access in alignment with organizational policies and requirements.  How to use this API -----------------------  To start using the EazyRent IAM API, consult our detailed documentation, which provides information on authentication, endpoint definitions, and integration best practices. This documentation covers the steps required to manage user identities, roles, and permissions within your existing systems, ensuring secure and efficient access control across the platform.

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from eazyrent.iam.v1.models.logo import Logo
from eazyrent.iam.v1.models.parent_organization import ParentOrganization
from typing import Optional, Set
from typing_extensions import Self


class Organization(BaseModel):
    """
    Organization
    """  # noqa: E501

    name: StrictStr
    organization_id: Optional[StrictStr] = None
    insurance_id: Optional[StrictStr] = None
    logo: Optional[Logo] = None
    registration_number: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    account_type: Optional[StrictStr] = "DEFAULT"
    id: Optional[StrictStr] = None
    organization: Optional[ParentOrganization] = None
    insurance: Optional[ParentOrganization] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "organization_id",
        "insurance_id",
        "logo",
        "registration_number",
        "address",
        "account_type",
        "id",
        "organization",
        "insurance",
    ]

    @field_validator("account_type")
    def account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["DEFAULT", "ORGANIZATION", "INSURANCE"]):
            raise ValueError(
                "must be one of enum values ('DEFAULT', 'ORGANIZATION', 'INSURANCE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict["logo"] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insurance
        if self.insurance:
            _dict["insurance"] = self.insurance.to_dict()
        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict["organization_id"] = None

        # set to None if insurance_id (nullable) is None
        # and model_fields_set contains the field
        if self.insurance_id is None and "insurance_id" in self.model_fields_set:
            _dict["insurance_id"] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict["logo"] = None

        # set to None if registration_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.registration_number is None
            and "registration_number" in self.model_fields_set
        ):
            _dict["registration_number"] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict["address"] = None

        # set to None if organization (nullable) is None
        # and model_fields_set contains the field
        if self.organization is None and "organization" in self.model_fields_set:
            _dict["organization"] = None

        # set to None if insurance (nullable) is None
        # and model_fields_set contains the field
        if self.insurance is None and "insurance" in self.model_fields_set:
            _dict["insurance"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "organization_id": obj.get("organization_id"),
                "insurance_id": obj.get("insurance_id"),
                "logo": Logo.from_dict(obj["logo"])
                if obj.get("logo") is not None
                else None,
                "registration_number": obj.get("registration_number"),
                "address": obj.get("address"),
                "account_type": obj.get("account_type")
                if obj.get("account_type") is not None
                else "DEFAULT",
                "id": obj.get("id"),
                "organization": ParentOrganization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "insurance": ParentOrganization.from_dict(obj["insurance"])
                if obj.get("insurance") is not None
                else None,
            }
        )
        return _obj
