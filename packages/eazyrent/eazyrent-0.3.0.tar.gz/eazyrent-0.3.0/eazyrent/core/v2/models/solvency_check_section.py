# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from eazyrent.core.v2.models.display_condition import DisplayCondition
from typing import Optional, Set
from typing_extensions import Self


class SolvencyCheckSection(BaseModel):
    """
    SolvencyCheckSection
    """  # noqa: E501

    id: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    component: Optional[StrictStr] = "SolvencyCheck"
    mandatory: Optional[StrictBool] = False
    display_condition: Optional[DisplayCondition] = None
    target: Optional[Union[StrictFloat, StrictInt]] = 0.37
    user_incomes: Optional[Union[StrictFloat, StrictInt]] = None
    social_incomes: Optional[Union[StrictFloat, StrictInt]] = None
    display: Optional[StrictBool] = True
    completed: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = [
        "id",
        "title",
        "description",
        "component",
        "mandatory",
        "display_condition",
        "target",
        "user_incomes",
        "social_incomes",
        "display",
        "completed",
    ]

    @field_validator("component")
    def component_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["SolvencyCheck"]):
            raise ValueError("must be one of enum values ('SolvencyCheck')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SolvencyCheckSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_condition
        if self.display_condition:
            _dict["display_condition"] = self.display_condition.to_dict()
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict["title"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if display_condition (nullable) is None
        # and model_fields_set contains the field
        if (
            self.display_condition is None
            and "display_condition" in self.model_fields_set
        ):
            _dict["display_condition"] = None

        # set to None if user_incomes (nullable) is None
        # and model_fields_set contains the field
        if self.user_incomes is None and "user_incomes" in self.model_fields_set:
            _dict["user_incomes"] = None

        # set to None if social_incomes (nullable) is None
        # and model_fields_set contains the field
        if self.social_incomes is None and "social_incomes" in self.model_fields_set:
            _dict["social_incomes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SolvencyCheckSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "component": obj.get("component")
                if obj.get("component") is not None
                else "SolvencyCheck",
                "mandatory": obj.get("mandatory")
                if obj.get("mandatory") is not None
                else False,
                "display_condition": DisplayCondition.from_dict(
                    obj["display_condition"]
                )
                if obj.get("display_condition") is not None
                else None,
                "target": obj.get("target") if obj.get("target") is not None else 0.37,
                "user_incomes": obj.get("user_incomes"),
                "social_incomes": obj.get("social_incomes"),
                "display": obj.get("display")
                if obj.get("display") is not None
                else True,
                "completed": obj.get("completed")
                if obj.get("completed") is not None
                else False,
            }
        )
        return _obj
