# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing import Any, List, Optional
from eazyrent.core.v2.models.document_section import DocumentSection
from eazyrent.core.v2.models.markdown_section import MarkdownSection
from eazyrent.core.v2.models.mi_trust_section import MiTrustSection
from eazyrent.core.v2.models.question_section import QuestionSection
from eazyrent.core.v2.models.solvency_check_section import SolvencyCheckSection
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FORMPARTSECTIONSINNER_ONE_OF_SCHEMAS = [
    "DocumentSection",
    "MarkdownSection",
    "MiTrustSection",
    "QuestionSection",
    "SolvencyCheckSection",
]


class FormPartSectionsInner(BaseModel):
    """
    FormPartSectionsInner
    """

    # data type: QuestionSection
    oneof_schema_1_validator: Optional[QuestionSection] = None
    # data type: DocumentSection
    oneof_schema_2_validator: Optional[DocumentSection] = None
    # data type: MiTrustSection
    oneof_schema_3_validator: Optional[MiTrustSection] = None
    # data type: SolvencyCheckSection
    oneof_schema_4_validator: Optional[SolvencyCheckSection] = None
    # data type: MarkdownSection
    oneof_schema_5_validator: Optional[MarkdownSection] = None
    actual_instance: Optional[
        Union[
            DocumentSection,
            MarkdownSection,
            MiTrustSection,
            QuestionSection,
            SolvencyCheckSection,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "DocumentSection",
        "MarkdownSection",
        "MiTrustSection",
        "QuestionSection",
        "SolvencyCheckSection",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = FormPartSectionsInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: QuestionSection
        if not isinstance(v, QuestionSection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `QuestionSection`"
            )
        else:
            match += 1
        # validate data type: DocumentSection
        if not isinstance(v, DocumentSection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `DocumentSection`"
            )
        else:
            match += 1
        # validate data type: MiTrustSection
        if not isinstance(v, MiTrustSection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MiTrustSection`"
            )
        else:
            match += 1
        # validate data type: SolvencyCheckSection
        if not isinstance(v, SolvencyCheckSection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `SolvencyCheckSection`"
            )
        else:
            match += 1
        # validate data type: MarkdownSection
        if not isinstance(v, MarkdownSection):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `MarkdownSection`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in FormPartSectionsInner with oneOf schemas: DocumentSection, MarkdownSection, MiTrustSection, QuestionSection, SolvencyCheckSection. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in FormPartSectionsInner with oneOf schemas: DocumentSection, MarkdownSection, MiTrustSection, QuestionSection, SolvencyCheckSection. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("component")
        if not _data_type:
            raise ValueError(
                "Failed to lookup data type from the field `component` in the input."
            )

        # check if data type is `DocumentSection`
        if _data_type == "DocumentCollectSection":
            instance.actual_instance = DocumentSection.from_json(json_str)
            return instance

        # check if data type is `MarkdownSection`
        if _data_type == "Markdown":
            instance.actual_instance = MarkdownSection.from_json(json_str)
            return instance

        # check if data type is `MiTrustSection`
        if _data_type == "MiTrust":
            instance.actual_instance = MiTrustSection.from_json(json_str)
            return instance

        # check if data type is `QuestionSection`
        if _data_type == "QuestionSection":
            instance.actual_instance = QuestionSection.from_json(json_str)
            return instance

        # check if data type is `SolvencyCheckSection`
        if _data_type == "SolvencyCheck":
            instance.actual_instance = SolvencyCheckSection.from_json(json_str)
            return instance

        # check if data type is `DocumentSection`
        if _data_type == "DocumentSection":
            instance.actual_instance = DocumentSection.from_json(json_str)
            return instance

        # check if data type is `MarkdownSection`
        if _data_type == "MarkdownSection":
            instance.actual_instance = MarkdownSection.from_json(json_str)
            return instance

        # check if data type is `MiTrustSection`
        if _data_type == "MiTrustSection":
            instance.actual_instance = MiTrustSection.from_json(json_str)
            return instance

        # check if data type is `SolvencyCheckSection`
        if _data_type == "SolvencyCheckSection":
            instance.actual_instance = SolvencyCheckSection.from_json(json_str)
            return instance

        # deserialize data into QuestionSection
        try:
            instance.actual_instance = QuestionSection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DocumentSection
        try:
            instance.actual_instance = DocumentSection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MiTrustSection
        try:
            instance.actual_instance = MiTrustSection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SolvencyCheckSection
        try:
            instance.actual_instance = SolvencyCheckSection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkdownSection
        try:
            instance.actual_instance = MarkdownSection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into FormPartSectionsInner with oneOf schemas: DocumentSection, MarkdownSection, MiTrustSection, QuestionSection, SolvencyCheckSection. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into FormPartSectionsInner with oneOf schemas: DocumentSection, MarkdownSection, MiTrustSection, QuestionSection, SolvencyCheckSection. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            DocumentSection,
            MarkdownSection,
            MiTrustSection,
            QuestionSection,
            SolvencyCheckSection,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
