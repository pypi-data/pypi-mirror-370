# coding: utf-8

"""
    Eazyrent core API

    EazyRent Core API ====================  Description -------------  The EazyRent API is a powerful tool, designed to automate and streamline the tenant application process for professionals in the real estate and insurance sectors.  Our API leverages advanced technologies like Optical Character Recognition (OCR) and Machine Learning to collect, analyze, and verify tenant application documents.  The API helps clients detect fraudulent submissions and assess the reliability of potential tenants, ensuring a secure and efficient tenant selection process.  Target Audience ----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a reliable solution to evaluate tenant applications quickly and accurately.   * **Rent Guarantee Insurers:** Companies seeking to verify the credibility of tenant applications and assess eligibility for rent payment guarantees.   Purpose --------  The purpose of the EazyRent API is to enable seamless interaction with our tenant application system. It allows clients to integrate our automated document collection, analysis, and verification capabilities directly into their own workflows. By using our API, businesses can streamline operations, reduce fraud risk, and make well-informed decisions in the tenant selection process.   How to use this API ---------------------  To start using the EazyRent API, please refer to our comprehensive online documentation, which includes detailed information on API endpoints, authentication, and integration examples. You can access the documentation [here](https://docs.eazyrent.fr). This resource will guide you through the steps needed to integrate our API into your existing systems and maximize its capabilities.  

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eazyrent.core.v1.models.company_config import CompanyConfig
from typing import Optional, Set
from typing_extensions import Self


class AcceptedSupportingDocument(BaseModel):
    """
    AcceptedSupportingDocument
    """  # noqa: E501

    id: StrictStr
    name: Annotated[str, Field(strict=True, max_length=256)]
    max_accepted_files: Optional[StrictInt] = None
    analyze_as: StrictStr
    analyzed: Optional[StrictBool] = False
    category: Optional[StrictStr] = None
    category_name: Optional[StrictStr] = None
    company_config: CompanyConfig
    display_name: StrictStr
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "max_accepted_files",
        "analyze_as",
        "analyzed",
        "category",
        "category_name",
        "company_config",
        "display_name",
    ]

    @field_validator("analyze_as")
    def analyze_as_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ID_CARD",
                "PASSPORT",
                "RESIDENCE_PERMIT",
                "SALARY_SLIP",
                "TAX_NOTICE",
                "STUDENT_CARD",
                "NOT_ANALYZED",
                "BUNDLE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ID_CARD', 'PASSPORT', 'RESIDENCE_PERMIT', 'SALARY_SLIP', 'TAX_NOTICE', 'STUDENT_CARD', 'NOT_ANALYZED', 'BUNDLE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcceptedSupportingDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_config
        if self.company_config:
            _dict["company_config"] = self.company_config.to_dict()
        # set to None if max_accepted_files (nullable) is None
        # and model_fields_set contains the field
        if (
            self.max_accepted_files is None
            and "max_accepted_files" in self.model_fields_set
        ):
            _dict["max_accepted_files"] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict["category"] = None

        # set to None if category_name (nullable) is None
        # and model_fields_set contains the field
        if self.category_name is None and "category_name" in self.model_fields_set:
            _dict["category_name"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcceptedSupportingDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "max_accepted_files": obj.get("max_accepted_files"),
                "analyze_as": obj.get("analyze_as"),
                "analyzed": obj.get("analyzed")
                if obj.get("analyzed") is not None
                else False,
                "category": obj.get("category"),
                "category_name": obj.get("category_name"),
                "company_config": CompanyConfig.from_dict(obj["company_config"])
                if obj.get("company_config") is not None
                else None,
                "display_name": obj.get("display_name"),
            }
        )
        return _obj
