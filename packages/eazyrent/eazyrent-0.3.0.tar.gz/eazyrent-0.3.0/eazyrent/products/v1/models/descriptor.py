# coding: utf-8

"""
    Eazyrent products API

    EazyRent Products API ======================  Description ------------  The EazyRent Product API offers a comprehensive solution for managing rental and sale listings, including property details, media distribution, and data import capabilities. Designed for real estate professionals, this API allows users to create, update, and manage property listings efficiently while ensuring accurate data and broad market reach. With features to streamline listing distribution and import property data from other platforms, the Product API simplifies property management, helping agencies maintain up-to-date and comprehensive property portfolios.  Target Audience -----------------   * **Real Estate Agencies and Social Housing Providers:** Professionals who need a centralized system to manage property listings, including rental and sale offerings, media distribution, and data synchronization across various platforms.   * **Property Managers:** Organizations looking to efficiently organize and promote property listings, manage property details, and ensure accurate, consistent information across marketing channels.  Purpose ---------  The purpose of the EazyRent Product API is to enable streamlined property management within the EazyRent platform. By integrating this API, businesses can centralize their property data, automate distribution to marketing channels, and simplify the process of keeping listings updated. This provides agencies with a scalable, efficient way to manage property portfolios, ensuring quick, effective exposure to potential tenants and buyers.  How to use this API ---------------------  To get started with the EazyRent Product API, please refer to our comprehensive documentation for authentication details, endpoint descriptions, and integration guides. This resource will help you set up efficient property management workflows, from data import to listing updates and distribution, all accessible within your existing systems.

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing import Optional
from eazyrent.products.v1.models.csv_descriptor import CsvDescriptor
from eazyrent.products.v1.models.excel_descriptor import ExcelDescriptor
from eazyrent.products.v1.models.json_descriptor import JsonDescriptor
from eazyrent.products.v1.models.xml_descriptor import XmlDescriptor
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

DESCRIPTOR_ANY_OF_SCHEMAS = [
    "CsvDescriptor",
    "ExcelDescriptor",
    "JsonDescriptor",
    "XmlDescriptor",
    "ZipDescriptor",
]


class Descriptor(BaseModel):
    """
    Descriptor
    """

    # data type: CsvDescriptor
    anyof_schema_1_validator: Optional[CsvDescriptor] = None
    # data type: JsonDescriptor
    anyof_schema_2_validator: Optional[JsonDescriptor] = None
    # data type: XmlDescriptor
    anyof_schema_3_validator: Optional[XmlDescriptor] = None
    # data type: ZipDescriptor
    anyof_schema_4_validator: Optional[ZipDescriptor] = None
    # data type: ExcelDescriptor
    anyof_schema_5_validator: Optional[ExcelDescriptor] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                CsvDescriptor,
                ExcelDescriptor,
                JsonDescriptor,
                XmlDescriptor,
                ZipDescriptor,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "CsvDescriptor",
        "ExcelDescriptor",
        "JsonDescriptor",
        "XmlDescriptor",
        "ZipDescriptor",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = Descriptor.model_construct()
        error_messages = []
        # validate data type: CsvDescriptor
        if not isinstance(v, CsvDescriptor):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CsvDescriptor`"
            )
        else:
            return v

        # validate data type: JsonDescriptor
        if not isinstance(v, JsonDescriptor):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `JsonDescriptor`"
            )
        else:
            return v

        # validate data type: XmlDescriptor
        if not isinstance(v, XmlDescriptor):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `XmlDescriptor`"
            )
        else:
            return v

        # validate data type: ZipDescriptor
        if not isinstance(v, ZipDescriptor):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ZipDescriptor`"
            )
        else:
            return v

        # validate data type: ExcelDescriptor
        if not isinstance(v, ExcelDescriptor):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ExcelDescriptor`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in Descriptor with anyOf schemas: CsvDescriptor, ExcelDescriptor, JsonDescriptor, XmlDescriptor, ZipDescriptor. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[CsvDescriptor] = None
        try:
            instance.actual_instance = CsvDescriptor.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[JsonDescriptor] = None
        try:
            instance.actual_instance = JsonDescriptor.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[XmlDescriptor] = None
        try:
            instance.actual_instance = XmlDescriptor.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ZipDescriptor] = None
        try:
            instance.actual_instance = ZipDescriptor.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ExcelDescriptor] = None
        try:
            instance.actual_instance = ExcelDescriptor.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Descriptor with anyOf schemas: CsvDescriptor, ExcelDescriptor, JsonDescriptor, XmlDescriptor, ZipDescriptor. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            CsvDescriptor,
            ExcelDescriptor,
            JsonDescriptor,
            XmlDescriptor,
            ZipDescriptor,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


from eazyrent.products.v1.models.zip_descriptor import ZipDescriptor

# TODO: Rewrite to not use raise_errors
Descriptor.model_rebuild(raise_errors=False)
