from typing import Optional, Union

Numeric = Union[list[Union[int, float]], int, float]

class Tensor:
    shape: list[int]
    ndim: int
    strides: list[int]
    data: list[float]
    size: int
    requires_grad: bool

    def __init__(self: "Tensor", data: Numeric, requires_grad: bool) -> None: ...
    def __add__(self: "Tensor", other: "Tensor") -> "Tensor": ...
    def __sub__(self: "Tensor", other: "Tensor") -> "Tensor": ...
    def __mul__(self: "Tensor", other: "Tensor") -> "Tensor": ...
    def __truediv__(self: "Tensor", other: "Tensor") -> "Tensor": ...
    def __matmul__(self: "Tensor", other: "Tensor") -> "Tensor": ...

    @property
    def T(self: "Tensor") -> "Tensor": ...

    @property
    def mT(self: "Tensor") -> "Tensor": ...

    def sum(self: "Tensor", axes: Optional[Union[list[int], tuple[int], int]] = None) -> "Tensor": ...

def tensor(data: Numeric, requires_grad: bool = False) -> Tensor: ...
