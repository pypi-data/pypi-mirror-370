name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality (Linting & Formatting)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black pylint mypy bandit safety
        pip install -e ".[dev]"

    - name: Check code formatting with Black
      run: black --check --diff src/ tests/

    - name: Lint with Pylint
      run: pylint src/git_crossref/

    - name: Type checking with MyPy
      run: mypy src/git_crossref/ --ignore-missing-imports

    - name: Security check with Bandit
      run: bandit -r src/git_crossref/ -f json -o bandit-report.json || true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true

    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        pytest tests/ -v \
          --cov=src/git_crossref \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=pytest-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set up Git for integration tests
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git init test-repo
        cd test-repo
        echo "# Test Repository" > README.md
        git add README.md
        git commit -m "Initial commit"

    - name: Test CLI installation and basic commands
      run: |
        # Test that the CLI is properly installed
        git-crossref --help
        
        # Test init command
        cd test-repo
        git-crossref init --help
        
        # Test validate command (should fail gracefully without config)
        git-crossref validate || echo "Expected failure without config file"

    - name: Test with real configuration
      run: |
        cd test-repo
        # Create a minimal test configuration
        cat > .gitcrossref << EOF
        remotes:
          test:
            url: "https://github.com/octocat/Hello-World.git"
            version: "master"
        files:
          test:
            - source: "README"
              destination: "vendor/README"
        EOF
        
        # Test validation
        git-crossref validate
        
        # Test dry-run sync
        git-crossref sync --dry-run

  package-test:
    name: Package Installation Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package metadata
      run: twine check dist/*

    - name: Test package installation
      run: |
        # Create a fresh virtual environment
        python -m venv test-env
        source test-env/bin/activate
        
        # Install the built package
        pip install dist/*.whl
        
        # Test that it works
        git-crossref --help

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml

    - name: Validate JSON schema syntax
      run: |
        python -c "
        import json
        with open('gitcrossref-schema.json', 'r') as f:
            schema = json.load(f)
        print('✓ JSON schema is valid')
        "

    - name: Test schema against sample configurations
      run: |
        python -c "
        import json
        import yaml
        from jsonschema import validate
        
        # Load schema
        with open('gitcrossref-schema.json', 'r') as f:
            schema = json.load(f)
        
        # Test configurations
        test_configs = [
            {
                'remotes': {
                    'upstream': {
                        'url': 'https://github.com/example/repo.git',
                        'version': 'main'
                    }
                },
                'files': {
                    'upstream': [
                        {
                            'source': 'utils.py',
                            'destination': 'lib/utils.py'
                        }
                    ]
                }
            },
            {
                'remotes': {
                    'source': {
                        'url': 'https://github.com/example/source.git',
                        'base_path': 'src',
                        'version': 'v1.0.0'
                    }
                },
                'files': {
                    'source': [
                        {
                            'source': 'config/',
                            'destination': 'project-config/'
                        },
                        {
                            'source': 'util/*.py',
                            'destination': 'libs/',
                            'hash': 'abc123def456'
                        }
                    ]
                }
            }
        ]
        
        for i, config in enumerate(test_configs):
            validate(config, schema)
            print(f'✓ Test configuration {i+1} is valid')
        
        print('✓ All schema validations passed')
        "

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, integration-tests, package-test, security-scan, schema-validation]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration-tests.result == 'success' && needs.package-test.result == 'success' }}
      run: echo "✅ All CI checks passed successfully!"

    - name: Notify failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration-tests.result == 'failure' || needs.package-test.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Package Test: ${{ needs.package-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Schema Validation: ${{ needs.schema-validation.result }}"
        exit 1
