name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=src/git_crossref --cov-report=term-missing

    - name: Validate package can be built
      run: |
        pip install build
        python -m build
        pip install twine
        twine check dist/*

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: validate-release
    environment: release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Verify the change
        grep "^version = " pyproject.toml

    - name: Build package
      run: |
        # Clean any previous builds
        rm -rf dist/ build/ *.egg-info/
        
        # Build source distribution and wheel
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Verify PyPI publication
      run: |
        # Wait a bit for PyPI to process the upload
        sleep 30
        
        # Try to install the package from PyPI
        pip install git-crossref==${{ needs.validate-release.outputs.version }}
        
        # Test that it works
        git-crossref --help

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Create a simple changelog (you might want to use a more sophisticated tool)
        cat > RELEASE_NOTES.md << EOF
        ## git-crossref v$VERSION
        
        ### Changes
        
        - Released version $VERSION
        - For detailed changes, see the commit history
        
        ### Installation
        
        \`\`\`bash
        pip install git-crossref==$VERSION
        \`\`\`
        
        ### Verification
        
        \`\`\`bash
        git-crossref --help
        \`\`\`
        EOF

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: Release v${{ needs.validate-release.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.publish-pypi.result == 'success' }}
      run: |
        echo "🎉 Successfully released git-crossref v${{ needs.validate-release.outputs.version }} to PyPI!"
        echo "📦 Package: https://pypi.org/project/git-crossref/${{ needs.validate-release.outputs.version }}/"
        echo "📥 Install: pip install git-crossref==${{ needs.validate-release.outputs.version }}"

    - name: Notify failure  
      if: ${{ needs.validate-release.result == 'failure' || needs.publish-pypi.result == 'failure' }}
      run: |
        echo "❌ Release failed!"
        echo "Validation: ${{ needs.validate-release.result }}"
        echo "PyPI Publish: ${{ needs.publish-pypi.result }}"
        exit 1
