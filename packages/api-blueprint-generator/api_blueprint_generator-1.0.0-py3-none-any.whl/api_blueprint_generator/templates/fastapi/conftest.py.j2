import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session

from app.main import app
from app.database import Base, get_db
from app import models, crud, schemas
from app.auth import create_access_token

# --- Test Database Setup ---
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create tables before tests, drop them after
@pytest.fixture(scope="session", autouse=True)
def setup_database():
    Base.metadata.create_all(bind=engine)
    yield
    Base.metadata.drop_all(bind=engine)

# --- Dependency Override ---
@pytest.fixture(scope="function")
def db_session() -> Session:
    """Yield a new database session for each test function, and roll back changes."""
    connection = engine.connect()
    transaction = connection.begin()
    session = TestingSessionLocal(bind=connection)
    yield session
    session.close()
    transaction.rollback()
    connection.close()

@pytest.fixture(scope="function", autouse=True)
def override_get_db(db_session: Session):
    """Override the get_db dependency to use the test database session."""
    def _override_get_db():
        try:
            yield db_session
        finally:
            db_session.close()
    app.dependency_overrides[get_db] = _override_get_db
    yield
    app.dependency_overrides.clear()

# --- API Client Fixtures ---
@pytest.fixture(scope="module")
def client() -> TestClient:
    """A TestClient for making unauthenticated requests."""
    return TestClient(app)

{% if spec.config.auth_type != 'none' %}
# --- User and Auth Fixtures ---
@pytest.fixture(scope="function")
def test_user(db_session: Session) -> models.User:
    """Create and return a standard test user."""
    user_in = schemas.UserCreate(
        username="testuser",
        email="test@example.com",
        password="testpassword"
    )
    return crud.create_user(db=db_session, user=user_in)

@pytest.fixture(scope="function")
def test_admin_user(db_session: Session) -> models.User:
    """Create and return an admin test user."""
    user_in = schemas.UserCreate(
        username="adminuser",
        email="admin@example.com",
        password="adminpassword"
    )
    user = crud.create_user(db=db_session, user=user_in)
    user.role = "admin"
    db_session.commit()
    db_session.refresh(user)
    return user

@pytest.fixture(scope="function")
def auth_client(client: TestClient, test_user: models.User) -> TestClient:
    """A TestClient authenticated as a standard user."""
    token = create_access_token(data={"sub": str(test_user.id)})
    client.headers["Authorization"] = f"Bearer {token}"
    return client

@pytest.fixture(scope="function")
def admin_auth_client(client: TestClient, test_admin_user: models.User) -> TestClient:
    """