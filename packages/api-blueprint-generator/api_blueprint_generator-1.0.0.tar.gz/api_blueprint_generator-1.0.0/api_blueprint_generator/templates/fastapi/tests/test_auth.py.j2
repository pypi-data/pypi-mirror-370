from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app import crud

def test_register_user(client: TestClient, db_session: Session):
    """Test user registration."""
    response = client.post(
        "/auth/register",
        json={"username": "newuser", "email": "new@example.com", "password": "newpassword"},
    )
    assert response.status_code == 201
    data = response.json()
    assert data["email"] == "new@example.com"
    assert "id" in data
    assert "hashed_password" not in data  # Ensure password is not returned

    user_in_db = crud.get_user_by_username(db_session, username="newuser")
    assert user_in_db

def test_register_existing_username(client: TestClient, test_user):
    """Test registration with an existing username fails."""
    response = client.post(
        "/auth/register",
        json={"username": "testuser", "email": "another@example.com", "password": "newpassword"},
    )
    assert response.status_code == 400

def test_login_for_access_token(client: TestClient, test_user):
    """Test user login and token generation."""
    response = client.post(
        "/auth/login",
        data={"username": "testuser", "password": "testpassword"},
        headers={"content-type": "application/x-www-form-urlencoded"},
    )
    assert response.status_code == 200
    token = response.json()
    assert "access_token" in token
    assert token["token_type"] == "bearer"

def test_login_with_wrong_password(client: TestClient, test_user):
    """Test login with incorrect password fails."""
    response = client.post(
        "/auth/login",
        data={"username": "testuser", "password": "wrongpassword"},
        headers={"content-type": "application/x-www-form-urlencoded"},
    )
    assert response.status_code == 401

def test_get_current_user(auth_client: TestClient, test_user):
    """Test fetching the current user with a valid token."""
    # The user update endpoint is a good proxy for a protected route
    response = auth_client.put(
        f"/api/v1/users/{test_user.id}",
        json={"email": "updated@example.com"}
    )
    # We expect success, proving the token worked
    assert response.status_code == 200
    assert response.json()["email"] == "updated@example.com"