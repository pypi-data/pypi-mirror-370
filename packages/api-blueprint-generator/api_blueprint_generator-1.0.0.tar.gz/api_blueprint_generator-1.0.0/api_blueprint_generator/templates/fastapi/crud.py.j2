from sqlalchemy.orm import Session

{% if spec.config.auth_type != 'none' %}
from .auth import get_password_hash
{% endif %}
from . import models, schemas

{% for model in spec.models %}
# CRUD operations for {{ model.name_pascal }}
def get_{{ model.name_snake }}(db: Session, {{ model.name_snake }}_id: int):
    """Get a single {{ model.name_pascal }} by its ID."""
    return db.query(models.{{ model.name_pascal }}).filter(models.{{ model.name_pascal }}.id == {{ model.name_snake }}_id).first()

def get_{{ model.name_snake | pluralize }}(db: Session, skip: int = 0, limit: int = 100):
    """Get a list of {{ model.name_pascal | pluralize }} with pagination."""
    return db.query(models.{{ model.name_pascal }}).offset(skip).limit(limit).all()

{% if spec.config.auth_type != 'none' and model.name == 'User' %}
def create_user(db: Session, user: schemas.UserCreate):
    """Create a new user with a hashed password."""
    hashed_password = get_password_hash(user.password)
    db_user = models.User(
        username=user.username,
        email=user.email,
        hashed_password=hashed_password
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user
{% else %}
def create_{{ model.name_snake }}(db: Session, {{ model.name_snake }}: schemas.{{ model.name_pascal }}Create):
    """Create a new {{ model.name_pascal }}."""
    db_{{ model.name_snake }} = models.{{ model.name_pascal }}(**{{ model.name_snake }}.dict())
    db.add(db_{{ model.name_snake }})
    db.commit()
    db.refresh(db_{{ model.name_snake }})
    return db_{{ model.name_snake }}
{% endif %}

{% if spec.config.auth_type != 'none' and model.name == 'User' %}
def update_user(db: Session, db_obj: models.User, obj_in: schemas.UserUpdate):
    """Update a user, with special handling for password hashing."""
    update_data = obj_in.dict(exclude_unset=True)
    if "password" in update_data:
        hashed_password = get_password_hash(update_data["password"])
        db_obj.hashed_password = hashed_password
        del update_data["password"]

    for field, value in update_data.items():
        setattr(db_obj, field, value)

    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj
{% else %}
def update_{{ model.name_snake }}(db: Session, db_obj: models.{{ model.name_pascal }}, obj_in: schemas.{{ model.name_pascal }}Update):
    """Update an existing {{ model.name_pascal }}."""
    update_data = obj_in.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_obj, field, value)
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj
{% endif %}

def delete_{{ model.name_snake }}(db: Session, db_obj: models.{{ model.name_pascal }}):
    """Delete a {{ model.name_pascal }}."""
    db.delete(db_obj)
    db.commit()
    return db_obj

{% for field in model.fields if 'unique' in field.options %}
def get_{{ model.name_snake }}_by_{{ field.name }}(db: Session, {{ field.name }}: str):
    """Get a {{ model.name_pascal }} by its unique '{{ field.name }}' field."""
    return db.query(models.{{ model.name_pascal }}).filter(models.{{ model.name_pascal }}.{{ field.name }} == {{ field.name }}).first()
{% endfor %}
{% if not loop.last %}

{% endif %}
{%- endfor %}