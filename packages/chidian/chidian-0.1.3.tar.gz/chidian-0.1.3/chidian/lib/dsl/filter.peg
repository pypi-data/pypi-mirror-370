# === Table Filter DSL ===
# NOTE: Assume whitespace is removed beforehand

filter_expr = or_expr

# === Logical Expressions ===
or_expr = and_expr (whitespace or_op whitespace and_expr)*
and_expr = comparison (whitespace and_op whitespace comparison)*

# === Comparisons ===
comparison = path whitespace compare_op whitespace value

# === Operators ===
compare_op = lte / gte / lt / gt / ne / eq / contains / in_op
or_op = ~"(?i)OR"
and_op = ~"(?i)AND"

# Order matters for these (>= before >, <= before <, != before =)
lte = "<="
gte = ">="
lt = "<"
gt = ">"
ne = "!="
eq = "="
contains = ~"(?i)CONTAINS"
in_op = ~"(?i)IN"

# === Path Expression ===
# Reuse path syntax from select
path = nested_path / simple_name
nested_path = simple_name (dot path_segment)+
path_segment = simple_name array_index?
array_index = lbrack index_content rbrack
index_content = number / star

# === Values ===
value = string / number / boolean / null / list_value
string = single_quoted / double_quoted
single_quoted = single_quote string_content_single single_quote
double_quoted = double_quote string_content_double double_quote
string_content_single = ~"[^']*"
string_content_double = ~"[^\"]*"
boolean = true / false
true = ~"(?i)true"
false = ~"(?i)false"
null = ~"(?i)null" / ~"(?i)none"
list_value = lbrack (value (comma value)*)? rbrack

# === Primitives ===
lbrack = "["
rbrack = "]"
comma = ","
dot = "."
star = "*"
single_quote = "'"
double_quote = "\""
whitespace = ~"\\s+"

# === Lexemes ===
simple_name = ~"[a-zA-Z_][a-zA-Z0-9_-]*"
number = ~"-?[0-9]+(\\.[0-9]+)?"
