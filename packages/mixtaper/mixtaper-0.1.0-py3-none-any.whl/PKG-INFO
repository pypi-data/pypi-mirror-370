Metadata-Version: 2.4
Name: mixtaper
Version: 0.1.0
Summary: AI-powered mixtape creator that analyzes audio files and crafts perfect track sequences
Project-URL: Homepage, https://github.com/ido50/mixtaper
Project-URL: Repository, https://github.com/ido50/mixtaper
Project-URL: Issues, https://github.com/ido50/mixtaper/issues
Author: Mixtaper Contributors
License: Apache-2.0
License-File: LICENSE
Keywords: ai,audio,cli,flow,mixtape,music,ordering
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Sound/Audio :: Analysis
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Requires-Dist: librosa>=0.10.1
Requires-Dist: mutagen>=1.47.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: openai>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: rich>=13.7.0
Requires-Dist: scipy>=1.10.0
Provides-Extra: dev
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# üéµ Mixtaper

[![CI/CD Pipeline](https://github.com/ido50/mixtaper/actions/workflows/ci-cd.yml/badge.svg)](https://github.com/ido50/mixtaper/actions/workflows/ci-cd.yml)
[![PyPI version](https://badge.fury.io/py/mixtaper.svg)](https://badge.fury.io/py/mixtaper)
[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

AI-powered mixtape creator that turns a directory of music files into a flowing
track sequence, suitable for a personal mixtape. Using advanced audio analysis
and machine learning, it arranges tracks based on musical characteristics like
tempo, key, energy, and rhythm to create flowing mixtapes.

## Features

- **üéµ Audio Analysis**: Extracts tempo, key, energy, brightness, and rhythm
  complexity from MP3, FLAC, WAV, M4A, and OGG files
- **üéØ Smart Ordering**: Uses weighted transition scoring to create optimal
  track sequences
- **üé® AI Artwork**: Generate album artwork using OpenAI DALL-E based on musical
  analysis
- **üìÄ Multi-CD Support**: Automatically splits large collections across multiple
  CDs with natural break points
- **üè∑Ô∏è Metadata Management**: Updates ID3v2/FLAC tags with album info, track
  numbers and ReplayGain
- **üé≠ Genre Detection**: Looks up accurate genres using MusicBrainz database
- **‚ö° Multithreaded**: Fast analysis using parallel processing
- **üñ•Ô∏è Rich UI**: Beautiful command-line interface with progress indicators

## Rationale and Overview

This project was created using Claude Code. I wanted to quickly whip up something
that will formalize and automate how I created "mixtapes" for myself. I prefer
creating my own compilation albums versus creating playlist files (e.g. m3u).
I do so by creating a new subdirectory under my Music directory, dumping a dozen
or so pre-selected music files into it, ordering them, generating cover art with
an AI image generator, updating their ID3 tags and renaming them in the chosen
order. I mostly create mixtapes based on certain moods, so that I can quickly
choose a playlist based on what I want to hear. I find that music collection
managers that have "mood" as a filter work terribly.

The only problem is choosing a good order for the songs. It always takes too
long and I don't want every mixtape to turn into some ridiculous project. So I
created `mixtaper` to make this process quicker. I can now just dump the files
into a directory and let the program do everything for me:

1. Analyze the songs for things like tempo, key, energy, etc.
2. Choose an ordering for the songs that will "flow well" based on the analysis.
3. Generate cover art via OpenAI DALL-E (or select an existing
   `^(cover|front)\.(png|jpg)$` image in the directory).
4. Calculate ReplayGain values for the tracks individually and the album as a
   whole.
5. Set relevant ID3 tags for the files.
6. Rename the files with the format "<TRACK_NUMBER>. <ARTIST> - <TITLE>".

I also added support for multi-CD mixtapes. `mixtaper` will recommend a number of
CDs if it finds that the directory contains "more songs than common in albums",
and prefix the files with the disc number, so, "<DISC_NUMBER><TRACK_NUMBER>. <ARTIST> - <TITLE>".

This is an early release. I decided to let Claude Code implement this and see
how it goes. For now, it seems to work quite nicely. My biggest issue right now
is how to craft a good prompt for the cover art generation. The current prompt
generator isn't good, but prompts can be edited. The ordering `mixtaper` creates
could be better, but I'm fine with it for now. I can always tinker with the
parameters and re-run.

By default, `mixtaper` works interactively, asking you questions and also for
confirmation. You can pre-answer questions via command line flags, or opt for
completely automatic, non-interactive execution. Information later on.

## Installation

`mixtaper` is a command line utility written in Python and distributed via PyPI.
It is recommended to install it via a utility such as [pipx](https://github.com/pypa/pipx):

```sh
pipx install mixtaper
```

You can also install it directly through `pip`:

```sh
python3 -m pip install mixtaper
```

## Usage

### Basic Usage

```bash
# Interactive mode - prompts for configuration
mixtaper /path/to/music

# Automatic mode with smart defaults
mixtaper /path/to/music --auto

# Preview without making changes
mixtaper /path/to/music --dry-run
```

### Advanced Options

```bash
# Generate AI artwork (requires OpenAI API key)
export OPENAI_API_KEY="your-api-key"
mixtaper /path/to/music --ai-art

# Preset album information
mixtaper /path/to/music --title "My Mixtape" --artist "DJ Name" --year 2024

# Preselect number of CDs
mixtaper /path/to/music --num-cds 2

# Predefine AI artwork prompt
mixtaper /path/to/music --ai-art --ai-prompt "Abstract digital art with neon colors"

# Performance tuning
mixtaper /path/to/music --threads 8
```

### Command-Line Options

| Option | Description |
|--------|-------------|
| `--title` | Album title (default: directory name) |
| `--artist` | Album artist (default: Various Artists) |
| `--year` | Release year (default: current year) |
| `--num-cds` | Number of CDs to create (default: auto-suggest) |
| `--ai-art` | Generate AI artwork using DALL-E |
| `--ai-prompt` | Custom prompt for AI artwork generation |
| `--auto` | Automatic mode - no interactive prompts |
| `--dry-run` | Preview operations without making changes |
| `-y, --yes` | Automatically confirm all prompts |
| `--threads` | Number of analysis threads (default: 4) |

## How It Works

### 1. Audio Analysis
The tool analyzes each audio file to extract:
- **Tempo**: BPM detection for rhythmic continuity
- **Key**: Chromatic feature analysis for harmonic compatibility
- **Energy**: RMS levels for dynamic flow management
- **Brightness**: Spectral centroid for tonal continuity
- **Rhythm Complexity**: Onset density analysis

### 2. Track Optimization
Uses a weighted scoring algorithm for track transitions:
- Tempo similarity: 30%
- Key compatibility: 20%
- Energy flow: 25%
- Brightness continuity: 15%
- Rhythm complexity: 10%

### 3. Metadata Enhancement
- Reads existing Artist/Title from file metadata
- Looks up accurate genres via MusicBrainz API
- Updates all files with consistent album information
- Adds ReplayGain tags for volume normalization
- Embeds album artwork in file metadata

### 4. File Organization
- Renames files to format: "01. Artist - Title.ext"
- For multi-CD sets: "201. Artist - Title.ext" (CD 2, Track 1)
- Safe renaming with conflict resolution
- Preserves original files if errors occur

## Directory Structure

The project uses a modular architecture for maintainability:

```
mixtaper/
‚îú‚îÄ‚îÄ __init__.py           # Package exports
‚îú‚îÄ‚îÄ config.py             # Configuration and data classes
‚îú‚îÄ‚îÄ audio_analyzer.py     # Audio analysis using librosa
‚îú‚îÄ‚îÄ metadata_manager.py   # ID3v2/FLAC metadata handling
‚îú‚îÄ‚îÄ musicbrainz_client.py # MusicBrainz API integration
‚îú‚îÄ‚îÄ artwork_generator.py  # AI artwork generation
‚îú‚îÄ‚îÄ mixtape_optimizer.py  # Track ordering algorithms
‚îú‚îÄ‚îÄ tui.py               # Rich-based user interface
‚îî‚îÄ‚îÄ cli.py               # Command-line interface
```

## Development

### Running Tests

```bash
# Install development dependencies
uv sync --dev

# Run all tests
uv run python run_tests.py

# Or use pytest directly
uv run pytest tests/ -v
```

### Code Quality

```bash
# Format code
uv run ruff format .

# Lint code
uv run ruff check .
```

### Testing with Sample Files

```bash
# Test with audio files
uv run mixtaper.py /path/to/test/audio/files

# Test AI artwork (requires OpenAI API key)
export OPENAI_API_KEY="your-api-key"
uv run mixtaper.py /path/to/music --ai-art --dry-run
```

## Requirements

### System Dependencies
- Python 3.8+
- FFmpeg (for audio format support)

### Python Dependencies
- **librosa**: Audio analysis and feature extraction
- **mutagen**: Audio metadata reading/writing
- **rich**: Beautiful command-line interface
- **numpy/scipy**: Numerical computations
- **openai**: AI artwork generation (optional)
- **requests**: HTTP client for API calls

### Optional
- **OpenAI API Key**: For AI artwork generation
- **MusicBrainz**: Free genre lookup (no API key required)

## Examples

### Example Output

```
‚ïî‚ïê‚ïê Mixtaper ‚ïê‚ïê‚ïó
Processing: /music/Various Artists - 2024 - New Wave Mix

‚ïî‚ïê‚ïê Audio Analysis ‚ïê‚ïê‚ïó
  [1/13] Analyzing: 04. The Cure - Boys Don't Cry.flac
  [2/13] Analyzing: 03. Don Henley - The Boys Of Summer.flac
  ...

‚ïî‚ïê‚ïê Genre Lookup ‚ïê‚ïê‚ïó
  [1/13] The Cure - Boys Don't Cry
    Genre: alternative rock
  [2/13] Don Henley - The Boys Of Summer
    Genre: classic rock
  ...

‚ïî‚ïê‚ïê Suggested Track Order ‚ïê‚ïê‚ïó
01. Crowded House - Don't Dream It's Over [alternative rock] (82 BPM, Energy: 0.17)
02. A-Ha - Take on Me [dance-pop] (85 BPM, Energy: 0.18)
03. Don Henley - The Boys Of Summer [classic rock] (89 BPM, Energy: 0.16)
...

‚úì Mixtape organization complete!
  ‚Ä¢ 13 tracks processed
  ‚Ä¢ 1 CD created
  ‚Ä¢ Metadata and ReplayGain tags updated
  ‚Ä¢ Album artwork preserved
```

### Directory Structure Example

```
Various Artists - 2024 - New Wave Mix/
‚îú‚îÄ‚îÄ cover.jpg                                    # Album artwork
‚îú‚îÄ‚îÄ 01. Crowded House - Don't Dream It's Over.flac
‚îú‚îÄ‚îÄ 02. A-Ha - Take on Me.flac
‚îú‚îÄ‚îÄ 03. Don Henley - The Boys Of Summer.flac
‚îî‚îÄ‚îÄ ...
```

## License

Apache License 2.0 - see LICENSE file for details.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests: `uv run python run_tests.py`
5. Submit a pull request

## Support

- Report issues: [GitHub Issues](https://github.com/ido50/mixtaper/issues)
- Documentation: See `CLAUDE.md` for development details
- Examples: Check the `tests/` directory for usage examples
