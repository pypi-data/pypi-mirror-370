# Generated from src/queryparser/mysql/MySQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,640,875,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,1,0,1,0,1,1,1,1,1,1,1,1,3,1,167,8,1,1,1,1,1,1,1,1,1,
        3,1,173,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,182,8,1,1,1,3,1,185,
        8,1,1,1,1,1,3,1,189,8,1,1,1,1,1,1,1,3,1,194,8,1,3,1,196,8,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,205,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        213,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,226,8,8,
        1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,252,8,17,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,260,8,18,1,19,1,19,3,19,264,8,
        19,1,19,3,19,267,8,19,1,19,3,19,270,8,19,1,19,3,19,273,8,19,1,19,
        3,19,276,8,19,1,19,3,19,279,8,19,1,19,3,19,282,8,19,1,19,3,19,285,
        8,19,1,19,1,19,1,19,1,19,3,19,291,8,19,1,19,3,19,294,8,19,1,19,3,
        19,297,8,19,1,19,3,19,300,8,19,3,19,302,8,19,1,19,3,19,305,8,19,
        1,19,3,19,308,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,316,8,19,1,
        19,3,19,319,8,19,1,20,3,20,322,8,20,1,20,1,20,1,21,1,21,1,21,3,21,
        329,8,21,1,22,1,22,1,22,1,22,3,22,335,8,22,1,22,3,22,338,8,22,1,
        22,1,22,3,22,342,8,22,1,23,1,23,1,23,3,23,347,8,23,1,23,1,23,3,23,
        351,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,4,24,360,8,24,11,24,
        12,24,361,1,25,1,25,1,25,1,25,1,25,1,25,4,25,370,8,25,11,25,12,25,
        371,1,26,1,26,1,26,1,26,5,26,378,8,26,10,26,12,26,381,9,26,1,26,
        1,26,1,27,1,27,1,28,1,28,1,28,3,28,390,8,28,1,28,1,28,1,28,3,28,
        395,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,405,8,29,3,
        29,407,8,29,1,30,1,30,1,30,5,30,412,8,30,10,30,12,30,415,9,30,1,
        31,1,31,1,31,5,31,420,8,31,10,31,12,31,423,9,31,1,32,3,32,426,8,
        32,1,32,1,32,1,33,1,33,1,33,3,33,433,8,33,1,33,1,33,3,33,437,8,33,
        3,33,439,8,33,1,34,1,34,1,34,5,34,444,8,34,10,34,12,34,447,9,34,
        1,35,1,35,1,35,1,35,5,35,453,8,35,10,35,12,35,456,9,35,1,35,1,35,
        1,36,1,36,1,36,3,36,463,8,36,1,37,1,37,1,37,3,37,468,8,37,1,38,1,
        38,1,38,5,38,473,8,38,10,38,12,38,476,9,38,1,39,1,39,1,39,5,39,481,
        8,39,10,39,12,39,484,9,39,1,40,3,40,487,8,40,1,40,1,40,1,40,3,40,
        492,8,40,1,41,1,41,1,41,1,41,1,41,5,41,499,8,41,10,41,12,41,502,
        9,41,3,41,504,8,41,1,41,3,41,507,8,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,3,41,533,8,41,1,41,3,41,536,8,41,1,41,
        1,41,3,41,540,8,41,1,42,1,42,1,42,1,42,1,42,5,42,547,8,42,10,42,
        12,42,550,9,42,1,42,1,42,3,42,554,8,42,1,43,1,43,1,43,3,43,559,8,
        43,1,43,3,43,562,8,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,571,
        8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,3,45,587,8,45,1,46,1,46,1,46,5,46,592,8,46,10,46,12,46,
        595,9,46,1,47,1,47,1,48,1,48,1,48,5,48,602,8,48,10,48,12,48,605,
        9,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,614,8,49,3,49,616,8,
        49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,626,8,51,1,52,1,
        52,1,52,1,52,3,52,632,8,52,1,52,1,52,1,52,1,52,1,52,3,52,639,8,52,
        1,53,1,53,1,53,1,53,5,53,645,8,53,10,53,12,53,648,9,53,1,53,1,53,
        1,53,3,53,653,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
        5,56,664,8,56,10,56,12,56,667,9,56,1,57,1,57,3,57,671,8,57,1,58,
        1,58,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,5,60,683,8,60,10,60,
        12,60,686,9,60,1,61,3,61,689,8,61,1,61,1,61,1,61,3,61,694,8,61,1,
        61,1,61,1,61,1,61,3,61,700,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,3,61,709,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,3,63,718,8,63,
        1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,66,5,66,728,8,66,10,66,12,66,
        731,9,66,1,66,1,66,1,66,1,66,1,66,5,66,738,8,66,10,66,12,66,741,
        9,66,3,66,743,8,66,3,66,745,8,66,1,67,1,67,1,67,3,67,750,8,67,1,
        67,5,67,753,8,67,10,67,12,67,756,9,67,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,770,8,68,1,69,1,69,1,69,1,
        69,1,70,1,70,3,70,778,8,70,1,70,3,70,781,8,70,1,70,3,70,784,8,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,3,70,802,8,70,1,71,1,71,1,72,1,72,3,72,808,8,72,1,
        72,1,72,1,72,3,72,813,8,72,5,72,815,8,72,10,72,12,72,818,9,72,1,
        73,1,73,1,73,1,73,1,73,3,73,825,8,73,3,73,827,8,73,1,74,1,74,1,74,
        3,74,832,8,74,1,74,1,74,1,74,1,74,5,74,838,8,74,10,74,12,74,841,
        9,74,1,75,1,75,1,75,1,75,3,75,847,8,75,3,75,849,8,75,1,75,1,75,3,
        75,853,8,75,1,76,1,76,1,77,1,77,1,77,5,77,860,8,77,10,77,12,77,863,
        9,77,1,78,1,78,1,78,3,78,868,8,78,1,78,1,78,1,79,1,79,1,79,1,79,
        0,0,80,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,0,23,2,0,608,611,631,632,9,0,75,79,127,130,187,189,193,
        193,215,215,233,234,307,307,315,315,317,317,2,0,155,155,300,300,
        2,0,103,103,283,283,1,0,624,625,2,0,633,633,636,636,32,0,12,12,21,
        21,25,25,35,35,37,37,41,42,91,91,101,101,104,105,108,108,112,112,
        125,125,139,140,161,162,167,168,173,175,180,180,186,186,200,200,
        205,205,217,217,223,226,230,231,245,245,247,247,260,260,262,263,
        279,279,282,282,287,287,292,292,310,310,10,0,17,17,23,24,26,27,49,
        49,121,121,183,183,190,190,255,258,265,265,303,305,21,0,1,2,13,13,
        15,16,33,34,44,44,47,48,58,58,84,84,99,99,106,106,165,165,170,172,
        191,191,212,214,218,219,228,228,240,240,242,242,254,254,269,269,
        284,284,32,0,5,6,18,18,36,36,38,38,40,40,43,43,62,62,64,64,82,83,
        86,87,92,93,110,110,119,119,132,133,136,137,144,144,146,146,154,
        154,167,167,180,181,184,184,195,195,203,203,209,209,222,222,232,
        232,237,237,244,244,268,268,294,294,301,302,306,306,29,0,3,4,46,
        46,61,61,63,63,65,65,67,74,102,102,113,114,118,118,127,127,153,153,
        178,179,185,185,187,187,193,194,198,198,210,211,215,215,233,233,
        235,235,261,261,264,264,267,267,271,277,280,281,289,289,297,299,
        307,309,315,316,1,0,318,593,1,0,594,601,2,0,8,8,88,89,2,0,250,250,
        252,252,1,0,613,614,3,0,603,604,619,619,629,629,2,0,22,22,624,626,
        3,0,8,8,88,88,619,619,2,0,11,11,85,85,2,0,135,135,149,149,2,0,60,
        60,138,138,2,0,161,161,226,226,938,0,160,1,0,0,0,2,195,1,0,0,0,4,
        212,1,0,0,0,6,214,1,0,0,0,8,216,1,0,0,0,10,218,1,0,0,0,12,220,1,
        0,0,0,14,222,1,0,0,0,16,225,1,0,0,0,18,229,1,0,0,0,20,231,1,0,0,
        0,22,233,1,0,0,0,24,235,1,0,0,0,26,237,1,0,0,0,28,239,1,0,0,0,30,
        241,1,0,0,0,32,243,1,0,0,0,34,251,1,0,0,0,36,259,1,0,0,0,38,261,
        1,0,0,0,40,321,1,0,0,0,42,325,1,0,0,0,44,341,1,0,0,0,46,343,1,0,
        0,0,48,359,1,0,0,0,50,363,1,0,0,0,52,373,1,0,0,0,54,384,1,0,0,0,
        56,394,1,0,0,0,58,406,1,0,0,0,60,408,1,0,0,0,62,416,1,0,0,0,64,425,
        1,0,0,0,66,429,1,0,0,0,68,440,1,0,0,0,70,448,1,0,0,0,72,459,1,0,
        0,0,74,464,1,0,0,0,76,469,1,0,0,0,78,477,1,0,0,0,80,486,1,0,0,0,
        82,539,1,0,0,0,84,541,1,0,0,0,86,558,1,0,0,0,88,563,1,0,0,0,90,586,
        1,0,0,0,92,588,1,0,0,0,94,596,1,0,0,0,96,598,1,0,0,0,98,606,1,0,
        0,0,100,617,1,0,0,0,102,625,1,0,0,0,104,627,1,0,0,0,106,640,1,0,
        0,0,108,654,1,0,0,0,110,656,1,0,0,0,112,658,1,0,0,0,114,668,1,0,
        0,0,116,672,1,0,0,0,118,677,1,0,0,0,120,679,1,0,0,0,122,688,1,0,
        0,0,124,710,1,0,0,0,126,714,1,0,0,0,128,719,1,0,0,0,130,722,1,0,
        0,0,132,744,1,0,0,0,134,746,1,0,0,0,136,769,1,0,0,0,138,771,1,0,
        0,0,140,801,1,0,0,0,142,803,1,0,0,0,144,805,1,0,0,0,146,819,1,0,
        0,0,148,828,1,0,0,0,150,842,1,0,0,0,152,854,1,0,0,0,154,856,1,0,
        0,0,156,867,1,0,0,0,158,871,1,0,0,0,160,161,7,0,0,0,161,1,1,0,0,
        0,162,166,5,22,0,0,163,164,5,621,0,0,164,165,5,633,0,0,165,167,5,
        620,0,0,166,163,1,0,0,0,166,167,1,0,0,0,167,196,1,0,0,0,168,172,
        5,35,0,0,169,170,5,621,0,0,170,171,5,633,0,0,171,173,5,620,0,0,172,
        169,1,0,0,0,172,173,1,0,0,0,173,196,1,0,0,0,174,196,5,70,0,0,175,
        196,5,66,0,0,176,184,5,81,0,0,177,178,5,621,0,0,178,181,5,633,0,
        0,179,180,5,618,0,0,180,182,5,633,0,0,181,179,1,0,0,0,181,182,1,
        0,0,0,182,183,1,0,0,0,183,185,5,620,0,0,184,177,1,0,0,0,184,185,
        1,0,0,0,185,196,1,0,0,0,186,188,5,241,0,0,187,189,5,141,0,0,188,
        187,1,0,0,0,188,189,1,0,0,0,189,196,1,0,0,0,190,196,5,276,0,0,191,
        193,5,290,0,0,192,194,5,141,0,0,193,192,1,0,0,0,193,194,1,0,0,0,
        194,196,1,0,0,0,195,162,1,0,0,0,195,168,1,0,0,0,195,174,1,0,0,0,
        195,175,1,0,0,0,195,176,1,0,0,0,195,186,1,0,0,0,195,190,1,0,0,0,
        195,191,1,0,0,0,196,3,1,0,0,0,197,198,5,143,0,0,198,199,5,196,0,
        0,199,200,5,152,0,0,200,204,5,192,0,0,201,202,5,313,0,0,202,203,
        5,216,0,0,203,205,5,100,0,0,204,201,1,0,0,0,204,205,1,0,0,0,205,
        213,1,0,0,0,206,207,5,143,0,0,207,208,5,28,0,0,208,213,5,192,0,0,
        209,210,5,313,0,0,210,211,5,216,0,0,211,213,5,100,0,0,212,197,1,
        0,0,0,212,206,1,0,0,0,212,209,1,0,0,0,213,5,1,0,0,0,214,215,7,1,
        0,0,215,7,1,0,0,0,216,217,7,2,0,0,217,9,1,0,0,0,218,219,5,635,0,
        0,219,11,1,0,0,0,220,221,7,3,0,0,221,13,1,0,0,0,222,223,5,634,0,
        0,223,15,1,0,0,0,224,226,7,4,0,0,225,224,1,0,0,0,225,226,1,0,0,0,
        226,227,1,0,0,0,227,228,7,5,0,0,228,17,1,0,0,0,229,230,5,637,0,0,
        230,19,1,0,0,0,231,232,7,6,0,0,232,21,1,0,0,0,233,234,7,7,0,0,234,
        23,1,0,0,0,235,236,7,8,0,0,236,25,1,0,0,0,237,238,7,9,0,0,238,27,
        1,0,0,0,239,240,7,10,0,0,240,29,1,0,0,0,241,242,7,11,0,0,242,31,
        1,0,0,0,243,244,7,12,0,0,244,33,1,0,0,0,245,252,3,24,12,0,246,252,
        3,20,10,0,247,252,3,28,14,0,248,252,3,26,13,0,249,252,3,30,15,0,
        250,252,3,32,16,0,251,245,1,0,0,0,251,246,1,0,0,0,251,247,1,0,0,
        0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,35,1,0,0,0,
        253,260,3,18,9,0,254,260,3,16,8,0,255,260,3,14,7,0,256,260,3,12,
        6,0,257,260,3,10,5,0,258,260,5,199,0,0,259,253,1,0,0,0,259,254,1,
        0,0,0,259,255,1,0,0,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,1,
        0,0,0,260,37,1,0,0,0,261,263,5,236,0,0,262,264,7,13,0,0,263,262,
        1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,267,5,126,0,0,266,265,
        1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,270,5,259,0,0,269,268,
        1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,273,5,253,0,0,272,271,
        1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,276,5,248,0,0,275,274,
        1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,279,5,249,0,0,278,277,
        1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,282,7,14,0,0,281,280,
        1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,285,5,251,0,0,284,283,
        1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,301,3,132,66,0,287,288,
        5,111,0,0,288,290,3,154,77,0,289,291,3,116,58,0,290,289,1,0,0,0,
        290,291,1,0,0,0,291,293,1,0,0,0,292,294,3,158,79,0,293,292,1,0,0,
        0,293,294,1,0,0,0,294,296,1,0,0,0,295,297,3,84,42,0,296,295,1,0,
        0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,88,44,0,299,298,1,
        0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,287,1,0,0,0,301,302,1,
        0,0,0,302,304,1,0,0,0,303,305,3,112,56,0,304,303,1,0,0,0,304,305,
        1,0,0,0,305,307,1,0,0,0,306,308,3,104,52,0,307,306,1,0,0,0,307,308,
        1,0,0,0,308,315,1,0,0,0,309,310,5,109,0,0,310,316,5,291,0,0,311,
        312,5,169,0,0,312,313,5,143,0,0,313,314,5,239,0,0,314,316,5,192,
        0,0,315,309,1,0,0,0,315,311,1,0,0,0,315,316,1,0,0,0,316,318,1,0,
        0,0,317,319,5,615,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,39,1,0,
        0,0,320,322,5,14,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,
        0,0,323,324,5,638,0,0,324,41,1,0,0,0,325,328,3,72,36,0,326,327,5,
        627,0,0,327,329,3,72,36,0,328,326,1,0,0,0,328,329,1,0,0,0,329,43,
        1,0,0,0,330,334,3,126,63,0,331,332,3,0,0,0,332,333,3,126,63,0,333,
        335,1,0,0,0,334,331,1,0,0,0,334,335,1,0,0,0,335,342,1,0,0,0,336,
        338,5,197,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,
        340,5,98,0,0,340,342,3,138,69,0,341,330,1,0,0,0,341,337,1,0,0,0,
        342,45,1,0,0,0,343,346,5,31,0,0,344,347,3,48,24,0,345,347,3,50,25,
        0,346,344,1,0,0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,349,5,90,0,
        0,349,351,3,42,21,0,350,348,1,0,0,0,350,351,1,0,0,0,351,352,1,0,
        0,0,352,353,5,94,0,0,353,47,1,0,0,0,354,355,5,311,0,0,355,356,3,
        68,34,0,356,357,5,270,0,0,357,358,3,42,21,0,358,360,1,0,0,0,359,
        354,1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,
        49,1,0,0,0,363,369,3,42,21,0,364,365,5,311,0,0,365,366,3,42,21,0,
        366,367,5,270,0,0,367,368,3,42,21,0,368,370,1,0,0,0,369,364,1,0,
        0,0,370,371,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,51,1,0,0,
        0,373,374,5,621,0,0,374,379,3,56,28,0,375,376,5,618,0,0,376,378,
        3,56,28,0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,
        1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,383,5,620,0,0,383,53,
        1,0,0,0,384,385,5,638,0,0,385,55,1,0,0,0,386,387,3,130,65,0,387,
        388,5,617,0,0,388,390,1,0,0,0,389,386,1,0,0,0,389,390,1,0,0,0,390,
        391,1,0,0,0,391,392,3,142,71,0,392,393,5,617,0,0,393,395,1,0,0,0,
        394,389,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,3,54,27,
        0,397,57,1,0,0,0,398,399,3,156,78,0,399,400,5,617,0,0,400,401,5,
        619,0,0,401,407,1,0,0,0,402,404,3,42,21,0,403,405,3,40,20,0,404,
        403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,398,1,0,0,0,406,
        402,1,0,0,0,407,59,1,0,0,0,408,413,3,62,31,0,409,410,5,314,0,0,410,
        412,3,62,31,0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,
        414,1,0,0,0,414,61,1,0,0,0,415,413,1,0,0,0,416,421,3,64,32,0,417,
        418,5,606,0,0,418,420,3,64,32,0,419,417,1,0,0,0,420,423,1,0,0,0,
        421,419,1,0,0,0,421,422,1,0,0,0,422,63,1,0,0,0,423,421,1,0,0,0,424,
        426,5,197,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,
        428,3,66,33,0,428,65,1,0,0,0,429,438,3,44,22,0,430,432,5,145,0,0,
        431,433,5,197,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,
        0,434,437,3,12,6,0,435,437,5,199,0,0,436,434,1,0,0,0,436,435,1,0,
        0,0,437,439,1,0,0,0,438,430,1,0,0,0,438,439,1,0,0,0,439,67,1,0,0,
        0,440,445,3,60,30,0,441,442,5,605,0,0,442,444,3,60,30,0,443,441,
        1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,69,1,
        0,0,0,447,445,1,0,0,0,448,449,5,621,0,0,449,454,3,68,34,0,450,451,
        5,618,0,0,451,453,3,68,34,0,452,450,1,0,0,0,453,456,1,0,0,0,454,
        452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,
        458,5,620,0,0,458,71,1,0,0,0,459,462,3,74,37,0,460,461,5,628,0,0,
        461,463,3,74,37,0,462,460,1,0,0,0,462,463,1,0,0,0,463,73,1,0,0,0,
        464,467,3,76,38,0,465,466,7,15,0,0,466,468,3,76,38,0,467,465,1,0,
        0,0,467,468,1,0,0,0,468,75,1,0,0,0,469,474,3,78,39,0,470,471,7,4,
        0,0,471,473,3,78,39,0,472,470,1,0,0,0,473,476,1,0,0,0,474,472,1,
        0,0,0,474,475,1,0,0,0,475,77,1,0,0,0,476,474,1,0,0,0,477,482,3,80,
        40,0,478,479,7,16,0,0,479,481,3,80,40,0,480,478,1,0,0,0,481,484,
        1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,79,1,0,0,0,484,482,1,
        0,0,0,485,487,7,17,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,
        0,0,0,488,491,3,136,68,0,489,490,7,4,0,0,490,492,3,100,50,0,491,
        489,1,0,0,0,491,492,1,0,0,0,492,81,1,0,0,0,493,506,3,34,17,0,494,
        503,5,621,0,0,495,500,3,68,34,0,496,497,5,618,0,0,497,499,3,68,34,
        0,498,496,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,
        0,501,504,1,0,0,0,502,500,1,0,0,0,503,495,1,0,0,0,503,504,1,0,0,
        0,504,505,1,0,0,0,505,507,5,620,0,0,506,494,1,0,0,0,506,507,1,0,
        0,0,507,540,1,0,0,0,508,509,5,45,0,0,509,510,5,621,0,0,510,511,3,
        68,34,0,511,512,5,618,0,0,512,513,3,2,1,0,513,514,5,620,0,0,514,
        540,1,0,0,0,515,516,5,45,0,0,516,517,5,621,0,0,517,518,3,68,34,0,
        518,519,5,296,0,0,519,520,3,8,4,0,520,521,5,620,0,0,521,540,1,0,
        0,0,522,523,5,32,0,0,523,524,5,621,0,0,524,525,3,68,34,0,525,526,
        5,14,0,0,526,527,3,2,1,0,527,528,5,620,0,0,528,540,1,0,0,0,529,530,
        3,22,11,0,530,532,5,621,0,0,531,533,7,18,0,0,532,531,1,0,0,0,532,
        533,1,0,0,0,533,535,1,0,0,0,534,536,3,42,21,0,535,534,1,0,0,0,535,
        536,1,0,0,0,536,537,1,0,0,0,537,538,5,620,0,0,538,540,1,0,0,0,539,
        493,1,0,0,0,539,508,1,0,0,0,539,515,1,0,0,0,539,522,1,0,0,0,539,
        529,1,0,0,0,540,83,1,0,0,0,541,542,5,122,0,0,542,543,5,29,0,0,543,
        548,3,86,43,0,544,545,5,618,0,0,545,547,3,86,43,0,546,544,1,0,0,
        0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,553,1,0,0,
        0,550,548,1,0,0,0,551,552,5,313,0,0,552,554,5,227,0,0,553,551,1,
        0,0,0,553,554,1,0,0,0,554,85,1,0,0,0,555,559,3,56,28,0,556,559,5,
        633,0,0,557,559,3,42,21,0,558,555,1,0,0,0,558,556,1,0,0,0,558,557,
        1,0,0,0,559,561,1,0,0,0,560,562,7,19,0,0,561,560,1,0,0,0,561,562,
        1,0,0,0,562,87,1,0,0,0,563,564,5,123,0,0,564,565,3,68,34,0,565,89,
        1,0,0,0,566,567,5,295,0,0,567,568,3,98,49,0,568,570,5,621,0,0,569,
        571,3,96,48,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,
        573,5,620,0,0,573,587,1,0,0,0,574,575,5,134,0,0,575,576,3,98,49,
        0,576,577,5,621,0,0,577,578,3,96,48,0,578,579,5,620,0,0,579,587,
        1,0,0,0,580,581,5,107,0,0,581,582,3,98,49,0,582,583,5,621,0,0,583,
        584,3,96,48,0,584,585,5,620,0,0,585,587,1,0,0,0,586,566,1,0,0,0,
        586,574,1,0,0,0,586,580,1,0,0,0,587,91,1,0,0,0,588,593,3,90,45,0,
        589,590,5,618,0,0,590,592,3,90,45,0,591,589,1,0,0,0,592,595,1,0,
        0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,93,1,0,0,0,595,593,1,0,0,
        0,596,597,5,638,0,0,597,95,1,0,0,0,598,603,3,94,47,0,599,600,5,618,
        0,0,600,602,3,94,47,0,601,599,1,0,0,0,602,605,1,0,0,0,603,601,1,
        0,0,0,603,604,1,0,0,0,604,97,1,0,0,0,605,603,1,0,0,0,606,615,7,20,
        0,0,607,613,5,109,0,0,608,614,5,147,0,0,609,610,5,206,0,0,610,614,
        5,29,0,0,611,612,5,122,0,0,612,614,5,29,0,0,613,608,1,0,0,0,613,
        609,1,0,0,0,613,611,1,0,0,0,614,616,1,0,0,0,615,607,1,0,0,0,615,
        616,1,0,0,0,616,99,1,0,0,0,617,618,5,142,0,0,618,619,3,68,34,0,619,
        620,3,6,3,0,620,101,1,0,0,0,621,622,5,204,0,0,622,626,3,68,34,0,
        623,624,5,296,0,0,624,626,3,52,26,0,625,621,1,0,0,0,625,623,1,0,
        0,0,626,103,1,0,0,0,627,638,5,164,0,0,628,629,3,108,54,0,629,630,
        5,618,0,0,630,632,1,0,0,0,631,628,1,0,0,0,631,632,1,0,0,0,632,633,
        1,0,0,0,633,639,3,110,55,0,634,635,3,110,55,0,635,636,5,201,0,0,
        636,637,3,108,54,0,637,639,1,0,0,0,638,631,1,0,0,0,638,634,1,0,0,
        0,639,105,1,0,0,0,640,641,5,182,0,0,641,646,3,56,28,0,642,643,5,
        618,0,0,643,645,3,56,28,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,
        1,0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,
        5,7,0,0,650,652,3,68,34,0,651,653,3,4,2,0,652,651,1,0,0,0,652,653,
        1,0,0,0,653,107,1,0,0,0,654,655,5,633,0,0,655,109,1,0,0,0,656,657,
        5,633,0,0,657,111,1,0,0,0,658,659,5,206,0,0,659,660,5,29,0,0,660,
        665,3,114,57,0,661,662,5,618,0,0,662,664,3,114,57,0,663,661,1,0,
        0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,113,1,0,
        0,0,667,665,1,0,0,0,668,670,3,86,43,0,669,671,7,19,0,0,670,669,1,
        0,0,0,670,671,1,0,0,0,671,115,1,0,0,0,672,673,5,208,0,0,673,674,
        5,621,0,0,674,675,3,120,60,0,675,676,5,620,0,0,676,117,1,0,0,0,677,
        678,5,638,0,0,678,119,1,0,0,0,679,684,3,118,59,0,680,681,5,618,0,
        0,681,683,3,118,59,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,
        0,0,684,685,1,0,0,0,685,121,1,0,0,0,686,684,1,0,0,0,687,689,5,197,
        0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,708,1,0,0,0,690,693,5,143,
        0,0,691,694,3,138,69,0,692,694,3,70,35,0,693,691,1,0,0,0,693,692,
        1,0,0,0,694,709,1,0,0,0,695,696,5,163,0,0,696,699,3,136,68,0,697,
        698,5,95,0,0,698,700,3,136,68,0,699,697,1,0,0,0,699,700,1,0,0,0,
        700,709,1,0,0,0,701,702,5,221,0,0,702,709,3,42,21,0,703,704,5,19,
        0,0,704,705,3,42,21,0,705,706,5,606,0,0,706,707,3,126,63,0,707,709,
        1,0,0,0,708,690,1,0,0,0,708,695,1,0,0,0,708,701,1,0,0,0,708,703,
        1,0,0,0,709,123,1,0,0,0,710,711,5,246,0,0,711,712,5,163,0,0,712,
        713,3,42,21,0,713,125,1,0,0,0,714,717,3,42,21,0,715,718,3,122,61,
        0,716,718,3,124,62,0,717,715,1,0,0,0,717,716,1,0,0,0,717,718,1,0,
        0,0,718,127,1,0,0,0,719,720,3,134,67,0,720,721,5,615,0,0,721,129,
        1,0,0,0,722,723,5,638,0,0,723,131,1,0,0,0,724,729,3,58,29,0,725,
        726,5,618,0,0,726,728,3,58,29,0,727,725,1,0,0,0,728,731,1,0,0,0,
        729,727,1,0,0,0,729,730,1,0,0,0,730,745,1,0,0,0,731,729,1,0,0,0,
        732,742,5,619,0,0,733,734,5,618,0,0,734,739,3,58,29,0,735,736,5,
        618,0,0,736,738,3,58,29,0,737,735,1,0,0,0,738,741,1,0,0,0,739,737,
        1,0,0,0,739,740,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,742,733,
        1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,724,1,0,0,0,744,732,
        1,0,0,0,745,133,1,0,0,0,746,754,3,38,19,0,747,749,5,288,0,0,748,
        750,5,8,0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
        753,3,38,19,0,752,747,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,
        755,1,0,0,0,755,135,1,0,0,0,756,754,1,0,0,0,757,770,3,36,18,0,758,
        770,3,70,35,0,759,770,3,56,28,0,760,770,3,82,41,0,761,762,5,229,
        0,0,762,770,3,70,35,0,763,770,3,138,69,0,764,765,5,98,0,0,765,770,
        3,138,69,0,766,770,3,100,50,0,767,770,3,106,53,0,768,770,3,46,23,
        0,769,757,1,0,0,0,769,758,1,0,0,0,769,759,1,0,0,0,769,760,1,0,0,
        0,769,761,1,0,0,0,769,763,1,0,0,0,769,764,1,0,0,0,769,766,1,0,0,
        0,769,767,1,0,0,0,769,768,1,0,0,0,770,137,1,0,0,0,771,772,5,621,
        0,0,772,773,3,134,67,0,773,774,5,620,0,0,774,139,1,0,0,0,775,777,
        3,156,78,0,776,778,3,116,58,0,777,776,1,0,0,0,777,778,1,0,0,0,778,
        780,1,0,0,0,779,781,3,40,20,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
        783,1,0,0,0,782,784,3,92,46,0,783,782,1,0,0,0,783,784,1,0,0,0,784,
        802,1,0,0,0,785,786,3,138,69,0,786,787,3,40,20,0,787,802,1,0,0,0,
        788,789,5,621,0,0,789,790,3,154,77,0,790,791,5,620,0,0,791,802,1,
        0,0,0,792,793,5,202,0,0,793,794,3,152,76,0,794,795,5,161,0,0,795,
        796,5,207,0,0,796,797,5,147,0,0,797,798,3,152,76,0,798,799,5,204,
        0,0,799,800,3,68,34,0,800,802,1,0,0,0,801,775,1,0,0,0,801,785,1,
        0,0,0,801,788,1,0,0,0,801,792,1,0,0,0,802,141,1,0,0,0,803,804,5,
        638,0,0,804,143,1,0,0,0,805,816,3,146,73,0,806,808,7,21,0,0,807,
        806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,5,147,0,0,810,
        812,3,140,70,0,811,813,3,102,51,0,812,811,1,0,0,0,812,813,1,0,0,
        0,813,815,1,0,0,0,814,807,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,
        0,816,817,1,0,0,0,817,145,1,0,0,0,818,816,1,0,0,0,819,826,3,148,
        74,0,820,821,5,259,0,0,821,824,3,140,70,0,822,823,5,204,0,0,823,
        825,3,68,34,0,824,822,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,
        820,1,0,0,0,826,827,1,0,0,0,827,147,1,0,0,0,828,839,3,150,75,0,829,
        831,7,22,0,0,830,832,5,207,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,
        833,1,0,0,0,833,834,5,147,0,0,834,835,3,150,75,0,835,836,3,102,51,
        0,836,838,1,0,0,0,837,829,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,
        0,839,840,1,0,0,0,840,149,1,0,0,0,841,839,1,0,0,0,842,852,3,140,
        70,0,843,848,5,196,0,0,844,846,7,22,0,0,845,847,5,207,0,0,846,845,
        1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,844,1,0,0,0,848,849,
        1,0,0,0,849,850,1,0,0,0,850,851,5,147,0,0,851,853,3,140,70,0,852,
        843,1,0,0,0,852,853,1,0,0,0,853,151,1,0,0,0,854,855,3,144,72,0,855,
        153,1,0,0,0,856,861,3,152,76,0,857,858,5,618,0,0,858,860,3,152,76,
        0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,
        0,862,155,1,0,0,0,863,861,1,0,0,0,864,865,3,130,65,0,865,866,5,617,
        0,0,866,868,1,0,0,0,867,864,1,0,0,0,867,868,1,0,0,0,868,869,1,0,
        0,0,869,870,3,142,71,0,870,157,1,0,0,0,871,872,5,312,0,0,872,873,
        3,68,34,0,873,159,1,0,0,0,109,166,172,181,184,188,193,195,204,212,
        225,251,259,263,266,269,272,275,278,281,284,290,293,296,299,301,
        304,307,315,318,321,328,334,337,341,346,350,361,371,379,389,394,
        404,406,413,421,425,432,436,438,445,454,462,467,474,482,486,491,
        500,503,506,532,535,539,548,553,558,561,570,586,593,603,613,615,
        625,631,638,646,652,665,670,684,688,693,699,708,717,729,739,742,
        744,749,754,769,777,780,783,801,807,812,816,824,826,831,839,846,
        848,852,861,867
    ]

class MySQLParser ( Parser ):

    grammarFileName = "MySQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'USER'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'=>'", "<INVALID>", "<INVALID>", 
                     "'<='", "'>='", "':='", "'<<'", "'>>'", "';'", "':'", 
                     "'.'", "','", "'*'", "')'", "'('", "']'", "'['", "'+'", 
                     "'-'", "'~'", "'|'", "'&'", "'^'", "'`'", "'>'", "'<'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
                      "AES_DECRYPT", "AES_ENCRYPT", "AGAINST", "ALL", "ANY", 
                      "ARMSCII8", "ASC", "ASCII_SYM", "ASIN", "AS_SYM", 
                      "ATAN", "ATAN2", "AVG", "BENCHMARK", "BETWEEN", "BIG5", 
                      "BIN", "BINARY", "BIT_AND", "BIT_COUNT", "BIT_LENGTH", 
                      "BIT_OR", "BIT_XOR", "BOOLEAN_SYM", "BY_SYM", "CACHE_SYM", 
                      "CASE_SYM", "CAST_SYM", "CEIL", "CEILING", "CHAR", 
                      "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATE_SYM", 
                      "COLLATION", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_SYM", "CONVERT_TZ", "COS", "COT", 
                      "COUNT", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
                      "CP852", "CP866", "CP932", "CRC32", "CROSECOND", "CROSS", 
                      "CURDATE", "CURRENT_USER", "CURTIME", "DATABASE", 
                      "DATEDIFF", "DATETIME", "DATE_ADD", "DATE_FORMAT", 
                      "DATE_SUB", "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
                      "DAYOFYEAR", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", 
                      "DAY_SECOND", "DAY_SYM", "DEC8", "DECIMAL_SYM", "DECODE", 
                      "DEFAULT", "DEGREES", "DESC", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DISTINCT", "DISTINCTROW", "ELSE_SYM", "ELT", "ENCODE", 
                      "ENCRYPT", "END_SYM", "ESCAPE_SYM", "EUCJPMS", "EUCKR", 
                      "EXISTS", "EXP", "EXPANSION_SYM", "EXPORT_SET", "EXTRACT", 
                      "FALSE_SYM", "FIELD", "FIND_IN_SET", "FLOOR", "FORCE_SYM", 
                      "FORMAT", "FOR_SYM", "FOUND_ROWS", "FROM", "FROM_BASE64", 
                      "FROM_DAYS", "FROM_UNIXTIME", "GB2312", "GBK", "GEOSTD8", 
                      "GET_FORMAT", "GET_LOCK", "GREEK", "GROUP_CONCAT", 
                      "GROUP_SYM", "HAVING", "HEBREW", "HEX", "HIGH_PRIORITY", 
                      "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", 
                      "HP8", "IF", "IFNULL", "IGNORE_SYM", "INDEX_SYM", 
                      "INET_ATON", "INET_NTOA", "INNER_SYM", "INSERT", "INSTR", 
                      "INTEGER_SYM", "INTERVAL_SYM", "IN_SYM", "IS_FREE_LOCK", 
                      "IS_SYM", "IS_USED_LOCK", "JOIN_SYM", "KEYBCS2", "KEY_SYM", 
                      "KOI8R", "KOI8U", "LANGUAGE", "LAST_DAY", "LAST_INSERT_ID", 
                      "LATIN1", "LATIN1_BIN", "LATIN1_GENERAL_CS", "LATIN2", 
                      "LATIN5", "LATIN7", "LEFT", "LENGTH", "LIKE_SYM", 
                      "LIMIT", "LN", "LOAD", "LOAD_FILE", "LOCATE", "LOCK", 
                      "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", 
                      "MACCE", "MACROMAN", "MAKEDATE", "MAKETIME", "MAKE_SET", 
                      "MASTER_POS_WAIT", "MATCH", "MAX_SYM", "MD5", "MICROSECOND", 
                      "MID", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", 
                      "MIN_SYM", "MOD", "MODE_SYM", "MONTH", "MONTHNAME", 
                      "NAME_CONST", "NATURAL", "NOT_SYM", "NOW", "NULL_SYM", 
                      "OCT", "OFFSET_SYM", "OJ_SYM", "OLD_PASSWORD", "ON", 
                      "ORD", "ORDER_SYM", "OUTER", "PARTITION_SYM", "PASSWORD", 
                      "PERIOD_ADD", "PERIOD_DIFF", "PI", "POW", "POWER", 
                      "QUARTER", "QUERY_SYM", "QUOTE", "RADIANS", "RAND", 
                      "REAL", "REGEXP", "RELEASE_LOCK", "REPEAT", "REPLACE", 
                      "REVERSE", "RIGHT", "ROLLUP_SYM", "ROUND", "ROW_SYM", 
                      "RPAD", "RTRIM", "SCHEMA", "SECOND", "SECOND_MICROSECOND", 
                      "SEC_TO_TIME", "SELECT", "SESSION_USER", "SET_SYM", 
                      "SHARE_SYM", "SIGN", "SIGNED_SYM", "SIN", "SJIS", 
                      "SLEEP", "SOUNDEX", "SOUNDS_SYM", "SPACE", "SQL_BIG_RESULT", 
                      "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", 
                      "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQRT", "STD", 
                      "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STRAIGHT_JOIN", 
                      "STRCMP", "STR_TO_DATE", "SUBSTRING", "SUBSTRING_INDEX", 
                      "SUBTIME", "SUM", "SWE7", "SYSDATE", "SYSTEM_USER", 
                      "TAN", "THEN_SYM", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", 
                      "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", 
                      "TIS620", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TRIM", 
                      "TRUE_SYM", "TRUNCATE", "UCS2", "UJIS", "UNHEX", "UNION_SYM", 
                      "UNIX_TIMESTAMP", "UNSIGNED_SYM", "UPDATE", "UPPER", 
                      "USE", "USER", "USE_SYM", "USING_SYM", "UTC_DATE", 
                      "UTC_TIME", "UTC_TIMESTAMP", "UTF8", "UUID", "VALUES", 
                      "VARIANCE", "VAR_POP", "VAR_SAMP", "VERSION_SYM", 
                      "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", 
                      "WHEN_SYM", "WHERE", "WITH", "XOR", "YEAR", "YEARWEEK", 
                      "YEAR_MONTH", "SDIST", "SAREA", "SCENTER", "SCIRCUM", 
                      "SLENGTH", "SSWAP", "SNPOINTS", "SSTR", "MYSQL_SPHERE_VERSION", 
                      "SRCONTAINSL", "SLCONTAINSR", "SRNOTCONTAINSL", "SLNOTCONTAINSR", 
                      "SOVERLAPS", "SNOTOVERLAPS", "SEQUAL", "SNOTEQUAL", 
                      "STRANSFORM", "SINVERSE", "SPOINT", "SPOINT_LONG", 
                      "SPOINT_LAT", "SPOINT_X", "SPOINT_Y", "SPOINT_Z", 
                      "SPOINT_EQUAL", "STRANS", "STRANS_POINT", "STRANS_POINT_INVERSE", 
                      "STRANS_EQUAL", "STRANS_EQUAL_NEG", "STRANS_PHI", 
                      "STRANS_THETA", "STRANS_PSI", "STRANS_AXES", "STRANS_INVERT", 
                      "STRANS_ZXZ", "STRANS_TRANS", "STRANS_TRANS_INV", 
                      "SCIRCLE", "SCIRCLE_RADIUS", "SCIRCLE_EQUAL", "SCIRCLE_EQUAL_NEG", 
                      "SCIRCLE_OVERLAP", "SCIRCLE_OVERLAP_NEG", "SCIRCLE_CONTAINED_BY_CIRCLE", 
                      "SCIRCLE_CONTAINED_BY_CIRCLE_NEG", "SCIRCLE_CONTAINS_CIRCLE", 
                      "SCIRCLE_CONTAINS_CIRCLE_NEG", "SPOINT_CONTAINED_BY_CIRCLE", 
                      "SPOINT_CONTAINED_BY_CIRCLE_NEG", "SPOINT_CONTAINED_BY_CIRCLE_COM", 
                      "SPOINT_CONTAINED_BY_CIRCLE_COM_NEG", "STRANS_CIRCLE", 
                      "STRANS_CIRCLE_INVERSE", "SLINE", "SMERIDIAN", "SLINE_BEG", 
                      "SLINE_END", "SLINE_EQUAL", "SLINE_EQUAL_NEG", "SLINE_TURN", 
                      "SLINE_CROSSES", "SLINE_CROSSES_NEG", "SLINE_OVERLAP", 
                      "SLINE_CONTAINS_POINT", "SLINE_CONTAINS_POINT_COM", 
                      "SLINE_CONTAINS_POINT_NEG", "SLINE_CONTAINS_POINT_COM_NEG", 
                      "STRANS_LINE", "STRANS_LINE_INVERSE", "SLINE_OVERLAP_CIRCLE", 
                      "SLINE_OVERLAP_CIRCLE_COM", "SLINE_OVERLAP_CIRCLE_NEG", 
                      "SLINE_OVERLAP_CIRCLE_COM_NEG", "SCIRCLE_CONTAINS_LINE", 
                      "SCIRCLE_CONTAINS_LINE_COM", "SCIRCLE_CONTAINS_LINE_NEG", 
                      "SCIRCLE_CONTAINS_LINE_COM_NEG", "SELLIPSE", "SELLIPSE_INC", 
                      "SELLIPSE_LRAD", "SELLIPSE_SRAD", "SELLIPSE_EQUAL", 
                      "SELLIPSE_EQUAL_NEG", "SELLIPSE_CONTAINS_ELLIPSE", 
                      "SELLIPSE_CONTAINS_ELLIPSE_NEG", "SELLIPSE_CONTAINS_ELLIPSE_COM", 
                      "SELLIPSE_CONTAINS_ELLIPSE_COM_NEG", "SELLIPSE_OVERLAP_ELLIPSE", 
                      "SELLIPSE_OVERLAP_ELLIPSE_NEG", "SELLIPSE_CONTAINS_POINT", 
                      "SELLIPSE_CONTAINS_POINT_NEG", "SELLIPSE_CONTAINS_POINT_COM", 
                      "SELLIPSE_CONTAINS_POINT_COM_NEG", "SELLIPSE_CONTAINS_CIRCLE", 
                      "SELLIPSE_CONTAINS_CIRCLE_NEG", "SELLIPSE_CONTAINS_CIRCLE_COM", 
                      "SELLIPSE_CONTAINS_CIRCLE_COM_NEG", "SCIRCLE_CONTAINS_ELLIPSE", 
                      "SCIRCLE_CONTAINS_ELLIPSE_NEG", "SCIRCLE_CONTAINS_ELLIPSE_COM", 
                      "SCIRCLE_CONTAINS_ELLIPSE_COM_NEG", "SELLIPSE_OVERLAP_CIRCLE", 
                      "SELLIPSE_OVERLAP_CIRCLE_NEG", "SELLIPSE_OVERLAP_CIRCLE_COM", 
                      "SELLIPSE_OVERLAP_CIRCLE_COM_NEG", "SELLIPSE_OVERLAP_LINE", 
                      "SELLIPSE_OVERLAP_LINE_NEG", "SELLIPSE_OVERLAP_LINE_COM", 
                      "SELLIPSE_OVERLAP_LINE_COM_NEG", "SELLIPSE_CONTAINS_LINE", 
                      "SELLIPSE_CONTAINS_LINE_NEG", "SELLIPSE_CONTAINS_LINE_COM", 
                      "SELLIPSE_CONTAINS_LINE_COM_NEG", "STRANS_ELLIPSE", 
                      "STRANS_ELLIPSE_INVERSE", "SPOLY", "SPOLY_EQUAL", 
                      "SPOLY_EQUAL_NEG", "SPOLY_CONTAINS_POLYGON", "SPOLY_CONTAINS_POLYGON_NEG", 
                      "SPOLY_CONTAINS_POLYGON_COM", "SPOLY_CONTAINS_POLYGON_COM_NEG", 
                      "SPOLY_OVERLAP_POLYGON", "SPOLY_OVERLAP_POLYGON_NEG", 
                      "SPOLY_CONTAINS_POINT", "SPOLY_CONTAINS_POINT_NEG", 
                      "SPOLY_CONTAINS_POINT_COM", "SPOLY_CONTAINS_POINT_COM_NEG", 
                      "SPOLY_CONTAINS_CIRCLE", "SPOLY_CONTAINS_CIRCLE_NEG", 
                      "SPOLY_CONTAINS_CIRCLE_COM", "SPOLY_CONTAINS_CIRCLE_COM_NEG", 
                      "SCIRCLE_CONTAINS_POLYGON", "SCIRCLE_CONTAINS_POLYGON_NEG", 
                      "SCIRCLE_CONTAINS_POLYGON_COM", "SCIRCLE_CONTAINS_POLYGON_COM_NEG", 
                      "SPOLY_OVERLAP_CIRCLE", "SPOLY_OVERLAP_CIRCLE_NEG", 
                      "SPOLY_OVERLAP_CIRCLE_COM", "SPOLY_OVERLAP_CIRCLE_COM_NEG", 
                      "SPOLY_CONTAINS_LINE", "SPOLY_CONTAINS_LINE_NEG", 
                      "SPOLY_CONTAINS_LINE_COM", "SPOLY_CONTAINS_LINE_COM_NEG", 
                      "SPOLY_OVERLAP_LINE", "SPOLY_OVERLAP_LINE_NEG", "SPOLY_OVERLAP_LINE_COM", 
                      "SPOLY_OVERLAP_LINE_COM_NEG", "SPOLY_CONTAINS_ELLIPSE", 
                      "SPOLY_CONTAINS_ELLIPSE_NEG", "SPOLY_CONTAINS_ELLIPSE_COM", 
                      "SPOLY_CONTAINS_ELLIPSE_COM_NEG", "SELLIPSE_CONTAINS_POLYGON", 
                      "SELLIPSE_CONTAINS_POLYGON_NEG", "SELLIPSE_CONTAINS_POLYGON_COM", 
                      "SELLIPSE_CONTAINS_POLYGON_COM_NEG", "SPOLY_OVERLAP_ELLIPSE", 
                      "SPOLY_OVERLAP_ELLIPSE_NEG", "SPOLY_OVERLAP_ELLIPSE_COM", 
                      "SPOLY_OVERLAP_ELLIPSE_COM_NEG", "STRANS_POLY", "STRANS_POLY_INVERSE", 
                      "SPOLY_ADD_POINT_AGGR", "SPOLY_AGGR", "SPATH", "SPATH_EQUAL", 
                      "SPATH_EQUAL_NEG", "SPATH_OVERLAP_PATH", "SPATH_OVERLAP_PATH_NEG", 
                      "SPATH_CONTAINS_POINT", "SPATH_CONTAINS_POINT_NEG", 
                      "SPATH_CONTAINS_POINT_COM", "SPATH_CONTAINS_POINT_COM_NEG", 
                      "SCIRCLE_CONTAINS_PATH", "SCIRCLE_CONTAINS_PATH_NEG", 
                      "SCIRCLE_CONTAINS_PATH_COM", "SCIRCLE_CONTAINS_PATH_COM_NEG", 
                      "SCIRCLE_OVERLAP_PATH", "SCIRCLE_OVERLAP_PATH_NEG", 
                      "SCIRCLE_OVERLAP_PATH_COM", "SCIRCLE_OVERLAP_PATH_COM_NEG", 
                      "SPATH_OVERLAP_LINE", "SPATH_OVERLAP_LINE_NEG", "SPATH_OVERLAP_LINE_COM", 
                      "SPATH_OVERLAP_LINE_COM_NEG", "SELLIPSE_CONTAINS_PATH", 
                      "SELLIPSE_CONTAINS_PATH_NEG", "SELLIPSE_CONTAINS_PATH_COM", 
                      "SELLIPSE_CONTAINS_PATH_COM_NEG", "SELLIPSE_OVERLAP_PATH", 
                      "SELLIPSE_OVERLAP_PATH_NEG", "SELLIPSE_OVERLAP_PATH_COM", 
                      "SELLIPSE_OVERLAP_PATH_COM_NEG", "SPOLY_CONTAINS_PATH", 
                      "SPOLY_CONTAINS_PATH_NEG", "SPOLY_CONTAINS_PATH_COM", 
                      "SPOLY_CONTAINS_PATH_COM_NEG", "SPOLY_OVERLAP_PATH", 
                      "SPOLY_OVERLAP_PATH_NEG", "SPOLY_OVERLAP_PATH_COM", 
                      "SPOLY_OVERLAP_PATH_COM_NEG", "STRANS_PATH", "STRANS_PATH_INVERSE", 
                      "SPATH_ADD_POINT_AGGR", "SPATH_AGGR", "SBOX", "SBOX_SW", 
                      "SBOX_SE", "SBOX_NW", "SBOX_NE", "SBOX_EQUAL", "SBOX_EQUAL_NEG", 
                      "SBOX_CONTAINS_BOX", "SBOX_CONTAINS_BOX_NEG", "SBOX_CONTAINS_BOX_COM", 
                      "SBOX_CONTAINS_BOX_COM_NEG", "SBOX_OVERLAP_BOX", "SBOX_OVERLAP_BOX_NEG", 
                      "SBOX_CONTAINS_POINT", "SBOX_CONTAINS_POINT_NEG", 
                      "SBOX_CONTAINS_POINT_COM", "SBOX_CONTAINS_POINT_COM_NEG", 
                      "SBOX_CONTAINS_CIRCLE", "SBOX_CONTAINS_CIRCLE_NEG", 
                      "SBOX_CONTAINS_CIRCLE_COM", "SBOX_CONTAINS_CIRCLE_COM_NEG", 
                      "SCIRCLE_CONTAINS_BOX", "SCIRCLE_CONTAINS_BOX_NEG", 
                      "SCIRCLE_CONTAINS_BOX_COM", "SCIRCLE_CONTAINS_BOX_COM_NEG", 
                      "SBOX_OVERLAP_CIRCLE", "SBOX_OVERLAP_CIRCLE_NEG", 
                      "SBOX_OVERLAP_CIRCLE_COM", "SBOX_OVERLAP_CIRCLE_COM_NEG", 
                      "SBOX_CONTAINS_LINE", "SBOX_CONTAINS_LINE_NEG", "SBOX_CONTAINS_LINE_COM", 
                      "SBOX_CONTAINS_LINE_COM_NEG", "SBOX_OVERLAP_LINE", 
                      "SBOX_OVERLAP_LINE_NEG", "SBOX_OVERLAP_LINE_COM", 
                      "SBOX_OVERLAP_LINE_COM_NEG", "SBOX_CONTAINS_ELLIPSE", 
                      "SBOX_CONTAINS_ELLIPSE_NEG", "SBOX_CONTAINS_ELLIPSE_COM", 
                      "SBOX_CONTAINS_ELLIPSE_COM_NEG", "SELLIPSE_CONTAINS_BOX", 
                      "SELLIPSE_CONTAINS_BOX_NEG", "SELLIPSE_CONTAINS_BOX_COM", 
                      "SELLIPSE_CONTAINS_BOX_COM_NEG", "SBOX_OVERLAP_ELLIPSE", 
                      "SBOX_OVERLAP_ELLIPSE_NEG", "SBOX_OVERLAP_ELLIPSE_COM", 
                      "SBOX_OVERLAP_ELLIPSE_COM_NEG", "SBOX_CONTAINS_POLY", 
                      "SBOX_CONTAINS_POLY_NEG", "SBOX_CONTAINS_POLY_COM", 
                      "SBOX_CONTAINS_POLY_COM_NEG", "SPOLY_CONTAINS_BOX", 
                      "SPOLY_CONTAINS_BOX_NEG", "SPOLY_CONTAINS_BOX_COM", 
                      "SPOLY_CONTAINS_BOX_COM_NEG", "SBOX_OVERLAP_POLY", 
                      "SBOX_OVERLAP_POLY_NEG", "SBOX_OVERLAP_POLY_COM", 
                      "SBOX_OVERLAP_POLY_COM_NEG", "SBOX_CONTAINS_PATH", 
                      "SBOX_CONTAINS_PATH_NEG", "SBOX_CONTAINS_PATH_COM", 
                      "SBOX_CONTAINS_PATH_COM_NEG", "SBOX_OVERLAP_PATH", 
                      "SBOX_OVERLAP_PATH_NEG", "SBOX_OVERLAP_PATH_COM", 
                      "SBOX_OVERLAP_PATH_COM_NEG", "STRRPOS", "IDLE", "ANGDIST", 
                      "HILBERTKEY", "COORDFROMHILBERTKEY", "SUM_OF_SQUARES", 
                      "PARTITADD_SUM_OF_SQARES", "GAIA_HEALPIX", "SPRNG_DBL", 
                      "DIVIDE", "MOD_SYM", "OR_SYM", "AND_SYM", "ARROW", 
                      "EQ", "NOT_EQ", "LET", "GET", "SET_VAR", "SHIFT_LEFT", 
                      "SHIFT_RIGHT", "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", 
                      "RPAREN", "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", 
                      "NEGATION", "VERTBAR", "BITAND", "POWER_OP", "BACKTICK", 
                      "GTH", "LTH", "INTEGER_NUM", "HEX_DIGIT", "BIT_NUM", 
                      "REAL_NUMBER", "TEXT_STRING", "ID", "COMMENT", "WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_search_modifier = 2
    RULE_interval_unit = 3
    RULE_transcoding_name = 4
    RULE_bit_literal = 5
    RULE_boolean_literal = 6
    RULE_hex_literal = 7
    RULE_number_literal = 8
    RULE_string_literal = 9
    RULE_char_functions = 10
    RULE_group_functions = 11
    RULE_number_functions = 12
    RULE_other_functions = 13
    RULE_time_functions = 14
    RULE_mysql_sphere_functions = 15
    RULE_mysql_udf_functions = 16
    RULE_functionList = 17
    RULE_literal_value = 18
    RULE_select_expression = 19
    RULE_alias = 20
    RULE_bit_expr = 21
    RULE_bool_primary = 22
    RULE_case_when_statement = 23
    RULE_case_when_statement1 = 24
    RULE_case_when_statement2 = 25
    RULE_column_list = 26
    RULE_column_name = 27
    RULE_column_spec = 28
    RULE_displayed_column = 29
    RULE_exp_factor1 = 30
    RULE_exp_factor2 = 31
    RULE_exp_factor3 = 32
    RULE_exp_factor4 = 33
    RULE_expression = 34
    RULE_expression_list = 35
    RULE_factor1 = 36
    RULE_factor2 = 37
    RULE_factor3 = 38
    RULE_factor4 = 39
    RULE_factor5 = 40
    RULE_function_call = 41
    RULE_groupby_clause = 42
    RULE_groupby_item = 43
    RULE_having_clause = 44
    RULE_index_hint = 45
    RULE_index_hint_list = 46
    RULE_index_name = 47
    RULE_index_list = 48
    RULE_index_options = 49
    RULE_interval_expr = 50
    RULE_join_condition = 51
    RULE_limit_clause = 52
    RULE_match_against_statement = 53
    RULE_offset = 54
    RULE_row_count = 55
    RULE_orderby_clause = 56
    RULE_orderby_item = 57
    RULE_partition_clause = 58
    RULE_partition_name = 59
    RULE_partition_names = 60
    RULE_bit_fac1 = 61
    RULE_bit_fac2 = 62
    RULE_predicate = 63
    RULE_query = 64
    RULE_schema_name = 65
    RULE_select_list = 66
    RULE_select_statement = 67
    RULE_simple_expr = 68
    RULE_subquery = 69
    RULE_table_atom = 70
    RULE_table_name = 71
    RULE_table_factor1 = 72
    RULE_table_factor2 = 73
    RULE_table_factor3 = 74
    RULE_table_factor4 = 75
    RULE_table_reference = 76
    RULE_table_references = 77
    RULE_table_spec = 78
    RULE_where_clause = 79

    ruleNames =  [ "relational_op", "cast_data_type", "search_modifier", 
                   "interval_unit", "transcoding_name", "bit_literal", "boolean_literal", 
                   "hex_literal", "number_literal", "string_literal", "char_functions", 
                   "group_functions", "number_functions", "other_functions", 
                   "time_functions", "mysql_sphere_functions", "mysql_udf_functions", 
                   "functionList", "literal_value", "select_expression", 
                   "alias", "bit_expr", "bool_primary", "case_when_statement", 
                   "case_when_statement1", "case_when_statement2", "column_list", 
                   "column_name", "column_spec", "displayed_column", "exp_factor1", 
                   "exp_factor2", "exp_factor3", "exp_factor4", "expression", 
                   "expression_list", "factor1", "factor2", "factor3", "factor4", 
                   "factor5", "function_call", "groupby_clause", "groupby_item", 
                   "having_clause", "index_hint", "index_hint_list", "index_name", 
                   "index_list", "index_options", "interval_expr", "join_condition", 
                   "limit_clause", "match_against_statement", "offset", 
                   "row_count", "orderby_clause", "orderby_item", "partition_clause", 
                   "partition_name", "partition_names", "bit_fac1", "bit_fac2", 
                   "predicate", "query", "schema_name", "select_list", "select_statement", 
                   "simple_expr", "subquery", "table_atom", "table_name", 
                   "table_factor1", "table_factor2", "table_factor3", "table_factor4", 
                   "table_reference", "table_references", "table_spec", 
                   "where_clause" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ADDDATE=3
    ADDTIME=4
    AES_DECRYPT=5
    AES_ENCRYPT=6
    AGAINST=7
    ALL=8
    ANY=9
    ARMSCII8=10
    ASC=11
    ASCII_SYM=12
    ASIN=13
    AS_SYM=14
    ATAN=15
    ATAN2=16
    AVG=17
    BENCHMARK=18
    BETWEEN=19
    BIG5=20
    BIN=21
    BINARY=22
    BIT_AND=23
    BIT_COUNT=24
    BIT_LENGTH=25
    BIT_OR=26
    BIT_XOR=27
    BOOLEAN_SYM=28
    BY_SYM=29
    CACHE_SYM=30
    CASE_SYM=31
    CAST_SYM=32
    CEIL=33
    CEILING=34
    CHAR=35
    CHARSET=36
    CHAR_LENGTH=37
    COERCIBILITY=38
    COLLATE_SYM=39
    COLLATION=40
    CONCAT=41
    CONCAT_WS=42
    CONNECTION_ID=43
    CONV=44
    CONVERT_SYM=45
    CONVERT_TZ=46
    COS=47
    COT=48
    COUNT=49
    CP1250=50
    CP1251=51
    CP1256=52
    CP1257=53
    CP850=54
    CP852=55
    CP866=56
    CP932=57
    CRC32=58
    CROSECOND=59
    CROSS=60
    CURDATE=61
    CURRENT_USER=62
    CURTIME=63
    DATABASE=64
    DATEDIFF=65
    DATETIME=66
    DATE_ADD=67
    DATE_FORMAT=68
    DATE_SUB=69
    DATE_SYM=70
    DAYNAME=71
    DAYOFMONTH=72
    DAYOFWEEK=73
    DAYOFYEAR=74
    DAY_HOUR=75
    DAY_MICROSECOND=76
    DAY_MINUTE=77
    DAY_SECOND=78
    DAY_SYM=79
    DEC8=80
    DECIMAL_SYM=81
    DECODE=82
    DEFAULT=83
    DEGREES=84
    DESC=85
    DES_DECRYPT=86
    DES_ENCRYPT=87
    DISTINCT=88
    DISTINCTROW=89
    ELSE_SYM=90
    ELT=91
    ENCODE=92
    ENCRYPT=93
    END_SYM=94
    ESCAPE_SYM=95
    EUCJPMS=96
    EUCKR=97
    EXISTS=98
    EXP=99
    EXPANSION_SYM=100
    EXPORT_SET=101
    EXTRACT=102
    FALSE_SYM=103
    FIELD=104
    FIND_IN_SET=105
    FLOOR=106
    FORCE_SYM=107
    FORMAT=108
    FOR_SYM=109
    FOUND_ROWS=110
    FROM=111
    FROM_BASE64=112
    FROM_DAYS=113
    FROM_UNIXTIME=114
    GB2312=115
    GBK=116
    GEOSTD8=117
    GET_FORMAT=118
    GET_LOCK=119
    GREEK=120
    GROUP_CONCAT=121
    GROUP_SYM=122
    HAVING=123
    HEBREW=124
    HEX=125
    HIGH_PRIORITY=126
    HOUR=127
    HOUR_MICROSECOND=128
    HOUR_MINUTE=129
    HOUR_SECOND=130
    HP8=131
    IF=132
    IFNULL=133
    IGNORE_SYM=134
    INDEX_SYM=135
    INET_ATON=136
    INET_NTOA=137
    INNER_SYM=138
    INSERT=139
    INSTR=140
    INTEGER_SYM=141
    INTERVAL_SYM=142
    IN_SYM=143
    IS_FREE_LOCK=144
    IS_SYM=145
    IS_USED_LOCK=146
    JOIN_SYM=147
    KEYBCS2=148
    KEY_SYM=149
    KOI8R=150
    KOI8U=151
    LANGUAGE=152
    LAST_DAY=153
    LAST_INSERT_ID=154
    LATIN1=155
    LATIN1_BIN=156
    LATIN1_GENERAL_CS=157
    LATIN2=158
    LATIN5=159
    LATIN7=160
    LEFT=161
    LENGTH=162
    LIKE_SYM=163
    LIMIT=164
    LN=165
    LOAD=166
    LOAD_FILE=167
    LOCATE=168
    LOCK=169
    LOG=170
    LOG10=171
    LOG2=172
    LOWER=173
    LPAD=174
    LTRIM=175
    MACCE=176
    MACROMAN=177
    MAKEDATE=178
    MAKETIME=179
    MAKE_SET=180
    MASTER_POS_WAIT=181
    MATCH=182
    MAX_SYM=183
    MD5=184
    MICROSECOND=185
    MID=186
    MINUTE=187
    MINUTE_MICROSECOND=188
    MINUTE_SECOND=189
    MIN_SYM=190
    MOD=191
    MODE_SYM=192
    MONTH=193
    MONTHNAME=194
    NAME_CONST=195
    NATURAL=196
    NOT_SYM=197
    NOW=198
    NULL_SYM=199
    OCT=200
    OFFSET_SYM=201
    OJ_SYM=202
    OLD_PASSWORD=203
    ON=204
    ORD=205
    ORDER_SYM=206
    OUTER=207
    PARTITION_SYM=208
    PASSWORD=209
    PERIOD_ADD=210
    PERIOD_DIFF=211
    PI=212
    POW=213
    POWER=214
    QUARTER=215
    QUERY_SYM=216
    QUOTE=217
    RADIANS=218
    RAND=219
    REAL=220
    REGEXP=221
    RELEASE_LOCK=222
    REPEAT=223
    REPLACE=224
    REVERSE=225
    RIGHT=226
    ROLLUP_SYM=227
    ROUND=228
    ROW_SYM=229
    RPAD=230
    RTRIM=231
    SCHEMA=232
    SECOND=233
    SECOND_MICROSECOND=234
    SEC_TO_TIME=235
    SELECT=236
    SESSION_USER=237
    SET_SYM=238
    SHARE_SYM=239
    SIGN=240
    SIGNED_SYM=241
    SIN=242
    SJIS=243
    SLEEP=244
    SOUNDEX=245
    SOUNDS_SYM=246
    SPACE=247
    SQL_BIG_RESULT=248
    SQL_BUFFER_RESULT=249
    SQL_CACHE_SYM=250
    SQL_CALC_FOUND_ROWS=251
    SQL_NO_CACHE_SYM=252
    SQL_SMALL_RESULT=253
    SQRT=254
    STD=255
    STDDEV=256
    STDDEV_POP=257
    STDDEV_SAMP=258
    STRAIGHT_JOIN=259
    STRCMP=260
    STR_TO_DATE=261
    SUBSTRING=262
    SUBSTRING_INDEX=263
    SUBTIME=264
    SUM=265
    SWE7=266
    SYSDATE=267
    SYSTEM_USER=268
    TAN=269
    THEN_SYM=270
    TIMEDIFF=271
    TIMESTAMP=272
    TIMESTAMPADD=273
    TIMESTAMPDIFF=274
    TIME_FORMAT=275
    TIME_SYM=276
    TIME_TO_SEC=277
    TIS620=278
    TO_BASE64=279
    TO_DAYS=280
    TO_SECONDS=281
    TRIM=282
    TRUE_SYM=283
    TRUNCATE=284
    UCS2=285
    UJIS=286
    UNHEX=287
    UNION_SYM=288
    UNIX_TIMESTAMP=289
    UNSIGNED_SYM=290
    UPDATE=291
    UPPER=292
    USE=293
    USER=294
    USE_SYM=295
    USING_SYM=296
    UTC_DATE=297
    UTC_TIME=298
    UTC_TIMESTAMP=299
    UTF8=300
    UUID=301
    VALUES=302
    VARIANCE=303
    VAR_POP=304
    VAR_SAMP=305
    VERSION_SYM=306
    WEEK=307
    WEEKDAY=308
    WEEKOFYEAR=309
    WEIGHT_STRING=310
    WHEN_SYM=311
    WHERE=312
    WITH=313
    XOR=314
    YEAR=315
    YEARWEEK=316
    YEAR_MONTH=317
    SDIST=318
    SAREA=319
    SCENTER=320
    SCIRCUM=321
    SLENGTH=322
    SSWAP=323
    SNPOINTS=324
    SSTR=325
    MYSQL_SPHERE_VERSION=326
    SRCONTAINSL=327
    SLCONTAINSR=328
    SRNOTCONTAINSL=329
    SLNOTCONTAINSR=330
    SOVERLAPS=331
    SNOTOVERLAPS=332
    SEQUAL=333
    SNOTEQUAL=334
    STRANSFORM=335
    SINVERSE=336
    SPOINT=337
    SPOINT_LONG=338
    SPOINT_LAT=339
    SPOINT_X=340
    SPOINT_Y=341
    SPOINT_Z=342
    SPOINT_EQUAL=343
    STRANS=344
    STRANS_POINT=345
    STRANS_POINT_INVERSE=346
    STRANS_EQUAL=347
    STRANS_EQUAL_NEG=348
    STRANS_PHI=349
    STRANS_THETA=350
    STRANS_PSI=351
    STRANS_AXES=352
    STRANS_INVERT=353
    STRANS_ZXZ=354
    STRANS_TRANS=355
    STRANS_TRANS_INV=356
    SCIRCLE=357
    SCIRCLE_RADIUS=358
    SCIRCLE_EQUAL=359
    SCIRCLE_EQUAL_NEG=360
    SCIRCLE_OVERLAP=361
    SCIRCLE_OVERLAP_NEG=362
    SCIRCLE_CONTAINED_BY_CIRCLE=363
    SCIRCLE_CONTAINED_BY_CIRCLE_NEG=364
    SCIRCLE_CONTAINS_CIRCLE=365
    SCIRCLE_CONTAINS_CIRCLE_NEG=366
    SPOINT_CONTAINED_BY_CIRCLE=367
    SPOINT_CONTAINED_BY_CIRCLE_NEG=368
    SPOINT_CONTAINED_BY_CIRCLE_COM=369
    SPOINT_CONTAINED_BY_CIRCLE_COM_NEG=370
    STRANS_CIRCLE=371
    STRANS_CIRCLE_INVERSE=372
    SLINE=373
    SMERIDIAN=374
    SLINE_BEG=375
    SLINE_END=376
    SLINE_EQUAL=377
    SLINE_EQUAL_NEG=378
    SLINE_TURN=379
    SLINE_CROSSES=380
    SLINE_CROSSES_NEG=381
    SLINE_OVERLAP=382
    SLINE_CONTAINS_POINT=383
    SLINE_CONTAINS_POINT_COM=384
    SLINE_CONTAINS_POINT_NEG=385
    SLINE_CONTAINS_POINT_COM_NEG=386
    STRANS_LINE=387
    STRANS_LINE_INVERSE=388
    SLINE_OVERLAP_CIRCLE=389
    SLINE_OVERLAP_CIRCLE_COM=390
    SLINE_OVERLAP_CIRCLE_NEG=391
    SLINE_OVERLAP_CIRCLE_COM_NEG=392
    SCIRCLE_CONTAINS_LINE=393
    SCIRCLE_CONTAINS_LINE_COM=394
    SCIRCLE_CONTAINS_LINE_NEG=395
    SCIRCLE_CONTAINS_LINE_COM_NEG=396
    SELLIPSE=397
    SELLIPSE_INC=398
    SELLIPSE_LRAD=399
    SELLIPSE_SRAD=400
    SELLIPSE_EQUAL=401
    SELLIPSE_EQUAL_NEG=402
    SELLIPSE_CONTAINS_ELLIPSE=403
    SELLIPSE_CONTAINS_ELLIPSE_NEG=404
    SELLIPSE_CONTAINS_ELLIPSE_COM=405
    SELLIPSE_CONTAINS_ELLIPSE_COM_NEG=406
    SELLIPSE_OVERLAP_ELLIPSE=407
    SELLIPSE_OVERLAP_ELLIPSE_NEG=408
    SELLIPSE_CONTAINS_POINT=409
    SELLIPSE_CONTAINS_POINT_NEG=410
    SELLIPSE_CONTAINS_POINT_COM=411
    SELLIPSE_CONTAINS_POINT_COM_NEG=412
    SELLIPSE_CONTAINS_CIRCLE=413
    SELLIPSE_CONTAINS_CIRCLE_NEG=414
    SELLIPSE_CONTAINS_CIRCLE_COM=415
    SELLIPSE_CONTAINS_CIRCLE_COM_NEG=416
    SCIRCLE_CONTAINS_ELLIPSE=417
    SCIRCLE_CONTAINS_ELLIPSE_NEG=418
    SCIRCLE_CONTAINS_ELLIPSE_COM=419
    SCIRCLE_CONTAINS_ELLIPSE_COM_NEG=420
    SELLIPSE_OVERLAP_CIRCLE=421
    SELLIPSE_OVERLAP_CIRCLE_NEG=422
    SELLIPSE_OVERLAP_CIRCLE_COM=423
    SELLIPSE_OVERLAP_CIRCLE_COM_NEG=424
    SELLIPSE_OVERLAP_LINE=425
    SELLIPSE_OVERLAP_LINE_NEG=426
    SELLIPSE_OVERLAP_LINE_COM=427
    SELLIPSE_OVERLAP_LINE_COM_NEG=428
    SELLIPSE_CONTAINS_LINE=429
    SELLIPSE_CONTAINS_LINE_NEG=430
    SELLIPSE_CONTAINS_LINE_COM=431
    SELLIPSE_CONTAINS_LINE_COM_NEG=432
    STRANS_ELLIPSE=433
    STRANS_ELLIPSE_INVERSE=434
    SPOLY=435
    SPOLY_EQUAL=436
    SPOLY_EQUAL_NEG=437
    SPOLY_CONTAINS_POLYGON=438
    SPOLY_CONTAINS_POLYGON_NEG=439
    SPOLY_CONTAINS_POLYGON_COM=440
    SPOLY_CONTAINS_POLYGON_COM_NEG=441
    SPOLY_OVERLAP_POLYGON=442
    SPOLY_OVERLAP_POLYGON_NEG=443
    SPOLY_CONTAINS_POINT=444
    SPOLY_CONTAINS_POINT_NEG=445
    SPOLY_CONTAINS_POINT_COM=446
    SPOLY_CONTAINS_POINT_COM_NEG=447
    SPOLY_CONTAINS_CIRCLE=448
    SPOLY_CONTAINS_CIRCLE_NEG=449
    SPOLY_CONTAINS_CIRCLE_COM=450
    SPOLY_CONTAINS_CIRCLE_COM_NEG=451
    SCIRCLE_CONTAINS_POLYGON=452
    SCIRCLE_CONTAINS_POLYGON_NEG=453
    SCIRCLE_CONTAINS_POLYGON_COM=454
    SCIRCLE_CONTAINS_POLYGON_COM_NEG=455
    SPOLY_OVERLAP_CIRCLE=456
    SPOLY_OVERLAP_CIRCLE_NEG=457
    SPOLY_OVERLAP_CIRCLE_COM=458
    SPOLY_OVERLAP_CIRCLE_COM_NEG=459
    SPOLY_CONTAINS_LINE=460
    SPOLY_CONTAINS_LINE_NEG=461
    SPOLY_CONTAINS_LINE_COM=462
    SPOLY_CONTAINS_LINE_COM_NEG=463
    SPOLY_OVERLAP_LINE=464
    SPOLY_OVERLAP_LINE_NEG=465
    SPOLY_OVERLAP_LINE_COM=466
    SPOLY_OVERLAP_LINE_COM_NEG=467
    SPOLY_CONTAINS_ELLIPSE=468
    SPOLY_CONTAINS_ELLIPSE_NEG=469
    SPOLY_CONTAINS_ELLIPSE_COM=470
    SPOLY_CONTAINS_ELLIPSE_COM_NEG=471
    SELLIPSE_CONTAINS_POLYGON=472
    SELLIPSE_CONTAINS_POLYGON_NEG=473
    SELLIPSE_CONTAINS_POLYGON_COM=474
    SELLIPSE_CONTAINS_POLYGON_COM_NEG=475
    SPOLY_OVERLAP_ELLIPSE=476
    SPOLY_OVERLAP_ELLIPSE_NEG=477
    SPOLY_OVERLAP_ELLIPSE_COM=478
    SPOLY_OVERLAP_ELLIPSE_COM_NEG=479
    STRANS_POLY=480
    STRANS_POLY_INVERSE=481
    SPOLY_ADD_POINT_AGGR=482
    SPOLY_AGGR=483
    SPATH=484
    SPATH_EQUAL=485
    SPATH_EQUAL_NEG=486
    SPATH_OVERLAP_PATH=487
    SPATH_OVERLAP_PATH_NEG=488
    SPATH_CONTAINS_POINT=489
    SPATH_CONTAINS_POINT_NEG=490
    SPATH_CONTAINS_POINT_COM=491
    SPATH_CONTAINS_POINT_COM_NEG=492
    SCIRCLE_CONTAINS_PATH=493
    SCIRCLE_CONTAINS_PATH_NEG=494
    SCIRCLE_CONTAINS_PATH_COM=495
    SCIRCLE_CONTAINS_PATH_COM_NEG=496
    SCIRCLE_OVERLAP_PATH=497
    SCIRCLE_OVERLAP_PATH_NEG=498
    SCIRCLE_OVERLAP_PATH_COM=499
    SCIRCLE_OVERLAP_PATH_COM_NEG=500
    SPATH_OVERLAP_LINE=501
    SPATH_OVERLAP_LINE_NEG=502
    SPATH_OVERLAP_LINE_COM=503
    SPATH_OVERLAP_LINE_COM_NEG=504
    SELLIPSE_CONTAINS_PATH=505
    SELLIPSE_CONTAINS_PATH_NEG=506
    SELLIPSE_CONTAINS_PATH_COM=507
    SELLIPSE_CONTAINS_PATH_COM_NEG=508
    SELLIPSE_OVERLAP_PATH=509
    SELLIPSE_OVERLAP_PATH_NEG=510
    SELLIPSE_OVERLAP_PATH_COM=511
    SELLIPSE_OVERLAP_PATH_COM_NEG=512
    SPOLY_CONTAINS_PATH=513
    SPOLY_CONTAINS_PATH_NEG=514
    SPOLY_CONTAINS_PATH_COM=515
    SPOLY_CONTAINS_PATH_COM_NEG=516
    SPOLY_OVERLAP_PATH=517
    SPOLY_OVERLAP_PATH_NEG=518
    SPOLY_OVERLAP_PATH_COM=519
    SPOLY_OVERLAP_PATH_COM_NEG=520
    STRANS_PATH=521
    STRANS_PATH_INVERSE=522
    SPATH_ADD_POINT_AGGR=523
    SPATH_AGGR=524
    SBOX=525
    SBOX_SW=526
    SBOX_SE=527
    SBOX_NW=528
    SBOX_NE=529
    SBOX_EQUAL=530
    SBOX_EQUAL_NEG=531
    SBOX_CONTAINS_BOX=532
    SBOX_CONTAINS_BOX_NEG=533
    SBOX_CONTAINS_BOX_COM=534
    SBOX_CONTAINS_BOX_COM_NEG=535
    SBOX_OVERLAP_BOX=536
    SBOX_OVERLAP_BOX_NEG=537
    SBOX_CONTAINS_POINT=538
    SBOX_CONTAINS_POINT_NEG=539
    SBOX_CONTAINS_POINT_COM=540
    SBOX_CONTAINS_POINT_COM_NEG=541
    SBOX_CONTAINS_CIRCLE=542
    SBOX_CONTAINS_CIRCLE_NEG=543
    SBOX_CONTAINS_CIRCLE_COM=544
    SBOX_CONTAINS_CIRCLE_COM_NEG=545
    SCIRCLE_CONTAINS_BOX=546
    SCIRCLE_CONTAINS_BOX_NEG=547
    SCIRCLE_CONTAINS_BOX_COM=548
    SCIRCLE_CONTAINS_BOX_COM_NEG=549
    SBOX_OVERLAP_CIRCLE=550
    SBOX_OVERLAP_CIRCLE_NEG=551
    SBOX_OVERLAP_CIRCLE_COM=552
    SBOX_OVERLAP_CIRCLE_COM_NEG=553
    SBOX_CONTAINS_LINE=554
    SBOX_CONTAINS_LINE_NEG=555
    SBOX_CONTAINS_LINE_COM=556
    SBOX_CONTAINS_LINE_COM_NEG=557
    SBOX_OVERLAP_LINE=558
    SBOX_OVERLAP_LINE_NEG=559
    SBOX_OVERLAP_LINE_COM=560
    SBOX_OVERLAP_LINE_COM_NEG=561
    SBOX_CONTAINS_ELLIPSE=562
    SBOX_CONTAINS_ELLIPSE_NEG=563
    SBOX_CONTAINS_ELLIPSE_COM=564
    SBOX_CONTAINS_ELLIPSE_COM_NEG=565
    SELLIPSE_CONTAINS_BOX=566
    SELLIPSE_CONTAINS_BOX_NEG=567
    SELLIPSE_CONTAINS_BOX_COM=568
    SELLIPSE_CONTAINS_BOX_COM_NEG=569
    SBOX_OVERLAP_ELLIPSE=570
    SBOX_OVERLAP_ELLIPSE_NEG=571
    SBOX_OVERLAP_ELLIPSE_COM=572
    SBOX_OVERLAP_ELLIPSE_COM_NEG=573
    SBOX_CONTAINS_POLY=574
    SBOX_CONTAINS_POLY_NEG=575
    SBOX_CONTAINS_POLY_COM=576
    SBOX_CONTAINS_POLY_COM_NEG=577
    SPOLY_CONTAINS_BOX=578
    SPOLY_CONTAINS_BOX_NEG=579
    SPOLY_CONTAINS_BOX_COM=580
    SPOLY_CONTAINS_BOX_COM_NEG=581
    SBOX_OVERLAP_POLY=582
    SBOX_OVERLAP_POLY_NEG=583
    SBOX_OVERLAP_POLY_COM=584
    SBOX_OVERLAP_POLY_COM_NEG=585
    SBOX_CONTAINS_PATH=586
    SBOX_CONTAINS_PATH_NEG=587
    SBOX_CONTAINS_PATH_COM=588
    SBOX_CONTAINS_PATH_COM_NEG=589
    SBOX_OVERLAP_PATH=590
    SBOX_OVERLAP_PATH_NEG=591
    SBOX_OVERLAP_PATH_COM=592
    SBOX_OVERLAP_PATH_COM_NEG=593
    STRRPOS=594
    IDLE=595
    ANGDIST=596
    HILBERTKEY=597
    COORDFROMHILBERTKEY=598
    SUM_OF_SQUARES=599
    PARTITADD_SUM_OF_SQARES=600
    GAIA_HEALPIX=601
    SPRNG_DBL=602
    DIVIDE=603
    MOD_SYM=604
    OR_SYM=605
    AND_SYM=606
    ARROW=607
    EQ=608
    NOT_EQ=609
    LET=610
    GET=611
    SET_VAR=612
    SHIFT_LEFT=613
    SHIFT_RIGHT=614
    SEMI=615
    COLON=616
    DOT=617
    COMMA=618
    ASTERISK=619
    RPAREN=620
    LPAREN=621
    RBRACK=622
    LBRACK=623
    PLUS=624
    MINUS=625
    NEGATION=626
    VERTBAR=627
    BITAND=628
    POWER_OP=629
    BACKTICK=630
    GTH=631
    LTH=632
    INTEGER_NUM=633
    HEX_DIGIT=634
    BIT_NUM=635
    REAL_NUMBER=636
    TEXT_STRING=637
    ID=638
    COMMENT=639
    WS=640

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(MySQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(MySQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(MySQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(MySQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(MySQLParser.LET, 0)

        def GET(self):
            return self.getToken(MySQLParser.GET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = MySQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            _la = self._input.LA(1)
            if not(((((_la - 608)) & ~0x3f) == 0 and ((1 << (_la - 608)) & 25165839) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INTEGER_NUM)
            else:
                return self.getToken(MySQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(MySQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(MySQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(MySQLParser.DATETIME, 0)

        def DECIMAL_SYM(self):
            return self.getToken(MySQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(MySQLParser.COMMA, 0)

        def SIGNED_SYM(self):
            return self.getToken(MySQLParser.SIGNED_SYM, 0)

        def INTEGER_SYM(self):
            return self.getToken(MySQLParser.INTEGER_SYM, 0)

        def TIME_SYM(self):
            return self.getToken(MySQLParser.TIME_SYM, 0)

        def UNSIGNED_SYM(self):
            return self.getToken(MySQLParser.UNSIGNED_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = MySQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self.match(MySQLParser.BINARY)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==621:
                    self.state = 163
                    self.match(MySQLParser.LPAREN)
                    self.state = 164
                    self.match(MySQLParser.INTEGER_NUM)
                    self.state = 165
                    self.match(MySQLParser.RPAREN)


                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 168
                self.match(MySQLParser.CHAR)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==621:
                    self.state = 169
                    self.match(MySQLParser.LPAREN)
                    self.state = 170
                    self.match(MySQLParser.INTEGER_NUM)
                    self.state = 171
                    self.match(MySQLParser.RPAREN)


                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 174
                self.match(MySQLParser.DATE_SYM)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 175
                self.match(MySQLParser.DATETIME)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 5)
                self.state = 176
                self.match(MySQLParser.DECIMAL_SYM)
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==621:
                    self.state = 177
                    self.match(MySQLParser.LPAREN)
                    self.state = 178
                    self.match(MySQLParser.INTEGER_NUM)
                    self.state = 181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==618:
                        self.state = 179
                        self.match(MySQLParser.COMMA)
                        self.state = 180
                        self.match(MySQLParser.INTEGER_NUM)


                    self.state = 183
                    self.match(MySQLParser.RPAREN)


                pass
            elif token in [241]:
                self.enterOuterAlt(localctx, 6)
                self.state = 186
                self.match(MySQLParser.SIGNED_SYM)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 187
                    self.match(MySQLParser.INTEGER_SYM)


                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 7)
                self.state = 190
                self.match(MySQLParser.TIME_SYM)
                pass
            elif token in [290]:
                self.enterOuterAlt(localctx, 8)
                self.state = 191
                self.match(MySQLParser.UNSIGNED_SYM)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 192
                    self.match(MySQLParser.INTEGER_SYM)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def NATURAL(self):
            return self.getToken(MySQLParser.NATURAL, 0)

        def LANGUAGE(self):
            return self.getToken(MySQLParser.LANGUAGE, 0)

        def MODE_SYM(self):
            return self.getToken(MySQLParser.MODE_SYM, 0)

        def WITH(self):
            return self.getToken(MySQLParser.WITH, 0)

        def QUERY_SYM(self):
            return self.getToken(MySQLParser.QUERY_SYM, 0)

        def EXPANSION_SYM(self):
            return self.getToken(MySQLParser.EXPANSION_SYM, 0)

        def BOOLEAN_SYM(self):
            return self.getToken(MySQLParser.BOOLEAN_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_search_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_modifier" ):
                listener.enterSearch_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_modifier" ):
                listener.exitSearch_modifier(self)




    def search_modifier(self):

        localctx = MySQLParser.Search_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_search_modifier)
        try:
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self.match(MySQLParser.IN_SYM)
                self.state = 198
                self.match(MySQLParser.NATURAL)
                self.state = 199
                self.match(MySQLParser.LANGUAGE)
                self.state = 200
                self.match(MySQLParser.MODE_SYM)
                self.state = 204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 201
                    self.match(MySQLParser.WITH)
                    self.state = 202
                    self.match(MySQLParser.QUERY_SYM)
                    self.state = 203
                    self.match(MySQLParser.EXPANSION_SYM)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(MySQLParser.IN_SYM)
                self.state = 207
                self.match(MySQLParser.BOOLEAN_SYM)
                self.state = 208
                self.match(MySQLParser.MODE_SYM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 209
                self.match(MySQLParser.WITH)
                self.state = 210
                self.match(MySQLParser.QUERY_SYM)
                self.state = 211
                self.match(MySQLParser.EXPANSION_SYM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(MySQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(MySQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(MySQLParser.HOUR, 0)

        def DAY_SYM(self):
            return self.getToken(MySQLParser.DAY_SYM, 0)

        def WEEK(self):
            return self.getToken(MySQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(MySQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(MySQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(MySQLParser.YEAR, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySQLParser.MINUTE_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySQLParser.HOUR_MICROSECOND, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySQLParser.HOUR_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySQLParser.HOUR_MINUTE, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySQLParser.DAY_MICROSECOND, 0)

        def DAY_SECOND(self):
            return self.getToken(MySQLParser.DAY_SECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySQLParser.DAY_MINUTE, 0)

        def DAY_HOUR(self):
            return self.getToken(MySQLParser.DAY_HOUR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySQLParser.YEAR_MONTH, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_interval_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_unit" ):
                listener.enterInterval_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_unit" ):
                listener.exitInterval_unit(self)




    def interval_unit(self):

        localctx = MySQLParser.Interval_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interval_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 67553994410557471) != 0) or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & 211106500968519) != 0) or ((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & 1281) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transcoding_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN1(self):
            return self.getToken(MySQLParser.LATIN1, 0)

        def UTF8(self):
            return self.getToken(MySQLParser.UTF8, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transcoding_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranscoding_name" ):
                listener.enterTranscoding_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranscoding_name" ):
                listener.exitTranscoding_name(self)




    def transcoding_name(self):

        localctx = MySQLParser.Transcoding_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transcoding_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            _la = self._input.LA(1)
            if not(_la==155 or _la==300):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(MySQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = MySQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(MySQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(MySQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(MySQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = MySQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            _la = self._input.LA(1)
            if not(_la==103 or _la==283):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(MySQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = MySQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(MySQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(MySQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(MySQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySQLParser.MINUS, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = MySQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==624 or _la==625:
                self.state = 224
                _la = self._input.LA(1)
                if not(_la==624 or _la==625):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 227
            _la = self._input.LA(1)
            if not(_la==633 or _la==636):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(MySQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = MySQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(MySQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(MySQLParser.ASCII_SYM, 0)

        def BIN(self):
            return self.getToken(MySQLParser.BIN, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySQLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(MySQLParser.CHAR, 0)

        def CONCAT_WS(self):
            return self.getToken(MySQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(MySQLParser.CONCAT, 0)

        def ELT(self):
            return self.getToken(MySQLParser.ELT, 0)

        def EXPORT_SET(self):
            return self.getToken(MySQLParser.EXPORT_SET, 0)

        def FIELD(self):
            return self.getToken(MySQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySQLParser.FIND_IN_SET, 0)

        def FORMAT(self):
            return self.getToken(MySQLParser.FORMAT, 0)

        def FROM_BASE64(self):
            return self.getToken(MySQLParser.FROM_BASE64, 0)

        def HEX(self):
            return self.getToken(MySQLParser.HEX, 0)

        def INSERT(self):
            return self.getToken(MySQLParser.INSERT, 0)

        def INSTR(self):
            return self.getToken(MySQLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(MySQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySQLParser.LENGTH, 0)

        def LOAD_FILE(self):
            return self.getToken(MySQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySQLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(MySQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySQLParser.LTRIM, 0)

        def MAKE_SET(self):
            return self.getToken(MySQLParser.MAKE_SET, 0)

        def MID(self):
            return self.getToken(MySQLParser.MID, 0)

        def OCT(self):
            return self.getToken(MySQLParser.OCT, 0)

        def ORD(self):
            return self.getToken(MySQLParser.ORD, 0)

        def QUOTE(self):
            return self.getToken(MySQLParser.QUOTE, 0)

        def REPEAT(self):
            return self.getToken(MySQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(MySQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(MySQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(MySQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySQLParser.RTRIM, 0)

        def SOUNDEX(self):
            return self.getToken(MySQLParser.SOUNDEX, 0)

        def SPACE(self):
            return self.getToken(MySQLParser.SPACE, 0)

        def STRCMP(self):
            return self.getToken(MySQLParser.STRCMP, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySQLParser.SUBSTRING_INDEX, 0)

        def SUBSTRING(self):
            return self.getToken(MySQLParser.SUBSTRING, 0)

        def TO_BASE64(self):
            return self.getToken(MySQLParser.TO_BASE64, 0)

        def TRIM(self):
            return self.getToken(MySQLParser.TRIM, 0)

        def UNHEX(self):
            return self.getToken(MySQLParser.UNHEX, 0)

        def UPPER(self):
            return self.getToken(MySQLParser.UPPER, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySQLParser.WEIGHT_STRING, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = MySQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6768904114176) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 844442112254977) != 0) or ((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & -4539610282413494077) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & 4773816051694567523) != 0) or _la==292 or _la==310):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(MySQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(MySQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(MySQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(MySQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(MySQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(MySQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySQLParser.BIT_XOR, 0)

        def BIT_COUNT(self):
            return self.getToken(MySQLParser.BIT_COUNT, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySQLParser.GROUP_CONCAT, 0)

        def STD(self):
            return self.getToken(MySQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = MySQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 562950180044800) != 0) or _la==121 or _la==183 or _la==190 or ((((_la - 255)) & ~0x3f) == 0 and ((1 << (_la - 255)) & 1970324836975631) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(MySQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(MySQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(MySQLParser.ATAN, 0)

        def CEIL(self):
            return self.getToken(MySQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySQLParser.CEILING, 0)

        def CONV(self):
            return self.getToken(MySQLParser.CONV, 0)

        def COS(self):
            return self.getToken(MySQLParser.COS, 0)

        def COT(self):
            return self.getToken(MySQLParser.COT, 0)

        def CRC32(self):
            return self.getToken(MySQLParser.CRC32, 0)

        def DEGREES(self):
            return self.getToken(MySQLParser.DEGREES, 0)

        def EXP(self):
            return self.getToken(MySQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(MySQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(MySQLParser.LN, 0)

        def LOG10(self):
            return self.getToken(MySQLParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySQLParser.LOG2, 0)

        def LOG(self):
            return self.getToken(MySQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(MySQLParser.MOD, 0)

        def PI(self):
            return self.getToken(MySQLParser.PI, 0)

        def POW(self):
            return self.getToken(MySQLParser.POW, 0)

        def POWER(self):
            return self.getToken(MySQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(MySQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySQLParser.RAND, 0)

        def ROUND(self):
            return self.getToken(MySQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(MySQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(MySQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(MySQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(MySQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = MySQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288670206572732422) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 4227073) != 0) or ((((_la - 165)) & ~0x3f) == 0 and ((1 << (_la - 165)) & -9195365276604956447) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & 17592722931717) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAKE_SET(self):
            return self.getToken(MySQLParser.MAKE_SET, 0)

        def LOAD_FILE(self):
            return self.getToken(MySQLParser.LOAD_FILE, 0)

        def IF(self):
            return self.getToken(MySQLParser.IF, 0)

        def IFNULL(self):
            return self.getToken(MySQLParser.IFNULL, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySQLParser.AES_ENCRYPT, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySQLParser.AES_DECRYPT, 0)

        def DECODE(self):
            return self.getToken(MySQLParser.DECODE, 0)

        def ENCODE(self):
            return self.getToken(MySQLParser.ENCODE, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySQLParser.DES_ENCRYPT, 0)

        def ENCRYPT(self):
            return self.getToken(MySQLParser.ENCRYPT, 0)

        def MD5(self):
            return self.getToken(MySQLParser.MD5, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySQLParser.OLD_PASSWORD, 0)

        def PASSWORD(self):
            return self.getToken(MySQLParser.PASSWORD, 0)

        def BENCHMARK(self):
            return self.getToken(MySQLParser.BENCHMARK, 0)

        def CHARSET(self):
            return self.getToken(MySQLParser.CHARSET, 0)

        def COERCIBILITY(self):
            return self.getToken(MySQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySQLParser.COLLATION, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySQLParser.CONNECTION_ID, 0)

        def CURRENT_USER(self):
            return self.getToken(MySQLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(MySQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySQLParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(MySQLParser.USER, 0)

        def SESSION_USER(self):
            return self.getToken(MySQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySQLParser.SYSTEM_USER, 0)

        def VERSION_SYM(self):
            return self.getToken(MySQLParser.VERSION_SYM, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySQLParser.FOUND_ROWS, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySQLParser.LAST_INSERT_ID, 0)

        def DEFAULT(self):
            return self.getToken(MySQLParser.DEFAULT, 0)

        def GET_LOCK(self):
            return self.getToken(MySQLParser.GET_LOCK, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySQLParser.RELEASE_LOCK, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySQLParser.IS_FREE_LOCK, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySQLParser.IS_USED_LOCK, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySQLParser.MASTER_POS_WAIT, 0)

        def INET_ATON(self):
            return self.getToken(MySQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySQLParser.INET_NTOA, 0)

        def NAME_CONST(self):
            return self.getToken(MySQLParser.NAME_CONST, 0)

        def SLEEP(self):
            return self.getToken(MySQLParser.SLEEP, 0)

        def UUID(self):
            return self.getToken(MySQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(MySQLParser.VALUES, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = MySQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4611696257629683808) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36099166581817345) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -9218023977933320141) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & 2216740520001) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 300714819585) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDDATE(self):
            return self.getToken(MySQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySQLParser.ADDTIME, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySQLParser.CONVERT_TZ, 0)

        def CURDATE(self):
            return self.getToken(MySQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(MySQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySQLParser.DATE_ADD, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySQLParser.DATE_FORMAT, 0)

        def DATE_SUB(self):
            return self.getToken(MySQLParser.DATE_SUB, 0)

        def DATE_SYM(self):
            return self.getToken(MySQLParser.DATE_SYM, 0)

        def DATEDIFF(self):
            return self.getToken(MySQLParser.DATEDIFF, 0)

        def DAYNAME(self):
            return self.getToken(MySQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySQLParser.DAYOFYEAR, 0)

        def EXTRACT(self):
            return self.getToken(MySQLParser.EXTRACT, 0)

        def FROM_DAYS(self):
            return self.getToken(MySQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySQLParser.FROM_UNIXTIME, 0)

        def GET_FORMAT(self):
            return self.getToken(MySQLParser.GET_FORMAT, 0)

        def HOUR(self):
            return self.getToken(MySQLParser.HOUR, 0)

        def LAST_DAY(self):
            return self.getToken(MySQLParser.LAST_DAY, 0)

        def MAKEDATE(self):
            return self.getToken(MySQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySQLParser.MAKETIME, 0)

        def MICROSECOND(self):
            return self.getToken(MySQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(MySQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySQLParser.MONTHNAME, 0)

        def NOW(self):
            return self.getToken(MySQLParser.NOW, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySQLParser.PERIOD_DIFF, 0)

        def QUARTER(self):
            return self.getToken(MySQLParser.QUARTER, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySQLParser.SEC_TO_TIME, 0)

        def SECOND(self):
            return self.getToken(MySQLParser.SECOND, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySQLParser.STR_TO_DATE, 0)

        def SUBTIME(self):
            return self.getToken(MySQLParser.SUBTIME, 0)

        def SYSDATE(self):
            return self.getToken(MySQLParser.SYSDATE, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySQLParser.TIME_TO_SEC, 0)

        def TIME_SYM(self):
            return self.getToken(MySQLParser.TIME_SYM, 0)

        def TIMEDIFF(self):
            return self.getToken(MySQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySQLParser.TIMESTAMPDIFF, 0)

        def TO_DAYS(self):
            return self.getToken(MySQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySQLParser.TO_SECONDS, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySQLParser.UNIX_TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(MySQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySQLParser.UTC_TIMESTAMP, 0)

        def WEEK(self):
            return self.getToken(MySQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySQLParser.WEEKOFYEAR, 0)

        def YEAR(self):
            return self.getToken(MySQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySQLParser.YEARWEEK, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = MySQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6917458658896904168) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4621537780051215357) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 5044070087137427457) != 0) or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 72514735592964101) != 0) or ((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & 793607) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mysql_sphere_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SDIST(self):
            return self.getToken(MySQLParser.SDIST, 0)

        def SAREA(self):
            return self.getToken(MySQLParser.SAREA, 0)

        def SCENTER(self):
            return self.getToken(MySQLParser.SCENTER, 0)

        def SCIRCUM(self):
            return self.getToken(MySQLParser.SCIRCUM, 0)

        def SLENGTH(self):
            return self.getToken(MySQLParser.SLENGTH, 0)

        def SSWAP(self):
            return self.getToken(MySQLParser.SSWAP, 0)

        def SNPOINTS(self):
            return self.getToken(MySQLParser.SNPOINTS, 0)

        def SSTR(self):
            return self.getToken(MySQLParser.SSTR, 0)

        def MYSQL_SPHERE_VERSION(self):
            return self.getToken(MySQLParser.MYSQL_SPHERE_VERSION, 0)

        def SRCONTAINSL(self):
            return self.getToken(MySQLParser.SRCONTAINSL, 0)

        def SLCONTAINSR(self):
            return self.getToken(MySQLParser.SLCONTAINSR, 0)

        def SRNOTCONTAINSL(self):
            return self.getToken(MySQLParser.SRNOTCONTAINSL, 0)

        def SLNOTCONTAINSR(self):
            return self.getToken(MySQLParser.SLNOTCONTAINSR, 0)

        def SOVERLAPS(self):
            return self.getToken(MySQLParser.SOVERLAPS, 0)

        def SNOTOVERLAPS(self):
            return self.getToken(MySQLParser.SNOTOVERLAPS, 0)

        def SEQUAL(self):
            return self.getToken(MySQLParser.SEQUAL, 0)

        def SNOTEQUAL(self):
            return self.getToken(MySQLParser.SNOTEQUAL, 0)

        def STRANSFORM(self):
            return self.getToken(MySQLParser.STRANSFORM, 0)

        def SINVERSE(self):
            return self.getToken(MySQLParser.SINVERSE, 0)

        def SPOINT(self):
            return self.getToken(MySQLParser.SPOINT, 0)

        def SPOINT_LONG(self):
            return self.getToken(MySQLParser.SPOINT_LONG, 0)

        def SPOINT_LAT(self):
            return self.getToken(MySQLParser.SPOINT_LAT, 0)

        def SPOINT_X(self):
            return self.getToken(MySQLParser.SPOINT_X, 0)

        def SPOINT_Y(self):
            return self.getToken(MySQLParser.SPOINT_Y, 0)

        def SPOINT_Z(self):
            return self.getToken(MySQLParser.SPOINT_Z, 0)

        def SPOINT_EQUAL(self):
            return self.getToken(MySQLParser.SPOINT_EQUAL, 0)

        def STRANS(self):
            return self.getToken(MySQLParser.STRANS, 0)

        def STRANS_POINT(self):
            return self.getToken(MySQLParser.STRANS_POINT, 0)

        def STRANS_POINT_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_POINT_INVERSE, 0)

        def STRANS_EQUAL(self):
            return self.getToken(MySQLParser.STRANS_EQUAL, 0)

        def STRANS_EQUAL_NEG(self):
            return self.getToken(MySQLParser.STRANS_EQUAL_NEG, 0)

        def STRANS_PHI(self):
            return self.getToken(MySQLParser.STRANS_PHI, 0)

        def STRANS_THETA(self):
            return self.getToken(MySQLParser.STRANS_THETA, 0)

        def STRANS_PSI(self):
            return self.getToken(MySQLParser.STRANS_PSI, 0)

        def STRANS_AXES(self):
            return self.getToken(MySQLParser.STRANS_AXES, 0)

        def STRANS_INVERT(self):
            return self.getToken(MySQLParser.STRANS_INVERT, 0)

        def STRANS_ZXZ(self):
            return self.getToken(MySQLParser.STRANS_ZXZ, 0)

        def STRANS_TRANS(self):
            return self.getToken(MySQLParser.STRANS_TRANS, 0)

        def STRANS_TRANS_INV(self):
            return self.getToken(MySQLParser.STRANS_TRANS_INV, 0)

        def SCIRCLE(self):
            return self.getToken(MySQLParser.SCIRCLE, 0)

        def SCIRCLE_RADIUS(self):
            return self.getToken(MySQLParser.SCIRCLE_RADIUS, 0)

        def SCIRCLE_EQUAL(self):
            return self.getToken(MySQLParser.SCIRCLE_EQUAL, 0)

        def SCIRCLE_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_EQUAL_NEG, 0)

        def SCIRCLE_OVERLAP(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP, 0)

        def SCIRCLE_OVERLAP_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP_NEG, 0)

        def SCIRCLE_CONTAINED_BY_CIRCLE(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINED_BY_CIRCLE, 0)

        def SCIRCLE_CONTAINED_BY_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINED_BY_CIRCLE_NEG, 0)

        def SCIRCLE_CONTAINS_CIRCLE(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_CIRCLE, 0)

        def SCIRCLE_CONTAINS_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_CIRCLE_NEG, 0)

        def SPOINT_CONTAINED_BY_CIRCLE(self):
            return self.getToken(MySQLParser.SPOINT_CONTAINED_BY_CIRCLE, 0)

        def SPOINT_CONTAINED_BY_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SPOINT_CONTAINED_BY_CIRCLE_NEG, 0)

        def SPOINT_CONTAINED_BY_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SPOINT_CONTAINED_BY_CIRCLE_COM, 0)

        def SPOINT_CONTAINED_BY_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOINT_CONTAINED_BY_CIRCLE_COM_NEG, 0)

        def STRANS_CIRCLE(self):
            return self.getToken(MySQLParser.STRANS_CIRCLE, 0)

        def STRANS_CIRCLE_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_CIRCLE_INVERSE, 0)

        def SLINE(self):
            return self.getToken(MySQLParser.SLINE, 0)

        def SMERIDIAN(self):
            return self.getToken(MySQLParser.SMERIDIAN, 0)

        def SLINE_BEG(self):
            return self.getToken(MySQLParser.SLINE_BEG, 0)

        def SLINE_END(self):
            return self.getToken(MySQLParser.SLINE_END, 0)

        def SLINE_EQUAL(self):
            return self.getToken(MySQLParser.SLINE_EQUAL, 0)

        def SLINE_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SLINE_EQUAL_NEG, 0)

        def SLINE_TURN(self):
            return self.getToken(MySQLParser.SLINE_TURN, 0)

        def SLINE_CROSSES(self):
            return self.getToken(MySQLParser.SLINE_CROSSES, 0)

        def SLINE_CROSSES_NEG(self):
            return self.getToken(MySQLParser.SLINE_CROSSES_NEG, 0)

        def SLINE_OVERLAP(self):
            return self.getToken(MySQLParser.SLINE_OVERLAP, 0)

        def SLINE_CONTAINS_POINT(self):
            return self.getToken(MySQLParser.SLINE_CONTAINS_POINT, 0)

        def SLINE_CONTAINS_POINT_COM(self):
            return self.getToken(MySQLParser.SLINE_CONTAINS_POINT_COM, 0)

        def SLINE_CONTAINS_POINT_NEG(self):
            return self.getToken(MySQLParser.SLINE_CONTAINS_POINT_NEG, 0)

        def SLINE_CONTAINS_POINT_COM_NEG(self):
            return self.getToken(MySQLParser.SLINE_CONTAINS_POINT_COM_NEG, 0)

        def STRANS_LINE(self):
            return self.getToken(MySQLParser.STRANS_LINE, 0)

        def STRANS_LINE_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_LINE_INVERSE, 0)

        def SLINE_OVERLAP_CIRCLE(self):
            return self.getToken(MySQLParser.SLINE_OVERLAP_CIRCLE, 0)

        def SLINE_OVERLAP_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SLINE_OVERLAP_CIRCLE_COM, 0)

        def SLINE_OVERLAP_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SLINE_OVERLAP_CIRCLE_NEG, 0)

        def SLINE_OVERLAP_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SLINE_OVERLAP_CIRCLE_COM_NEG, 0)

        def SCIRCLE_CONTAINS_LINE(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_LINE, 0)

        def SCIRCLE_CONTAINS_LINE_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_LINE_COM, 0)

        def SCIRCLE_CONTAINS_LINE_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_LINE_NEG, 0)

        def SCIRCLE_CONTAINS_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_LINE_COM_NEG, 0)

        def SELLIPSE(self):
            return self.getToken(MySQLParser.SELLIPSE, 0)

        def SELLIPSE_INC(self):
            return self.getToken(MySQLParser.SELLIPSE_INC, 0)

        def SELLIPSE_LRAD(self):
            return self.getToken(MySQLParser.SELLIPSE_LRAD, 0)

        def SELLIPSE_SRAD(self):
            return self.getToken(MySQLParser.SELLIPSE_SRAD, 0)

        def SELLIPSE_EQUAL(self):
            return self.getToken(MySQLParser.SELLIPSE_EQUAL, 0)

        def SELLIPSE_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_EQUAL_NEG, 0)

        def SELLIPSE_CONTAINS_ELLIPSE(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_ELLIPSE, 0)

        def SELLIPSE_CONTAINS_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_ELLIPSE_NEG, 0)

        def SELLIPSE_CONTAINS_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_ELLIPSE_COM, 0)

        def SELLIPSE_CONTAINS_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_ELLIPSE_COM_NEG, 0)

        def SELLIPSE_OVERLAP_ELLIPSE(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_ELLIPSE, 0)

        def SELLIPSE_OVERLAP_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_ELLIPSE_NEG, 0)

        def SELLIPSE_CONTAINS_POINT(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POINT, 0)

        def SELLIPSE_CONTAINS_POINT_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POINT_NEG, 0)

        def SELLIPSE_CONTAINS_POINT_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POINT_COM, 0)

        def SELLIPSE_CONTAINS_POINT_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POINT_COM_NEG, 0)

        def SELLIPSE_CONTAINS_CIRCLE(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_CIRCLE, 0)

        def SELLIPSE_CONTAINS_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_CIRCLE_NEG, 0)

        def SELLIPSE_CONTAINS_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_CIRCLE_COM, 0)

        def SELLIPSE_CONTAINS_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_CIRCLE_COM_NEG, 0)

        def SCIRCLE_CONTAINS_ELLIPSE(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_ELLIPSE, 0)

        def SCIRCLE_CONTAINS_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_ELLIPSE_NEG, 0)

        def SCIRCLE_CONTAINS_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_ELLIPSE_COM, 0)

        def SCIRCLE_CONTAINS_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_ELLIPSE_COM_NEG, 0)

        def SELLIPSE_OVERLAP_CIRCLE(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_CIRCLE, 0)

        def SELLIPSE_OVERLAP_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_CIRCLE_NEG, 0)

        def SELLIPSE_OVERLAP_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_CIRCLE_COM, 0)

        def SELLIPSE_OVERLAP_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_CIRCLE_COM_NEG, 0)

        def SELLIPSE_OVERLAP_LINE(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_LINE, 0)

        def SELLIPSE_OVERLAP_LINE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_LINE_NEG, 0)

        def SELLIPSE_OVERLAP_LINE_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_LINE_COM, 0)

        def SELLIPSE_OVERLAP_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_LINE_COM_NEG, 0)

        def SELLIPSE_CONTAINS_LINE(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_LINE, 0)

        def SELLIPSE_CONTAINS_LINE_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_LINE_NEG, 0)

        def SELLIPSE_CONTAINS_LINE_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_LINE_COM, 0)

        def SELLIPSE_CONTAINS_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_LINE_COM_NEG, 0)

        def STRANS_ELLIPSE(self):
            return self.getToken(MySQLParser.STRANS_ELLIPSE, 0)

        def STRANS_ELLIPSE_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_ELLIPSE_INVERSE, 0)

        def SPOLY(self):
            return self.getToken(MySQLParser.SPOLY, 0)

        def SPOLY_EQUAL(self):
            return self.getToken(MySQLParser.SPOLY_EQUAL, 0)

        def SPOLY_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SPOLY_EQUAL_NEG, 0)

        def SPOLY_CONTAINS_POLYGON(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POLYGON, 0)

        def SPOLY_CONTAINS_POLYGON_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POLYGON_NEG, 0)

        def SPOLY_CONTAINS_POLYGON_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POLYGON_COM, 0)

        def SPOLY_CONTAINS_POLYGON_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POLYGON_COM_NEG, 0)

        def SPOLY_OVERLAP_POLYGON(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_POLYGON, 0)

        def SPOLY_OVERLAP_POLYGON_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_POLYGON_NEG, 0)

        def SPOLY_CONTAINS_POINT(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POINT, 0)

        def SPOLY_CONTAINS_POINT_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POINT_NEG, 0)

        def SPOLY_CONTAINS_POINT_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POINT_COM, 0)

        def SPOLY_CONTAINS_POINT_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_POINT_COM_NEG, 0)

        def SPOLY_CONTAINS_CIRCLE(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_CIRCLE, 0)

        def SPOLY_CONTAINS_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_CIRCLE_NEG, 0)

        def SPOLY_CONTAINS_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_CIRCLE_COM, 0)

        def SPOLY_CONTAINS_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_CIRCLE_COM_NEG, 0)

        def SCIRCLE_CONTAINS_POLYGON(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_POLYGON, 0)

        def SCIRCLE_CONTAINS_POLYGON_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_POLYGON_NEG, 0)

        def SCIRCLE_CONTAINS_POLYGON_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_POLYGON_COM, 0)

        def SCIRCLE_CONTAINS_POLYGON_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_POLYGON_COM_NEG, 0)

        def SPOLY_OVERLAP_CIRCLE(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_CIRCLE, 0)

        def SPOLY_OVERLAP_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_CIRCLE_NEG, 0)

        def SPOLY_OVERLAP_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_CIRCLE_COM, 0)

        def SPOLY_OVERLAP_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_CIRCLE_COM_NEG, 0)

        def SPOLY_CONTAINS_LINE(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_LINE, 0)

        def SPOLY_CONTAINS_LINE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_LINE_NEG, 0)

        def SPOLY_CONTAINS_LINE_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_LINE_COM, 0)

        def SPOLY_CONTAINS_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_LINE_COM_NEG, 0)

        def SPOLY_OVERLAP_LINE(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_LINE, 0)

        def SPOLY_OVERLAP_LINE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_LINE_NEG, 0)

        def SPOLY_OVERLAP_LINE_COM(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_LINE_COM, 0)

        def SPOLY_OVERLAP_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_LINE_COM_NEG, 0)

        def SPOLY_CONTAINS_ELLIPSE(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_ELLIPSE, 0)

        def SPOLY_CONTAINS_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_ELLIPSE_NEG, 0)

        def SPOLY_CONTAINS_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_ELLIPSE_COM, 0)

        def SPOLY_CONTAINS_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_ELLIPSE_COM_NEG, 0)

        def SELLIPSE_CONTAINS_POLYGON(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POLYGON, 0)

        def SELLIPSE_CONTAINS_POLYGON_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POLYGON_NEG, 0)

        def SELLIPSE_CONTAINS_POLYGON_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POLYGON_COM, 0)

        def SELLIPSE_CONTAINS_POLYGON_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_POLYGON_COM_NEG, 0)

        def SPOLY_OVERLAP_ELLIPSE(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_ELLIPSE, 0)

        def SPOLY_OVERLAP_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_ELLIPSE_NEG, 0)

        def SPOLY_OVERLAP_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_ELLIPSE_COM, 0)

        def SPOLY_OVERLAP_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_ELLIPSE_COM_NEG, 0)

        def STRANS_POLY(self):
            return self.getToken(MySQLParser.STRANS_POLY, 0)

        def STRANS_POLY_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_POLY_INVERSE, 0)

        def SPOLY_ADD_POINT_AGGR(self):
            return self.getToken(MySQLParser.SPOLY_ADD_POINT_AGGR, 0)

        def SPOLY_AGGR(self):
            return self.getToken(MySQLParser.SPOLY_AGGR, 0)

        def SPATH(self):
            return self.getToken(MySQLParser.SPATH, 0)

        def SPATH_EQUAL(self):
            return self.getToken(MySQLParser.SPATH_EQUAL, 0)

        def SPATH_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SPATH_EQUAL_NEG, 0)

        def SPATH_OVERLAP_PATH(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_PATH, 0)

        def SPATH_OVERLAP_PATH_NEG(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_PATH_NEG, 0)

        def SPATH_CONTAINS_POINT(self):
            return self.getToken(MySQLParser.SPATH_CONTAINS_POINT, 0)

        def SPATH_CONTAINS_POINT_NEG(self):
            return self.getToken(MySQLParser.SPATH_CONTAINS_POINT_NEG, 0)

        def SPATH_CONTAINS_POINT_COM(self):
            return self.getToken(MySQLParser.SPATH_CONTAINS_POINT_COM, 0)

        def SPATH_CONTAINS_POINT_COM_NEG(self):
            return self.getToken(MySQLParser.SPATH_CONTAINS_POINT_COM_NEG, 0)

        def SCIRCLE_CONTAINS_PATH(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_PATH, 0)

        def SCIRCLE_CONTAINS_PATH_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_PATH_NEG, 0)

        def SCIRCLE_CONTAINS_PATH_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_PATH_COM, 0)

        def SCIRCLE_CONTAINS_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_PATH_COM_NEG, 0)

        def SCIRCLE_OVERLAP_PATH(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP_PATH, 0)

        def SCIRCLE_OVERLAP_PATH_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP_PATH_NEG, 0)

        def SCIRCLE_OVERLAP_PATH_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP_PATH_COM, 0)

        def SCIRCLE_OVERLAP_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_OVERLAP_PATH_COM_NEG, 0)

        def SPATH_OVERLAP_LINE(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_LINE, 0)

        def SPATH_OVERLAP_LINE_NEG(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_LINE_NEG, 0)

        def SPATH_OVERLAP_LINE_COM(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_LINE_COM, 0)

        def SPATH_OVERLAP_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SPATH_OVERLAP_LINE_COM_NEG, 0)

        def SELLIPSE_CONTAINS_PATH(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_PATH, 0)

        def SELLIPSE_CONTAINS_PATH_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_PATH_NEG, 0)

        def SELLIPSE_CONTAINS_PATH_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_PATH_COM, 0)

        def SELLIPSE_CONTAINS_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_PATH_COM_NEG, 0)

        def SELLIPSE_OVERLAP_PATH(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_PATH, 0)

        def SELLIPSE_OVERLAP_PATH_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_PATH_NEG, 0)

        def SELLIPSE_OVERLAP_PATH_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_PATH_COM, 0)

        def SELLIPSE_OVERLAP_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_OVERLAP_PATH_COM_NEG, 0)

        def SPOLY_CONTAINS_PATH(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_PATH, 0)

        def SPOLY_CONTAINS_PATH_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_PATH_NEG, 0)

        def SPOLY_CONTAINS_PATH_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_PATH_COM, 0)

        def SPOLY_CONTAINS_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_PATH_COM_NEG, 0)

        def SPOLY_OVERLAP_PATH(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_PATH, 0)

        def SPOLY_OVERLAP_PATH_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_PATH_NEG, 0)

        def SPOLY_OVERLAP_PATH_COM(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_PATH_COM, 0)

        def SPOLY_OVERLAP_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_OVERLAP_PATH_COM_NEG, 0)

        def STRANS_PATH(self):
            return self.getToken(MySQLParser.STRANS_PATH, 0)

        def STRANS_PATH_INVERSE(self):
            return self.getToken(MySQLParser.STRANS_PATH_INVERSE, 0)

        def SPATH_ADD_POINT_AGGR(self):
            return self.getToken(MySQLParser.SPATH_ADD_POINT_AGGR, 0)

        def SPATH_AGGR(self):
            return self.getToken(MySQLParser.SPATH_AGGR, 0)

        def SBOX(self):
            return self.getToken(MySQLParser.SBOX, 0)

        def SBOX_SW(self):
            return self.getToken(MySQLParser.SBOX_SW, 0)

        def SBOX_SE(self):
            return self.getToken(MySQLParser.SBOX_SE, 0)

        def SBOX_NW(self):
            return self.getToken(MySQLParser.SBOX_NW, 0)

        def SBOX_NE(self):
            return self.getToken(MySQLParser.SBOX_NE, 0)

        def SBOX_EQUAL(self):
            return self.getToken(MySQLParser.SBOX_EQUAL, 0)

        def SBOX_EQUAL_NEG(self):
            return self.getToken(MySQLParser.SBOX_EQUAL_NEG, 0)

        def SBOX_CONTAINS_BOX(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_BOX, 0)

        def SBOX_CONTAINS_BOX_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_BOX_NEG, 0)

        def SBOX_CONTAINS_BOX_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_BOX_COM, 0)

        def SBOX_CONTAINS_BOX_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_BOX_COM_NEG, 0)

        def SBOX_OVERLAP_BOX(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_BOX, 0)

        def SBOX_OVERLAP_BOX_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_BOX_NEG, 0)

        def SBOX_CONTAINS_POINT(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POINT, 0)

        def SBOX_CONTAINS_POINT_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POINT_NEG, 0)

        def SBOX_CONTAINS_POINT_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POINT_COM, 0)

        def SBOX_CONTAINS_POINT_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POINT_COM_NEG, 0)

        def SBOX_CONTAINS_CIRCLE(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_CIRCLE, 0)

        def SBOX_CONTAINS_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_CIRCLE_NEG, 0)

        def SBOX_CONTAINS_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_CIRCLE_COM, 0)

        def SBOX_CONTAINS_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_CIRCLE_COM_NEG, 0)

        def SCIRCLE_CONTAINS_BOX(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_BOX, 0)

        def SCIRCLE_CONTAINS_BOX_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_BOX_NEG, 0)

        def SCIRCLE_CONTAINS_BOX_COM(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_BOX_COM, 0)

        def SCIRCLE_CONTAINS_BOX_COM_NEG(self):
            return self.getToken(MySQLParser.SCIRCLE_CONTAINS_BOX_COM_NEG, 0)

        def SBOX_OVERLAP_CIRCLE(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_CIRCLE, 0)

        def SBOX_OVERLAP_CIRCLE_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_CIRCLE_NEG, 0)

        def SBOX_OVERLAP_CIRCLE_COM(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_CIRCLE_COM, 0)

        def SBOX_OVERLAP_CIRCLE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_CIRCLE_COM_NEG, 0)

        def SBOX_CONTAINS_LINE(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_LINE, 0)

        def SBOX_CONTAINS_LINE_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_LINE_NEG, 0)

        def SBOX_CONTAINS_LINE_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_LINE_COM, 0)

        def SBOX_CONTAINS_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_LINE_COM_NEG, 0)

        def SBOX_OVERLAP_LINE(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_LINE, 0)

        def SBOX_OVERLAP_LINE_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_LINE_NEG, 0)

        def SBOX_OVERLAP_LINE_COM(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_LINE_COM, 0)

        def SBOX_OVERLAP_LINE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_LINE_COM_NEG, 0)

        def SBOX_CONTAINS_ELLIPSE(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_ELLIPSE, 0)

        def SBOX_CONTAINS_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_ELLIPSE_NEG, 0)

        def SBOX_CONTAINS_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_ELLIPSE_COM, 0)

        def SBOX_CONTAINS_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_ELLIPSE_COM_NEG, 0)

        def SELLIPSE_CONTAINS_BOX(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_BOX, 0)

        def SELLIPSE_CONTAINS_BOX_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_BOX_NEG, 0)

        def SELLIPSE_CONTAINS_BOX_COM(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_BOX_COM, 0)

        def SELLIPSE_CONTAINS_BOX_COM_NEG(self):
            return self.getToken(MySQLParser.SELLIPSE_CONTAINS_BOX_COM_NEG, 0)

        def SBOX_OVERLAP_ELLIPSE(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_ELLIPSE, 0)

        def SBOX_OVERLAP_ELLIPSE_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_ELLIPSE_NEG, 0)

        def SBOX_OVERLAP_ELLIPSE_COM(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_ELLIPSE_COM, 0)

        def SBOX_OVERLAP_ELLIPSE_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_ELLIPSE_COM_NEG, 0)

        def SBOX_CONTAINS_POLY(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POLY, 0)

        def SBOX_CONTAINS_POLY_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POLY_NEG, 0)

        def SBOX_CONTAINS_POLY_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POLY_COM, 0)

        def SBOX_CONTAINS_POLY_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_POLY_COM_NEG, 0)

        def SPOLY_CONTAINS_BOX(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_BOX, 0)

        def SPOLY_CONTAINS_BOX_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_BOX_NEG, 0)

        def SPOLY_CONTAINS_BOX_COM(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_BOX_COM, 0)

        def SPOLY_CONTAINS_BOX_COM_NEG(self):
            return self.getToken(MySQLParser.SPOLY_CONTAINS_BOX_COM_NEG, 0)

        def SBOX_OVERLAP_POLY(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_POLY, 0)

        def SBOX_OVERLAP_POLY_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_POLY_NEG, 0)

        def SBOX_OVERLAP_POLY_COM(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_POLY_COM, 0)

        def SBOX_OVERLAP_POLY_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_POLY_COM_NEG, 0)

        def SBOX_CONTAINS_PATH(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_PATH, 0)

        def SBOX_CONTAINS_PATH_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_PATH_NEG, 0)

        def SBOX_CONTAINS_PATH_COM(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_PATH_COM, 0)

        def SBOX_CONTAINS_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_CONTAINS_PATH_COM_NEG, 0)

        def SBOX_OVERLAP_PATH(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_PATH, 0)

        def SBOX_OVERLAP_PATH_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_PATH_NEG, 0)

        def SBOX_OVERLAP_PATH_COM(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_PATH_COM, 0)

        def SBOX_OVERLAP_PATH_COM_NEG(self):
            return self.getToken(MySQLParser.SBOX_OVERLAP_PATH_COM_NEG, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_mysql_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysql_sphere_functions" ):
                listener.enterMysql_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysql_sphere_functions" ):
                listener.exitMysql_sphere_functions(self)




    def mysql_sphere_functions(self):

        localctx = MySQLParser.Mysql_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_mysql_sphere_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            _la = self._input.LA(1)
            if not(((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & -1) != 0) or ((((_la - 382)) & ~0x3f) == 0 and ((1 << (_la - 382)) & -1) != 0) or ((((_la - 446)) & ~0x3f) == 0 and ((1 << (_la - 446)) & -1) != 0) or ((((_la - 510)) & ~0x3f) == 0 and ((1 << (_la - 510)) & -1) != 0) or ((((_la - 574)) & ~0x3f) == 0 and ((1 << (_la - 574)) & 1048575) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mysql_udf_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRRPOS(self):
            return self.getToken(MySQLParser.STRRPOS, 0)

        def IDLE(self):
            return self.getToken(MySQLParser.IDLE, 0)

        def ANGDIST(self):
            return self.getToken(MySQLParser.ANGDIST, 0)

        def HILBERTKEY(self):
            return self.getToken(MySQLParser.HILBERTKEY, 0)

        def COORDFROMHILBERTKEY(self):
            return self.getToken(MySQLParser.COORDFROMHILBERTKEY, 0)

        def SUM_OF_SQUARES(self):
            return self.getToken(MySQLParser.SUM_OF_SQUARES, 0)

        def PARTITADD_SUM_OF_SQARES(self):
            return self.getToken(MySQLParser.PARTITADD_SUM_OF_SQARES, 0)

        def GAIA_HEALPIX(self):
            return self.getToken(MySQLParser.GAIA_HEALPIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_mysql_udf_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysql_udf_functions" ):
                listener.enterMysql_udf_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysql_udf_functions" ):
                listener.exitMysql_udf_functions(self)




    def mysql_udf_functions(self):

        localctx = MySQLParser.Mysql_udf_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_mysql_udf_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            _la = self._input.LA(1)
            if not(((((_la - 594)) & ~0x3f) == 0 and ((1 << (_la - 594)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(MySQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(MySQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(MySQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(MySQLParser.Other_functionsContext,0)


        def mysql_sphere_functions(self):
            return self.getTypedRuleContext(MySQLParser.Mysql_sphere_functionsContext,0)


        def mysql_udf_functions(self):
            return self.getTypedRuleContext(MySQLParser.Mysql_udf_functionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = MySQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_functionList)
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.number_functions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.char_functions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 247
                self.time_functions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 248
                self.other_functions()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 249
                self.mysql_sphere_functions()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 250
                self.mysql_udf_functions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(MySQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(MySQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(MySQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(MySQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(MySQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(MySQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = MySQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_literal_value)
        try:
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [637]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.string_literal()
                pass
            elif token in [624, 625, 633, 636]:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.number_literal()
                pass
            elif token in [634]:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self.hex_literal()
                pass
            elif token in [103, 283]:
                self.enterOuterAlt(localctx, 4)
                self.state = 256
                self.boolean_literal()
                pass
            elif token in [635]:
                self.enterOuterAlt(localctx, 5)
                self.state = 257
                self.bit_literal()
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 6)
                self.state = 258
                self.match(MySQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(MySQLParser.Select_listContext,0)


        def HIGH_PRIORITY(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySQLParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySQLParser.SQL_CALC_FOUND_ROWS, 0)

        def FROM(self):
            return self.getToken(MySQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(MySQLParser.Limit_clauseContext,0)


        def SEMI(self):
            return self.getToken(MySQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(MySQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySQLParser.DISTINCTROW, 0)

        def SQL_CACHE_SYM(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYM, 0)

        def SQL_NO_CACHE_SYM(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(MySQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(MySQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySQLParser.LOCK, 0)

        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def SHARE_SYM(self):
            return self.getToken(MySQLParser.SHARE_SYM, 0)

        def MODE_SYM(self):
            return self.getToken(MySQLParser.MODE_SYM, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(MySQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = MySQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(MySQLParser.SELECT)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==88 or _la==89:
                self.state = 262
                _la = self._input.LA(1)
                if not(_la==8 or _la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 265
                self.match(MySQLParser.HIGH_PRIORITY)


            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259:
                self.state = 268
                self.match(MySQLParser.STRAIGHT_JOIN)


            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253:
                self.state = 271
                self.match(MySQLParser.SQL_SMALL_RESULT)


            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==248:
                self.state = 274
                self.match(MySQLParser.SQL_BIG_RESULT)


            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 277
                self.match(MySQLParser.SQL_BUFFER_RESULT)


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==250 or _la==252:
                self.state = 280
                _la = self._input.LA(1)
                if not(_la==250 or _la==252):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251:
                self.state = 283
                self.match(MySQLParser.SQL_CALC_FOUND_ROWS)


            self.state = 286
            self.select_list()
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 287
                self.match(MySQLParser.FROM)
                self.state = 288
                self.table_references()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 289
                    self.partition_clause()


                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 292
                    self.where_clause()


                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 295
                    self.groupby_clause()


                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 298
                    self.having_clause()




            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 303
                self.orderby_clause()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 306
                self.limit_clause()


            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.state = 309
                self.match(MySQLParser.FOR_SYM)
                self.state = 310
                self.match(MySQLParser.UPDATE)
                pass
            elif token in [169]:
                self.state = 311
                self.match(MySQLParser.LOCK)
                self.state = 312
                self.match(MySQLParser.IN_SYM)
                self.state = 313
                self.match(MySQLParser.SHARE_SYM)
                self.state = 314
                self.match(MySQLParser.MODE_SYM)
                pass
            elif token in [288, 615, 620]:
                pass
            else:
                pass
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 317
                self.match(MySQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(MySQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = MySQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 320
                self.match(MySQLParser.AS_SYM)


            self.state = 323
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(MySQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = MySQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_bit_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.factor1()
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 326
                self.match(MySQLParser.VERTBAR)
                self.state = 327
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(MySQLParser.Relational_opContext,0)


        def EXISTS(self):
            return self.getToken(MySQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = MySQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.predicate()
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 331
                    self.relational_op()
                    self.state = 332
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==197:
                    self.state = 336
                    self.match(MySQLParser.NOT_SYM)


                self.state = 339
                self.match(MySQLParser.EXISTS)
                self.state = 340
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(MySQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(MySQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(MySQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = MySQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(MySQLParser.CASE_SYM)
            self.state = 346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [311]:
                self.state = 344
                self.case_when_statement1()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 82, 83, 84, 86, 87, 91, 92, 93, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 118, 119, 121, 125, 127, 132, 133, 136, 137, 139, 140, 142, 144, 146, 153, 154, 161, 162, 165, 167, 168, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 194, 195, 198, 199, 200, 203, 205, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 237, 240, 242, 244, 245, 247, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 289, 292, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 621, 624, 625, 626, 633, 634, 635, 636, 637, 638]:
                self.state = 345
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 348
                self.match(MySQLParser.ELSE_SYM)
                self.state = 349
                self.bit_expr()


            self.state = 352
            self.match(MySQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHEN_SYM)
            else:
                return self.getToken(MySQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.THEN_SYM)
            else:
                return self.getToken(MySQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = MySQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 354
                self.match(MySQLParser.WHEN_SYM)
                self.state = 355
                self.expression()
                self.state = 356
                self.match(MySQLParser.THEN_SYM)
                self.state = 357
                self.bit_expr()
                self.state = 361 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==311):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHEN_SYM)
            else:
                return self.getToken(MySQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.THEN_SYM)
            else:
                return self.getToken(MySQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = MySQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.bit_expr()
            self.state = 369 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 364
                self.match(MySQLParser.WHEN_SYM)
                self.state = 365
                self.bit_expr()
                self.state = 366
                self.match(MySQLParser.THEN_SYM)
                self.state = 367
                self.bit_expr()
                self.state = 371 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==311):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = MySQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(MySQLParser.LPAREN)
            self.state = 374
            self.column_spec()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 375
                self.match(MySQLParser.COMMA)
                self.state = 376
                self.column_spec()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = MySQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MySQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(MySQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DOT)
            else:
                return self.getToken(MySQLParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(MySQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = MySQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self.schema_name()
                    self.state = 387
                    self.match(MySQLParser.DOT)


                self.state = 391
                self.table_name()
                self.state = 392
                self.match(MySQLParser.DOT)


            self.state = 396
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(MySQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def alias(self):
            return self.getTypedRuleContext(MySQLParser.AliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = MySQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.table_spec()
                self.state = 399
                self.match(MySQLParser.DOT)
                self.state = 400
                self.match(MySQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.bit_expr()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==638:
                    self.state = 403
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Exp_factor2Context,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.XOR)
            else:
                return self.getToken(MySQLParser.XOR, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = MySQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.exp_factor2()
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.match(MySQLParser.XOR)
                    self.state = 410
                    self.exp_factor2() 
                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Exp_factor3Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Exp_factor3Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.AND_SYM)
            else:
                return self.getToken(MySQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = MySQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.exp_factor3()
            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 417
                    self.match(MySQLParser.AND_SYM)
                    self.state = 418
                    self.exp_factor3() 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor4(self):
            return self.getTypedRuleContext(MySQLParser.Exp_factor4Context,0)


        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = MySQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exp_factor3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 424
                self.match(MySQLParser.NOT_SYM)


            self.state = 427
            self.exp_factor4()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(MySQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(MySQLParser.IS_SYM, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(MySQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(MySQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exp_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor4" ):
                listener.enterExp_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor4" ):
                listener.exitExp_factor4(self)




    def exp_factor4(self):

        localctx = MySQLParser.Exp_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exp_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.bool_primary()
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 430
                self.match(MySQLParser.IS_SYM)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==197:
                    self.state = 431
                    self.match(MySQLParser.NOT_SYM)


                self.state = 436
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [103, 283]:
                    self.state = 434
                    self.boolean_literal()
                    pass
                elif token in [199]:
                    self.state = 435
                    self.match(MySQLParser.NULL_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.OR_SYM)
            else:
                return self.getToken(MySQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = MySQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.exp_factor1()
            self.state = 445
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 441
                    self.match(MySQLParser.OR_SYM)
                    self.state = 442
                    self.exp_factor1() 
                self.state = 447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = MySQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(MySQLParser.LPAREN)
            self.state = 449
            self.expression()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 450
                self.match(MySQLParser.COMMA)
                self.state = 451
                self.expression()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 457
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(MySQLParser.BITAND, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = MySQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.factor2()
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 460
                self.match(MySQLParser.BITAND)
                self.state = 461
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(MySQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(MySQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = MySQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.factor3()
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 465
                _la = self._input.LA(1)
                if not(_la==613 or _la==614):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 466
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.PLUS)
            else:
                return self.getToken(MySQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MINUS)
            else:
                return self.getToken(MySQLParser.MINUS, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = MySQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.factor4()
            self.state = 474
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 470
                    _la = self._input.LA(1)
                    if not(_la==624 or _la==625):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 471
                    self.factor4() 
                self.state = 476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ASTERISK)
            else:
                return self.getToken(MySQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DIVIDE)
            else:
                return self.getToken(MySQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MOD_SYM)
            else:
                return self.getToken(MySQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.POWER_OP)
            else:
                return self.getToken(MySQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = MySQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.factor5()
            self.state = 482
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 478
                    _la = self._input.LA(1)
                    if not(((((_la - 603)) & ~0x3f) == 0 and ((1 << (_la - 603)) & 67174403) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 479
                    self.factor5() 
                self.state = 484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(MySQLParser.Simple_exprContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(MySQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.PLUS)
            else:
                return self.getToken(MySQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MINUS)
            else:
                return self.getToken(MySQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(MySQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(MySQLParser.BINARY, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = MySQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 485
                _la = self._input.LA(1)
                if not(_la==22 or ((((_la - 624)) & ~0x3f) == 0 and ((1 << (_la - 624)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 488
            self.simple_expr()
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 489
                _la = self._input.LA(1)
                if not(_la==624 or _la==625):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 490
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(MySQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def CONVERT_SYM(self):
            return self.getToken(MySQLParser.CONVERT_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(MySQLParser.Cast_data_typeContext,0)


        def USING_SYM(self):
            return self.getToken(MySQLParser.USING_SYM, 0)

        def transcoding_name(self):
            return self.getTypedRuleContext(MySQLParser.Transcoding_nameContext,0)


        def CAST_SYM(self):
            return self.getToken(MySQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(MySQLParser.AS_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(MySQLParser.Group_functionsContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(MySQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = MySQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.functionList()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==621:
                    self.state = 494
                    self.match(MySQLParser.LPAREN)
                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2016487284791594882) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6717303647121963013) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -1369147224870595149) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -4754207602937171633) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -88946700026249761) != 0) or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & -1) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & -1) != 0) or ((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & -1) != 0) or ((((_la - 517)) & ~0x3f) == 0 and ((1 << (_la - 517)) & -1) != 0) or ((((_la - 581)) & ~0x3f) == 0 and ((1 << (_la - 581)) & 283789448689221631) != 0):
                        self.state = 495
                        self.expression()
                        self.state = 500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==618:
                            self.state = 496
                            self.match(MySQLParser.COMMA)
                            self.state = 497
                            self.expression()
                            self.state = 502
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 505
                    self.match(MySQLParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.match(MySQLParser.CONVERT_SYM)
                self.state = 509
                self.match(MySQLParser.LPAREN)
                self.state = 510
                self.expression()
                self.state = 511
                self.match(MySQLParser.COMMA)
                self.state = 512
                self.cast_data_type()
                self.state = 513
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 515
                self.match(MySQLParser.CONVERT_SYM)
                self.state = 516
                self.match(MySQLParser.LPAREN)
                self.state = 517
                self.expression()
                self.state = 518
                self.match(MySQLParser.USING_SYM)
                self.state = 519
                self.transcoding_name()
                self.state = 520
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 522
                self.match(MySQLParser.CAST_SYM)
                self.state = 523
                self.match(MySQLParser.LPAREN)
                self.state = 524
                self.expression()
                self.state = 525
                self.match(MySQLParser.AS_SYM)
                self.state = 526
                self.cast_data_type()
                self.state = 527
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 529
                self.group_functions()
                self.state = 530
                self.match(MySQLParser.LPAREN)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==88 or _la==619:
                    self.state = 531
                    _la = self._input.LA(1)
                    if not(_la==8 or _la==88 or _la==619):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2016487284791594882) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6717303647121963013) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -1369147224870595149) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -2377103801468585817) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -44473350013124881) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -1) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -1) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -1) != 0) or ((((_la - 582)) & ~0x3f) == 0 and ((1 << (_la - 582)) & 141894724344610815) != 0):
                    self.state = 534
                    self.bit_expr()


                self.state = 537
                self.match(MySQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(MySQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(MySQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = MySQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(MySQLParser.GROUP_SYM)
            self.state = 542
            self.match(MySQLParser.BY_SYM)
            self.state = 543
            self.groupby_item()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 544
                self.match(MySQLParser.COMMA)
                self.state = 545
                self.groupby_item()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==313:
                self.state = 551
                self.match(MySQLParser.WITH)
                self.state = 552
                self.match(MySQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(MySQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySQLParser.DESC, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = MySQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 555
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 556
                self.match(MySQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 557
                self.bit_expr()
                pass


            self.state = 561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 560
                _la = self._input.LA(1)
                if not(_la==11 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(MySQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = MySQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(MySQLParser.HAVING)
            self.state = 564
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(MySQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(MySQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(MySQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(MySQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = MySQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [295]:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.match(MySQLParser.USE_SYM)
                self.state = 567
                self.index_options()
                self.state = 568
                self.match(MySQLParser.LPAREN)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==638:
                    self.state = 569
                    self.index_list()


                self.state = 572
                self.match(MySQLParser.RPAREN)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.match(MySQLParser.IGNORE_SYM)
                self.state = 575
                self.index_options()
                self.state = 576
                self.match(MySQLParser.LPAREN)
                self.state = 577
                self.index_list()
                self.state = 578
                self.match(MySQLParser.RPAREN)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 3)
                self.state = 580
                self.match(MySQLParser.FORCE_SYM)
                self.state = 581
                self.index_options()
                self.state = 582
                self.match(MySQLParser.LPAREN)
                self.state = 583
                self.index_list()
                self.state = 584
                self.match(MySQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hint_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = MySQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.index_hint()
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 589
                    self.match(MySQLParser.COMMA)
                    self.state = 590
                    self.index_hint() 
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = MySQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = MySQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.index_name()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 599
                self.match(MySQLParser.COMMA)
                self.state = 600
                self.index_name()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(MySQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(MySQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(MySQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(MySQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(MySQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(MySQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = MySQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            _la = self._input.LA(1)
            if not(_la==135 or _la==149):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 607
                self.match(MySQLParser.FOR_SYM)
                self.state = 613
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [147]:
                    self.state = 608
                    self.match(MySQLParser.JOIN_SYM)
                    pass
                elif token in [206]:
                    self.state = 609
                    self.match(MySQLParser.ORDER_SYM)
                    self.state = 610
                    self.match(MySQLParser.BY_SYM)
                    pass
                elif token in [122]:
                    self.state = 611
                    self.match(MySQLParser.GROUP_SYM)
                    self.state = 612
                    self.match(MySQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(MySQLParser.INTERVAL_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def interval_unit(self):
            return self.getTypedRuleContext(MySQLParser.Interval_unitContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = MySQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(MySQLParser.INTERVAL_SYM)
            self.state = 618
            self.expression()
            self.state = 619
            self.interval_unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(MySQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(MySQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(MySQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = MySQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_condition)
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [204]:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.match(MySQLParser.ON)
                self.state = 622
                self.expression()
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.match(MySQLParser.USING_SYM)
                self.state = 624
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(MySQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(MySQLParser.Row_countContext,0)


        def OFFSET_SYM(self):
            return self.getToken(MySQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(MySQLParser.OffsetContext,0)


        def COMMA(self):
            return self.getToken(MySQLParser.COMMA, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = MySQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(MySQLParser.LIMIT)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 628
                    self.offset()
                    self.state = 629
                    self.match(MySQLParser.COMMA)


                self.state = 633
                self.row_count()
                pass

            elif la_ == 2:
                self.state = 634
                self.row_count()
                self.state = 635
                self.match(MySQLParser.OFFSET_SYM)
                self.state = 636
                self.offset()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_against_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(MySQLParser.MATCH, 0)

        def AGAINST(self):
            return self.getToken(MySQLParser.AGAINST, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_specContext,i)


        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def search_modifier(self):
            return self.getTypedRuleContext(MySQLParser.Search_modifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_match_against_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_against_statement" ):
                listener.enterMatch_against_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_against_statement" ):
                listener.exitMatch_against_statement(self)




    def match_against_statement(self):

        localctx = MySQLParser.Match_against_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_match_against_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(MySQLParser.MATCH)

            self.state = 641
            self.column_spec()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 642
                self.match(MySQLParser.COMMA)
                self.state = 643
                self.column_spec()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 649
            self.match(MySQLParser.AGAINST)

            self.state = 650
            self.expression()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 651
                self.search_modifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = MySQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(MySQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = MySQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(MySQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(MySQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = MySQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(MySQLParser.ORDER_SYM)
            self.state = 659
            self.match(MySQLParser.BY_SYM)
            self.state = 660
            self.orderby_item()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 661
                self.match(MySQLParser.COMMA)
                self.state = 662
                self.orderby_item()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(MySQLParser.Groupby_itemContext,0)


        def ASC(self):
            return self.getToken(MySQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySQLParser.DESC, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = MySQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.groupby_item()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==85:
                self.state = 669
                _la = self._input.LA(1)
                if not(_la==11 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(MySQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(MySQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = MySQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(MySQLParser.PARTITION_SYM)
            self.state = 673
            self.match(MySQLParser.LPAREN)
            self.state = 674
            self.partition_names()
            self.state = 675
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = MySQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = MySQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.partition_name()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 680
                self.match(MySQLParser.COMMA)
                self.state = 681
                self.partition_name()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(MySQLParser.LIKE_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(MySQLParser.REGEXP, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def BETWEEN(self):
            return self.getToken(MySQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(MySQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(MySQLParser.Expression_listContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(MySQLParser.ESCAPE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = MySQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==197:
                self.state = 687
                self.match(MySQLParser.NOT_SYM)


            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.state = 690
                self.match(MySQLParser.IN_SYM)
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 691
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 692
                    self.expression_list()
                    pass


                pass
            elif token in [163]:
                self.state = 695
                self.match(MySQLParser.LIKE_SYM)
                self.state = 696
                self.simple_expr()
                self.state = 699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.match(MySQLParser.ESCAPE_SYM)
                    self.state = 698
                    self.simple_expr()


                pass
            elif token in [221]:
                self.state = 701
                self.match(MySQLParser.REGEXP)
                self.state = 702
                self.bit_expr()
                pass
            elif token in [19]:
                self.state = 703
                self.match(MySQLParser.BETWEEN)
                self.state = 704
                self.bit_expr()
                self.state = 705
                self.match(MySQLParser.AND_SYM)
                self.state = 706
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(MySQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(MySQLParser.LIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = MySQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_bit_fac2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(MySQLParser.SOUNDS_SYM)
            self.state = 711
            self.match(MySQLParser.LIKE_SYM)
            self.state = 712
            self.bit_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(MySQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(MySQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = MySQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.bit_expr()

            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 715
                self.bit_fac1()

            elif la_ == 2:
                self.state = 716
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(MySQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(MySQLParser.SEMI, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = MySQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.select_statement()
            self.state = 720
            self.match(MySQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = MySQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Displayed_columnContext,i)


        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = MySQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 82, 83, 84, 86, 87, 91, 92, 93, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 118, 119, 121, 125, 127, 132, 133, 136, 137, 139, 140, 142, 144, 146, 153, 154, 161, 162, 165, 167, 168, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 194, 195, 198, 199, 200, 203, 205, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 237, 240, 242, 244, 245, 247, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 289, 292, 294, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 621, 624, 625, 626, 633, 634, 635, 636, 637, 638]:
                self.state = 724
                self.displayed_column()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==618:
                    self.state = 725
                    self.match(MySQLParser.COMMA)
                    self.state = 726
                    self.displayed_column()
                    self.state = 731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [619]:
                self.state = 732
                self.match(MySQLParser.ASTERISK)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==618:
                    self.state = 733
                    self.match(MySQLParser.COMMA)
                    self.state = 734
                    self.displayed_column()
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==618:
                        self.state = 735
                        self.match(MySQLParser.COMMA)
                        self.state = 736
                        self.displayed_column()
                        self.state = 741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNION_SYM)
            else:
                return self.getToken(MySQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ALL)
            else:
                return self.getToken(MySQLParser.ALL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = MySQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.select_expression()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==288:
                self.state = 747
                self.match(MySQLParser.UNION_SYM)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 748
                    self.match(MySQLParser.ALL)


                self.state = 751
                self.select_expression()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(MySQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(MySQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(MySQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(MySQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(MySQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(MySQLParser.Interval_exprContext,0)


        def match_against_statement(self):
            return self.getTypedRuleContext(MySQLParser.Match_against_statementContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = MySQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_simple_expr)
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 760
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 761
                self.match(MySQLParser.ROW_SYM)
                self.state = 762
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 763
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 764
                self.match(MySQLParser.EXISTS)
                self.state = 765
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 766
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 767
                self.match_against_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 768
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(MySQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = MySQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(MySQLParser.LPAREN)
            self.state = 772
            self.select_statement()
            self.state = 773
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(MySQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(MySQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(MySQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(MySQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(MySQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(MySQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(MySQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = MySQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.table_spec()
                self.state = 777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 776
                    self.partition_clause()


                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14 or _la==638:
                    self.state = 779
                    self.alias()


                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107 or _la==134 or _la==295:
                    self.state = 782
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.subquery()
                self.state = 786
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.match(MySQLParser.LPAREN)
                self.state = 789
                self.table_references()
                self.state = 790
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 792
                self.match(MySQLParser.OJ_SYM)
                self.state = 793
                self.table_reference()
                self.state = 794
                self.match(MySQLParser.LEFT)
                self.state = 795
                self.match(MySQLParser.OUTER)
                self.state = 796
                self.match(MySQLParser.JOIN_SYM)
                self.state = 797
                self.table_reference()
                self.state = 798
                self.match(MySQLParser.ON)
                self.state = 799
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySQLParser.ID, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = MySQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(MySQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(MySQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.JOIN_SYM)
            else:
                return self.getToken(MySQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INNER_SYM)
            else:
                return self.getToken(MySQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.CROSS)
            else:
                return self.getToken(MySQLParser.CROSS, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = MySQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.table_factor2()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60 or _la==138 or _la==147:
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or _la==138:
                    self.state = 806
                    _la = self._input.LA(1)
                    if not(_la==60 or _la==138):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 809
                self.match(MySQLParser.JOIN_SYM)
                self.state = 810
                self.table_atom()
                self.state = 812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 811
                    self.join_condition()


                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(MySQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(MySQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(MySQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = MySQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.table_factor3()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259:
                self.state = 820
                self.match(MySQLParser.STRAIGHT_JOIN)
                self.state = 821
                self.table_atom()
                self.state = 824
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.match(MySQLParser.ON)
                    self.state = 823
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.JOIN_SYM)
            else:
                return self.getToken(MySQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LEFT)
            else:
                return self.getToken(MySQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.RIGHT)
            else:
                return self.getToken(MySQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.OUTER)
            else:
                return self.getToken(MySQLParser.OUTER, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = MySQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.table_factor4()
            self.state = 839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 829
                    _la = self._input.LA(1)
                    if not(_la==161 or _la==226):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 830
                        self.match(MySQLParser.OUTER)


                    self.state = 833
                    self.match(MySQLParser.JOIN_SYM)
                    self.state = 834
                    self.table_factor4()
                    self.state = 835
                    self.join_condition() 
                self.state = 841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(MySQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(MySQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(MySQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(MySQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(MySQLParser.OUTER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = MySQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.table_atom()
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==196:
                self.state = 843
                self.match(MySQLParser.NATURAL)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==161 or _la==226:
                    self.state = 844
                    _la = self._input.LA(1)
                    if not(_la==161 or _la==226):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 845
                        self.match(MySQLParser.OUTER)




                self.state = 850
                self.match(MySQLParser.JOIN_SYM)
                self.state = 851
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(MySQLParser.Table_factor1Context,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = MySQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.table_factor1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = MySQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.table_reference()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==618:
                self.state = 857
                self.match(MySQLParser.COMMA)
                self.state = 858
                self.table_reference()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(MySQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(MySQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(MySQLParser.DOT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = MySQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 864
                self.schema_name()
                self.state = 865
                self.match(MySQLParser.DOT)


            self.state = 869
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(MySQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = MySQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(MySQLParser.WHERE)
            self.state = 872
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





