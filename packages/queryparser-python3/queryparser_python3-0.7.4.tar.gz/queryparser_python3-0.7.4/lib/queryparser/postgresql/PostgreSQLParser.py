# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,240,1192,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,1,1,1,1,1,1,1,
        1,3,1,211,8,1,1,1,1,1,1,1,1,1,3,1,217,8,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,3,1,229,8,1,1,1,3,1,232,8,1,1,1,1,1,1,1,1,1,1,
        1,3,1,239,8,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,3,5,248,8,5,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,277,8,15,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,285,8,16,1,17,1,17,3,17,289,8,
        17,1,17,1,17,1,17,1,17,3,17,295,8,17,1,17,3,17,298,8,17,1,17,3,17,
        301,8,17,1,17,3,17,304,8,17,3,17,306,8,17,1,17,3,17,309,8,17,1,17,
        3,17,312,8,17,1,17,3,17,315,8,17,1,17,1,17,3,17,319,8,17,1,17,3,
        17,322,8,17,1,18,3,18,325,8,18,1,18,1,18,1,19,1,19,1,19,3,19,332,
        8,19,1,20,1,20,1,20,3,20,337,8,20,1,20,1,20,3,20,341,8,20,1,20,3,
        20,344,8,20,1,20,1,20,3,20,348,8,20,1,21,1,21,1,21,3,21,353,8,21,
        1,21,1,21,3,21,357,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,4,22,
        366,8,22,11,22,12,22,367,1,23,1,23,1,23,1,23,1,23,1,23,4,23,376,
        8,23,11,23,12,23,377,1,24,1,24,1,24,1,24,5,24,384,8,24,10,24,12,
        24,387,9,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,3,26,396,8,26,1,26,
        1,26,1,26,3,26,401,8,26,1,26,1,26,3,26,405,8,26,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,3,27,414,8,27,1,27,1,27,3,27,418,8,27,1,27,3,27,
        421,8,27,3,27,423,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,
        28,433,8,28,1,29,1,29,1,29,5,29,438,8,29,10,29,12,29,441,9,29,1,
        30,3,30,444,8,30,1,30,1,30,1,31,1,31,1,31,3,31,451,8,31,1,31,1,31,
        1,31,1,31,3,31,457,8,31,3,31,459,8,31,1,31,3,31,462,8,31,3,31,464,
        8,31,1,32,1,32,1,32,5,32,469,8,32,10,32,12,32,472,9,32,1,33,1,33,
        1,33,1,33,5,33,478,8,33,10,33,12,33,481,9,33,1,33,1,33,1,34,1,34,
        1,34,3,34,488,8,34,1,35,1,35,1,35,3,35,493,8,35,1,36,1,36,1,36,5,
        36,498,8,36,10,36,12,36,501,9,36,1,37,1,37,1,37,5,37,506,8,37,10,
        37,12,37,509,9,37,1,38,3,38,512,8,38,1,38,1,38,3,38,516,8,38,1,38,
        1,38,3,38,520,8,38,1,39,1,39,1,39,1,39,1,39,5,39,527,8,39,10,39,
        12,39,530,9,39,3,39,532,8,39,1,39,3,39,535,8,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,562,8,39,1,39,1,
        39,3,39,566,8,39,3,39,568,8,39,1,39,1,39,3,39,572,8,39,1,40,1,40,
        1,40,1,40,1,40,5,40,579,8,40,10,40,12,40,582,9,40,1,40,1,40,3,40,
        586,8,40,1,41,1,41,1,41,3,41,591,8,41,1,41,3,41,594,8,41,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,3,43,603,8,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,619,8,43,1,
        44,1,44,1,44,5,44,624,8,44,10,44,12,44,627,9,44,1,45,1,45,1,46,1,
        46,1,46,5,46,634,8,46,10,46,12,46,637,9,46,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,3,47,646,8,47,3,47,648,8,47,1,48,1,48,1,48,1,49,1,49,
        1,49,1,49,3,49,657,8,49,1,50,1,50,1,50,1,50,3,50,663,8,50,1,50,1,
        50,1,50,1,50,1,50,3,50,670,8,50,1,51,1,51,1,52,1,52,1,52,1,53,1,
        53,1,54,1,54,1,54,1,54,1,54,5,54,684,8,54,10,54,12,54,687,9,54,1,
        55,1,55,3,55,691,8,55,1,55,1,55,3,55,695,8,55,3,55,697,8,55,1,55,
        1,55,1,55,1,55,3,55,703,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,
        1,58,1,58,1,58,5,58,715,8,58,10,58,12,58,718,9,58,1,59,3,59,721,
        8,59,1,59,1,59,1,59,3,59,726,8,59,1,59,1,59,1,59,1,59,3,59,732,8,
        59,1,59,1,59,1,59,3,59,737,8,59,1,59,1,59,3,59,741,8,59,1,59,1,59,
        3,59,745,8,59,1,59,1,59,1,59,3,59,750,8,59,1,60,1,60,1,60,1,60,3,
        60,756,8,60,1,61,1,61,3,61,760,8,61,1,61,1,61,3,61,764,8,61,1,62,
        1,62,1,62,1,63,1,63,1,64,1,64,1,64,5,64,774,8,64,10,64,12,64,777,
        9,64,1,64,1,64,1,64,1,64,1,64,5,64,784,8,64,10,64,12,64,787,9,64,
        3,64,789,8,64,1,64,1,64,1,64,1,64,5,64,795,8,64,10,64,12,64,798,
        9,64,3,64,800,8,64,1,65,1,65,1,65,5,65,805,8,65,10,65,12,65,808,
        9,65,1,66,1,66,1,66,3,66,813,8,66,1,66,5,66,816,8,66,10,66,12,66,
        819,9,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        3,67,832,8,67,1,68,1,68,1,68,1,68,3,68,838,8,68,1,68,4,68,841,8,
        68,11,68,12,68,842,1,69,1,69,1,69,1,69,1,70,1,70,3,70,851,8,70,1,
        70,3,70,854,8,70,1,70,3,70,857,8,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,875,8,70,
        1,71,1,71,1,72,1,72,3,72,881,8,72,1,72,1,72,1,72,3,72,886,8,72,5,
        72,888,8,72,10,72,12,72,891,9,72,1,73,1,73,1,73,1,73,1,73,3,73,898,
        8,73,3,73,900,8,73,1,74,1,74,1,74,3,74,905,8,74,1,74,1,74,1,74,1,
        74,5,74,911,8,74,10,74,12,74,914,9,74,1,75,1,75,1,75,1,75,3,75,920,
        8,75,3,75,922,8,75,1,75,1,75,3,75,926,8,75,1,76,1,76,1,76,1,76,1,
        76,1,76,1,76,3,76,935,8,76,3,76,937,8,76,1,77,1,77,1,77,5,77,942,
        8,77,10,77,12,77,945,9,77,1,78,1,78,1,78,3,78,950,8,78,1,78,1,78,
        1,79,1,79,1,79,1,79,5,79,958,8,79,10,79,12,79,961,9,79,1,80,1,80,
        1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        3,82,978,8,82,1,82,1,82,3,82,982,8,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1001,
        8,82,1,82,1,82,1,82,3,82,1006,8,82,1,82,1,82,1,82,1,82,3,82,1012,
        8,82,1,82,1,82,1,82,1,82,1,82,3,82,1019,8,82,1,82,1,82,1,82,1,82,
        3,82,1025,8,82,1,82,1,82,1,82,1,82,3,82,1031,8,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1040,8,82,1,82,3,82,1043,8,82,1,82,4,82,
        1046,8,82,11,82,12,82,1047,3,82,1050,8,82,1,83,1,83,1,83,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,
        87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1090,8,87,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,
        89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
        90,3,90,1121,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1130,8,
        91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,
        93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,
        95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,
        98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,
        100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1190,8,101,1,
        101,0,0,102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,0,24,2,0,198,201,219,220,
        2,0,51,51,142,142,1,0,213,214,2,0,232,232,235,235,9,0,15,15,25,28,
        73,74,79,81,112,115,119,120,135,135,157,157,171,171,9,0,10,10,14,
        14,16,16,32,32,82,82,85,85,130,132,136,136,164,166,21,0,1,2,6,6,
        8,9,21,23,30,31,39,39,41,41,49,49,54,54,77,78,86,86,101,101,105,
        106,108,109,117,117,124,124,126,126,128,129,133,133,138,138,143,
        143,2,0,45,45,83,83,6,0,34,35,91,91,121,121,140,141,160,162,170,
        170,3,0,58,58,100,100,144,153,2,0,3,3,42,42,2,0,62,62,75,75,2,0,
        68,68,90,90,1,0,202,203,3,0,192,193,208,208,218,218,3,0,13,13,196,
        197,213,215,3,0,3,3,42,42,208,208,2,0,5,5,40,40,2,0,63,63,71,71,
        2,0,52,52,72,72,1,0,219,220,4,0,33,33,64,64,73,73,115,115,2,0,73,
        73,115,115,3,0,195,196,215,215,221,227,1300,0,204,1,0,0,0,2,238,
        1,0,0,0,4,240,1,0,0,0,6,242,1,0,0,0,8,244,1,0,0,0,10,247,1,0,0,0,
        12,251,1,0,0,0,14,253,1,0,0,0,16,255,1,0,0,0,18,257,1,0,0,0,20,259,
        1,0,0,0,22,261,1,0,0,0,24,263,1,0,0,0,26,265,1,0,0,0,28,267,1,0,
        0,0,30,276,1,0,0,0,32,284,1,0,0,0,34,286,1,0,0,0,36,324,1,0,0,0,
        38,328,1,0,0,0,40,347,1,0,0,0,42,349,1,0,0,0,44,365,1,0,0,0,46,369,
        1,0,0,0,48,379,1,0,0,0,50,390,1,0,0,0,52,400,1,0,0,0,54,422,1,0,
        0,0,56,432,1,0,0,0,58,434,1,0,0,0,60,443,1,0,0,0,62,447,1,0,0,0,
        64,465,1,0,0,0,66,473,1,0,0,0,68,484,1,0,0,0,70,489,1,0,0,0,72,494,
        1,0,0,0,74,502,1,0,0,0,76,511,1,0,0,0,78,571,1,0,0,0,80,573,1,0,
        0,0,82,590,1,0,0,0,84,595,1,0,0,0,86,618,1,0,0,0,88,620,1,0,0,0,
        90,628,1,0,0,0,92,630,1,0,0,0,94,638,1,0,0,0,96,649,1,0,0,0,98,656,
        1,0,0,0,100,669,1,0,0,0,102,671,1,0,0,0,104,673,1,0,0,0,106,676,
        1,0,0,0,108,678,1,0,0,0,110,702,1,0,0,0,112,704,1,0,0,0,114,709,
        1,0,0,0,116,711,1,0,0,0,118,720,1,0,0,0,120,751,1,0,0,0,122,759,
        1,0,0,0,124,765,1,0,0,0,126,768,1,0,0,0,128,799,1,0,0,0,130,801,
        1,0,0,0,132,809,1,0,0,0,134,831,1,0,0,0,136,840,1,0,0,0,138,844,
        1,0,0,0,140,874,1,0,0,0,142,876,1,0,0,0,144,878,1,0,0,0,146,892,
        1,0,0,0,148,901,1,0,0,0,150,915,1,0,0,0,152,936,1,0,0,0,154,938,
        1,0,0,0,156,949,1,0,0,0,158,953,1,0,0,0,160,962,1,0,0,0,162,965,
        1,0,0,0,164,1049,1,0,0,0,166,1051,1,0,0,0,168,1054,1,0,0,0,170,1061,
        1,0,0,0,172,1068,1,0,0,0,174,1089,1,0,0,0,176,1091,1,0,0,0,178,1102,
        1,0,0,0,180,1120,1,0,0,0,182,1129,1,0,0,0,184,1131,1,0,0,0,186,1142,
        1,0,0,0,188,1147,1,0,0,0,190,1152,1,0,0,0,192,1157,1,0,0,0,194,1162,
        1,0,0,0,196,1167,1,0,0,0,198,1172,1,0,0,0,200,1177,1,0,0,0,202,1189,
        1,0,0,0,204,205,7,0,0,0,205,1,1,0,0,0,206,210,5,13,0,0,207,208,5,
        210,0,0,208,209,5,232,0,0,209,211,5,209,0,0,210,207,1,0,0,0,210,
        211,1,0,0,0,211,239,1,0,0,0,212,216,5,24,0,0,213,214,5,210,0,0,214,
        215,5,232,0,0,215,217,5,209,0,0,216,213,1,0,0,0,216,217,1,0,0,0,
        217,239,1,0,0,0,218,239,5,35,0,0,219,239,5,36,0,0,220,239,5,140,
        0,0,221,239,5,141,0,0,222,239,5,66,0,0,223,231,5,38,0,0,224,225,
        5,210,0,0,225,228,5,232,0,0,226,227,5,207,0,0,227,229,5,232,0,0,
        228,226,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,232,5,209,0,
        0,231,224,1,0,0,0,231,232,1,0,0,0,232,239,1,0,0,0,233,239,5,65,0,
        0,234,239,5,12,0,0,235,239,5,53,0,0,236,239,5,110,0,0,237,239,5,
        43,0,0,238,206,1,0,0,0,238,212,1,0,0,0,238,218,1,0,0,0,238,219,1,
        0,0,0,238,220,1,0,0,0,238,221,1,0,0,0,238,222,1,0,0,0,238,223,1,
        0,0,0,238,233,1,0,0,0,238,234,1,0,0,0,238,235,1,0,0,0,238,236,1,
        0,0,0,238,237,1,0,0,0,239,3,1,0,0,0,240,241,5,234,0,0,241,5,1,0,
        0,0,242,243,7,1,0,0,243,7,1,0,0,0,244,245,5,233,0,0,245,9,1,0,0,
        0,246,248,7,2,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,
        0,249,250,7,3,0,0,250,11,1,0,0,0,251,252,5,237,0,0,252,13,1,0,0,
        0,253,254,7,4,0,0,254,15,1,0,0,0,255,256,7,5,0,0,256,17,1,0,0,0,
        257,258,7,6,0,0,258,19,1,0,0,0,259,260,7,7,0,0,260,21,1,0,0,0,261,
        262,7,8,0,0,262,23,1,0,0,0,263,264,5,183,0,0,264,25,1,0,0,0,265,
        266,7,9,0,0,266,27,1,0,0,0,267,268,5,182,0,0,268,29,1,0,0,0,269,
        277,3,18,9,0,270,277,3,14,7,0,271,277,3,22,11,0,272,277,3,20,10,
        0,273,277,3,28,14,0,274,277,3,24,12,0,275,277,3,26,13,0,276,269,
        1,0,0,0,276,270,1,0,0,0,276,271,1,0,0,0,276,272,1,0,0,0,276,273,
        1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,31,1,0,0,0,278,285,3,
        12,6,0,279,285,3,10,5,0,280,285,3,8,4,0,281,285,3,6,3,0,282,285,
        3,4,2,0,283,285,5,92,0,0,284,278,1,0,0,0,284,279,1,0,0,0,284,280,
        1,0,0,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,33,1,
        0,0,0,286,288,5,122,0,0,287,289,7,10,0,0,288,287,1,0,0,0,288,289,
        1,0,0,0,289,290,1,0,0,0,290,305,3,128,64,0,291,292,5,57,0,0,292,
        294,3,154,77,0,293,295,3,112,56,0,294,293,1,0,0,0,294,295,1,0,0,
        0,295,297,1,0,0,0,296,298,3,160,80,0,297,296,1,0,0,0,297,298,1,0,
        0,0,298,300,1,0,0,0,299,301,3,80,40,0,300,299,1,0,0,0,300,301,1,
        0,0,0,301,303,1,0,0,0,302,304,3,84,42,0,303,302,1,0,0,0,303,304,
        1,0,0,0,304,306,1,0,0,0,305,291,1,0,0,0,305,306,1,0,0,0,306,308,
        1,0,0,0,307,309,3,108,54,0,308,307,1,0,0,0,308,309,1,0,0,0,309,311,
        1,0,0,0,310,312,3,100,50,0,311,310,1,0,0,0,311,312,1,0,0,0,312,314,
        1,0,0,0,313,315,3,104,52,0,314,313,1,0,0,0,314,315,1,0,0,0,315,318,
        1,0,0,0,316,317,5,55,0,0,317,319,5,156,0,0,318,316,1,0,0,0,318,319,
        1,0,0,0,319,321,1,0,0,0,320,322,5,204,0,0,321,320,1,0,0,0,321,322,
        1,0,0,0,322,35,1,0,0,0,323,325,5,7,0,0,324,323,1,0,0,0,324,325,1,
        0,0,0,325,326,1,0,0,0,326,327,5,238,0,0,327,37,1,0,0,0,328,331,3,
        68,34,0,329,330,5,216,0,0,330,332,3,68,34,0,331,329,1,0,0,0,331,
        332,1,0,0,0,332,39,1,0,0,0,333,340,3,122,61,0,334,336,3,0,0,0,335,
        337,5,4,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,
        339,3,122,61,0,339,341,1,0,0,0,340,334,1,0,0,0,340,341,1,0,0,0,341,
        348,1,0,0,0,342,344,5,89,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,
        345,1,0,0,0,345,346,5,48,0,0,346,348,3,138,69,0,347,333,1,0,0,0,
        347,343,1,0,0,0,348,41,1,0,0,0,349,352,5,19,0,0,350,353,3,44,22,
        0,351,353,3,46,23,0,352,350,1,0,0,0,352,351,1,0,0,0,353,356,1,0,
        0,0,354,355,5,44,0,0,355,357,3,38,19,0,356,354,1,0,0,0,356,357,1,
        0,0,0,357,358,1,0,0,0,358,359,5,46,0,0,359,43,1,0,0,0,360,361,5,
        167,0,0,361,362,3,64,32,0,362,363,5,139,0,0,363,364,3,38,19,0,364,
        366,1,0,0,0,365,360,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,
        368,1,0,0,0,368,45,1,0,0,0,369,375,3,38,19,0,370,371,5,167,0,0,371,
        372,3,38,19,0,372,373,5,139,0,0,373,374,3,38,19,0,374,376,1,0,0,
        0,375,370,1,0,0,0,376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,
        0,378,47,1,0,0,0,379,380,5,210,0,0,380,385,3,52,26,0,381,382,5,207,
        0,0,382,384,3,52,26,0,383,381,1,0,0,0,384,387,1,0,0,0,385,383,1,
        0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,389,5,
        209,0,0,389,49,1,0,0,0,390,391,5,238,0,0,391,51,1,0,0,0,392,393,
        3,126,63,0,393,394,5,206,0,0,394,396,1,0,0,0,395,392,1,0,0,0,395,
        396,1,0,0,0,396,397,1,0,0,0,397,398,3,142,71,0,398,399,5,206,0,0,
        399,401,1,0,0,0,400,395,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,
        402,404,3,50,25,0,403,405,3,136,68,0,404,403,1,0,0,0,404,405,1,0,
        0,0,405,53,1,0,0,0,406,407,3,156,78,0,407,408,5,206,0,0,408,409,
        5,208,0,0,409,423,1,0,0,0,410,414,3,38,19,0,411,414,3,164,82,0,412,
        414,3,56,28,0,413,410,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,
        417,1,0,0,0,415,416,7,11,0,0,416,418,5,237,0,0,417,415,1,0,0,0,417,
        418,1,0,0,0,418,420,1,0,0,0,419,421,3,36,18,0,420,419,1,0,0,0,420,
        421,1,0,0,0,421,423,1,0,0,0,422,406,1,0,0,0,422,413,1,0,0,0,423,
        55,1,0,0,0,424,433,3,188,94,0,425,433,3,186,93,0,426,433,3,192,96,
        0,427,433,3,190,95,0,428,433,3,196,98,0,429,433,3,194,97,0,430,433,
        3,200,100,0,431,433,3,198,99,0,432,424,1,0,0,0,432,425,1,0,0,0,432,
        426,1,0,0,0,432,427,1,0,0,0,432,428,1,0,0,0,432,429,1,0,0,0,432,
        430,1,0,0,0,432,431,1,0,0,0,433,57,1,0,0,0,434,439,3,60,30,0,435,
        436,5,195,0,0,436,438,3,60,30,0,437,435,1,0,0,0,438,441,1,0,0,0,
        439,437,1,0,0,0,439,440,1,0,0,0,440,59,1,0,0,0,441,439,1,0,0,0,442,
        444,5,89,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
        446,3,62,31,0,446,61,1,0,0,0,447,463,3,40,20,0,448,450,5,69,0,0,
        449,451,5,89,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,456,1,0,0,0,
        452,457,3,6,3,0,453,457,5,92,0,0,454,455,5,42,0,0,455,457,5,57,0,
        0,456,452,1,0,0,0,456,453,1,0,0,0,456,454,1,0,0,0,457,459,1,0,0,
        0,458,448,1,0,0,0,458,459,1,0,0,0,459,464,1,0,0,0,460,462,7,12,0,
        0,461,460,1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,458,1,0,0,
        0,463,461,1,0,0,0,464,63,1,0,0,0,465,470,3,58,29,0,466,467,5,194,
        0,0,467,469,3,58,29,0,468,466,1,0,0,0,469,472,1,0,0,0,470,468,1,
        0,0,0,470,471,1,0,0,0,471,65,1,0,0,0,472,470,1,0,0,0,473,474,5,210,
        0,0,474,479,3,64,32,0,475,476,5,207,0,0,476,478,3,64,32,0,477,475,
        1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,
        1,0,0,0,481,479,1,0,0,0,482,483,5,209,0,0,483,67,1,0,0,0,484,487,
        3,70,35,0,485,486,5,217,0,0,486,488,3,70,35,0,487,485,1,0,0,0,487,
        488,1,0,0,0,488,69,1,0,0,0,489,492,3,72,36,0,490,491,7,13,0,0,491,
        493,3,72,36,0,492,490,1,0,0,0,492,493,1,0,0,0,493,71,1,0,0,0,494,
        499,3,74,37,0,495,496,7,2,0,0,496,498,3,74,37,0,497,495,1,0,0,0,
        498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,73,1,0,0,0,501,
        499,1,0,0,0,502,507,3,76,38,0,503,504,7,14,0,0,504,506,3,76,38,0,
        505,503,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,
        508,75,1,0,0,0,509,507,1,0,0,0,510,512,7,15,0,0,511,510,1,0,0,0,
        511,512,1,0,0,0,512,513,1,0,0,0,513,515,3,134,67,0,514,516,5,89,
        0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,519,1,0,0,0,517,518,7,2,
        0,0,518,520,3,96,48,0,519,517,1,0,0,0,519,520,1,0,0,0,520,77,1,0,
        0,0,521,534,3,30,15,0,522,531,5,210,0,0,523,528,3,64,32,0,524,525,
        5,207,0,0,525,527,3,64,32,0,526,524,1,0,0,0,527,530,1,0,0,0,528,
        526,1,0,0,0,528,529,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,531,
        523,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,5,209,0,0,534,
        522,1,0,0,0,534,535,1,0,0,0,535,572,1,0,0,0,536,537,5,20,0,0,537,
        538,5,210,0,0,538,539,3,64,32,0,539,540,5,7,0,0,540,541,3,2,1,0,
        541,542,5,209,0,0,542,572,1,0,0,0,543,544,5,29,0,0,544,545,5,210,
        0,0,545,546,5,237,0,0,546,547,5,207,0,0,547,548,5,237,0,0,548,549,
        5,207,0,0,549,550,5,237,0,0,550,572,5,209,0,0,551,552,5,104,0,0,
        552,553,5,210,0,0,553,554,3,64,32,0,554,555,5,67,0,0,555,556,3,64,
        32,0,556,557,5,209,0,0,557,572,1,0,0,0,558,559,3,16,8,0,559,561,
        5,210,0,0,560,562,7,16,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,567,
        1,0,0,0,563,566,3,38,19,0,564,566,3,164,82,0,565,563,1,0,0,0,565,
        564,1,0,0,0,566,568,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,
        569,1,0,0,0,569,570,5,209,0,0,570,572,1,0,0,0,571,521,1,0,0,0,571,
        536,1,0,0,0,571,543,1,0,0,0,571,551,1,0,0,0,571,558,1,0,0,0,572,
        79,1,0,0,0,573,574,5,59,0,0,574,575,5,18,0,0,575,580,3,82,41,0,576,
        577,5,207,0,0,577,579,3,82,41,0,578,576,1,0,0,0,579,582,1,0,0,0,
        580,578,1,0,0,0,580,581,1,0,0,0,581,585,1,0,0,0,582,580,1,0,0,0,
        583,584,5,169,0,0,584,586,5,116,0,0,585,583,1,0,0,0,585,586,1,0,
        0,0,586,81,1,0,0,0,587,591,3,52,26,0,588,591,5,232,0,0,589,591,3,
        38,19,0,590,587,1,0,0,0,590,588,1,0,0,0,590,589,1,0,0,0,591,593,
        1,0,0,0,592,594,7,17,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,83,
        1,0,0,0,595,596,5,60,0,0,596,597,3,64,32,0,597,85,1,0,0,0,598,599,
        5,158,0,0,599,600,3,94,47,0,600,602,5,210,0,0,601,603,3,92,46,0,
        602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,209,0,
        0,605,619,1,0,0,0,606,607,5,61,0,0,607,608,3,94,47,0,608,609,5,210,
        0,0,609,610,3,92,46,0,610,611,5,209,0,0,611,619,1,0,0,0,612,613,
        5,56,0,0,613,614,3,94,47,0,614,615,5,210,0,0,615,616,3,92,46,0,616,
        617,5,209,0,0,617,619,1,0,0,0,618,598,1,0,0,0,618,606,1,0,0,0,618,
        612,1,0,0,0,619,87,1,0,0,0,620,625,3,86,43,0,621,622,5,207,0,0,622,
        624,3,86,43,0,623,621,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,
        626,1,0,0,0,626,89,1,0,0,0,627,625,1,0,0,0,628,629,5,238,0,0,629,
        91,1,0,0,0,630,635,3,90,45,0,631,632,5,207,0,0,632,634,3,90,45,0,
        633,631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,
        636,93,1,0,0,0,637,635,1,0,0,0,638,647,7,18,0,0,639,645,5,55,0,0,
        640,646,5,70,0,0,641,642,5,97,0,0,642,646,5,18,0,0,643,644,5,59,
        0,0,644,646,5,18,0,0,645,640,1,0,0,0,645,641,1,0,0,0,645,643,1,0,
        0,0,646,648,1,0,0,0,647,639,1,0,0,0,647,648,1,0,0,0,648,95,1,0,0,
        0,649,650,5,66,0,0,650,651,3,12,6,0,651,97,1,0,0,0,652,653,5,96,
        0,0,653,657,3,64,32,0,654,655,5,159,0,0,655,657,3,48,24,0,656,652,
        1,0,0,0,656,654,1,0,0,0,657,99,1,0,0,0,658,659,5,76,0,0,659,662,
        3,106,53,0,660,661,5,94,0,0,661,663,3,102,51,0,662,660,1,0,0,0,662,
        663,1,0,0,0,663,670,1,0,0,0,664,665,5,94,0,0,665,666,3,102,51,0,
        666,667,5,76,0,0,667,668,3,106,53,0,668,670,1,0,0,0,669,658,1,0,
        0,0,669,664,1,0,0,0,670,101,1,0,0,0,671,672,5,232,0,0,672,103,1,
        0,0,0,673,674,5,94,0,0,674,675,3,102,51,0,675,105,1,0,0,0,676,677,
        5,232,0,0,677,107,1,0,0,0,678,679,5,97,0,0,679,680,5,18,0,0,680,
        685,3,110,55,0,681,682,5,207,0,0,682,684,3,110,55,0,683,681,1,0,
        0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,109,1,0,
        0,0,687,685,1,0,0,0,688,696,3,82,41,0,689,691,7,17,0,0,690,689,1,
        0,0,0,690,691,1,0,0,0,691,697,1,0,0,0,692,693,5,93,0,0,693,695,7,
        19,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,697,1,0,0,0,696,690,1,
        0,0,0,696,694,1,0,0,0,697,703,1,0,0,0,698,699,3,82,41,0,699,700,
        5,159,0,0,700,701,7,20,0,0,701,703,1,0,0,0,702,688,1,0,0,0,702,698,
        1,0,0,0,703,111,1,0,0,0,704,705,5,99,0,0,705,706,5,210,0,0,706,707,
        3,116,58,0,707,708,5,209,0,0,708,113,1,0,0,0,709,710,5,238,0,0,710,
        115,1,0,0,0,711,716,3,114,57,0,712,713,5,207,0,0,713,715,3,114,57,
        0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,
        0,717,117,1,0,0,0,718,716,1,0,0,0,719,721,5,89,0,0,720,719,1,0,0,
        0,720,721,1,0,0,0,721,749,1,0,0,0,722,725,5,67,0,0,723,726,3,138,
        69,0,724,726,3,66,33,0,725,723,1,0,0,0,725,724,1,0,0,0,726,750,1,
        0,0,0,727,728,7,11,0,0,728,731,3,134,67,0,729,730,5,47,0,0,730,732,
        3,134,67,0,731,729,1,0,0,0,731,732,1,0,0,0,732,750,1,0,0,0,733,736,
        5,111,0,0,734,737,3,38,19,0,735,737,3,164,82,0,736,734,1,0,0,0,736,
        735,1,0,0,0,737,750,1,0,0,0,738,740,5,11,0,0,739,741,5,137,0,0,740,
        739,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,745,3,38,19,0,743,
        745,3,164,82,0,744,742,1,0,0,0,744,743,1,0,0,0,745,746,1,0,0,0,746,
        747,5,195,0,0,747,748,3,122,61,0,748,750,1,0,0,0,749,722,1,0,0,0,
        749,727,1,0,0,0,749,733,1,0,0,0,749,738,1,0,0,0,750,119,1,0,0,0,
        751,752,5,127,0,0,752,755,7,11,0,0,753,756,3,38,19,0,754,756,3,164,
        82,0,755,753,1,0,0,0,755,754,1,0,0,0,756,121,1,0,0,0,757,760,3,38,
        19,0,758,760,3,164,82,0,759,757,1,0,0,0,759,758,1,0,0,0,760,763,
        1,0,0,0,761,764,3,118,59,0,762,764,3,120,60,0,763,761,1,0,0,0,763,
        762,1,0,0,0,763,764,1,0,0,0,764,123,1,0,0,0,765,766,3,132,66,0,766,
        767,5,204,0,0,767,125,1,0,0,0,768,769,5,238,0,0,769,127,1,0,0,0,
        770,775,3,54,27,0,771,772,5,207,0,0,772,774,3,54,27,0,773,771,1,
        0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,800,1,
        0,0,0,777,775,1,0,0,0,778,788,5,208,0,0,779,780,5,207,0,0,780,785,
        3,54,27,0,781,782,5,207,0,0,782,784,3,54,27,0,783,781,1,0,0,0,784,
        787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,789,1,0,0,0,787,
        785,1,0,0,0,788,779,1,0,0,0,788,789,1,0,0,0,789,800,1,0,0,0,790,
        791,5,96,0,0,791,796,3,130,65,0,792,793,5,207,0,0,793,795,3,54,27,
        0,794,792,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,
        0,797,800,1,0,0,0,798,796,1,0,0,0,799,770,1,0,0,0,799,778,1,0,0,
        0,799,790,1,0,0,0,800,129,1,0,0,0,801,806,3,54,27,0,802,803,5,207,
        0,0,803,805,3,54,27,0,804,802,1,0,0,0,805,808,1,0,0,0,806,804,1,
        0,0,0,806,807,1,0,0,0,807,131,1,0,0,0,808,806,1,0,0,0,809,817,3,
        34,17,0,810,812,5,154,0,0,811,813,5,3,0,0,812,811,1,0,0,0,812,813,
        1,0,0,0,813,814,1,0,0,0,814,816,3,34,17,0,815,810,1,0,0,0,816,819,
        1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,133,1,0,0,0,819,817,
        1,0,0,0,820,832,3,32,16,0,821,832,3,66,33,0,822,832,3,52,26,0,823,
        832,3,78,39,0,824,825,5,118,0,0,825,832,3,66,33,0,826,832,3,138,
        69,0,827,828,5,48,0,0,828,832,3,138,69,0,829,832,3,96,48,0,830,832,
        3,42,21,0,831,820,1,0,0,0,831,821,1,0,0,0,831,822,1,0,0,0,831,823,
        1,0,0,0,831,824,1,0,0,0,831,826,1,0,0,0,831,827,1,0,0,0,831,829,
        1,0,0,0,831,830,1,0,0,0,832,135,1,0,0,0,833,834,5,212,0,0,834,837,
        5,232,0,0,835,836,5,205,0,0,836,838,5,232,0,0,837,835,1,0,0,0,837,
        838,1,0,0,0,838,839,1,0,0,0,839,841,5,211,0,0,840,833,1,0,0,0,841,
        842,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,137,1,0,0,0,844,
        845,5,210,0,0,845,846,3,132,66,0,846,847,5,209,0,0,847,139,1,0,0,
        0,848,850,3,156,78,0,849,851,3,112,56,0,850,849,1,0,0,0,850,851,
        1,0,0,0,851,853,1,0,0,0,852,854,3,36,18,0,853,852,1,0,0,0,853,854,
        1,0,0,0,854,856,1,0,0,0,855,857,3,88,44,0,856,855,1,0,0,0,856,857,
        1,0,0,0,857,875,1,0,0,0,858,859,3,138,69,0,859,860,3,36,18,0,860,
        875,1,0,0,0,861,862,5,210,0,0,862,863,3,154,77,0,863,864,5,209,0,
        0,864,875,1,0,0,0,865,866,5,95,0,0,866,867,3,152,76,0,867,868,5,
        73,0,0,868,869,5,98,0,0,869,870,5,70,0,0,870,871,3,152,76,0,871,
        872,5,96,0,0,872,873,3,64,32,0,873,875,1,0,0,0,874,848,1,0,0,0,874,
        858,1,0,0,0,874,861,1,0,0,0,874,865,1,0,0,0,875,141,1,0,0,0,876,
        877,5,238,0,0,877,143,1,0,0,0,878,889,3,146,73,0,879,881,7,21,0,
        0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,883,5,70,0,
        0,883,885,3,140,70,0,884,886,3,98,49,0,885,884,1,0,0,0,885,886,1,
        0,0,0,886,888,1,0,0,0,887,880,1,0,0,0,888,891,1,0,0,0,889,887,1,
        0,0,0,889,890,1,0,0,0,890,145,1,0,0,0,891,889,1,0,0,0,892,899,3,
        148,74,0,893,894,5,134,0,0,894,897,3,140,70,0,895,896,5,96,0,0,896,
        898,3,64,32,0,897,895,1,0,0,0,897,898,1,0,0,0,898,900,1,0,0,0,899,
        893,1,0,0,0,899,900,1,0,0,0,900,147,1,0,0,0,901,912,3,150,75,0,902,
        904,7,22,0,0,903,905,5,98,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
        906,1,0,0,0,906,907,5,70,0,0,907,908,3,150,75,0,908,909,3,98,49,
        0,909,911,1,0,0,0,910,902,1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,
        0,912,913,1,0,0,0,913,149,1,0,0,0,914,912,1,0,0,0,915,925,3,140,
        70,0,916,921,5,88,0,0,917,919,7,22,0,0,918,920,5,98,0,0,919,918,
        1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,917,1,0,0,0,921,922,
        1,0,0,0,922,923,1,0,0,0,923,924,5,70,0,0,924,926,3,140,70,0,925,
        916,1,0,0,0,925,926,1,0,0,0,926,151,1,0,0,0,927,937,3,144,72,0,928,
        929,5,210,0,0,929,930,3,158,79,0,930,931,5,209,0,0,931,932,1,0,0,
        0,932,934,3,36,18,0,933,935,3,48,24,0,934,933,1,0,0,0,934,935,1,
        0,0,0,935,937,1,0,0,0,936,927,1,0,0,0,936,928,1,0,0,0,937,153,1,
        0,0,0,938,943,3,152,76,0,939,940,5,207,0,0,940,942,3,152,76,0,941,
        939,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,
        155,1,0,0,0,945,943,1,0,0,0,946,947,3,126,63,0,947,948,5,206,0,0,
        948,950,1,0,0,0,949,946,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,
        951,952,3,142,71,0,952,157,1,0,0,0,953,954,5,163,0,0,954,959,3,66,
        33,0,955,956,5,207,0,0,956,958,3,66,33,0,957,955,1,0,0,0,958,961,
        1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,159,1,0,0,0,961,959,
        1,0,0,0,962,963,5,168,0,0,963,964,3,64,32,0,964,161,1,0,0,0,965,
        966,7,23,0,0,966,163,1,0,0,0,967,968,3,166,83,0,968,969,5,222,0,
        0,969,970,3,168,84,0,970,1050,1,0,0,0,971,972,3,168,84,0,972,973,
        5,221,0,0,973,974,3,166,83,0,974,1050,1,0,0,0,975,978,3,202,101,
        0,976,978,3,170,85,0,977,975,1,0,0,0,977,976,1,0,0,0,978,1050,1,
        0,0,0,979,982,3,170,85,0,980,982,3,134,67,0,981,979,1,0,0,0,981,
        980,1,0,0,0,982,983,1,0,0,0,983,984,3,162,81,0,984,985,3,202,101,
        0,985,1050,1,0,0,0,986,987,3,202,101,0,987,988,5,198,0,0,988,989,
        3,202,101,0,989,1050,1,0,0,0,990,991,3,202,101,0,991,992,3,162,81,
        0,992,993,3,202,101,0,993,1050,1,0,0,0,994,1001,3,174,87,0,995,996,
        3,134,67,0,996,997,5,228,0,0,997,998,3,174,87,0,998,1001,1,0,0,0,
        999,1001,3,134,67,0,1000,994,1,0,0,0,1000,995,1,0,0,0,1000,999,1,
        0,0,0,1001,1050,1,0,0,0,1002,1006,3,170,85,0,1003,1006,3,172,86,
        0,1004,1006,3,134,67,0,1005,1002,1,0,0,0,1005,1003,1,0,0,0,1005,
        1004,1,0,0,0,1006,1007,1,0,0,0,1007,1011,5,229,0,0,1008,1012,3,170,
        85,0,1009,1012,3,172,86,0,1010,1012,3,134,67,0,1011,1008,1,0,0,0,
        1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,1050,1,0,0,0,1013,1018,
        5,230,0,0,1014,1019,3,172,86,0,1015,1019,3,178,89,0,1016,1019,3,
        180,90,0,1017,1019,3,134,67,0,1018,1014,1,0,0,0,1018,1015,1,0,0,
        0,1018,1016,1,0,0,0,1018,1017,1,0,0,0,1019,1050,1,0,0,0,1020,1024,
        5,231,0,0,1021,1025,3,172,86,0,1022,1025,3,176,88,0,1023,1025,3,
        134,67,0,1024,1021,1,0,0,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,
        1050,1,0,0,0,1026,1030,5,214,0,0,1027,1031,3,174,87,0,1028,1031,
        3,182,91,0,1029,1031,3,134,67,0,1030,1027,1,0,0,0,1030,1028,1,0,
        0,0,1030,1029,1,0,0,0,1031,1050,1,0,0,0,1032,1040,3,170,85,0,1033,
        1040,3,172,86,0,1034,1040,3,174,87,0,1035,1040,3,176,88,0,1036,1040,
        3,180,90,0,1037,1040,3,182,91,0,1038,1040,3,134,67,0,1039,1032,1,
        0,0,0,1039,1033,1,0,0,0,1039,1034,1,0,0,0,1039,1035,1,0,0,0,1039,
        1036,1,0,0,0,1039,1037,1,0,0,0,1039,1038,1,0,0,0,1040,1045,1,0,0,
        0,1041,1043,7,2,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,
        1,0,0,0,1044,1046,3,184,92,0,1045,1042,1,0,0,0,1046,1047,1,0,0,0,
        1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,1049,967,1,
        0,0,0,1049,971,1,0,0,0,1049,977,1,0,0,0,1049,981,1,0,0,0,1049,986,
        1,0,0,0,1049,990,1,0,0,0,1049,1000,1,0,0,0,1049,1005,1,0,0,0,1049,
        1013,1,0,0,0,1049,1020,1,0,0,0,1049,1026,1,0,0,0,1049,1039,1,0,0,
        0,1050,165,1,0,0,0,1051,1052,5,103,0,0,1052,1053,3,12,6,0,1053,167,
        1,0,0,0,1054,1055,5,102,0,0,1055,1056,5,210,0,0,1056,1057,3,38,19,
        0,1057,1058,5,207,0,0,1058,1059,3,38,19,0,1059,1060,5,209,0,0,1060,
        169,1,0,0,0,1061,1062,5,174,0,0,1062,1063,5,210,0,0,1063,1064,3,
        38,19,0,1064,1065,5,207,0,0,1065,1066,3,38,19,0,1066,1067,5,209,
        0,0,1067,171,1,0,0,0,1068,1069,5,175,0,0,1069,1070,5,210,0,0,1070,
        1071,3,170,85,0,1071,1072,5,207,0,0,1072,1073,3,38,19,0,1073,1074,
        5,209,0,0,1074,173,1,0,0,0,1075,1076,5,176,0,0,1076,1077,5,210,0,
        0,1077,1078,3,170,85,0,1078,1079,5,207,0,0,1079,1080,3,170,85,0,
        1080,1081,5,209,0,0,1081,1090,1,0,0,0,1082,1083,5,176,0,0,1083,1084,
        5,210,0,0,1084,1085,3,184,92,0,1085,1086,5,207,0,0,1086,1087,3,38,
        19,0,1087,1088,5,209,0,0,1088,1090,1,0,0,0,1089,1075,1,0,0,0,1089,
        1082,1,0,0,0,1090,175,1,0,0,0,1091,1092,5,177,0,0,1092,1093,5,210,
        0,0,1093,1094,3,170,85,0,1094,1095,5,207,0,0,1095,1096,3,38,19,0,
        1096,1097,5,207,0,0,1097,1098,3,38,19,0,1098,1099,5,207,0,0,1099,
        1100,3,38,19,0,1100,1101,5,209,0,0,1101,177,1,0,0,0,1102,1103,5,
        180,0,0,1103,1104,5,210,0,0,1104,1105,3,170,85,0,1105,1106,5,207,
        0,0,1106,1107,3,170,85,0,1107,1108,5,209,0,0,1108,179,1,0,0,0,1109,
        1110,5,178,0,0,1110,1121,5,237,0,0,1111,1112,5,178,0,0,1112,1113,
        5,210,0,0,1113,1114,3,52,26,0,1114,1115,5,209,0,0,1115,1121,1,0,
        0,0,1116,1117,5,178,0,0,1117,1118,5,210,0,0,1118,1119,5,237,0,0,
        1119,1121,5,209,0,0,1120,1109,1,0,0,0,1120,1111,1,0,0,0,1120,1116,
        1,0,0,0,1121,181,1,0,0,0,1122,1123,5,179,0,0,1123,1130,5,237,0,0,
        1124,1125,5,179,0,0,1125,1126,5,210,0,0,1126,1127,3,52,26,0,1127,
        1128,5,209,0,0,1128,1130,1,0,0,0,1129,1122,1,0,0,0,1129,1124,1,0,
        0,0,1130,183,1,0,0,0,1131,1132,5,181,0,0,1132,1133,5,210,0,0,1133,
        1134,3,38,19,0,1134,1135,5,207,0,0,1135,1136,3,38,19,0,1136,1137,
        5,207,0,0,1137,1138,3,38,19,0,1138,1139,5,207,0,0,1139,1140,5,236,
        0,0,1140,1141,5,209,0,0,1141,185,1,0,0,0,1142,1143,5,184,0,0,1143,
        1144,5,210,0,0,1144,1145,3,170,85,0,1145,1146,5,209,0,0,1146,187,
        1,0,0,0,1147,1148,5,188,0,0,1148,1149,5,210,0,0,1149,1150,3,170,
        85,0,1150,1151,5,209,0,0,1151,189,1,0,0,0,1152,1153,5,185,0,0,1153,
        1154,5,210,0,0,1154,1155,3,178,89,0,1155,1156,5,209,0,0,1156,191,
        1,0,0,0,1157,1158,5,189,0,0,1158,1159,5,210,0,0,1159,1160,3,178,
        89,0,1160,1161,5,209,0,0,1161,193,1,0,0,0,1162,1163,5,186,0,0,1163,
        1164,5,210,0,0,1164,1165,3,172,86,0,1165,1166,5,209,0,0,1166,195,
        1,0,0,0,1167,1168,5,190,0,0,1168,1169,5,210,0,0,1169,1170,3,172,
        86,0,1170,1171,5,209,0,0,1171,197,1,0,0,0,1172,1173,5,187,0,0,1173,
        1174,5,210,0,0,1174,1175,3,180,90,0,1175,1176,5,209,0,0,1176,199,
        1,0,0,0,1177,1178,5,191,0,0,1178,1179,5,210,0,0,1179,1180,3,180,
        90,0,1180,1181,5,209,0,0,1181,201,1,0,0,0,1182,1190,3,172,86,0,1183,
        1190,3,174,87,0,1184,1190,3,176,88,0,1185,1190,3,178,89,0,1186,1190,
        3,180,90,0,1187,1190,3,182,91,0,1188,1190,3,134,67,0,1189,1182,1,
        0,0,0,1189,1183,1,0,0,0,1189,1184,1,0,0,0,1189,1185,1,0,0,0,1189,
        1186,1,0,0,0,1189,1187,1,0,0,0,1189,1188,1,0,0,0,1190,203,1,0,0,
        0,136,210,216,228,231,238,247,276,284,288,294,297,300,303,305,308,
        311,314,318,321,324,331,336,340,343,347,352,356,367,377,385,395,
        400,404,413,417,420,422,432,439,443,450,456,458,461,463,470,479,
        487,492,499,507,511,515,519,528,531,534,561,565,567,571,580,585,
        590,593,602,618,625,635,645,647,656,662,669,685,690,694,696,702,
        716,720,725,731,736,740,744,749,755,759,763,775,785,788,796,799,
        806,812,817,831,837,842,850,853,856,874,880,885,889,897,899,904,
        912,919,921,925,934,936,943,949,959,977,981,1000,1005,1011,1018,
        1024,1030,1039,1042,1047,1049,1089,1120,1129,1189
    ]

class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@'", "'!!'", "<INVALID>", "<INVALID>", "'<='", "'>='", 
                     "'<<'", "'>>'", "';'", "':'", "'.'", "','", "'*'", 
                     "')'", "'('", "']'", "'['", "'+'", "'-'", "'~'", "'|'", 
                     "'&'", "'^'", "'>'", "'<'", "'<@'", "'@>'", "'!@'", 
                     "'!<@'", "'!~'", "'!@>'", "'!&&'", "'#'", "'<->'", 
                     "'@-@'", "'@@'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ALL", "ANY", "ASC", "ASIN", 
                      "AS_SYM", "ATAN", "ATAN2", "AVG", "BETWEEN", "BIGINT", 
                      "BINARY", "BIT_AND", "BIT_LENGTH", "BIT_OR", "BOOLEAN_SYM", 
                      "BY_SYM", "CASE_SYM", "CAST_SYM", "CBRT", "CEIL", 
                      "CEILING", "CHAR", "CHR", "CHAR_LENGTH", "CONCAT", 
                      "CONCAT_WS", "CONVERT_SYM", "COS", "COT", "COUNT", 
                      "CROSS", "DATE_PART", "DATE_SYM", "DATETIME", "DAY_SYM", 
                      "DECIMAL_SYM", "DEGREES", "DESC", "DIV", "DISTINCT", 
                      "DOUBLE_PRECISION_SYM", "ELSE_SYM", "ENCODE", "END_SYM", 
                      "ESCAPE_SYM", "EXISTS", "EXP", "EXPANSION_SYM", "FALSE_SYM", 
                      "FIRST_SYM", "FLOAT", "FLOOR", "FOR_SYM", "FORCE_SYM", 
                      "FROM", "GAIA_HEALPIX_INDEX", "GROUP_SYM", "HAVING", 
                      "IGNORE_SYM", "ILIKE_SYM", "INDEX_SYM", "INNER_SYM", 
                      "INTEGER_SYM", "INTERVAL_SYM", "IN_SYM", "ISNULL", 
                      "IS_SYM", "JOIN_SYM", "KEY_SYM", "LAST_SYM", "LEFT", 
                      "LENGTH", "LIKE_SYM", "LIMIT", "LN", "LOG", "LOWER", 
                      "LPAD", "LTRIM", "MAX_SYM", "MD5", "MINUTE", "MIN_SYM", 
                      "MOD", "MODE_SYM", "NATURAL", "NOT_SYM", "NOTNULL", 
                      "NOW", "NULL_SYM", "NULLS_SYM", "OFFSET_SYM", "OJ_SYM", 
                      "ON", "ORDER_SYM", "OUTER", "PARTITION_SYM", "PDIST", 
                      "PI", "POINT", "POLYGON", "POSITION_SYM", "POW", "POWER", 
                      "QUERY_SYM", "RADIANS", "RANDOM", "REAL", "REGEXP", 
                      "REPEAT", "REPLACE", "REVERSE", "RIGHT", "ROLLUP_SYM", 
                      "ROUND", "ROW_SYM", "RPAD", "RTRIM", "SECOND", "SELECT", 
                      "SHARE_SYM", "SIGN", "SIGNED_SYM", "SIN", "SOUNDS_SYM", 
                      "SQUARE_DEGREES", "SQRT", "STDDEV", "STDDEV_POP", 
                      "STDDEV_SAMP", "STERADIANS", "STRAIGHT_JOIN", "SUBSTRING", 
                      "SUM", "SYMMETRIC", "TAN", "THEN_SYM", "TIME_SYM", 
                      "TIMESTAMP", "TRUE_SYM", "TRUNCATE", "UDF_0", "UDF_1", 
                      "UDF_2", "UDF_3", "UDF_4", "UDF_5", "UDF_6", "UDF_7", 
                      "UDF_8", "UDF_9", "UNION_SYM", "UNSIGNED_SYM", "UPDATE", 
                      "UPPER", "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "VALUES", "VARIANCE", "VAR_POP", 
                      "VAR_SAMP", "WHEN_SYM", "WHERE", "WITH", "YEAR", "ASCII_SYM", 
                      "LATIN1", "UTF8", "SPOINT", "SCIRCLE", "SLINE", "SELLIPSE", 
                      "SPOLY", "SPATH", "SBOX", "STRANS", "AREA", "ARRAY_LENGTH", 
                      "SPOINT_TO_ARRAY", "SBOX_TO_ARRAY", "SCIRCLE_TO_ARRAY", 
                      "SPOLY_TO_ARRAY", "SPOINT_TO_ARRAY_DEG", "SBOX_TO_ARRAY_DEG", 
                      "SCIRCLE_TO_ARRAY_DEG", "SPOLY_TO_ARRAY_DEG", "DIVIDE", 
                      "MOD_SYM", "OR_SYM", "AND_SYM", "ABS_VAL_OR_SCONTAINS", 
                      "DFACTORIAL", "EQ", "NOT_EQ", "LET", "GET", "SHIFT_LEFT", 
                      "SHIFT_RIGHT", "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", 
                      "RPAREN", "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", 
                      "NEGATION", "VERTBAR", "BITAND", "POWER_OP", "GTH", 
                      "LTH", "SCONTAINS2", "SLEFTCONTAINS2", "SNOTCONTAINS", 
                      "SNOTCONTAINS2", "SLEFTNOTCONTAINS", "SLEFTNOTCONTAINS2", 
                      "SNOTOVERLAP", "SCROSS", "SDISTANCE", "SLENGTH", "SCENTER", 
                      "INTEGER_NUM", "HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", 
                      "TRANS", "TEXT_STRING", "ID", "COMMENT", "WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_bit_literal = 2
    RULE_boolean_literal = 3
    RULE_hex_literal = 4
    RULE_number_literal = 5
    RULE_string_literal = 6
    RULE_char_functions = 7
    RULE_group_functions = 8
    RULE_number_functions = 9
    RULE_other_functions = 10
    RULE_time_functions = 11
    RULE_array_functions = 12
    RULE_custom_functions = 13
    RULE_pg_sphere_functions = 14
    RULE_functionList = 15
    RULE_literal_value = 16
    RULE_select_expression = 17
    RULE_alias = 18
    RULE_bit_expr = 19
    RULE_bool_primary = 20
    RULE_case_when_statement = 21
    RULE_case_when_statement1 = 22
    RULE_case_when_statement2 = 23
    RULE_column_list = 24
    RULE_column_name = 25
    RULE_column_spec = 26
    RULE_displayed_column = 27
    RULE_displayed_column_arr = 28
    RULE_exp_factor1 = 29
    RULE_exp_factor2 = 30
    RULE_exp_factor3 = 31
    RULE_expression = 32
    RULE_expression_list = 33
    RULE_factor1 = 34
    RULE_factor2 = 35
    RULE_factor3 = 36
    RULE_factor4 = 37
    RULE_factor5 = 38
    RULE_function_call = 39
    RULE_groupby_clause = 40
    RULE_groupby_item = 41
    RULE_having_clause = 42
    RULE_index_hint = 43
    RULE_index_hint_list = 44
    RULE_index_name = 45
    RULE_index_list = 46
    RULE_index_options = 47
    RULE_interval_expr = 48
    RULE_join_condition = 49
    RULE_limit_clause = 50
    RULE_offset = 51
    RULE_offset_clause = 52
    RULE_row_count = 53
    RULE_orderby_clause = 54
    RULE_orderby_item = 55
    RULE_partition_clause = 56
    RULE_partition_name = 57
    RULE_partition_names = 58
    RULE_bit_fac1 = 59
    RULE_bit_fac2 = 60
    RULE_predicate = 61
    RULE_query = 62
    RULE_schema_name = 63
    RULE_select_list = 64
    RULE_subselect_list = 65
    RULE_select_statement = 66
    RULE_simple_expr = 67
    RULE_slice_spec = 68
    RULE_subquery = 69
    RULE_table_atom = 70
    RULE_table_name = 71
    RULE_table_factor1 = 72
    RULE_table_factor2 = 73
    RULE_table_factor3 = 74
    RULE_table_factor4 = 75
    RULE_table_reference = 76
    RULE_table_references = 77
    RULE_table_spec = 78
    RULE_values_list = 79
    RULE_where_clause = 80
    RULE_pg_sphere_op = 81
    RULE_sbit_expr = 82
    RULE_polygon = 83
    RULE_point = 84
    RULE_spoint = 85
    RULE_scircle = 86
    RULE_sline = 87
    RULE_sellipse = 88
    RULE_sbox = 89
    RULE_spoly = 90
    RULE_spath = 91
    RULE_strans = 92
    RULE_spoint_to_array = 93
    RULE_spoint_to_array_deg = 94
    RULE_sbox_to_array = 95
    RULE_sbox_to_array_deg = 96
    RULE_scircle_to_array = 97
    RULE_scircle_to_array_deg = 98
    RULE_spoly_to_array = 99
    RULE_spoly_to_array_deg = 100
    RULE_pg_sphere_object = 101

    ruleNames =  [ "relational_op", "cast_data_type", "bit_literal", "boolean_literal", 
                   "hex_literal", "number_literal", "string_literal", "char_functions", 
                   "group_functions", "number_functions", "other_functions", 
                   "time_functions", "array_functions", "custom_functions", 
                   "pg_sphere_functions", "functionList", "literal_value", 
                   "select_expression", "alias", "bit_expr", "bool_primary", 
                   "case_when_statement", "case_when_statement1", "case_when_statement2", 
                   "column_list", "column_name", "column_spec", "displayed_column", 
                   "displayed_column_arr", "exp_factor1", "exp_factor2", 
                   "exp_factor3", "expression", "expression_list", "factor1", 
                   "factor2", "factor3", "factor4", "factor5", "function_call", 
                   "groupby_clause", "groupby_item", "having_clause", "index_hint", 
                   "index_hint_list", "index_name", "index_list", "index_options", 
                   "interval_expr", "join_condition", "limit_clause", "offset", 
                   "offset_clause", "row_count", "orderby_clause", "orderby_item", 
                   "partition_clause", "partition_name", "partition_names", 
                   "bit_fac1", "bit_fac2", "predicate", "query", "schema_name", 
                   "select_list", "subselect_list", "select_statement", 
                   "simple_expr", "slice_spec", "subquery", "table_atom", 
                   "table_name", "table_factor1", "table_factor2", "table_factor3", 
                   "table_factor4", "table_reference", "table_references", 
                   "table_spec", "values_list", "where_clause", "pg_sphere_op", 
                   "sbit_expr", "polygon", "point", "spoint", "scircle", 
                   "sline", "sellipse", "sbox", "spoly", "spath", "strans", 
                   "spoint_to_array", "spoint_to_array_deg", "sbox_to_array", 
                   "sbox_to_array_deg", "scircle_to_array", "scircle_to_array_deg", 
                   "spoly_to_array", "spoly_to_array_deg", "pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ALL=3
    ANY=4
    ASC=5
    ASIN=6
    AS_SYM=7
    ATAN=8
    ATAN2=9
    AVG=10
    BETWEEN=11
    BIGINT=12
    BINARY=13
    BIT_AND=14
    BIT_LENGTH=15
    BIT_OR=16
    BOOLEAN_SYM=17
    BY_SYM=18
    CASE_SYM=19
    CAST_SYM=20
    CBRT=21
    CEIL=22
    CEILING=23
    CHAR=24
    CHR=25
    CHAR_LENGTH=26
    CONCAT=27
    CONCAT_WS=28
    CONVERT_SYM=29
    COS=30
    COT=31
    COUNT=32
    CROSS=33
    DATE_PART=34
    DATE_SYM=35
    DATETIME=36
    DAY_SYM=37
    DECIMAL_SYM=38
    DEGREES=39
    DESC=40
    DIV=41
    DISTINCT=42
    DOUBLE_PRECISION_SYM=43
    ELSE_SYM=44
    ENCODE=45
    END_SYM=46
    ESCAPE_SYM=47
    EXISTS=48
    EXP=49
    EXPANSION_SYM=50
    FALSE_SYM=51
    FIRST_SYM=52
    FLOAT=53
    FLOOR=54
    FOR_SYM=55
    FORCE_SYM=56
    FROM=57
    GAIA_HEALPIX_INDEX=58
    GROUP_SYM=59
    HAVING=60
    IGNORE_SYM=61
    ILIKE_SYM=62
    INDEX_SYM=63
    INNER_SYM=64
    INTEGER_SYM=65
    INTERVAL_SYM=66
    IN_SYM=67
    ISNULL=68
    IS_SYM=69
    JOIN_SYM=70
    KEY_SYM=71
    LAST_SYM=72
    LEFT=73
    LENGTH=74
    LIKE_SYM=75
    LIMIT=76
    LN=77
    LOG=78
    LOWER=79
    LPAD=80
    LTRIM=81
    MAX_SYM=82
    MD5=83
    MINUTE=84
    MIN_SYM=85
    MOD=86
    MODE_SYM=87
    NATURAL=88
    NOT_SYM=89
    NOTNULL=90
    NOW=91
    NULL_SYM=92
    NULLS_SYM=93
    OFFSET_SYM=94
    OJ_SYM=95
    ON=96
    ORDER_SYM=97
    OUTER=98
    PARTITION_SYM=99
    PDIST=100
    PI=101
    POINT=102
    POLYGON=103
    POSITION_SYM=104
    POW=105
    POWER=106
    QUERY_SYM=107
    RADIANS=108
    RANDOM=109
    REAL=110
    REGEXP=111
    REPEAT=112
    REPLACE=113
    REVERSE=114
    RIGHT=115
    ROLLUP_SYM=116
    ROUND=117
    ROW_SYM=118
    RPAD=119
    RTRIM=120
    SECOND=121
    SELECT=122
    SHARE_SYM=123
    SIGN=124
    SIGNED_SYM=125
    SIN=126
    SOUNDS_SYM=127
    SQUARE_DEGREES=128
    SQRT=129
    STDDEV=130
    STDDEV_POP=131
    STDDEV_SAMP=132
    STERADIANS=133
    STRAIGHT_JOIN=134
    SUBSTRING=135
    SUM=136
    SYMMETRIC=137
    TAN=138
    THEN_SYM=139
    TIME_SYM=140
    TIMESTAMP=141
    TRUE_SYM=142
    TRUNCATE=143
    UDF_0=144
    UDF_1=145
    UDF_2=146
    UDF_3=147
    UDF_4=148
    UDF_5=149
    UDF_6=150
    UDF_7=151
    UDF_8=152
    UDF_9=153
    UNION_SYM=154
    UNSIGNED_SYM=155
    UPDATE=156
    UPPER=157
    USE_SYM=158
    USING_SYM=159
    UTC_DATE=160
    UTC_TIME=161
    UTC_TIMESTAMP=162
    VALUES=163
    VARIANCE=164
    VAR_POP=165
    VAR_SAMP=166
    WHEN_SYM=167
    WHERE=168
    WITH=169
    YEAR=170
    ASCII_SYM=171
    LATIN1=172
    UTF8=173
    SPOINT=174
    SCIRCLE=175
    SLINE=176
    SELLIPSE=177
    SPOLY=178
    SPATH=179
    SBOX=180
    STRANS=181
    AREA=182
    ARRAY_LENGTH=183
    SPOINT_TO_ARRAY=184
    SBOX_TO_ARRAY=185
    SCIRCLE_TO_ARRAY=186
    SPOLY_TO_ARRAY=187
    SPOINT_TO_ARRAY_DEG=188
    SBOX_TO_ARRAY_DEG=189
    SCIRCLE_TO_ARRAY_DEG=190
    SPOLY_TO_ARRAY_DEG=191
    DIVIDE=192
    MOD_SYM=193
    OR_SYM=194
    AND_SYM=195
    ABS_VAL_OR_SCONTAINS=196
    DFACTORIAL=197
    EQ=198
    NOT_EQ=199
    LET=200
    GET=201
    SHIFT_LEFT=202
    SHIFT_RIGHT=203
    SEMI=204
    COLON=205
    DOT=206
    COMMA=207
    ASTERISK=208
    RPAREN=209
    LPAREN=210
    RBRACK=211
    LBRACK=212
    PLUS=213
    MINUS=214
    NEGATION=215
    VERTBAR=216
    BITAND=217
    POWER_OP=218
    GTH=219
    LTH=220
    SCONTAINS2=221
    SLEFTCONTAINS2=222
    SNOTCONTAINS=223
    SNOTCONTAINS2=224
    SLEFTNOTCONTAINS=225
    SLEFTNOTCONTAINS2=226
    SNOTOVERLAP=227
    SCROSS=228
    SDISTANCE=229
    SLENGTH=230
    SCENTER=231
    INTEGER_NUM=232
    HEX_DIGIT=233
    BIT_NUM=234
    REAL_NUMBER=235
    TRANS=236
    TEXT_STRING=237
    ID=238
    COMMENT=239
    WS=240

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Relational_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            _la = self._input.LA(1)
            if not(((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 6291471) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def FLOAT(self):
            return self.getToken(PostgreSQLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def DOUBLE_PRECISION_SYM(self):
            return self.getToken(PostgreSQLParser.DOUBLE_PRECISION_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.match(PostgreSQLParser.BINARY)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 207
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 208
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 209
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.match(PostgreSQLParser.CHAR)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 213
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 214
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 215
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 219
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 5)
                self.state = 220
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 6)
                self.state = 221
                self.match(PostgreSQLParser.TIMESTAMP)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 7)
                self.state = 222
                self.match(PostgreSQLParser.INTERVAL_SYM)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 223
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 224
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 225
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 226
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 227
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 230
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 9)
                self.state = 233
                self.match(PostgreSQLParser.INTEGER_SYM)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 10)
                self.state = 234
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 11)
                self.state = 235
                self.match(PostgreSQLParser.FLOAT)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 12)
                self.state = 236
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 13)
                self.state = 237
                self.match(PostgreSQLParser.DOUBLE_PRECISION_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            _la = self._input.LA(1)
            if not(_la==51 or _la==142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==213 or _la==214:
                self.state = 246
                _la = self._input.LA(1)
                if not(_la==213 or _la==214):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 249
            _la = self._input.LA(1)
            if not(_la==232 or _la==235):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHR(self):
            return self.getToken(PostgreSQLParser.CHR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 503349248) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 4611905370997129667) != 0) or _la==157 or _la==171):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4295050240) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 19984723346456585) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RANDOM(self):
            return self.getToken(PostgreSQLParser.RANDOM, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQUARE_DEGREES(self):
            return self.getToken(PostgreSQLParser.SQUARE_DEGREES, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def STERADIANS(self):
            return self.getToken(PostgreSQLParser.STERADIANS, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 18580100477879110) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2385360796910617091) != 0) or _la==143):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            _la = self._input.LA(1)
            if not(_la==45 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_PART(self):
            return self.getToken(PostgreSQLParser.DATE_PART, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 144115188075855875) != 0) or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 566798245691393) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_LENGTH(self):
            return self.getToken(PostgreSQLParser.ARRAY_LENGTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_functions" ):
                listener.enterArray_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_functions" ):
                listener.exitArray_functions(self)




    def array_functions(self):

        localctx = PostgreSQLParser.Array_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_array_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(PostgreSQLParser.ARRAY_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Custom_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GAIA_HEALPIX_INDEX(self):
            return self.getToken(PostgreSQLParser.GAIA_HEALPIX_INDEX, 0)

        def PDIST(self):
            return self.getToken(PostgreSQLParser.PDIST, 0)

        def UDF_0(self):
            return self.getToken(PostgreSQLParser.UDF_0, 0)

        def UDF_1(self):
            return self.getToken(PostgreSQLParser.UDF_1, 0)

        def UDF_2(self):
            return self.getToken(PostgreSQLParser.UDF_2, 0)

        def UDF_3(self):
            return self.getToken(PostgreSQLParser.UDF_3, 0)

        def UDF_4(self):
            return self.getToken(PostgreSQLParser.UDF_4, 0)

        def UDF_5(self):
            return self.getToken(PostgreSQLParser.UDF_5, 0)

        def UDF_6(self):
            return self.getToken(PostgreSQLParser.UDF_6, 0)

        def UDF_7(self):
            return self.getToken(PostgreSQLParser.UDF_7, 0)

        def UDF_8(self):
            return self.getToken(PostgreSQLParser.UDF_8, 0)

        def UDF_9(self):
            return self.getToken(PostgreSQLParser.UDF_9, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_custom_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustom_functions" ):
                listener.enterCustom_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustom_functions" ):
                listener.exitCustom_functions(self)




    def custom_functions(self):

        localctx = PostgreSQLParser.Custom_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_custom_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            _la = self._input.LA(1)
            if not(_la==58 or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 17996806323437569) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_functions" ):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_functions" ):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def array_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_functionsContext,0)


        def custom_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Custom_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionList)
        try:
            self.state = 276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 21, 22, 23, 30, 31, 39, 41, 49, 54, 77, 78, 86, 101, 105, 106, 108, 109, 117, 124, 126, 128, 129, 133, 138, 143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.number_functions()
                pass
            elif token in [15, 25, 26, 27, 28, 73, 74, 79, 80, 81, 112, 113, 114, 115, 119, 120, 135, 157, 171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.char_functions()
                pass
            elif token in [34, 35, 91, 121, 140, 141, 160, 161, 162, 170]:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self.time_functions()
                pass
            elif token in [45, 83]:
                self.enterOuterAlt(localctx, 4)
                self.state = 272
                self.other_functions()
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 5)
                self.state = 273
                self.pg_sphere_functions()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 6)
                self.state = 274
                self.array_functions()
                pass
            elif token in [58, 100, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153]:
                self.enterOuterAlt(localctx, 7)
                self.state = 275
                self.custom_functions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_literal_value)
        try:
            self.state = 284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [237]:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.string_literal()
                pass
            elif token in [213, 214, 232, 235]:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.number_literal()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.hex_literal()
                pass
            elif token in [51, 142]:
                self.enterOuterAlt(localctx, 4)
                self.state = 281
                self.boolean_literal()
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 5)
                self.state = 282
                self.bit_literal()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 283
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(PostgreSQLParser.SELECT)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==42:
                self.state = 287
                _la = self._input.LA(1)
                if not(_la==3 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 290
            self.select_list()
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 291
                self.match(PostgreSQLParser.FROM)
                self.state = 292
                self.table_references()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 293
                    self.partition_clause()


                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 296
                    self.where_clause()


                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 299
                    self.groupby_clause()


                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 302
                    self.having_clause()




            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 307
                self.orderby_clause()


            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 310
                self.limit_clause()


            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 313
                self.offset_clause()


            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 316
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 317
                self.match(PostgreSQLParser.UPDATE)


            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 320
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 323
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 326
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bit_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.factor1()
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 329
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 330
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.predicate()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 6291471) != 0):
                    self.state = 334
                    self.relational_op()
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4:
                        self.state = 335
                        self.match(PostgreSQLParser.ANY)


                    self.state = 338
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 342
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 345
                self.match(PostgreSQLParser.EXISTS)
                self.state = 346
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [167]:
                self.state = 350
                self.case_when_statement1()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 196, 197, 210, 213, 214, 215, 232, 233, 234, 235, 237, 238]:
                self.state = 351
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 354
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 355
                self.bit_expr()


            self.state = 358
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 360
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 361
                self.expression()
                self.state = 362
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 363
                self.bit_expr()
                self.state = 367 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==167):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_when_statement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.bit_expr()
            self.state = 375 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 370
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 371
                self.bit_expr()
                self.state = 372
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 373
                self.bit_expr()
                self.state = 377 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==167):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(PostgreSQLParser.LPAREN)
            self.state = 380
            self.column_spec()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 381
                self.match(PostgreSQLParser.COMMA)
                self.state = 382
                self.column_spec()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.schema_name()
                    self.state = 393
                    self.match(PostgreSQLParser.DOT)


                self.state = 397
                self.table_name()
                self.state = 398
                self.match(PostgreSQLParser.DOT)


            self.state = 402
            self.column_name()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 403
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def displayed_column_arr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Displayed_column_arrContext,0)


        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.table_spec()
                self.state = 407
                self.match(PostgreSQLParser.DOT)
                self.state = 408
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 410
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 411
                    self.sbit_expr()
                    pass

                elif la_ == 3:
                    self.state = 412
                    self.displayed_column_arr()
                    pass


                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62 or _la==75:
                    self.state = 415
                    _la = self._input.LA(1)
                    if not(_la==62 or _la==75):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 416
                    self.match(PostgreSQLParser.TEXT_STRING)


                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==238:
                    self.state = 419
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Displayed_column_arrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spoint_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoint_to_array_degContext,0)


        def spoint_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoint_to_arrayContext,0)


        def sbox_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbox_to_array_degContext,0)


        def sbox_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbox_to_arrayContext,0)


        def scircle_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Scircle_to_array_degContext,0)


        def scircle_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Scircle_to_arrayContext,0)


        def spoly_to_array_deg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoly_to_array_degContext,0)


        def spoly_to_array(self):
            return self.getTypedRuleContext(PostgreSQLParser.Spoly_to_arrayContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column_arr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column_arr" ):
                listener.enterDisplayed_column_arr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column_arr" ):
                listener.exitDisplayed_column_arr(self)




    def displayed_column_arr(self):

        localctx = PostgreSQLParser.Displayed_column_arrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_displayed_column_arr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [188]:
                self.state = 424
                self.spoint_to_array_deg()
                pass
            elif token in [184]:
                self.state = 425
                self.spoint_to_array()
                pass
            elif token in [189]:
                self.state = 426
                self.sbox_to_array_deg()
                pass
            elif token in [185]:
                self.state = 427
                self.sbox_to_array()
                pass
            elif token in [190]:
                self.state = 428
                self.scircle_to_array_deg()
                pass
            elif token in [186]:
                self.state = 429
                self.scircle_to_array()
                pass
            elif token in [191]:
                self.state = 430
                self.spoly_to_array_deg()
                pass
            elif token in [187]:
                self.state = 431
                self.spoly_to_array()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exp_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.exp_factor2()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==195:
                self.state = 435
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 436
                self.exp_factor2()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 442
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 445
            self.exp_factor3()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exp_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.bool_primary()
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 448
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 449
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 456
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51, 142]:
                        self.state = 452
                        self.boolean_literal()
                        pass
                    elif token in [92]:
                        self.state = 453
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [42]:
                        self.state = 454
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 455
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==90:
                    self.state = 460
                    _la = self._input.LA(1)
                    if not(_la==68 or _la==90):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.exp_factor1()
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==194:
                self.state = 466
                self.match(PostgreSQLParser.OR_SYM)
                self.state = 467
                self.exp_factor1()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(PostgreSQLParser.LPAREN)
            self.state = 474
            self.expression()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 475
                self.match(PostgreSQLParser.COMMA)
                self.state = 476
                self.expression()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.factor2()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 485
                self.match(PostgreSQLParser.BITAND)
                self.state = 486
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.factor3()
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==202 or _la==203:
                self.state = 490
                _la = self._input.LA(1)
                if not(_la==202 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 491
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.factor4()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==213 or _la==214:
                self.state = 495
                _la = self._input.LA(1)
                if not(_la==213 or _la==214):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 496
                self.factor4()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.factor5()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 67174403) != 0):
                self.state = 503
                _la = self._input.LA(1)
                if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 67174403) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 504
                self.factor5()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factor5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def DFACTORIAL(self):
            return self.getToken(PostgreSQLParser.DFACTORIAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 510
                _la = self._input.LA(1)
                if not(_la==13 or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 917507) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 513
            self.simple_expr()
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 514
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 517
                _la = self._input.LA(1)
                if not(_la==213 or _la==214):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 518
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def TEXT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TEXT_STRING)
            else:
                return self.getToken(PostgreSQLParser.TEXT_STRING, i)

        def POSITION_SYM(self):
            return self.getToken(PostgreSQLParser.POSITION_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 15, 21, 22, 23, 25, 26, 27, 28, 30, 31, 34, 35, 39, 41, 45, 49, 54, 58, 73, 74, 77, 78, 79, 80, 81, 83, 86, 91, 100, 101, 105, 106, 108, 109, 112, 113, 114, 115, 117, 119, 120, 121, 124, 126, 128, 129, 133, 135, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 170, 171, 182, 183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.functionList()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 522
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -3099657436188116607) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 15748432970906991) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 7679402459139) != 0):
                        self.state = 523
                        self.expression()
                        self.state = 528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==207:
                            self.state = 524
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 525
                            self.expression()
                            self.state = 530
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 533
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 537
                self.match(PostgreSQLParser.LPAREN)
                self.state = 538
                self.expression()
                self.state = 539
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 540
                self.cast_data_type()
                self.state = 541
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 543
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 544
                self.match(PostgreSQLParser.LPAREN)
                self.state = 545
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 546
                self.match(PostgreSQLParser.COMMA)
                self.state = 547
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 548
                self.match(PostgreSQLParser.COMMA)
                self.state = 549
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 550
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 4)
                self.state = 551
                self.match(PostgreSQLParser.POSITION_SYM)
                self.state = 552
                self.match(PostgreSQLParser.LPAREN)
                self.state = 553
                self.expression()
                self.state = 554
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 555
                self.expression()
                self.state = 556
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [10, 14, 16, 32, 82, 85, 130, 131, 132, 136, 164, 165, 166]:
                self.enterOuterAlt(localctx, 5)
                self.state = 558
                self.group_functions()
                self.state = 559
                self.match(PostgreSQLParser.LPAREN)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==42 or _la==208:
                    self.state = 560
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==42 or _la==208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 309378992668534598) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -3099657436196505215) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 15748432970906991) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 7679402459139) != 0):
                    self.state = 565
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        self.state = 563
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 564
                        self.sbit_expr()
                        pass




                self.state = 569
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 574
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 575
            self.groupby_item()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 576
                self.match(PostgreSQLParser.COMMA)
                self.state = 577
                self.groupby_item()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==169:
                self.state = 583
                self.match(PostgreSQLParser.WITH)
                self.state = 584
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Groupby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 587
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 588
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 589
                self.bit_expr()
                pass


            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 592
                _la = self._input.LA(1)
                if not(_la==5 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(PostgreSQLParser.HAVING)
            self.state = 596
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 599
                self.index_options()
                self.state = 600
                self.match(PostgreSQLParser.LPAREN)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 601
                    self.index_list()


                self.state = 604
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 607
                self.index_options()
                self.state = 608
                self.match(PostgreSQLParser.LPAREN)
                self.state = 609
                self.index_list()
                self.state = 610
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 613
                self.index_options()
                self.state = 614
                self.match(PostgreSQLParser.LPAREN)
                self.state = 615
                self.index_list()
                self.state = 616
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_hint_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.index_hint()
            self.state = 625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 621
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 622
                    self.index_hint() 
                self.state = 627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.index_name()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 631
                self.match(PostgreSQLParser.COMMA)
                self.state = 632
                self.index_name()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            _la = self._input.LA(1)
            if not(_la==63 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 639
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 645
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [70]:
                    self.state = 640
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [97]:
                    self.state = 641
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 642
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [59]:
                    self.state = 643
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 644
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 650
            self.string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_condition)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.match(PostgreSQLParser.ON)
                self.state = 653
                self.expression()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 655
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_limit_clause)
        try:
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(PostgreSQLParser.LIMIT)
                self.state = 659
                self.row_count()
                self.state = 662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.match(PostgreSQLParser.OFFSET_SYM)
                    self.state = 661
                    self.offset()


                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 665
                self.offset()
                self.state = 666
                self.match(PostgreSQLParser.LIMIT)
                self.state = 667
                self.row_count()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(PostgreSQLParser.OFFSET_SYM)
            self.state = 674
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 679
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 680
            self.orderby_item()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 681
                self.match(PostgreSQLParser.COMMA)
                self.state = 682
                self.orderby_item()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orderby_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.groupby_item()
                self.state = 696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5 or _la==40:
                        self.state = 689
                        _la = self._input.LA(1)
                        if not(_la==5 or _la==40):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==93:
                        self.state = 692
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 693
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.groupby_item()
                self.state = 699
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 700
                _la = self._input.LA(1)
                if not(_la==219 or _la==220):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 705
            self.match(PostgreSQLParser.LPAREN)
            self.state = 706
            self.partition_names()
            self.state = 707
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.partition_name()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 712
                self.match(PostgreSQLParser.COMMA)
                self.state = 713
                self.partition_name()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 719
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 722
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 724
                    self.expression_list()
                    pass


                pass
            elif token in [62, 75]:
                self.state = 727
                _la = self._input.LA(1)
                if not(_la==62 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 728
                self.simple_expr()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 729
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 730
                    self.simple_expr()


                pass
            elif token in [111]:
                self.state = 733
                self.match(PostgreSQLParser.REGEXP)
                self.state = 736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 735
                    self.sbit_expr()
                    pass


                pass
            elif token in [11]:
                self.state = 738
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 739
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 742
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 743
                    self.sbit_expr()
                    pass


                self.state = 746
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 747
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_fac2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def ILIKE_SYM(self):
            return self.getToken(PostgreSQLParser.ILIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_bit_fac2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 752
            _la = self._input.LA(1)
            if not(_la==62 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 753
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 754
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 757
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 758
                self.sbit_expr()
                pass


            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 761
                self.bit_fac1()

            elif la_ == 2:
                self.state = 762
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.select_statement()
            self.state = 766
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def subselect_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Subselect_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 102, 103, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 196, 197, 210, 213, 214, 215, 230, 231, 232, 233, 234, 235, 237, 238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.displayed_column()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 771
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 772
                    self.displayed_column()
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 779
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 780
                    self.displayed_column()
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==207:
                        self.state = 781
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 782
                        self.displayed_column()
                        self.state = 787
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.match(PostgreSQLParser.ON)

                self.state = 791
                self.subselect_list()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 792
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 793
                    self.displayed_column()
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subselect_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subselect_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubselect_list" ):
                listener.enterSubselect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubselect_list" ):
                listener.exitSubselect_list(self)




    def subselect_list(self):

        localctx = PostgreSQLParser.Subselect_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_subselect_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.displayed_column()
            self.state = 806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 802
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 803
                    self.displayed_column() 
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.select_expression()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 810
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 811
                    self.match(PostgreSQLParser.ALL)


                self.state = 814
                self.select_expression()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simple_expr)
        try:
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 823
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 824
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 825
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 826
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 827
                self.match(PostgreSQLParser.EXISTS)
                self.state = 828
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 829
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 830
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_spec" ):
                listener.enterSlice_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_spec" ):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 833
                self.match(PostgreSQLParser.LBRACK)
                self.state = 834
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 835
                    self.match(PostgreSQLParser.COLON)
                    self.state = 836
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 839
                self.match(PostgreSQLParser.RBRACK)
                self.state = 842 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==212):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(PostgreSQLParser.LPAREN)
            self.state = 845
            self.select_statement()
            self.state = 846
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.table_spec()
                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 849
                    self.partition_clause()


                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==238:
                    self.state = 852
                    self.alias()


                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56 or _la==61 or _la==158:
                    self.state = 855
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.subquery()
                self.state = 859
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 861
                self.match(PostgreSQLParser.LPAREN)
                self.state = 862
                self.table_references()
                self.state = 863
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 865
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 866
                self.table_reference()
                self.state = 867
                self.match(PostgreSQLParser.LEFT)
                self.state = 868
                self.match(PostgreSQLParser.OUTER)
                self.state = 869
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 870
                self.table_reference()
                self.state = 871
                self.match(PostgreSQLParser.ON)
                self.state = 872
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.table_factor2()
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2251799813685761) != 0):
                        self.state = 879
                        _la = self._input.LA(1)
                        if not(_la==33 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2251799813685761) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 882
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 883
                    self.table_atom()
                    self.state = 885
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 884
                        self.join_condition()

             
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.table_factor3()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 893
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 894
                self.table_atom()
                self.state = 897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.match(PostgreSQLParser.ON)
                    self.state = 896
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.table_factor4()
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 902
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 903
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 906
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 907
                    self.table_factor4()
                    self.state = 908
                    self.join_condition() 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_factor4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.table_atom()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 916
                self.match(PostgreSQLParser.NATURAL)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==115:
                    self.state = 917
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 918
                        self.match(PostgreSQLParser.OUTER)




                self.state = 923
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 924
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(PostgreSQLParser.LPAREN)
                self.state = 929
                self.values_list()
                self.state = 930
                self.match(PostgreSQLParser.RPAREN)
                self.state = 932
                self.alias()
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 933
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.table_reference()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 939
                self.match(PostgreSQLParser.COMMA)
                self.state = 940
                self.table_reference()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 946
                self.schema_name()
                self.state = 947
                self.match(PostgreSQLParser.DOT)


            self.state = 951
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(PostgreSQLParser.VALUES)

            self.state = 954
            self.expression_list()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 955
                self.match(PostgreSQLParser.COMMA)
                self.state = 956
                self.expression_list()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(PostgreSQLParser.WHERE)
            self.state = 963
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_op" ):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_op" ):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not(((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 8523874307) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbit_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def polygon(self):
            return self.getTypedRuleContext(PostgreSQLParser.PolygonContext,0)


        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def point(self):
            return self.getTypedRuleContext(PostgreSQLParser.PointContext,0)


        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def pg_sphere_object(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbit_expr" ):
                listener.enterSbit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbit_expr" ):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.polygon()
                self.state = 968
                self.match(PostgreSQLParser.SLEFTCONTAINS2)
                self.state = 969
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.point()
                self.state = 972
                self.match(PostgreSQLParser.SCONTAINS2)
                self.state = 973
                self.polygon()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 175, 176, 177, 178, 179, 180, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 975
                    self.pg_sphere_object()
                    pass
                elif token in [174]:
                    self.state = 976
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 981
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 979
                    self.spoint()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 980
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 983
                self.pg_sphere_op()
                self.state = 984
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 986
                self.pg_sphere_object()
                self.state = 987
                self.match(PostgreSQLParser.EQ)
                self.state = 988
                self.pg_sphere_object()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 990
                self.pg_sphere_object()
                self.state = 991
                self.pg_sphere_op()
                self.state = 992
                self.pg_sphere_object()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 995
                    self.simple_expr()
                    self.state = 996
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 997
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 999
                    self.simple_expr()
                    pass


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1005
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 1002
                    self.spoint()
                    pass
                elif token in [175]:
                    self.state = 1003
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1004
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1007
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 1008
                    self.spoint()
                    pass
                elif token in [175]:
                    self.state = 1009
                    self.scircle()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1010
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1013
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 1018
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [175]:
                    self.state = 1014
                    self.scircle()
                    pass
                elif token in [180]:
                    self.state = 1015
                    self.sbox()
                    pass
                elif token in [178]:
                    self.state = 1016
                    self.spoly()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1017
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1020
                self.match(PostgreSQLParser.SCENTER)
                self.state = 1024
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [175]:
                    self.state = 1021
                    self.scircle()
                    pass
                elif token in [177]:
                    self.state = 1022
                    self.sellipse()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1023
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1026
                self.match(PostgreSQLParser.MINUS)
                self.state = 1030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 1027
                    self.sline()
                    pass
                elif token in [179]:
                    self.state = 1028
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1029
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1039
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 1032
                    self.spoint()
                    pass
                elif token in [175]:
                    self.state = 1033
                    self.scircle()
                    pass
                elif token in [176]:
                    self.state = 1034
                    self.sline()
                    pass
                elif token in [177]:
                    self.state = 1035
                    self.sellipse()
                    pass
                elif token in [178]:
                    self.state = 1036
                    self.spoly()
                    pass
                elif token in [179]:
                    self.state = 1037
                    self.spath()
                    pass
                elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                    self.state = 1038
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1045 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==213 or _la==214:
                        self.state = 1041
                        _la = self._input.LA(1)
                        if not(_la==213 or _la==214):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1044
                    self.strans()
                    self.state = 1047 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & 12884901889) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POLYGON(self):
            return self.getToken(PostgreSQLParser.POLYGON, 0)

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)




    def polygon(self):

        localctx = PostgreSQLParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_polygon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(PostgreSQLParser.POLYGON)
            self.state = 1052
            self.string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINT(self):
            return self.getToken(PostgreSQLParser.POINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)




    def point(self):

        localctx = PostgreSQLParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_point)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(PostgreSQLParser.POINT)
            self.state = 1055
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1056
            self.bit_expr()
            self.state = 1057
            self.match(PostgreSQLParser.COMMA)
            self.state = 1058
            self.bit_expr()
            self.state = 1059
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint" ):
                listener.enterSpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint" ):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(PostgreSQLParser.SPOINT)
            self.state = 1062
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1063
            self.bit_expr()
            self.state = 1064
            self.match(PostgreSQLParser.COMMA)
            self.state = 1065
            self.bit_expr()
            self.state = 1066
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle" ):
                listener.enterScircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle" ):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 1069
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1070
            self.spoint()
            self.state = 1071
            self.match(PostgreSQLParser.COMMA)
            self.state = 1072
            self.bit_expr()
            self.state = 1073
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSline" ):
                listener.enterSline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSline" ):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sline)
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(PostgreSQLParser.SLINE)
                self.state = 1076
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1077
                self.spoint()
                self.state = 1078
                self.match(PostgreSQLParser.COMMA)
                self.state = 1079
                self.spoint()
                self.state = 1080
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.match(PostgreSQLParser.SLINE)
                self.state = 1083
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1084
                self.strans()
                self.state = 1085
                self.match(PostgreSQLParser.COMMA)
                self.state = 1086
                self.bit_expr()
                self.state = 1087
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SellipseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSellipse" ):
                listener.enterSellipse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSellipse" ):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1092
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1093
            self.spoint()
            self.state = 1094
            self.match(PostgreSQLParser.COMMA)
            self.state = 1095
            self.bit_expr()
            self.state = 1096
            self.match(PostgreSQLParser.COMMA)
            self.state = 1097
            self.bit_expr()
            self.state = 1098
            self.match(PostgreSQLParser.COMMA)
            self.state = 1099
            self.bit_expr()
            self.state = 1100
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SboxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox" ):
                listener.enterSbox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox" ):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(PostgreSQLParser.SBOX)
            self.state = 1103
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1104
            self.spoint()
            self.state = 1105
            self.match(PostgreSQLParser.COMMA)
            self.state = 1106
            self.spoint()
            self.state = 1107
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpolyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly" ):
                listener.enterSpoly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly" ):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_spoly)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1109
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1110
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1112
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1113
                self.column_spec()
                self.state = 1114
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1117
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1118
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1119
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpath" ):
                listener.enterSpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpath" ):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_spath)
        try:
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self.match(PostgreSQLParser.SPATH)
                self.state = 1123
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(PostgreSQLParser.SPATH)
                self.state = 1125
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1126
                self.column_spec()
                self.state = 1127
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StransContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrans" ):
                listener.enterStrans(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrans" ):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(PostgreSQLParser.STRANS)
            self.state = 1132
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1133
            self.bit_expr()
            self.state = 1134
            self.match(PostgreSQLParser.COMMA)
            self.state = 1135
            self.bit_expr()
            self.state = 1136
            self.match(PostgreSQLParser.COMMA)
            self.state = 1137
            self.bit_expr()
            self.state = 1138
            self.match(PostgreSQLParser.COMMA)
            self.state = 1139
            self.match(PostgreSQLParser.TRANS)
            self.state = 1140
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoint_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SPOINT_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint_to_array" ):
                listener.enterSpoint_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint_to_array" ):
                listener.exitSpoint_to_array(self)




    def spoint_to_array(self):

        localctx = PostgreSQLParser.Spoint_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_spoint_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(PostgreSQLParser.SPOINT_TO_ARRAY)
            self.state = 1143
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1144
            self.spoint()
            self.state = 1145
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoint_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SPOINT_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint_to_array_deg" ):
                listener.enterSpoint_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint_to_array_deg" ):
                listener.exitSpoint_to_array_deg(self)




    def spoint_to_array_deg(self):

        localctx = PostgreSQLParser.Spoint_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_spoint_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(PostgreSQLParser.SPOINT_TO_ARRAY_DEG)
            self.state = 1148
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1149
            self.spoint()
            self.state = 1150
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbox_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SBOX_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox_to_array" ):
                listener.enterSbox_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox_to_array" ):
                listener.exitSbox_to_array(self)




    def sbox_to_array(self):

        localctx = PostgreSQLParser.Sbox_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_sbox_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(PostgreSQLParser.SBOX_TO_ARRAY)
            self.state = 1153
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1154
            self.sbox()
            self.state = 1155
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sbox_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SBOX_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox_to_array_deg" ):
                listener.enterSbox_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox_to_array_deg" ):
                listener.exitSbox_to_array_deg(self)




    def sbox_to_array_deg(self):

        localctx = PostgreSQLParser.Sbox_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sbox_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(PostgreSQLParser.SBOX_TO_ARRAY_DEG)
            self.state = 1158
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1159
            self.sbox()
            self.state = 1160
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scircle_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SCIRCLE_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle_to_array" ):
                listener.enterScircle_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle_to_array" ):
                listener.exitScircle_to_array(self)




    def scircle_to_array(self):

        localctx = PostgreSQLParser.Scircle_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_scircle_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(PostgreSQLParser.SCIRCLE_TO_ARRAY)
            self.state = 1163
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1164
            self.scircle()
            self.state = 1165
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scircle_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SCIRCLE_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle_to_array_deg" ):
                listener.enterScircle_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle_to_array_deg" ):
                listener.exitScircle_to_array_deg(self)




    def scircle_to_array_deg(self):

        localctx = PostgreSQLParser.Scircle_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_scircle_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(PostgreSQLParser.SCIRCLE_TO_ARRAY_DEG)
            self.state = 1168
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1169
            self.scircle()
            self.state = 1170
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoly_to_arrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY_TO_ARRAY(self):
            return self.getToken(PostgreSQLParser.SPOLY_TO_ARRAY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly_to_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly_to_array" ):
                listener.enterSpoly_to_array(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly_to_array" ):
                listener.exitSpoly_to_array(self)




    def spoly_to_array(self):

        localctx = PostgreSQLParser.Spoly_to_arrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_spoly_to_array)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(PostgreSQLParser.SPOLY_TO_ARRAY)
            self.state = 1173
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1174
            self.spoly()
            self.state = 1175
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Spoly_to_array_degContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY_TO_ARRAY_DEG(self):
            return self.getToken(PostgreSQLParser.SPOLY_TO_ARRAY_DEG, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly_to_array_deg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly_to_array_deg" ):
                listener.enterSpoly_to_array_deg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly_to_array_deg" ):
                listener.exitSpoly_to_array_deg(self)




    def spoly_to_array_deg(self):

        localctx = PostgreSQLParser.Spoly_to_array_degContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_spoly_to_array_deg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(PostgreSQLParser.SPOLY_TO_ARRAY_DEG)
            self.state = 1178
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1179
            self.spoly()
            self.state = 1180
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pg_sphere_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_object" ):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_object" ):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pg_sphere_object)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [175]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.scircle()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                self.sline()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1184
                self.sellipse()
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1185
                self.sbox()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186
                self.spoly()
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1187
                self.spath()
                pass
            elif token in [1, 2, 6, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 45, 48, 49, 51, 54, 58, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 91, 92, 100, 101, 104, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 161, 162, 164, 165, 166, 170, 171, 182, 183, 210, 213, 214, 232, 233, 234, 235, 237, 238]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1188
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





