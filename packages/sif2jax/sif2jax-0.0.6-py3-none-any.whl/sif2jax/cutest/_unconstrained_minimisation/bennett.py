import jax.numpy as jnp

from ..._problem import AbstractUnconstrainedMinimisation


# TODO: This implementation requires human review and verification against
# another CUTEst interface
class BENNETT5LS(AbstractUnconstrainedMinimisation):
    """NIST Data fitting problem BENNETT5.

    Fit: y = b1 * (b2+x)**(-1/b3) + e

    Source: Problem from the NIST nonlinear regression test set
    http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml

    Reference: Bennett, L., L. Swartzendruber, H. Brown, NIST (1994).
    Superconductivity Magnetization Modeling.

    SIF input: Nick Gould and Tyrone Rees, Oct 2015

    Classification: SUR2-MN-3-0
    """

    y0_iD: int = 0
    provided_y0s: frozenset = frozenset({0})

    n: int = 3  # Problem has 3 variables
    m: int = 154  # Number of data points

    def objective(self, y, args):
        del args
        b1, b2, b3 = y

        # Data points from the SIF file
        x_data = jnp.array(
            [
                7.447168,
                8.102586,
                8.452547,
                8.711278,
                8.916774,
                9.087155,
                9.232590,
                9.359535,
                9.472166,
                9.573384,
                9.665293,
                9.749461,
                9.827092,
                9.899128,
                9.966321,
                10.029280,
                10.088510,
                10.144430,
                10.197380,
                10.247670,
                10.295560,
                10.341250,
                10.384950,
                10.426820,
                10.467000,
                10.505640,
                10.542830,
                10.578690,
                10.613310,
                10.646780,
                10.679150,
                10.710520,
                10.740920,
                10.770440,
                10.799100,
                10.826970,
                10.854080,
                10.880470,
                10.906190,
                10.931260,
                10.955720,
                10.979590,
                11.002910,
                11.025700,
                11.047980,
                11.069770,
                11.091100,
                11.111980,
                11.132440,
                11.152480,
                11.172130,
                11.191410,
                11.210310,
                11.228870,
                11.247090,
                11.264980,
                11.282560,
                11.299840,
                11.316820,
                11.333520,
                11.349940,
                11.366100,
                11.382000,
                11.397660,
                11.413070,
                11.428240,
                11.443200,
                11.457930,
                11.472440,
                11.486750,
                11.500860,
                11.514770,
                11.528490,
                11.542020,
                11.555380,
                11.568550,
                11.581560,
                11.594420,
                11.607121,
                11.619640,
                11.632000,
                11.644210,
                11.656280,
                11.668200,
                11.679980,
                11.691620,
                11.703130,
                11.714510,
                11.725760,
                11.736880,
                11.747890,
                11.758780,
                11.769550,
                11.780200,
                11.790730,
                11.801160,
                11.811480,
                11.821700,
                11.831810,
                11.841820,
                11.851730,
                11.861550,
                11.871270,
                11.880890,
                11.890420,
                11.899870,
                11.909220,
                11.918490,
                11.927680,
                11.936780,
                11.945790,
                11.954730,
                11.963590,
                11.972370,
                11.981070,
                11.989700,
                11.998260,
                12.006740,
                12.015150,
                12.023490,
                12.031760,
                12.039970,
                12.048100,
                12.056170,
                12.064180,
                12.072120,
                12.080010,
                12.087820,
                12.095580,
                12.103280,
                12.110920,
                12.118500,
                12.126030,
                12.133500,
                12.140910,
                12.148270,
                12.155570,
                12.162830,
                12.170030,
                12.177170,
                12.184270,
                12.191320,
                12.198320,
                12.205270,
                12.212170,
                12.219030,
                12.225840,
                12.232600,
                12.239320,
                12.245990,
                12.252620,
                12.259200,
                12.265750,
                12.272240,
            ]
        )

        y_data = jnp.array(
            [
                -34.834702,
                -34.393200,
                -34.152901,
                -33.979099,
                -33.845901,
                -33.732899,
                -33.640301,
                -33.559200,
                -33.486801,
                -33.423100,
                -33.365101,
                -33.313000,
                -33.260899,
                -33.217400,
                -33.176899,
                -33.139198,
                -33.101601,
                -33.066799,
                -33.035000,
                -33.003101,
                -32.971298,
                -32.942299,
                -32.916302,
                -32.890202,
                -32.864101,
                -32.841000,
                -32.817799,
                -32.797501,
                -32.774300,
                -32.757000,
                -32.733799,
                -32.716400,
                -32.699100,
                -32.678799,
                -32.661400,
                -32.644001,
                -32.626701,
                -32.612202,
                -32.597698,
                -32.583199,
                -32.568699,
                -32.554298,
                -32.539799,
                -32.525299,
                -32.510799,
                -32.499199,
                -32.487598,
                -32.473202,
                -32.461601,
                -32.435501,
                -32.435501,
                -32.426800,
                -32.412300,
                -32.400799,
                -32.392101,
                -32.380501,
                -32.366001,
                -32.357300,
                -32.348598,
                -32.339901,
                -32.328400,
                -32.319698,
                -32.311001,
                -32.299400,
                -32.290699,
                -32.282001,
                -32.273300,
                -32.264599,
                -32.256001,
                -32.247299,
                -32.238602,
                -32.229900,
                -32.224098,
                -32.215401,
                -32.203800,
                -32.198002,
                -32.189400,
                -32.183601,
                -32.174900,
                -32.169102,
                -32.163300,
                -32.154598,
                -32.145901,
                -32.140099,
                -32.131401,
                -32.125599,
                -32.119801,
                -32.111198,
                -32.105400,
                -32.096699,
                -32.090900,
                -32.088001,
                -32.079300,
                -32.073502,
                -32.067699,
                -32.061901,
                -32.056099,
                -32.050301,
                -32.044498,
                -32.038799,
                -32.033001,
                -32.027199,
                -32.024300,
                -32.018501,
                -32.012699,
                -32.004002,
                -32.001099,
                -31.995300,
                -31.989500,
                -31.983700,
                -31.977900,
                -31.972099,
                -31.969299,
                -31.963501,
                -31.957701,
                -31.951900,
                -31.946100,
                -31.940300,
                -31.937401,
                -31.931601,
                -31.925800,
                -31.922899,
                -31.917101,
                -31.911301,
                -31.908400,
                -31.902599,
                -31.896900,
                -31.893999,
                -31.888201,
                -31.885300,
                -31.882401,
                -31.876600,
                -31.873699,
                -31.867901,
                -31.862101,
                -31.859200,
                -31.856300,
                -31.850500,
                -31.844700,
                -31.841801,
                -31.838900,
                -31.833099,
                -31.830200,
                -31.827299,
                -31.821600,
                -31.818701,
                -31.812901,
                -31.809999,
                -31.807100,
                -31.801300,
                -31.798401,
                -31.795500,
                -31.789700,
                -31.786800,
            ]
        )

        # Model: y = b1 * (b2+x)**(-1/b3)
        y_pred = b1 * (b2 + x_data) ** (-1.0 / b3)

        # Compute the residuals
        residuals = y_pred - y_data

        # Sum of squared residuals
        return jnp.sum(residuals**2)

    @property
    def y0(self):
        # Initial values from SIF file (START1)
        return jnp.array([-2000.0, 50.0, 0.8])

    @property
    def args(self):
        return None

    @property
    def expected_result(self):
        # NIST certified values (https://www.itl.nist.gov/div898/strd/nls/data/bennett5.shtml)
        return jnp.array([-2523.80, 46.737, 0.93218])

    @property
    def expected_objective_value(self):
        # The SIF file doesn't specify the optimal objective value,
        # but from the NIST website, the sum of squared residuals is 5.2404744073E-04
        return jnp.array(5.2404744073e-4)
