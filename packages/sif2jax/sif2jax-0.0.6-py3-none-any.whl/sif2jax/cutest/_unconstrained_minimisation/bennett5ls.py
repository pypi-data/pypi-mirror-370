"""
NIST Data fitting problem BENNETT5.

Fit: y = b1 * (b2+x)**(-1/b3) + e

Source:  Problem from the NIST nonlinear regression test set
  http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml

Reference: Bennett, L., L. Swartzendruber, H. Brown, NIST (1994).
  Superconductivity Magnetization Modeling.

SIF input: Nick Gould and Tyrone Rees, Oct 2015

classification SUR2-MN-3-0
"""

import jax.numpy as jnp

from ..._problem import AbstractUnconstrainedMinimisation


class BENNETT5LS(AbstractUnconstrainedMinimisation):
    @property
    def name(self) -> str:
        return "BENNETT5LS"

    y0_iD: int = 0
    provided_y0s: frozenset = frozenset({0, 1})

    n: int = 3  # 3 parameters: b1, b2, b3
    m: int = 154  # 154 data points

    @property
    def y0(self):
        if self.y0_iD == 0:
            # START1
            return jnp.array([-2000.0, 50.0, 0.8])
        else:
            # START2
            return jnp.array([-1500.0, 45.0, 0.85])

    @property
    def args(self):
        # X data values
        x_data = jnp.array(
            [
                7.447168e0,
                8.102586e0,
                8.452547e0,
                8.711278e0,
                8.916774e0,
                9.087155e0,
                9.232590e0,
                9.359535e0,
                9.472166e0,
                9.573384e0,
                9.665293e0,
                9.749461e0,
                9.827092e0,
                9.899128e0,
                9.966321e0,
                10.029280e0,
                10.088510e0,
                10.144430e0,
                10.197380e0,
                10.247670e0,
                10.295560e0,
                10.341250e0,
                10.384950e0,
                10.426820e0,
                10.467000e0,
                10.505640e0,
                10.542830e0,
                10.578690e0,
                10.613310e0,
                10.646780e0,
                10.679150e0,
                10.710520e0,
                10.740920e0,
                10.770440e0,
                10.799100e0,
                10.826970e0,
                10.854080e0,
                10.880470e0,
                10.906190e0,
                10.931260e0,
                10.955720e0,
                10.979590e0,
                11.002910e0,
                11.025700e0,
                11.047980e0,
                11.069770e0,
                11.091100e0,
                11.111980e0,
                11.132440e0,
                11.152480e0,
                11.172130e0,
                11.191410e0,
                11.210310e0,
                11.228870e0,
                11.247090e0,
                11.264980e0,
                11.282560e0,
                11.299840e0,
                11.316820e0,
                11.333520e0,
                11.349940e0,
                11.366100e0,
                11.382000e0,
                11.397660e0,
                11.413070e0,
                11.428240e0,
                11.443200e0,
                11.457930e0,
                11.472440e0,
                11.486750e0,
                11.500860e0,
                11.514770e0,
                11.528490e0,
                11.542020e0,
                11.555380e0,
                11.568550e0,
                11.581560e0,
                11.594420e0,
                11.607121e0,
                11.619640e0,
                11.632000e0,
                11.644210e0,
                11.656280e0,
                11.668200e0,
                11.679980e0,
                11.691620e0,
                11.703130e0,
                11.714510e0,
                11.725760e0,
                11.736880e0,
                11.747890e0,
                11.758780e0,
                11.769550e0,
                11.780200e0,
                11.790730e0,
                11.801160e0,
                11.811480e0,
                11.821700e0,
                11.831810e0,
                11.841820e0,
                11.851730e0,
                11.861550e0,
                11.871270e0,
                11.880890e0,
                11.890420e0,
                11.899870e0,
                11.909220e0,
                11.918490e0,
                11.927680e0,
                11.936780e0,
                11.945790e0,
                11.954730e0,
                11.963590e0,
                11.972370e0,
                11.981070e0,
                11.989700e0,
                11.998260e0,
                12.006740e0,
                12.015150e0,
                12.023490e0,
                12.031760e0,
                12.039970e0,
                12.048100e0,
                12.056170e0,
                12.064180e0,
                12.072120e0,
                12.080010e0,
                12.087820e0,
                12.095580e0,
                12.103280e0,
                12.110920e0,
                12.118500e0,
                12.126030e0,
                12.133500e0,
                12.140910e0,
                12.148270e0,
                12.155570e0,
                12.162830e0,
                12.170030e0,
                12.177170e0,
                12.184270e0,
                12.191320e0,
                12.198320e0,
                12.205270e0,
                12.212170e0,
                12.219030e0,
                12.225840e0,
                12.232600e0,
                12.239320e0,
                12.245990e0,
                12.252620e0,
                12.259200e0,
                12.265750e0,
                12.272240e0,
            ]
        )

        # Y data values
        y_data = jnp.array(
            [
                -34.834702e0,
                -34.393200e0,
                -34.152901e0,
                -33.979099e0,
                -33.845901e0,
                -33.732899e0,
                -33.640301e0,
                -33.559200e0,
                -33.486801e0,
                -33.423100e0,
                -33.365101e0,
                -33.313000e0,
                -33.260899e0,
                -33.217400e0,
                -33.176899e0,
                -33.139198e0,
                -33.101601e0,
                -33.066799e0,
                -33.035000e0,
                -33.003101e0,
                -32.971298e0,
                -32.942299e0,
                -32.916302e0,
                -32.890202e0,
                -32.864101e0,
                -32.841000e0,
                -32.817799e0,
                -32.797501e0,
                -32.774300e0,
                -32.757000e0,
                -32.733799e0,
                -32.716400e0,
                -32.699100e0,
                -32.678799e0,
                -32.661400e0,
                -32.644001e0,
                -32.626701e0,
                -32.612202e0,
                -32.597698e0,
                -32.583199e0,
                -32.568699e0,
                -32.554298e0,
                -32.539799e0,
                -32.525299e0,
                -32.510799e0,
                -32.499199e0,
                -32.487598e0,
                -32.473202e0,
                -32.461601e0,
                -32.435501e0,
                -32.435501e0,
                -32.426800e0,
                -32.412300e0,
                -32.400799e0,
                -32.392101e0,
                -32.380501e0,
                -32.366001e0,
                -32.357300e0,
                -32.348598e0,
                -32.339901e0,
                -32.328400e0,
                -32.319698e0,
                -32.311001e0,
                -32.299400e0,
                -32.290699e0,
                -32.282001e0,
                -32.273300e0,
                -32.264599e0,
                -32.256001e0,
                -32.247299e0,
                -32.238602e0,
                -32.229900e0,
                -32.224098e0,
                -32.215401e0,
                -32.203800e0,
                -32.198002e0,
                -32.189400e0,
                -32.183601e0,
                -32.174900e0,
                -32.169102e0,
                -32.163300e0,
                -32.154598e0,
                -32.145901e0,
                -32.140099e0,
                -32.131401e0,
                -32.125599e0,
                -32.119801e0,
                -32.111198e0,
                -32.105400e0,
                -32.096699e0,
                -32.090900e0,
                -32.088001e0,
                -32.079300e0,
                -32.073502e0,
                -32.067699e0,
                -32.061901e0,
                -32.056099e0,
                -32.050301e0,
                -32.044498e0,
                -32.038799e0,
                -32.033001e0,
                -32.027199e0,
                -32.024300e0,
                -32.018501e0,
                -32.012699e0,
                -32.004002e0,
                -32.001099e0,
                -31.995300e0,
                -31.989500e0,
                -31.983700e0,
                -31.977900e0,
                -31.972099e0,
                -31.969299e0,
                -31.963501e0,
                -31.957701e0,
                -31.951900e0,
                -31.946100e0,
                -31.940300e0,
                -31.937401e0,
                -31.931601e0,
                -31.925800e0,
                -31.922899e0,
                -31.917101e0,
                -31.911301e0,
                -31.908400e0,
                -31.902599e0,
                -31.896900e0,
                -31.893999e0,
                -31.888201e0,
                -31.885300e0,
                -31.882401e0,
                -31.876600e0,
                -31.873699e0,
                -31.867901e0,
                -31.862101e0,
                -31.859200e0,
                -31.856300e0,
                -31.850500e0,
                -31.844700e0,
                -31.841801e0,
                -31.838900e0,
                -31.833099e0,
                -31.830200e0,
                -31.827299e0,
                -31.821600e0,
                -31.818701e0,
                -31.812901e0,
                -31.809999e0,
                -31.807100e0,
                -31.801300e0,
                -31.798401e0,
                -31.795500e0,
                -31.789700e0,
                -31.786800e0,
            ]
        )

        return (x_data, y_data)

    def objective(self, y, args):
        b1, b2, b3 = y
        x_data, y_data = args

        # Model: y = b1 * (b2+x)**(-1/b3)
        # Element function from SIF: V1 / (V2 + X) ** (1/V3)
        predicted = b1 / (b2 + x_data) ** (1.0 / b3)

        # Compute sum of squared residuals
        residuals = predicted - y_data
        return jnp.array(jnp.sum(residuals**2))

    @property
    def expected_result(self):
        # The optimal solution is not explicitly given in the SIF file
        return None

    @property
    def expected_objective_value(self):
        # The optimal objective value is not explicitly given in the SIF file
        # Least square problems are bounded below by zero
        return None
