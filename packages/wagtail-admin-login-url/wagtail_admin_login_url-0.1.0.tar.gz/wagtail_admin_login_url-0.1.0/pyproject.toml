[project]
name = "wagtail-admin-login-url"
version = "0.1.0"
description = "Reusable Wagtail Admin URL package to manage wagtail admin login url."
authors = [
    { name = "Malvin Ndip", email = "23006212+DazzyMlv@users.noreply.github.com" },
]
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = [
    "wagtail",
    "headers",
    "footers",
    "django",
    "malvin ndip",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 5.2",
    "Framework :: Wagtail",
    "Framework :: Wagtail :: 6",
    "Framework :: Wagtail :: 7",
    "Framework :: tox",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Software Distribution",
    "Typing :: Typed",
]
dependencies = [
    "django-multiselectfield>=1.0.1",
    "wagtail>=6.4.0",
]


[project.urls]
Homepage = "https://github.com/dazzymlv/wagtail-admin-login-url"
source = "https://github.com/dazzymlv/wagtail-admin-login-url.git"
changelog = "https://github.com/dazzymlv/wagtail-admin-login-url/CHANGELOG.md"
issues = "https://github.com/dazzymlv/wagtail-admin-login-url/issues"
documentation = "https://github.com/dazzymlv/wagtail-admin-login-url/README.md"

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "gprof2dot>=2025.4.14",
    "keepachangelog>=2.0.0",
    "mypy>=1.15.0",
    "pre-commit-hooks>=5.0.0",
    "pre-commit>=4.2.0",
    "project-version-manager>=0.1.1",
    "pytest-asyncio>=0.26.0",
    "ruff>=0.11.8",
    "twine>=6.1.0",
    "taskipy>=1.14.1",
    "wagtail-admin-login-url",
    "wagtail>=6.4.3",
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "tox>=4.25.0",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.taskipy.tasks]
build = {cmd = "uv build", help = "Build package using uv" }
default = "task --list"
format = {cmd = "uv run ruff format . && uv run ruff check --fix --exit-zero && uv run pre-commit run --all-files && uv run mypy .", help = "Format, lint, run pre-commit hooks, and check type hints" }
install = {cmd = "uv sync --group dev --group test", help = "Install development and test dependencies using uv" }
install_editable = "uv add --dev --editable ."
profiling = "uv run python -m cProfile -o profile -m pytest -l && uv run gprof2dot -f pstats profile | dot -Tpng -o profile.png"
publish = {cmd = "uv publish --index pypi", help = "Publish the package to pypi using uv" }
publish-test = {cmd = "uv publish --index testpypi", help = "Publish the package to test pypi using uv" }
push = "uv run git push --follow-tags origin $(shell git rev-parse --abbrev-ref HEAD) && git push origin --tags"
test = "uv run pytest --cov=. --cov-report term:skip-covered --cov-report=html ."

[tool.uv]
package = true

[tool.uv.sources.wagtail-admin-login-url]
workspace = true

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true
default = true

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"
explicit = false # This is the default

[tool.pvm]
version-files = [
    "pyproject.toml:project.version",
    "src/wagtail_admin_login_url/__init__.py:__version__",
]

[tool.tox]
minversion = "4.25.0"
envlist = ["py311", "py313"]

[tool.tox.envs.py311]
deps = [
    "coverage",
    "pytest",
    # "tomli; python_version < '3.11'"
]
commands = [
    "coverage run -m pytest",
    "coverage report",
]

[tool.tox.envs.py313]
deps = ["pytest"]
commands = ["pytest"]

[tool.black]
skip-string-normalization = true
line-length = 120

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py312"
unsafe-fixes = true

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = ["A", "B", "C", "D", "E", "F", "I", "UP"]
fixable = ["A", "B", "C", "D", "E", "F", "I", "UP"]
ignore = [
    "B008",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D213",
    "D415",
    "UP004",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.coverage.run]
omit = [
    "*/__main__.py",
    "*/base.py",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.exclude-package-data]
wagtail_admin_login_url = [
    "*.DS_Store",
    "*.bak",
    "*.log",
    "*.pyc",
    "*.pyo",
    ".github/*",
    "__pycache__/*",
    "docs/*",
    "tests/*",
    "uv.lock",
]
