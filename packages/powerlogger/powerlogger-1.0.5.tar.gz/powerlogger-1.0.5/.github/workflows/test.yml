name: Test PowerLogger (Windows)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PACKAGE_NAME: "powerlogger"

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug repository structure
        shell: powershell
        run: |
          Write-Host "Repository root contents:"
          Get-ChildItem -Name
          
          Write-Host "Checking for requirements.txt..."
          if (Test-Path '../requirements.txt') {
            Write-Host "requirements.txt found"
            Get-Content '../requirements.txt' | Select-Object -First 5
          } else {
            Write-Host "requirements.txt not found"
          }
          
          Write-Host "Checking for pyproject.toml..."
          if (Test-Path '../pyproject.toml') {
            Write-Host "pyproject.toml found"
            Get-Content '../pyproject.toml' | Select-Object -First 5
          } else {
            Write-Host "pyproject.toml not found"
          }
          
          Write-Host "Checking for powerlogger directory..."
          if (Test-Path 'powerlogger') {
            Write-Host "powerlogger directory found"
            Get-ChildItem 'powerlogger' -Recurse -Name | Select-Object -First 10
          } else {
            Write-Host "powerlogger directory not found"
          }
          
          Write-Host "Checking for tests directory..."
          if (Test-Path 'tests') {
            Write-Host "tests directory found"
            Get-ChildItem 'tests' -Recurse -Name | Select-Object -First 10
          } else {
            Write-Host "tests directory not found"
          }
      
      - name: Install dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install rich
          
          # Install dependencies from requirements.txt if it exists
          if (Test-Path '../requirements.txt') {
            Write-Host "Installing dependencies from requirements.txt..."
            pip install -r ../requirements.txt            
          } else {
            Write-Host "Installing basic testing tools..."
            pip install pytest pytest-cov            
          }
      
      - name: Run tests
        shell: powershell
        run: |
          Write-Host "Running tests..."
          if (Test-Path 'tests') {
            python -m pytest tests/ -v
          } else {
            Write-Host "No tests directory found, skipping tests"
          }

  test-matrix:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install rich
        
        Write-Host "Checking repository structure..."
        Get-ChildItem -Recurse -Name | Where-Object { $_ -match "(requirements\.txt|pyproject\.toml)" }
        
        Write-Host "Checking for requirements.txt..."
        if (Test-Path '../requirements.txt') {
          Write-Host "requirements.txt found"
          Get-Content '../requirements.txt' | Select-Object -First 5
        } else {
          Write-Host "requirements.txt not found"
        }
        
        Write-Host "Checking for pyproject.toml..."
        if (Test-Path '../pyproject.toml') {
          Write-Host "pyproject.toml found"
          Get-Content '../pyproject.toml' | Select-Object -First 5
        } else {
          Write-Host "pyproject.toml not found"
        }
        
        # Install dependencies from requirements.txt if it exists
        if (Test-Path '../requirements.txt') {
          Write-Host "Installing dependencies from requirements.txt..."
          pip install -r ../requirements.txt          
        } else {
          Write-Host "Installing basic testing tools..."
          pip install pytest pytest-cov          
        }

    - name: Run tests on Windows ${{ matrix.python-version }}
      shell: powershell
      run: |
        Write-Host "Checking tests directory..."
        if (Test-Path 'tests') {
          Write-Host "tests directory found"
          Get-ChildItem 'tests' -Recurse -Name | Select-Object -First 10
        } else {
          Write-Host "tests directory not found"
        }
        
        Write-Host "Checking powerlogger directory..."
        if (Test-Path 'powerlogger') {
          Write-Host "powerlogger directory found"
          Get-ChildItem 'powerlogger' -Recurse -Name | Select-Object -First 10
        } else {
          Write-Host "powerlogger directory not found"
        }
        
        Write-Host "Running tests..."
        python -m pytest tests/ -v --cov=powerlogger --cov-report=xml --cov-report=term-missing

    - name: Test package build on Windows
      shell: powershell
      run: |
        pip install build twine
        python -m build
        python -m twine check dist/*

    - name: Test local installation on Windows
      shell: powershell
      run: |
        pip install dist/*.whl
        python -c "import powerlogger; Write-Host 'PowerLogger version:' $powerlogger.__version__"
        python -c "from powerlogger import get_logger;logger = get_logger('test');logger.info('Test message on Windows')"
       
    - name: Test Windows-specific features
      shell: powershell
      run: |
        python -c 'from powerlogger import get_logger_with_file_handler;logger = get_logger_with_file_handler("windows_test");logger.warning("Windows warning test")'
        if (Test-Path 'logs\windows_test.log') { 
          Write-Host 'Windows log file contents:' 
          Get-Content 'logs\windows_test.log' | Select-Object -Last 5 
        }

  lint:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install linting tools
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install rich
        
        Write-Host "Checking repository structure..."
        Get-ChildItem -Recurse -Name | Where-Object { $_ -match "(requirements\.txt|pyproject\.toml)" }
        
        Write-Host "Checking for requirements.txt..."
        if (Test-Path '../requirements.txt') {
          Write-Host "requirements.txt found"
          Get-Content '../requirements.txt' | Select-Object -First 5
        } else {
          Write-Host "requirements.txt not found"
        }
        
        Write-Host "Checking for pyproject.toml..."
        if (Test-Path '../pyproject.toml') {
          Write-Host "pyproject.toml found"
          Get-Content '../pyproject.toml' | Select-Object -First 5
        } else {
          Write-Host "pyproject.toml not found"
        }
        
        # Install dependencies from requirements.txt if it exists
        if (Test-Path '../requirements.txt') {
          Write-Host "Installing dependencies from requirements.txt..."
          pip install -r ../requirements.txt
          pip install rich
        } else {
          Write-Host "Installing basic linting tools..."
          pip install black flake8 isort mypy
          pip install rich
        }

    - name: Run Black code formatter
      shell: powershell
      run: |
        Write-Host "Checking powerlogger directory..."
        if (Test-Path 'powerlogger') {
          Write-Host "powerlogger directory found"
          Get-ChildItem 'powerlogger' -Recurse -Name | Select-Object -First 10
        } else {
          Write-Host "powerlogger directory not found"
        }
        
        Write-Host "Running Black formatter..."
        black --check powerlogger/ --diff

    - name: Run flake8 linter
      shell: powershell
      run: |
        Write-Host "Running flake8..."
        flake8 powerlogger/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run isort import sorter
      shell: powershell
      run: |
        Write-Host "Running isort..."
        isort --check-only --diff powerlogger/

    - name: Run mypy type checker
      shell: powershell
      run: |
        Write-Host "Running mypy..."
        mypy powerlogger/ --ignore-missing-imports

  security:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install security tools
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for security vulnerabilities
      shell: powershell
      run: |
        Write-Host "Checking repository structure..."
        Get-ChildItem -Recurse -Name | Where-Object { $_ -match "(requirements\.txt|pyproject\.toml)" }
        
        Write-Host "Checking for requirements.txt..."
        if (Test-Path '../requirements.txt') {
          Write-Host "requirements.txt found"
          Get-Content '../requirements.txt' | Select-Object -First 5
        } else {
          Write-Host "requirements.txt not found"
        }
        
        Write-Host "Checking for pyproject.toml..."
        if (Test-Path '../pyproject.toml') {
          Write-Host "pyproject.toml found"
          Get-Content '../pyproject.toml' | Select-Object -First 5
        } else {
          Write-Host "pyproject.toml not found"
        }
        
        Write-Host "Running security check..."        
        safety check --output json > safety-report.json
        if (Test-Path 'safety-report.json') { 
          Write-Host "Security vulnerabilities found:"
          Get-Content 'safety-report.json' 
        } else {
          Write-Host "No security vulnerabilities found"
        }

    - name: Run bandit security analysis
      shell: powershell
      run: |
        Write-Host "Checking powerlogger directory..."
        if (Test-Path 'powerlogger') {
          Write-Host "powerlogger directory found"
          Get-ChildItem 'powerlogger' -Recurse -Name | Select-Object -First 10
        } else {
          Write-Host "powerlogger directory not found"
        }
        
        Write-Host "Running bandit analysis..."
        bandit -r powerlogger/ -f json -o bandit-report.json
        if (Test-Path 'bandit-report.json') { 
          Write-Host "Bandit security analysis results:"
          Get-Content 'bandit-report.json' 
        } else {
          Write-Host "Bandit analysis completed"
        }

  summary:
    needs: [test, test-matrix, lint, security]
    runs-on: windows-latest
    if: always()
    
    steps:
    - name: Windows Test Summary
      shell: powershell
      run: |
        $summary = @()
        $summary += "## Windows Test Summary"
        $summary += "- Simple Test Job: ${{ needs.test.result }}"
        $summary += "- Matrix Test Job: ${{ needs.test-matrix.result }}"
        $summary += "- Lint Job: ${{ needs.lint.result }}"
        $summary += "- Security Job: ${{ needs.security.result }}"
        
        if ("${{ needs.test.result }}" -eq "success" -and "${{ needs.test-matrix.result }}" -eq "success" -and "${{ needs.lint.result }}" -eq "success" -and "${{ needs.security.result }}" -eq "success") {
          $summary += "- Overall Status: All Windows checks passed"
        } else {
          $summary += "- Overall Status: Some Windows checks failed"
        }
        
        $summary += "- Platform: Windows-optimized testing"
        $summary += "- Windows Features: File handling, log rotation, UTF-8 support verified"
        
        $summary | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }







