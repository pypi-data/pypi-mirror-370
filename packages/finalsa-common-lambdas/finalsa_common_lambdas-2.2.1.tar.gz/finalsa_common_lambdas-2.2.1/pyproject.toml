[project]
name = "finalsa-common-lambdas"
version = "2.2.1"
description = "Common utilities for Finalsa's AWS Lambda functions"
dependencies = [
    "finalsa-common-logger>=1.0.1",
    "finalsa-common-models>=2.0.3",
    "finalsa-sqs-client>=2.1.1",
    "finalsa-traceability>=1.0.1",
    "orjson>=3.10.15",
    "pydantic>=2.11.7",
]
authors = [
 {name = "Luis Jimenez", email = "luis@finalsa.com"},
]
keywords = ["finalsa", "common", "lambda", "aws", "utilities"]
readme = "README.md"
requires-python = ">=3.10"

[project.urls]
Homepage = "https://github.com/finalsa/finalsa-common-lambda"

[project.license]
name = "MIT"
file = "LICENSE.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.sdist]
include = [
  "finalsa/common/lambdas/*.py",
  "finalsa/common/lambdas/app/*.py",
  "finalsa/common/lambdas/common/*.py",
  "finalsa/common/lambdas/http/*.py",
  "finalsa/common/lambdas/sqs/*.py",
  "finalsa/common/lambdas/test/*.py"
]

[tool.hatch.build.targets.wheel]
include = [
  "finalsa/common/lambdas/*.py",
  "finalsa/common/lambdas/app/*.py",
  "finalsa/common/lambdas/common/*.py",
  "finalsa/common/lambdas/http/*.py",
  "finalsa/common/lambdas/sqs/*.py",
  "finalsa/common/lambdas/test/*.py"
]

[dependency-groups]
test = [
    "coverage>=7.6.10",
    "finalsa-common-models>=1.0.1",
    "pytest>=8.3.4",
    "requests>=2.32.3",
]
dev = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "types-requests>=2.31.0",
    "typing-extensions>=4.8.0",
]
typing = [
    "mypy>=1.8.0",
    "types-requests>=2.31.0", 
    "typing-extensions>=4.8.0",
]

# Type checking and development tools
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ruff configuration (replaces black, isort, flake8)
[tool.ruff]
target-version = "py310"
line-length = 100
exclude = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache", 
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "SIM", # flake8-simplify
    "I",  # isort
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "SIM102", # use a single if-statement
    "SIM108", # use ternary operator
    "UP006", # pyupgrade: use `from __future__ import annotations`,
    "UP045", # pyupgrade: use `from __future__ import annotations` for type hints
    "UP007", # pyupgrade: use `from __future__ import annotations` for type hints
    "UP035", # pyupgrade: use `from __future__ import annotations` for type hints
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["finalsa"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests"
]

[tool.coverage.run]
source = ["finalsa"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
