[project]
name = "alea-llm-client"
version = "0.2.3"
description = "ALEA LLM client abstraction library for Python"
authors = [{ name = "ALEA Institute", email = "hello@aleainstitute.ai" }]
requires-python = ">=3.9,<4.0.0"
readme = "README.md"
license = "MIT"
keywords = [
    "alea",
    "llm",
    "client",
    "api",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Utilities",
]
dependencies = [
    "httpx[http2]>=0.28.1",
    "pydantic>=2.9.1",
]

[project.urls]
Homepage = "https://aleainstitute.ai/"
Repository = "https://github.com/alea-institute/alea-llm-client"

[dependency-groups]
dev = [
    "types-lxml>=2024.8.7,<2025",
    "pytest>=8.3.2,<9",
    "pytest-asyncio>=0.23.8,<0.24",
    "pytest-benchmark>=4.0.0,<5",
    "pytest-cov>=5.0.0,<6",
]

[tool.hatch.build.targets.sdist]
include = [
    "alea_llm_client",
    "alea_llm_client",
]
exclude = [
    "tests",
    "docs",
    "examples",
    "docker",
]

[tool.hatch.build.targets.wheel]
include = [
    "alea_llm_client",
    "alea_llm_client",
]
exclude = [
    "tests",
    "docs",
    "examples",
    "docker",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
extend-select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]
ignore = [
    "T201",    # print found
    "PGH003",  # use specific rule codes when ignoring type issues
    "TRY003",  # avoid specifying long messages outside the exception class
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PD901",   # avoid using generic names for pandas DataFrame
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "N806",    # variable in function should be lowercase
    # Architectural decisions for model registry system  
    "BLE001",  # blind-except (intentional for robust fallbacks)
    "TRY301",  # raise-within-try (defensive programming pattern)
    "TRY401",  # verbose-log-message (detailed error context preferred)
    "TRY300",  # try-consider-else (current structure is clearer)
    "B904",    # raise-without-from (some exceptions are intentionally clean)
    "PLR0912", # too-many-branches (model capability detection complexity)
    "PLR0911", # too-many-return-statements (early returns for clarity)
    "PLW2901", # redefined-loop-name (intentional variable reuse pattern)
    "PLW0603", # global-statement (singleton pattern for config loader)
    "ERA001",  # commented-out-code (keeping some template comments)
    "SIM102",  # collapsible-if (separate conditions for readability)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004", "ARG001", "ARG002",  # existing test ignores
    "E501",    # long lines in test content strings
    "TRY002",  # generic exceptions in test mocks
    "SIM117",  # nested with statements for test clarity  
    "B017",    # assert exceptions in pytest patterns
]
"alea_llm_client/llms/constants/grammar_constants.py" = [
    "PLC0415",  # import re inside function for regex validation is fine
]

[tool.isort]
profile = "black"
line_length = 120

[tool.pytest.ini_options]
addopts = "--cov=alea_llm_client --cov-report=term-missing --cov-report=xml --cov-report=html"
