[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[project]
name = "django-ai-agent"
dynamic = ["version"]
description = "Create AI agents with Django and Pydantic AI"
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Matt Aliev", email = "toamatvey@gmail.com"},
]
classifiers = [
    "Framework :: Django",
    "Framework :: Django :: 5.2",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "django>=5.0",
    "django-simple-history>=3.8.0",
    "groq>=0.22.0",
    "logfire>=3.16.1",
    "openai>=1.73.0",
    "pgvector>=0.4.0",
    "pydantic>=2.11.3",
    "pydantic-ai>=0.1.6",
    "voyageai>=0.3.2",
]

[project.optional-dependencies]
dev = [
    "black==25.1.0",
    "pytest==8.0.0",
    "pytest-django==4.7.0",
    "coverage[toml]==7.6.0",
    "model-bakery==1.20.4",
]

[project.urls]
Source = "https://github.com/toamatvey/django-ai-agent"
Changelog = "https://github.com/toamatvey/django-ai-agent/releases"

[dependency-groups]
dev = [
    "build>=1.3.0",
    "twine>=6.1.0",
]

[tool.hatch.build.targets.wheel]
packages = ["django_ai_agent"]

[tool.hatch.build.targets.sdist]
include = ["django_ai_agent", "README.md", "tests"]

[tool.ruff]
line-length = 120
target-version = "py310"
include = [
    "django_ai_agent/**/*.py",
    "tests/**/*.py",
]
exclude = [
    "django_ai_agent/migrations/**/*.py",
]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "RUF018",
    "C90",
    "UP",
    "I",
    "D",
    "TID251",
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true, known-first-party = ["django_ai_agent"] }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = "tests"
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = "test_*.py"
django_find_project = false

[tool.coverage.run]
source = ["django_ai_agent"]
omit = ["django_ai_agent/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
