name: CI-Nix

# Events that trigger workflow
on:
  # Runs on all pushes to branches
  push:
  # Runs on all PRs
  pull_request:
  # Manual Dispatch
  workflow_dispatch:

jobs:
  prepare-pdks:
    name: Cache PDKs
    runs-on: ubuntu-22.04
    outputs:
      opdks_rev: ${{ steps.set-rev.outputs.opdks_rev }}
    steps:
      - uses: actions/checkout@v3
      - name: Python Dependencies
        run: |
          python3 -m pip install -r ./requirements.txt
      - name: Get Open PDKs Revision
        id: set-rev
        run: |
          echo "opdks_rev=$(cat ./cace/open_pdks_rev)" >> $GITHUB_OUTPUT
      - name: Cache sky130 PDK
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ciel-sky130
          key: cache-sky130-pdk-${{ steps.set-rev.outputs.opdks_rev }}
      - name: Enable sky130 PDK
        run: |
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          ciel enable --pdk-family sky130 --pdk-root ${{ github.workspace }}/.ciel-sky130 ${{ steps.set-rev.outputs.opdks_rev }}
      - name: Cache gf180mcu PDK
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ciel-gf180mcu
          key: cache-gf180mcu-pdk-${{ steps.set-rev.outputs.opdks_rev }}
      - name: Enable gf180mcu PDK
        run: |
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          ciel enable --pdk-family gf180mcu --pdk-root ${{ github.workspace }}/.ciel-gf180mcu ${{ steps.set-rev.outputs.opdks_rev }}
      - name: Checkout submodules
        uses: actions/checkout@v3
        with:
          submodules: true
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install Dependencies
        run: make dependencies
      - name: Lint
        run: |
          make lint
  build-py:
    runs-on: ubuntu-22.04
    needs: [lint, prepare-pdks]
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false
    name: Build and Unit Test (Python ${{ matrix.python-version }})
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache sky130 PDK
        id: cache-sky130-pdk
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ciel-sky130
          key: cache-sky130-pdk-${{ needs.prepare-pdks.outputs.opdks_rev }}
      - name: Enable sky130 PDK
        if: steps.cache-sky130-pdk.outputs.cache-hit != 'true'
        run: |
          pip3 install -r ./requirements.txt
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          ciel enable --pdk-family sky130 --pdk-root ${{ github.workspace }}/.ciel-sky130 ${{ needs.prepare-pdks.outputs.opdks_rev }}
      - name: Run Unit Tests
        run: echo TODO
  build-linux-x86_64:
    needs: lint
    runs-on: ubuntu-22.04
    name: Build (Nix/x86_64-linux)
    steps:
      - uses: actions/checkout@v4
      - name: Set up GITHUB_TOKEN
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-substituters = https://${{ vars.NIX_CACHE }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          nix_system: x86_64-linux
          run_tests: "true"
  build-linux-aarch64:
    needs: lint
    runs-on: ubuntu-22.04-arm
    name: Build (Nix/aarch64-linux)
    steps:
      - uses: actions/checkout@v4
      - name: Set up GITHUB_TOKEN
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-substituters = https://${{ vars.NIX_CACHE }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          nix_system: aarch64-linux
          run_tests: "true"
  build-darwin:
    strategy:
      matrix:
        os:
          [
            {
              name: "macOS 13",
              family: "darwin",
              runner: "macos-13",
              arch: "x86_64",
              nix: "x86_64-darwin",
            },
            {
              name: "macOS 14",
              family: "darwin",
              runner: "macos-15",
              arch: "aarch64",
              nix: "aarch64-darwin",
            },
          ]
      fail-fast: false
    needs: lint
    runs-on: ${{ matrix.os.runner }}
    name: Build (Nix/${{ matrix.os.nix }})
    steps:
      - uses: actions/checkout@v4
      - name: Set up GITHUB_TOKEN
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-substituters = https://${{ vars.NIX_CACHE }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          nix_system: ${{ matrix.os.nix }}
          shell: "zsh {0}"
          run_tests: "true"
  test:
    runs-on: ubuntu-22.04
    needs: [build-linux-x86_64, prepare-pdks]
    name: Test Design ${{ matrix.test_name }} (${{ matrix.pdk }})
    strategy:
      fail-fast: false
      matrix:
        test_name: ["test"]
        pdk: ["sky130A"]
        pdk_family: ["sky130"]
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          root-reserve-mb: 20480
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Check if Git
        run: |
          git status || true
          tree .git || true
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-substituters = https://${{ vars.NIX_CACHE }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}
      - name: Build with Nix
        uses: ./.github/actions/build_nix
        with:
          nix_system: x86_64-linux
      - name: Check Nix
        run: |
          sudo du -hs /nix/store/* | sort -h | tail -n 10
          sudo tree /nix/store/*-openlane2 || true
      - name: Cache PDK
        id: cache-pdk
        uses: actions/cache@v4
        with:
          path: ./.ciel-${{ matrix.pdk_family }}
          key: cache-${{ matrix.pdk_family }}-pdk-${{ needs.prepare-pdks.outputs.opdks_rev }}
          enableCrossOsArchive: true
      - name: Enable PDKs
        if: steps.cache-pdk.outputs.cache-hit != 'true'
        run: |
          pip3 install -r ./requirements.txt
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          ciel enable --pdk-family ${{ matrix.pdk_family }} \
            --pdk-root ./.ciel-${{ matrix.pdk_family }} \
            ${{ needs.prepare-pdks.outputs.opdks_rev }}
