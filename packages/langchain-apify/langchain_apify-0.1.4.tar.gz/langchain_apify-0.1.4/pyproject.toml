[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "langchain-apify"
version = "0.1.4"
description = "An integration package connecting Apify and LangChain"
authors = ["Apify Technologies s.r.o. <support@apify.com>"]
readme = "README.md"
repository = "https://github.com/apify/langchain-apify"
license = "Apache-2.0"

[tool.mypy]
disallow_untyped_defs = true

[tool.poetry.urls]
"Apify Homepage" = "https://apify.com"
"Source Code" = "https://github.com/apify/langchain-apify/tree/main/"
"Release Notes" = "https://github.com/apify/langchain-apify/releases?expanded=true"
"Issue Tracker" = "https://github.com/apify/langchain-apify/issues"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
langchain-core = "^0.3.15"
apify-client = "^1.8.1"
eval-type-backport = "^0.2.2"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100",     # Missing docstring in public module
    "D104",     # Missing docstring in public package
    "D107",     # Missing docstring in `__init__`
    "COM812",   # Missing trailing comma
    "ISC001",   # Single line implicit concatenation
    "RUF101",   # redirected-noqa
    "S105",     # Possible hard-coded password
    "S106",     # Checks for potential uses of hardcoded passwords in function calls.
    "CPY001"    # missing copyright notice
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{scripts}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "T201",    # Use of `print` statement
    "PERF203", # try`-`except` within a loop incurs performance overhead
    "BLE001",  # Do not catch blind exception: `Exception`
]
"**/{docs/examples}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "T201",    # Use of `print` statement
]
"**/{tests}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `{name}`
    "T20",     # flake8-print
    "TRY301",  # Abstract `raise` to an inner function
    "TID252",  # Prefer absolute imports over relative imports from parent modules
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5"
markers = [
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
langchain-openai = "^0.3.2"
langgraph = "^0.2.68"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
pytest-socket = "^0.7.0"
pytest-watcher = "^0.3.4"
langchain-tests = "^0.3.5"

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint.dependencies]
ruff = "^0.5"
types-requests = "^2.32.0.20241016"

[tool.poetry.group.typing.dependencies]
mypy = "^1.10"
