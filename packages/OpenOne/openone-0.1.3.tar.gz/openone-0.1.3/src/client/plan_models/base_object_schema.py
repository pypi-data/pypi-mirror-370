# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class BaseObjectSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'AnyOfbaseObjectSchemaId',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'creator': 'BaseObjectSchemaCreator',
        'updater': 'BaseObjectSchemaUpdater'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'creator': 'creator',
        'updater': 'updater'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, creator=None, updater=None):  # noqa: E501
        """BaseObjectSchema - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._creator = None
        self._updater = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if creator is not None:
            self.creator = creator
        if updater is not None:
            self.updater = updater

    @property
    def id(self):
        """Gets the id of this BaseObjectSchema.  # noqa: E501


        :return: The id of this BaseObjectSchema.  # noqa: E501
        :rtype: AnyOfbaseObjectSchemaId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseObjectSchema.


        :param id: The id of this BaseObjectSchema.  # noqa: E501
        :type: AnyOfbaseObjectSchemaId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this BaseObjectSchema.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this BaseObjectSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BaseObjectSchema.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this BaseObjectSchema.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BaseObjectSchema.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this BaseObjectSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BaseObjectSchema.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this BaseObjectSchema.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def creator(self):
        """Gets the creator of this BaseObjectSchema.  # noqa: E501


        :return: The creator of this BaseObjectSchema.  # noqa: E501
        :rtype: BaseObjectSchemaCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this BaseObjectSchema.


        :param creator: The creator of this BaseObjectSchema.  # noqa: E501
        :type: BaseObjectSchemaCreator
        """

        self._creator = creator

    @property
    def updater(self):
        """Gets the updater of this BaseObjectSchema.  # noqa: E501


        :return: The updater of this BaseObjectSchema.  # noqa: E501
        :rtype: BaseObjectSchemaUpdater
        """
        return self._updater

    @updater.setter
    def updater(self, updater):
        """Sets the updater of this BaseObjectSchema.


        :param updater: The updater of this BaseObjectSchema.  # noqa: E501
        :type: BaseObjectSchemaUpdater
        """

        self._updater = updater

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseObjectSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseObjectSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
