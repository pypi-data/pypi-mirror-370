# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ShareRequestWithPersonId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'person_id': 'AnyOfshareRequestWithPersonIdPersonId',
        'role': 'str',
        'policy': 'str'
    }

    attribute_map = {
        'person_id': 'personId',
        'role': 'role',
        'policy': 'policy'
    }

    def __init__(self, person_id=None, role=None, policy=None):  # noqa: E501
        """ShareRequestWithPersonId - a model defined in Swagger"""  # noqa: E501
        self._person_id = None
        self._role = None
        self._policy = None
        self.discriminator = None
        self.person_id = person_id
        self.role = role
        self.policy = policy

    @property
    def person_id(self):
        """Gets the person_id of this ShareRequestWithPersonId.  # noqa: E501


        :return: The person_id of this ShareRequestWithPersonId.  # noqa: E501
        :rtype: AnyOfshareRequestWithPersonIdPersonId
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this ShareRequestWithPersonId.


        :param person_id: The person_id of this ShareRequestWithPersonId.  # noqa: E501
        :type: AnyOfshareRequestWithPersonIdPersonId
        """
        if person_id is None:
            raise ValueError("Invalid value for `person_id`, must not be `None`")  # noqa: E501

        self._person_id = person_id

    @property
    def role(self):
        """Gets the role of this ShareRequestWithPersonId.  # noqa: E501

        Role that should be assigned. * `collaborator` - A user who has access to a plan but does not own it is a collaborator. * `readOnly` - Allow the user to view and run the plan.  # noqa: E501

        :return: The role of this ShareRequestWithPersonId.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ShareRequestWithPersonId.

        Role that should be assigned. * `collaborator` - A user who has access to a plan but does not own it is a collaborator. * `readOnly` - Allow the user to view and run the plan.  # noqa: E501

        :param role: The role of this ShareRequestWithPersonId.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["collaborator", "readOnly"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def policy(self):
        """Gets the policy of this ShareRequestWithPersonId.  # noqa: E501

        Policy that should be assigned. * `plan_editor` - Plan editor, can edit plan description and share the plan with others. * `plan_viewer` - Plan viewer, can see and run the plan.  # noqa: E501

        :return: The policy of this ShareRequestWithPersonId.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ShareRequestWithPersonId.

        Policy that should be assigned. * `plan_editor` - Plan editor, can edit plan description and share the plan with others. * `plan_viewer` - Plan viewer, can see and run the plan.  # noqa: E501

        :param policy: The policy of this ShareRequestWithPersonId.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        allowed_values = ["plan_editor", "plan_viewer"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareRequestWithPersonId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareRequestWithPersonId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
