# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ImportPlanPackageSuccessfulResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow_packages': 'list[ImportFlowPackageResponse]',
        'plan_package': 'Plan',
        'task_count': 'int'
    }

    attribute_map = {
        'flow_packages': 'flowPackages',
        'plan_package': 'planPackage',
        'task_count': 'taskCount'
    }

    def __init__(self, flow_packages=None, plan_package=None, task_count=None):  # noqa: E501
        """ImportPlanPackageSuccessfulResponse - a model defined in Swagger"""  # noqa: E501
        self._flow_packages = None
        self._plan_package = None
        self._task_count = None
        self.discriminator = None
        self.flow_packages = flow_packages
        self.plan_package = plan_package
        self.task_count = task_count

    @property
    def flow_packages(self):
        """Gets the flow_packages of this ImportPlanPackageSuccessfulResponse.  # noqa: E501


        :return: The flow_packages of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[ImportFlowPackageResponse]
        """
        return self._flow_packages

    @flow_packages.setter
    def flow_packages(self, flow_packages):
        """Sets the flow_packages of this ImportPlanPackageSuccessfulResponse.


        :param flow_packages: The flow_packages of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :type: list[ImportFlowPackageResponse]
        """
        if flow_packages is None:
            raise ValueError("Invalid value for `flow_packages`, must not be `None`")  # noqa: E501

        self._flow_packages = flow_packages

    @property
    def plan_package(self):
        """Gets the plan_package of this ImportPlanPackageSuccessfulResponse.  # noqa: E501


        :return: The plan_package of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :rtype: Plan
        """
        return self._plan_package

    @plan_package.setter
    def plan_package(self, plan_package):
        """Sets the plan_package of this ImportPlanPackageSuccessfulResponse.


        :param plan_package: The plan_package of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :type: Plan
        """
        if plan_package is None:
            raise ValueError("Invalid value for `plan_package`, must not be `None`")  # noqa: E501

        self._plan_package = plan_package

    @property
    def task_count(self):
        """Gets the task_count of this ImportPlanPackageSuccessfulResponse.  # noqa: E501


        :return: The task_count of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this ImportPlanPackageSuccessfulResponse.


        :param task_count: The task_count of this ImportPlanPackageSuccessfulResponse.  # noqa: E501
        :type: int
        """
        if task_count is None:
            raise ValueError("Invalid value for `task_count`, must not be `None`")  # noqa: E501

        self._task_count = task_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportPlanPackageSuccessfulResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPlanPackageSuccessfulResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
