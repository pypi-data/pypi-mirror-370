# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ImportedDatasetRelationalSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relational_path': 'OneOfimportedDatasetRelationalSourceRelationalPath',
        'table_name': 'str',
        'raw': 'list[str]'
    }

    attribute_map = {
        'relational_path': 'relationalPath',
        'table_name': 'tableName',
        'raw': 'raw'
    }

    def __init__(self, relational_path=None, table_name=None, raw=None):  # noqa: E501
        """ImportedDatasetRelationalSource - a model defined in Swagger"""  # noqa: E501
        self._relational_path = None
        self._table_name = None
        self._raw = None
        self.discriminator = None
        if relational_path is not None:
            self.relational_path = relational_path
        if table_name is not None:
            self.table_name = table_name
        if raw is not None:
            self.raw = raw

    @property
    def relational_path(self):
        """Gets the relational_path of this ImportedDatasetRelationalSource.  # noqa: E501


        :return: The relational_path of this ImportedDatasetRelationalSource.  # noqa: E501
        :rtype: OneOfimportedDatasetRelationalSourceRelationalPath
        """
        return self._relational_path

    @relational_path.setter
    def relational_path(self, relational_path):
        """Sets the relational_path of this ImportedDatasetRelationalSource.


        :param relational_path: The relational_path of this ImportedDatasetRelationalSource.  # noqa: E501
        :type: OneOfimportedDatasetRelationalSourceRelationalPath
        """

        self._relational_path = relational_path

    @property
    def table_name(self):
        """Gets the table_name of this ImportedDatasetRelationalSource.  # noqa: E501


        :return: The table_name of this ImportedDatasetRelationalSource.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ImportedDatasetRelationalSource.


        :param table_name: The table_name of this ImportedDatasetRelationalSource.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def raw(self):
        """Gets the raw of this ImportedDatasetRelationalSource.  # noqa: E501


        :return: The raw of this ImportedDatasetRelationalSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this ImportedDatasetRelationalSource.


        :param raw: The raw of this ImportedDatasetRelationalSource.  # noqa: E501
        :type: list[str]
        """

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportedDatasetRelationalSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportedDatasetRelationalSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
