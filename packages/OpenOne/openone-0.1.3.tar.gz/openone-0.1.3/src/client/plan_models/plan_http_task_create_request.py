# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class PlanHTTPTaskCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'method': 'str',
        'url': 'str',
        'body': 'str',
        'headers': 'object',
        'ssl_verification': 'bool',
        'secret_key': 'str',
        'max_retries': 'int',
        'sample_response_body': 'str',
        'sample_response_headers': 'object',
        'should_update_sample_response': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'method': 'method',
        'url': 'url',
        'body': 'body',
        'headers': 'headers',
        'ssl_verification': 'sslVerification',
        'secret_key': 'secretKey',
        'max_retries': 'maxRetries',
        'sample_response_body': 'sampleResponseBody',
        'sample_response_headers': 'sampleResponseHeaders',
        'should_update_sample_response': 'shouldUpdateSampleResponse'
    }

    def __init__(self, type=None, method=None, url=None, body=None, headers=None, ssl_verification=None, secret_key=None, max_retries=None, sample_response_body=None, sample_response_headers=None, should_update_sample_response=None):  # noqa: E501
        """PlanHTTPTaskCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._method = None
        self._url = None
        self._body = None
        self._headers = None
        self._ssl_verification = None
        self._secret_key = None
        self._max_retries = None
        self._sample_response_body = None
        self._sample_response_headers = None
        self._should_update_sample_response = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url
        if body is not None:
            self.body = body
        if headers is not None:
            self.headers = headers
        if ssl_verification is not None:
            self.ssl_verification = ssl_verification
        if secret_key is not None:
            self.secret_key = secret_key
        if max_retries is not None:
            self.max_retries = max_retries
        if sample_response_body is not None:
            self.sample_response_body = sample_response_body
        if sample_response_headers is not None:
            self.sample_response_headers = sample_response_headers
        if should_update_sample_response is not None:
            self.should_update_sample_response = should_update_sample_response

    @property
    def type(self):
        """Gets the type of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The type of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlanHTTPTaskCreateRequest.


        :param type: The type of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def method(self):
        """Gets the method of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The method of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PlanHTTPTaskCreateRequest.


        :param method: The method of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The url of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PlanHTTPTaskCreateRequest.


        :param url: The url of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def body(self):
        """Gets the body of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The body of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PlanHTTPTaskCreateRequest.


        :param body: The body of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The headers of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this PlanHTTPTaskCreateRequest.


        :param headers: The headers of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: object
        """

        self._headers = headers

    @property
    def ssl_verification(self):
        """Gets the ssl_verification of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The ssl_verification of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_verification

    @ssl_verification.setter
    def ssl_verification(self, ssl_verification):
        """Sets the ssl_verification of this PlanHTTPTaskCreateRequest.


        :param ssl_verification: The ssl_verification of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: bool
        """

        self._ssl_verification = ssl_verification

    @property
    def secret_key(self):
        """Gets the secret_key of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The secret_key of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this PlanHTTPTaskCreateRequest.


        :param secret_key: The secret_key of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def max_retries(self):
        """Gets the max_retries of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The max_retries of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this PlanHTTPTaskCreateRequest.


        :param max_retries: The max_retries of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: int
        """

        self._max_retries = max_retries

    @property
    def sample_response_body(self):
        """Gets the sample_response_body of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The sample_response_body of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_response_body

    @sample_response_body.setter
    def sample_response_body(self, sample_response_body):
        """Sets the sample_response_body of this PlanHTTPTaskCreateRequest.


        :param sample_response_body: The sample_response_body of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._sample_response_body = sample_response_body

    @property
    def sample_response_headers(self):
        """Gets the sample_response_headers of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The sample_response_headers of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._sample_response_headers

    @sample_response_headers.setter
    def sample_response_headers(self, sample_response_headers):
        """Sets the sample_response_headers of this PlanHTTPTaskCreateRequest.


        :param sample_response_headers: The sample_response_headers of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: object
        """

        self._sample_response_headers = sample_response_headers

    @property
    def should_update_sample_response(self):
        """Gets the should_update_sample_response of this PlanHTTPTaskCreateRequest.  # noqa: E501


        :return: The should_update_sample_response of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._should_update_sample_response

    @should_update_sample_response.setter
    def should_update_sample_response(self, should_update_sample_response):
        """Sets the should_update_sample_response of this PlanHTTPTaskCreateRequest.


        :param should_update_sample_response: The should_update_sample_response of this PlanHTTPTaskCreateRequest.  # noqa: E501
        :type: bool
        """

        self._should_update_sample_response = should_update_sample_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanHTTPTaskCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanHTTPTaskCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
