# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ScheduleCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'email': 'str',
        'name': 'str',
        'is_disabled': 'bool',
        'state': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'user_avatar': 'ScheduleCreatorUserAvatar'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'name': 'name',
        'is_disabled': 'isDisabled',
        'state': 'state',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'user_avatar': 'userAvatar'
    }

    def __init__(self, id=None, email=None, name=None, is_disabled=None, state=None, created_at=None, updated_at=None, user_avatar=None):  # noqa: E501
        """ScheduleCreator - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._name = None
        self._is_disabled = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._user_avatar = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user_avatar is not None:
            self.user_avatar = user_avatar

    @property
    def id(self):
        """Gets the id of this ScheduleCreator.  # noqa: E501

        unique identifier for this object.  # noqa: E501

        :return: The id of this ScheduleCreator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleCreator.

        unique identifier for this object.  # noqa: E501

        :param id: The id of this ScheduleCreator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this ScheduleCreator.  # noqa: E501


        :return: The email of this ScheduleCreator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ScheduleCreator.


        :param email: The email of this ScheduleCreator.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ScheduleCreator.  # noqa: E501

        name of the user  # noqa: E501

        :return: The name of this ScheduleCreator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleCreator.

        name of the user  # noqa: E501

        :param name: The name of this ScheduleCreator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_disabled(self):
        """Gets the is_disabled of this ScheduleCreator.  # noqa: E501

        If true, the account is disabled. This property can only be changed by an admin account.  # noqa: E501

        :return: The is_disabled of this ScheduleCreator.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this ScheduleCreator.

        If true, the account is disabled. This property can only be changed by an admin account.  # noqa: E501

        :param is_disabled: The is_disabled of this ScheduleCreator.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def state(self):
        """Gets the state of this ScheduleCreator.  # noqa: E501

        Current state of the user account. This property can only be changed by an admin account. * `active` - User is active and usable in the workspace * `hidden` - User cannot access the workspace. User's data remains.  # noqa: E501

        :return: The state of this ScheduleCreator.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScheduleCreator.

        Current state of the user account. This property can only be changed by an admin account. * `active` - User is active and usable in the workspace * `hidden` - User cannot access the workspace. User's data remains.  # noqa: E501

        :param state: The state of this ScheduleCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "hidden"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this ScheduleCreator.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this ScheduleCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ScheduleCreator.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this ScheduleCreator.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ScheduleCreator.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this ScheduleCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ScheduleCreator.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this ScheduleCreator.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_avatar(self):
        """Gets the user_avatar of this ScheduleCreator.  # noqa: E501


        :return: The user_avatar of this ScheduleCreator.  # noqa: E501
        :rtype: ScheduleCreatorUserAvatar
        """
        return self._user_avatar

    @user_avatar.setter
    def user_avatar(self, user_avatar):
        """Sets the user_avatar of this ScheduleCreator.


        :param user_avatar: The user_avatar of this ScheduleCreator.  # noqa: E501
        :type: ScheduleCreatorUserAvatar
        """

        self._user_avatar = user_avatar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
