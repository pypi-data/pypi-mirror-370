# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ImportFlowPackageSuccessfulResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted_objects': 'object',
        'created_object_mapping': 'object',
        'import_rule_changes': 'ImportFlowPackageSuccessfulResponseImportRuleChanges',
        'primary_flow_ids': 'list[AnyOfimportFlowPackageSuccessfulResponsePrimaryFlowIdsItems]',
        'flows': 'list[Flow]',
        'datasources': 'list[ImportedDataset]',
        'flownodes': 'list[FlowNode]',
        'flowedges': 'list[FlowEdge]',
        'recipes': 'list[Recipe]',
        'outputobjects': 'list[OutputObject]',
        'webhookflowtasks': 'list[object]',
        'release': 'object'
    }

    attribute_map = {
        'deleted_objects': 'deletedObjects',
        'created_object_mapping': 'createdObjectMapping',
        'import_rule_changes': 'importRuleChanges',
        'primary_flow_ids': 'primaryFlowIds',
        'flows': 'flows',
        'datasources': 'datasources',
        'flownodes': 'flownodes',
        'flowedges': 'flowedges',
        'recipes': 'recipes',
        'outputobjects': 'outputobjects',
        'webhookflowtasks': 'webhookflowtasks',
        'release': 'release'
    }

    def __init__(self, deleted_objects=None, created_object_mapping=None, import_rule_changes=None, primary_flow_ids=None, flows=None, datasources=None, flownodes=None, flowedges=None, recipes=None, outputobjects=None, webhookflowtasks=None, release=None):  # noqa: E501
        """ImportFlowPackageSuccessfulResponse - a model defined in Swagger"""  # noqa: E501
        self._deleted_objects = None
        self._created_object_mapping = None
        self._import_rule_changes = None
        self._primary_flow_ids = None
        self._flows = None
        self._datasources = None
        self._flownodes = None
        self._flowedges = None
        self._recipes = None
        self._outputobjects = None
        self._webhookflowtasks = None
        self._release = None
        self.discriminator = None
        if deleted_objects is not None:
            self.deleted_objects = deleted_objects
        if created_object_mapping is not None:
            self.created_object_mapping = created_object_mapping
        if import_rule_changes is not None:
            self.import_rule_changes = import_rule_changes
        self.primary_flow_ids = primary_flow_ids
        self.flows = flows
        if datasources is not None:
            self.datasources = datasources
        if flownodes is not None:
            self.flownodes = flownodes
        if flowedges is not None:
            self.flowedges = flowedges
        if recipes is not None:
            self.recipes = recipes
        if outputobjects is not None:
            self.outputobjects = outputobjects
        if webhookflowtasks is not None:
            self.webhookflowtasks = webhookflowtasks
        if release is not None:
            self.release = release

    @property
    def deleted_objects(self):
        """Gets the deleted_objects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The deleted_objects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: object
        """
        return self._deleted_objects

    @deleted_objects.setter
    def deleted_objects(self, deleted_objects):
        """Sets the deleted_objects of this ImportFlowPackageSuccessfulResponse.


        :param deleted_objects: The deleted_objects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: object
        """

        self._deleted_objects = deleted_objects

    @property
    def created_object_mapping(self):
        """Gets the created_object_mapping of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The created_object_mapping of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: object
        """
        return self._created_object_mapping

    @created_object_mapping.setter
    def created_object_mapping(self, created_object_mapping):
        """Sets the created_object_mapping of this ImportFlowPackageSuccessfulResponse.


        :param created_object_mapping: The created_object_mapping of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: object
        """

        self._created_object_mapping = created_object_mapping

    @property
    def import_rule_changes(self):
        """Gets the import_rule_changes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The import_rule_changes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: ImportFlowPackageSuccessfulResponseImportRuleChanges
        """
        return self._import_rule_changes

    @import_rule_changes.setter
    def import_rule_changes(self, import_rule_changes):
        """Sets the import_rule_changes of this ImportFlowPackageSuccessfulResponse.


        :param import_rule_changes: The import_rule_changes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: ImportFlowPackageSuccessfulResponseImportRuleChanges
        """

        self._import_rule_changes = import_rule_changes

    @property
    def primary_flow_ids(self):
        """Gets the primary_flow_ids of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The primary_flow_ids of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[AnyOfimportFlowPackageSuccessfulResponsePrimaryFlowIdsItems]
        """
        return self._primary_flow_ids

    @primary_flow_ids.setter
    def primary_flow_ids(self, primary_flow_ids):
        """Sets the primary_flow_ids of this ImportFlowPackageSuccessfulResponse.


        :param primary_flow_ids: The primary_flow_ids of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[AnyOfimportFlowPackageSuccessfulResponsePrimaryFlowIdsItems]
        """
        if primary_flow_ids is None:
            raise ValueError("Invalid value for `primary_flow_ids`, must not be `None`")  # noqa: E501

        self._primary_flow_ids = primary_flow_ids

    @property
    def flows(self):
        """Gets the flows of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The flows of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[Flow]
        """
        return self._flows

    @flows.setter
    def flows(self, flows):
        """Sets the flows of this ImportFlowPackageSuccessfulResponse.


        :param flows: The flows of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[Flow]
        """
        if flows is None:
            raise ValueError("Invalid value for `flows`, must not be `None`")  # noqa: E501

        self._flows = flows

    @property
    def datasources(self):
        """Gets the datasources of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The datasources of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[ImportedDataset]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this ImportFlowPackageSuccessfulResponse.


        :param datasources: The datasources of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[ImportedDataset]
        """

        self._datasources = datasources

    @property
    def flownodes(self):
        """Gets the flownodes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The flownodes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[FlowNode]
        """
        return self._flownodes

    @flownodes.setter
    def flownodes(self, flownodes):
        """Sets the flownodes of this ImportFlowPackageSuccessfulResponse.


        :param flownodes: The flownodes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[FlowNode]
        """

        self._flownodes = flownodes

    @property
    def flowedges(self):
        """Gets the flowedges of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The flowedges of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[FlowEdge]
        """
        return self._flowedges

    @flowedges.setter
    def flowedges(self, flowedges):
        """Sets the flowedges of this ImportFlowPackageSuccessfulResponse.


        :param flowedges: The flowedges of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[FlowEdge]
        """

        self._flowedges = flowedges

    @property
    def recipes(self):
        """Gets the recipes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The recipes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[Recipe]
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this ImportFlowPackageSuccessfulResponse.


        :param recipes: The recipes of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[Recipe]
        """

        self._recipes = recipes

    @property
    def outputobjects(self):
        """Gets the outputobjects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The outputobjects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[OutputObject]
        """
        return self._outputobjects

    @outputobjects.setter
    def outputobjects(self, outputobjects):
        """Sets the outputobjects of this ImportFlowPackageSuccessfulResponse.


        :param outputobjects: The outputobjects of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[OutputObject]
        """

        self._outputobjects = outputobjects

    @property
    def webhookflowtasks(self):
        """Gets the webhookflowtasks of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The webhookflowtasks of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._webhookflowtasks

    @webhookflowtasks.setter
    def webhookflowtasks(self, webhookflowtasks):
        """Sets the webhookflowtasks of this ImportFlowPackageSuccessfulResponse.


        :param webhookflowtasks: The webhookflowtasks of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: list[object]
        """

        self._webhookflowtasks = webhookflowtasks

    @property
    def release(self):
        """Gets the release of this ImportFlowPackageSuccessfulResponse.  # noqa: E501


        :return: The release of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :rtype: object
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this ImportFlowPackageSuccessfulResponse.


        :param release: The release of this ImportFlowPackageSuccessfulResponse.  # noqa: E501
        :type: object
        """

        self._release = release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportFlowPackageSuccessfulResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportFlowPackageSuccessfulResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
