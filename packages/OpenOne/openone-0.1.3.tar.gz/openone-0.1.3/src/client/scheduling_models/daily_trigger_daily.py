# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class DailyTriggerDaily(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minute_of_hour': 'int',
        'hour_of_day': 'int',
        'utc_start_date_time': 'datetime',
        'utc_end_date_time': 'datetime',
        'only_working_days': 'bool'
    }

    attribute_map = {
        'minute_of_hour': 'minuteOfHour',
        'hour_of_day': 'hourOfDay',
        'utc_start_date_time': 'utcStartDateTime',
        'utc_end_date_time': 'utcEndDateTime',
        'only_working_days': 'onlyWorkingDays'
    }

    def __init__(self, minute_of_hour=None, hour_of_day=None, utc_start_date_time=None, utc_end_date_time=None, only_working_days=None):  # noqa: E501
        """DailyTriggerDaily - a model defined in API spec"""  # noqa: E501
        self._minute_of_hour = None
        self._hour_of_day = None
        self._utc_start_date_time = None
        self._utc_end_date_time = None
        self._only_working_days = None
        self.discriminator = None
        self.minute_of_hour = minute_of_hour
        self.hour_of_day = hour_of_day
        if utc_start_date_time is not None:
            self.utc_start_date_time = utc_start_date_time
        if utc_end_date_time is not None:
            self.utc_end_date_time = utc_end_date_time
        if only_working_days is not None:
            self.only_working_days = only_working_days

    @property
    def minute_of_hour(self):
        """Gets the minute_of_hour of this DailyTriggerDaily.  # noqa: E501

        Minute of the hour, between 0 and 59 included  # noqa: E501

        :return: The minute_of_hour of this DailyTriggerDaily.  # noqa: E501
        :rtype: int
        """
        return self._minute_of_hour

    @minute_of_hour.setter
    def minute_of_hour(self, minute_of_hour):
        """Sets the minute_of_hour of this DailyTriggerDaily.

        Minute of the hour, between 0 and 59 included  # noqa: E501

        :param minute_of_hour: The minute_of_hour of this DailyTriggerDaily.  # noqa: E501
        :type: int
        """
        if minute_of_hour is None:
            raise ValueError("Invalid value for `minute_of_hour`, must not be `None`")  # noqa: E501

        self._minute_of_hour = minute_of_hour

    @property
    def hour_of_day(self):
        """Gets the hour_of_day of this DailyTriggerDaily.  # noqa: E501

        Hour of day, between 0 and 23 included  # noqa: E501

        :return: The hour_of_day of this DailyTriggerDaily.  # noqa: E501
        :rtype: int
        """
        return self._hour_of_day

    @hour_of_day.setter
    def hour_of_day(self, hour_of_day):
        """Sets the hour_of_day of this DailyTriggerDaily.

        Hour of day, between 0 and 23 included  # noqa: E501

        :param hour_of_day: The hour_of_day of this DailyTriggerDaily.  # noqa: E501
        :type: int
        """
        if hour_of_day is None:
            raise ValueError("Invalid value for `hour_of_day`, must not be `None`")  # noqa: E501

        self._hour_of_day = hour_of_day

    @property
    def utc_start_date_time(self):
        """Gets the utc_start_date_time of this DailyTriggerDaily.  # noqa: E501

        date-time in UTC format of start of trigger validity, eg. \"2030-12-03T10:15:30Z\"  # noqa: E501

        :return: The utc_start_date_time of this DailyTriggerDaily.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_start_date_time

    @utc_start_date_time.setter
    def utc_start_date_time(self, utc_start_date_time):
        """Sets the utc_start_date_time of this DailyTriggerDaily.

        date-time in UTC format of start of trigger validity, eg. \"2030-12-03T10:15:30Z\"  # noqa: E501

        :param utc_start_date_time: The utc_start_date_time of this DailyTriggerDaily.  # noqa: E501
        :type: datetime
        """

        self._utc_start_date_time = utc_start_date_time

    @property
    def utc_end_date_time(self):
        """Gets the utc_end_date_time of this DailyTriggerDaily.  # noqa: E501

        date-time in UTC format of end of trigger validity, eg. \"2030-12-03T10:15:30Z\"  # noqa: E501

        :return: The utc_end_date_time of this DailyTriggerDaily.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_end_date_time

    @utc_end_date_time.setter
    def utc_end_date_time(self, utc_end_date_time):
        """Sets the utc_end_date_time of this DailyTriggerDaily.

        date-time in UTC format of end of trigger validity, eg. \"2030-12-03T10:15:30Z\"  # noqa: E501

        :param utc_end_date_time: The utc_end_date_time of this DailyTriggerDaily.  # noqa: E501
        :type: datetime
        """

        self._utc_end_date_time = utc_end_date_time

    @property
    def only_working_days(self):
        """Gets the only_working_days of this DailyTriggerDaily.  # noqa: E501

        boolean for triggering tasks only during working days (default: false)  # noqa: E501

        :return: The only_working_days of this DailyTriggerDaily.  # noqa: E501
        :rtype: bool
        """
        return self._only_working_days

    @only_working_days.setter
    def only_working_days(self, only_working_days):
        """Sets the only_working_days of this DailyTriggerDaily.

        boolean for triggering tasks only during working days (default: false)  # noqa: E501

        :param only_working_days: The only_working_days of this DailyTriggerDaily.  # noqa: E501
        :type: bool
        """

        self._only_working_days = only_working_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyTriggerDaily, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyTriggerDaily):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
