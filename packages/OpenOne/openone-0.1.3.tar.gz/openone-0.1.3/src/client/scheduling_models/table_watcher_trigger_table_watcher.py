# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class TableWatcherTriggerTableWatcher(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'int',
        'data_source_type': 'str',
        'table_name': 'str',
        'operation_type': 'str',
        'schema': 'str',
        'interval': 'int'
    }

    attribute_map = {
        'connection_id': 'connectionId',
        'data_source_type': 'dataSourceType',
        'table_name': 'tableName',
        'operation_type': 'operationType',
        'schema': 'schema',
        'interval': 'interval'
    }

    def __init__(self, connection_id=None, data_source_type=None, table_name=None, operation_type=None, schema=None, interval=None):  # noqa: E501
        """TableWatcherTriggerTableWatcher - a model defined in API spec"""  # noqa: E501
        self._connection_id = None
        self._data_source_type = None
        self._table_name = None
        self._operation_type = None
        self._schema = None
        self._interval = None
        self.discriminator = None
        self.connection_id = connection_id
        self.data_source_type = data_source_type
        self.table_name = table_name
        self.operation_type = operation_type
        if schema is not None:
            self.schema = schema
        if interval is not None:
            self.interval = interval

    @property
    def connection_id(self):
        """Gets the connection_id of this TableWatcherTriggerTableWatcher.  # noqa: E501

        Database connection id  # noqa: E501

        :return: The connection_id of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this TableWatcherTriggerTableWatcher.

        Database connection id  # noqa: E501

        :param connection_id: The connection_id of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: int
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def data_source_type(self):
        """Gets the data_source_type of this TableWatcherTriggerTableWatcher.  # noqa: E501

        TableWatcher data source type  # noqa: E501

        :return: The data_source_type of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this TableWatcherTriggerTableWatcher.

        TableWatcher data source type  # noqa: E501

        :param data_source_type: The data_source_type of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: str
        """
        if data_source_type is None:
            raise ValueError("Invalid value for `data_source_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SNOWFLAKE"]  # noqa: E501
        if data_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    @property
    def table_name(self):
        """Gets the table_name of this TableWatcherTriggerTableWatcher.  # noqa: E501

        Database table name  # noqa: E501

        :return: The table_name of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TableWatcherTriggerTableWatcher.

        Database table name  # noqa: E501

        :param table_name: The table_name of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def operation_type(self):
        """Gets the operation_type of this TableWatcherTriggerTableWatcher.  # noqa: E501

        TableWatcher operation type  # noqa: E501

        :return: The operation_type of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this TableWatcherTriggerTableWatcher.

        TableWatcher operation type  # noqa: E501

        :param operation_type: The operation_type of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: str
        """
        if operation_type is None:
            raise ValueError("Invalid value for `operation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ON_CHANGE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def schema(self):
        """Gets the schema of this TableWatcherTriggerTableWatcher.  # noqa: E501

        Database schema name  # noqa: E501

        :return: The schema of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this TableWatcherTriggerTableWatcher.

        Database schema name  # noqa: E501

        :param schema: The schema of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def interval(self):
        """Gets the interval of this TableWatcherTriggerTableWatcher.  # noqa: E501

        Interval in milliseconds  # noqa: E501

        :return: The interval of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this TableWatcherTriggerTableWatcher.

        Interval in milliseconds  # noqa: E501

        :param interval: The interval of this TableWatcherTriggerTableWatcher.  # noqa: E501
        :type: int
        """

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWatcherTriggerTableWatcher, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWatcherTriggerTableWatcher):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
