# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class FlowState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_opened': 'bool',
        'flow': 'DataSourceParsingScript',
        'person': 'DataSourceParsingScript',
        'zoom': 'float',
        'offset_x': 'float',
        'offset_y': 'float'
    }

    attribute_map = {
        'is_opened': 'isOpened',
        'flow': 'flow',
        'person': 'person',
        'zoom': 'zoom',
        'offset_x': 'offsetX',
        'offset_y': 'offsetY'
    }

    def __init__(self, is_opened=None, flow=None, person=None, zoom=None, offset_x=None, offset_y=None):  # noqa: E501
        """FlowState - a model defined in Swagger"""  # noqa: E501
        self._is_opened = None
        self._flow = None
        self._person = None
        self._zoom = None
        self._offset_x = None
        self._offset_y = None
        self.discriminator = None
        if is_opened is not None:
            self.is_opened = is_opened
        if flow is not None:
            self.flow = flow
        if person is not None:
            self.person = person
        if zoom is not None:
            self.zoom = zoom
        if offset_x is not None:
            self.offset_x = offset_x
        if offset_y is not None:
            self.offset_y = offset_y

    @property
    def is_opened(self):
        """Gets the is_opened of this FlowState.  # noqa: E501


        :return: The is_opened of this FlowState.  # noqa: E501
        :rtype: bool
        """
        return self._is_opened

    @is_opened.setter
    def is_opened(self, is_opened):
        """Sets the is_opened of this FlowState.


        :param is_opened: The is_opened of this FlowState.  # noqa: E501
        :type: bool
        """

        self._is_opened = is_opened

    @property
    def flow(self):
        """Gets the flow of this FlowState.  # noqa: E501


        :return: The flow of this FlowState.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this FlowState.


        :param flow: The flow of this FlowState.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._flow = flow

    @property
    def person(self):
        """Gets the person of this FlowState.  # noqa: E501


        :return: The person of this FlowState.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this FlowState.


        :param person: The person of this FlowState.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._person = person

    @property
    def zoom(self):
        """Gets the zoom of this FlowState.  # noqa: E501


        :return: The zoom of this FlowState.  # noqa: E501
        :rtype: float
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this FlowState.


        :param zoom: The zoom of this FlowState.  # noqa: E501
        :type: float
        """

        self._zoom = zoom

    @property
    def offset_x(self):
        """Gets the offset_x of this FlowState.  # noqa: E501


        :return: The offset_x of this FlowState.  # noqa: E501
        :rtype: float
        """
        return self._offset_x

    @offset_x.setter
    def offset_x(self, offset_x):
        """Sets the offset_x of this FlowState.


        :param offset_x: The offset_x of this FlowState.  # noqa: E501
        :type: float
        """

        self._offset_x = offset_x

    @property
    def offset_y(self):
        """Gets the offset_y of this FlowState.  # noqa: E501


        :return: The offset_y of this FlowState.  # noqa: E501
        :rtype: float
        """
        return self._offset_y

    @offset_y.setter
    def offset_y(self, offset_y):
        """Sets the offset_y of this FlowState.


        :param offset_y: The offset_y of this FlowState.  # noqa: E501
        :type: float
        """

        self._offset_y = offset_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
