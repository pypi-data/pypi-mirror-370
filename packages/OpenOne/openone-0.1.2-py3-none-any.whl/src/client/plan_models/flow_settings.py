# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class FlowSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'optimize': 'str',
        'optimizers': 'FlowSettingsOptimizers',
        'db_overrides': 'object'
    }

    attribute_map = {
        'optimize': 'optimize',
        'optimizers': 'optimizers',
        'db_overrides': 'dbOverrides'
    }

    def __init__(self, optimize=None, optimizers=None, db_overrides=None):  # noqa: E501
        """FlowSettings - a model defined in Swagger"""  # noqa: E501
        self._optimize = None
        self._optimizers = None
        self._db_overrides = None
        self.discriminator = None
        if optimize is not None:
            self.optimize = optimize
        if optimizers is not None:
            self.optimizers = optimizers
        if db_overrides is not None:
            self.db_overrides = db_overrides

    @property
    def optimize(self):
        """Gets the optimize of this FlowSettings.  # noqa: E501

        Enable/disable all optimizers for this flow * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :return: The optimize of this FlowSettings.  # noqa: E501
        :rtype: str
        """
        return self._optimize

    @optimize.setter
    def optimize(self, optimize):
        """Sets the optimize of this FlowSettings.

        Enable/disable all optimizers for this flow * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :param optimize: The optimize of this FlowSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "default"]  # noqa: E501
        if optimize not in allowed_values:
            raise ValueError(
                "Invalid value for `optimize` ({0}), must be one of {1}"  # noqa: E501
                .format(optimize, allowed_values)
            )

        self._optimize = optimize

    @property
    def optimizers(self):
        """Gets the optimizers of this FlowSettings.  # noqa: E501


        :return: The optimizers of this FlowSettings.  # noqa: E501
        :rtype: FlowSettingsOptimizers
        """
        return self._optimizers

    @optimizers.setter
    def optimizers(self, optimizers):
        """Sets the optimizers of this FlowSettings.


        :param optimizers: The optimizers of this FlowSettings.  # noqa: E501
        :type: FlowSettingsOptimizers
        """

        self._optimizers = optimizers

    @property
    def db_overrides(self):
        """Gets the db_overrides of this FlowSettings.  # noqa: E501


        :return: The db_overrides of this FlowSettings.  # noqa: E501
        :rtype: object
        """
        return self._db_overrides

    @db_overrides.setter
    def db_overrides(self, db_overrides):
        """Sets the db_overrides of this FlowSettings.


        :param db_overrides: The db_overrides of this FlowSettings.  # noqa: E501
        :type: object
        """

        self._db_overrides = db_overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
