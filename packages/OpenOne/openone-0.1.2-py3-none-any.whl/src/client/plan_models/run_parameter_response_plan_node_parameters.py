# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class RunParameterResponsePlanNodeParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'str',
        'display_id': 'int',
        'plan_node_id': 'AnyOfrunParameterResponsePlanNodeParametersPlanNodeId',
        'flow': 'Flow',
        'conflicts': 'list',
        'datasources': 'PlanNodeRunParameterResponseDatasources',
        'output_objects': 'PlanNodeRunParameterResponseOutputObjects',
        'plan_overrides': 'object'
    }

    attribute_map = {
        'handle': 'handle',
        'display_id': 'displayId',
        'plan_node_id': 'planNodeId',
        'flow': 'flow',
        'conflicts': 'conflicts',
        'datasources': 'datasources',
        'output_objects': 'outputObjects',
        'plan_overrides': 'planOverrides'
    }

    def __init__(self, handle=None, display_id=None, plan_node_id=None, flow=None, conflicts=None, datasources=None, output_objects=None, plan_overrides=None):  # noqa: E501
        """RunParameterResponsePlanNodeParameters - a model defined in Swagger"""  # noqa: E501
        self._handle = None
        self._display_id = None
        self._plan_node_id = None
        self._flow = None
        self._conflicts = None
        self._datasources = None
        self._output_objects = None
        self._plan_overrides = None
        self.discriminator = None
        self.handle = handle
        if display_id is not None:
            self.display_id = display_id
        self.plan_node_id = plan_node_id
        if flow is not None:
            self.flow = flow
        if conflicts is not None:
            self.conflicts = conflicts
        if datasources is not None:
            self.datasources = datasources
        if output_objects is not None:
            self.output_objects = output_objects
        if plan_overrides is not None:
            self.plan_overrides = plan_overrides

    @property
    def handle(self):
        """Gets the handle of this RunParameterResponsePlanNodeParameters.  # noqa: E501

        Unique, readable identifier of a plan node in a plan.  # noqa: E501

        :return: The handle of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this RunParameterResponsePlanNodeParameters.

        Unique, readable identifier of a plan node in a plan.  # noqa: E501

        :param handle: The handle of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def display_id(self):
        """Gets the display_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501

        Unique, numeric, incremental identifier of a plan node in a plan per task type.  # noqa: E501

        :return: The display_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: int
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this RunParameterResponsePlanNodeParameters.

        Unique, numeric, incremental identifier of a plan node in a plan per task type.  # noqa: E501

        :param display_id: The display_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: int
        """

        self._display_id = display_id

    @property
    def plan_node_id(self):
        """Gets the plan_node_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501


        :return: The plan_node_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: AnyOfrunParameterResponsePlanNodeParametersPlanNodeId
        """
        return self._plan_node_id

    @plan_node_id.setter
    def plan_node_id(self, plan_node_id):
        """Sets the plan_node_id of this RunParameterResponsePlanNodeParameters.


        :param plan_node_id: The plan_node_id of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: AnyOfrunParameterResponsePlanNodeParametersPlanNodeId
        """
        if plan_node_id is None:
            raise ValueError("Invalid value for `plan_node_id`, must not be `None`")  # noqa: E501

        self._plan_node_id = plan_node_id

    @property
    def flow(self):
        """Gets the flow of this RunParameterResponsePlanNodeParameters.  # noqa: E501


        :return: The flow of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: Flow
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this RunParameterResponsePlanNodeParameters.


        :param flow: The flow of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: Flow
        """

        self._flow = flow

    @property
    def conflicts(self):
        """Gets the conflicts of this RunParameterResponsePlanNodeParameters.  # noqa: E501

        All overrideKeys that will cause a parameter conflict during execution.  # noqa: E501

        :return: The conflicts of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: list
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this RunParameterResponsePlanNodeParameters.

        All overrideKeys that will cause a parameter conflict during execution.  # noqa: E501

        :param conflicts: The conflicts of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: list
        """

        self._conflicts = conflicts

    @property
    def datasources(self):
        """Gets the datasources of this RunParameterResponsePlanNodeParameters.  # noqa: E501


        :return: The datasources of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: PlanNodeRunParameterResponseDatasources
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this RunParameterResponsePlanNodeParameters.


        :param datasources: The datasources of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: PlanNodeRunParameterResponseDatasources
        """

        self._datasources = datasources

    @property
    def output_objects(self):
        """Gets the output_objects of this RunParameterResponsePlanNodeParameters.  # noqa: E501


        :return: The output_objects of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: PlanNodeRunParameterResponseOutputObjects
        """
        return self._output_objects

    @output_objects.setter
    def output_objects(self, output_objects):
        """Sets the output_objects of this RunParameterResponsePlanNodeParameters.


        :param output_objects: The output_objects of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: PlanNodeRunParameterResponseOutputObjects
        """

        self._output_objects = output_objects

    @property
    def plan_overrides(self):
        """Gets the plan_overrides of this RunParameterResponsePlanNodeParameters.  # noqa: E501

        Plan parameter overrides that are defined on the plan.  # noqa: E501

        :return: The plan_overrides of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :rtype: object
        """
        return self._plan_overrides

    @plan_overrides.setter
    def plan_overrides(self, plan_overrides):
        """Sets the plan_overrides of this RunParameterResponsePlanNodeParameters.

        Plan parameter overrides that are defined on the plan.  # noqa: E501

        :param plan_overrides: The plan_overrides of this RunParameterResponsePlanNodeParameters.  # noqa: E501
        :type: object
        """

        self._plan_overrides = plan_overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunParameterResponsePlanNodeParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunParameterResponsePlanNodeParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
