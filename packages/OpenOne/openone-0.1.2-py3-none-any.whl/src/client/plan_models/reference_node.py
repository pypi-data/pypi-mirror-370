# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class ReferenceNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow': 'ParsingNodeFlow',
        'referenced_flow_node': 'ReferenceNodeReferencedFlowNode',
        'active_sample': 'ParsingNodeActiveSample',
        'wrangled': 'bool'
    }

    attribute_map = {
        'flow': 'flow',
        'referenced_flow_node': 'referencedFlowNode',
        'active_sample': 'activeSample',
        'wrangled': 'wrangled'
    }

    def __init__(self, flow=None, referenced_flow_node=None, active_sample=None, wrangled=None):  # noqa: E501
        """ReferenceNode - a model defined in Swagger"""  # noqa: E501
        self._flow = None
        self._referenced_flow_node = None
        self._active_sample = None
        self._wrangled = None
        self.discriminator = None
        self.flow = flow
        self.referenced_flow_node = referenced_flow_node
        if active_sample is not None:
            self.active_sample = active_sample
        self.wrangled = wrangled

    @property
    def flow(self):
        """Gets the flow of this ReferenceNode.  # noqa: E501


        :return: The flow of this ReferenceNode.  # noqa: E501
        :rtype: ParsingNodeFlow
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this ReferenceNode.


        :param flow: The flow of this ReferenceNode.  # noqa: E501
        :type: ParsingNodeFlow
        """
        if flow is None:
            raise ValueError("Invalid value for `flow`, must not be `None`")  # noqa: E501

        self._flow = flow

    @property
    def referenced_flow_node(self):
        """Gets the referenced_flow_node of this ReferenceNode.  # noqa: E501


        :return: The referenced_flow_node of this ReferenceNode.  # noqa: E501
        :rtype: ReferenceNodeReferencedFlowNode
        """
        return self._referenced_flow_node

    @referenced_flow_node.setter
    def referenced_flow_node(self, referenced_flow_node):
        """Sets the referenced_flow_node of this ReferenceNode.


        :param referenced_flow_node: The referenced_flow_node of this ReferenceNode.  # noqa: E501
        :type: ReferenceNodeReferencedFlowNode
        """
        if referenced_flow_node is None:
            raise ValueError("Invalid value for `referenced_flow_node`, must not be `None`")  # noqa: E501

        self._referenced_flow_node = referenced_flow_node

    @property
    def active_sample(self):
        """Gets the active_sample of this ReferenceNode.  # noqa: E501


        :return: The active_sample of this ReferenceNode.  # noqa: E501
        :rtype: ParsingNodeActiveSample
        """
        return self._active_sample

    @active_sample.setter
    def active_sample(self, active_sample):
        """Sets the active_sample of this ReferenceNode.


        :param active_sample: The active_sample of this ReferenceNode.  # noqa: E501
        :type: ParsingNodeActiveSample
        """

        self._active_sample = active_sample

    @property
    def wrangled(self):
        """Gets the wrangled of this ReferenceNode.  # noqa: E501

        If false, this is an input dataset (i.e. an imported dataset or a reference dataset). If true, this flowNode contains a recipe that can be edited by the user.  # noqa: E501

        :return: The wrangled of this ReferenceNode.  # noqa: E501
        :rtype: bool
        """
        return self._wrangled

    @wrangled.setter
    def wrangled(self, wrangled):
        """Sets the wrangled of this ReferenceNode.

        If false, this is an input dataset (i.e. an imported dataset or a reference dataset). If true, this flowNode contains a recipe that can be edited by the user.  # noqa: E501

        :param wrangled: The wrangled of this ReferenceNode.  # noqa: E501
        :type: bool
        """
        if wrangled is None:
            raise ValueError("Invalid value for `wrangled`, must not be `None`")  # noqa: E501

        self._wrangled = wrangled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferenceNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferenceNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
