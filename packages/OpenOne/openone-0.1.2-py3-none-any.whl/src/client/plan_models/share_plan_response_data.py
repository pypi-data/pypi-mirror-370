# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class SharePlanResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'person_id': 'AnyOfsharePlanResponseDataPersonId',
        'person': 'FlowWorkspace',
        'role': 'str',
        'policy': 'str',
        'is_permission_change': 'bool',
        'warning': 'SharePlanResponseWarning'
    }

    attribute_map = {
        'person_id': 'personId',
        'person': 'person',
        'role': 'role',
        'policy': 'policy',
        'is_permission_change': 'isPermissionChange',
        'warning': 'warning'
    }

    def __init__(self, person_id=None, person=None, role=None, policy=None, is_permission_change=None, warning=None):  # noqa: E501
        """SharePlanResponseData - a model defined in Swagger"""  # noqa: E501
        self._person_id = None
        self._person = None
        self._role = None
        self._policy = None
        self._is_permission_change = None
        self._warning = None
        self.discriminator = None
        if person_id is not None:
            self.person_id = person_id
        self.person = person
        self.role = role
        self.policy = policy
        if is_permission_change is not None:
            self.is_permission_change = is_permission_change
        if warning is not None:
            self.warning = warning

    @property
    def person_id(self):
        """Gets the person_id of this SharePlanResponseData.  # noqa: E501


        :return: The person_id of this SharePlanResponseData.  # noqa: E501
        :rtype: AnyOfsharePlanResponseDataPersonId
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this SharePlanResponseData.


        :param person_id: The person_id of this SharePlanResponseData.  # noqa: E501
        :type: AnyOfsharePlanResponseDataPersonId
        """

        self._person_id = person_id

    @property
    def person(self):
        """Gets the person of this SharePlanResponseData.  # noqa: E501


        :return: The person of this SharePlanResponseData.  # noqa: E501
        :rtype: FlowWorkspace
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this SharePlanResponseData.


        :param person: The person of this SharePlanResponseData.  # noqa: E501
        :type: FlowWorkspace
        """
        if person is None:
            raise ValueError("Invalid value for `person`, must not be `None`")  # noqa: E501

        self._person = person

    @property
    def role(self):
        """Gets the role of this SharePlanResponseData.  # noqa: E501

        Role that should be assigned. * `collaborator` - A user who has access to a plan but does not own it is a collaborator. * `readOnly` - Allow the user to view and run the plan.  # noqa: E501

        :return: The role of this SharePlanResponseData.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SharePlanResponseData.

        Role that should be assigned. * `collaborator` - A user who has access to a plan but does not own it is a collaborator. * `readOnly` - Allow the user to view and run the plan.  # noqa: E501

        :param role: The role of this SharePlanResponseData.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["collaborator", "readOnly"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def policy(self):
        """Gets the policy of this SharePlanResponseData.  # noqa: E501

        Policy that should be assigned. * `plan_editor` - Plan editor, can edit plan description and share the plan with others. * `plan_viewer` - Plan viewer, can see and run the plan.  # noqa: E501

        :return: The policy of this SharePlanResponseData.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this SharePlanResponseData.

        Policy that should be assigned. * `plan_editor` - Plan editor, can edit plan description and share the plan with others. * `plan_viewer` - Plan viewer, can see and run the plan.  # noqa: E501

        :param policy: The policy of this SharePlanResponseData.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        allowed_values = ["plan_editor", "plan_viewer"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def is_permission_change(self):
        """Gets the is_permission_change of this SharePlanResponseData.  # noqa: E501


        :return: The is_permission_change of this SharePlanResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_permission_change

    @is_permission_change.setter
    def is_permission_change(self, is_permission_change):
        """Sets the is_permission_change of this SharePlanResponseData.


        :param is_permission_change: The is_permission_change of this SharePlanResponseData.  # noqa: E501
        :type: bool
        """

        self._is_permission_change = is_permission_change

    @property
    def warning(self):
        """Gets the warning of this SharePlanResponseData.  # noqa: E501


        :return: The warning of this SharePlanResponseData.  # noqa: E501
        :rtype: SharePlanResponseWarning
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this SharePlanResponseData.


        :param warning: The warning of this SharePlanResponseData.  # noqa: E501
        :type: SharePlanResponseWarning
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharePlanResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharePlanResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
