# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class ScheduleUpdateRequest(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'triggers': 'OneOfscheduleUpdateRequestTriggers',
        'tasks': 'OneOfscheduleUpdateRequestTasks'
    }

    attribute_map = {
        'name': 'name',
        'triggers': 'triggers',
        'tasks': 'tasks'
    }

    def __init__(self, name=None, triggers=None, tasks=None):  # noqa: E501
        """ScheduleUpdateRequest - a model defined in API spec"""  # noqa: E501
        self._name = None
        self._triggers = None
        self._tasks = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if triggers is not None:
            self.triggers = triggers
        if tasks is not None:
            self.tasks = tasks

    @property
    def name(self):
        """Gets the name of this ScheduleUpdateRequest.  # noqa: E501

        name of the schedule  # noqa: E501

        :return: The name of this ScheduleUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleUpdateRequest.

        name of the schedule  # noqa: E501

        :param name: The name of this ScheduleUpdateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def triggers(self):
        """Gets the triggers of this ScheduleUpdateRequest.  # noqa: E501


        :return: The triggers of this ScheduleUpdateRequest.  # noqa: E501
        :rtype: OneOfscheduleUpdateRequestTriggers
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this ScheduleUpdateRequest.


        :param triggers: The triggers of this ScheduleUpdateRequest.  # noqa: E501
        :type: OneOfscheduleUpdateRequestTriggers
        """

        self._triggers = triggers

    @property
    def tasks(self):
        """Gets the tasks of this ScheduleUpdateRequest.  # noqa: E501


        :return: The tasks of this ScheduleUpdateRequest.  # noqa: E501
        :rtype: OneOfscheduleUpdateRequestTasks
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this ScheduleUpdateRequest.


        :param tasks: The tasks of this ScheduleUpdateRequest.  # noqa: E501
        :type: OneOfscheduleUpdateRequestTasks
        """

        self._tasks = tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
