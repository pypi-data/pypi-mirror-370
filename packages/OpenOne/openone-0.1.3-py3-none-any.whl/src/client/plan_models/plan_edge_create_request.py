# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class PlanEdgeCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'AnyOfplanEdgeCreateRequestPlanId',
        'in_plan_node_id': 'AnyOfplanEdgeCreateRequestInPlanNodeId',
        'out_plan_node_id': 'AnyOfplanEdgeCreateRequestOutPlanNodeId',
        'status_rule': 'str'
    }

    attribute_map = {
        'plan_id': 'planId',
        'in_plan_node_id': 'inPlanNodeId',
        'out_plan_node_id': 'outPlanNodeId',
        'status_rule': 'statusRule'
    }

    def __init__(self, plan_id=None, in_plan_node_id=None, out_plan_node_id=None, status_rule=None):  # noqa: E501
        """PlanEdgeCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._in_plan_node_id = None
        self._out_plan_node_id = None
        self._status_rule = None
        self.discriminator = None
        self.plan_id = plan_id
        self.in_plan_node_id = in_plan_node_id
        self.out_plan_node_id = out_plan_node_id
        self.status_rule = status_rule

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanEdgeCreateRequest.  # noqa: E501


        :return: The plan_id of this PlanEdgeCreateRequest.  # noqa: E501
        :rtype: AnyOfplanEdgeCreateRequestPlanId
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanEdgeCreateRequest.


        :param plan_id: The plan_id of this PlanEdgeCreateRequest.  # noqa: E501
        :type: AnyOfplanEdgeCreateRequestPlanId
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def in_plan_node_id(self):
        """Gets the in_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501


        :return: The in_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501
        :rtype: AnyOfplanEdgeCreateRequestInPlanNodeId
        """
        return self._in_plan_node_id

    @in_plan_node_id.setter
    def in_plan_node_id(self, in_plan_node_id):
        """Sets the in_plan_node_id of this PlanEdgeCreateRequest.


        :param in_plan_node_id: The in_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501
        :type: AnyOfplanEdgeCreateRequestInPlanNodeId
        """
        if in_plan_node_id is None:
            raise ValueError("Invalid value for `in_plan_node_id`, must not be `None`")  # noqa: E501

        self._in_plan_node_id = in_plan_node_id

    @property
    def out_plan_node_id(self):
        """Gets the out_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501


        :return: The out_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501
        :rtype: AnyOfplanEdgeCreateRequestOutPlanNodeId
        """
        return self._out_plan_node_id

    @out_plan_node_id.setter
    def out_plan_node_id(self, out_plan_node_id):
        """Sets the out_plan_node_id of this PlanEdgeCreateRequest.


        :param out_plan_node_id: The out_plan_node_id of this PlanEdgeCreateRequest.  # noqa: E501
        :type: AnyOfplanEdgeCreateRequestOutPlanNodeId
        """
        if out_plan_node_id is None:
            raise ValueError("Invalid value for `out_plan_node_id`, must not be `None`")  # noqa: E501

        self._out_plan_node_id = out_plan_node_id

    @property
    def status_rule(self):
        """Gets the status_rule of this PlanEdgeCreateRequest.  # noqa: E501


        :return: The status_rule of this PlanEdgeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._status_rule

    @status_rule.setter
    def status_rule(self, status_rule):
        """Sets the status_rule of this PlanEdgeCreateRequest.


        :param status_rule: The status_rule of this PlanEdgeCreateRequest.  # noqa: E501
        :type: str
        """
        if status_rule is None:
            raise ValueError("Invalid value for `status_rule`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "failure", "always", "condition_true", "condition_false"]  # noqa: E501
        if status_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `status_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(status_rule, allowed_values)
            )

        self._status_rule = status_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanEdgeCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanEdgeCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
