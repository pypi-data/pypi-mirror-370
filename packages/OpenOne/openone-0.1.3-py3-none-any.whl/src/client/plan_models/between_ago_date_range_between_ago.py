# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class BetweenAgoDateRangeBetweenAgo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'int',
        'to': 'int',
        'unit': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'unit': 'unit'
    }

    def __init__(self, _from=None, to=None, unit=None):  # noqa: E501
        """BetweenAgoDateRangeBetweenAgo - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._unit = None
        self.discriminator = None
        self._from = _from
        self.to = to
        self.unit = unit

    @property
    def _from(self):
        """Gets the _from of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501

        number of `unit` to take into account  # noqa: E501

        :return: The _from of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BetweenAgoDateRangeBetweenAgo.

        number of `unit` to take into account  # noqa: E501

        :param _from: The _from of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :type: int
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501

        Must be lower than from. Can be equal to 0.  # noqa: E501

        :return: The to of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BetweenAgoDateRangeBetweenAgo.

        Must be lower than from. Can be equal to 0.  # noqa: E501

        :param to: The to of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :type: int
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def unit(self):
        """Gets the unit of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501


        :return: The unit of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this BetweenAgoDateRangeBetweenAgo.


        :param unit: The unit of this BetweenAgoDateRangeBetweenAgo.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        allowed_values = ["years", "year", "quarters", "quarter", "months", "month", "weeks", "week", "days", "day", "hours", "hour", "minutes", "minute"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BetweenAgoDateRangeBetweenAgo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BetweenAgoDateRangeBetweenAgo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
