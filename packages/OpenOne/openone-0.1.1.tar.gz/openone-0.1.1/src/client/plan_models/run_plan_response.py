# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class RunPlanResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validation_status': 'str',
        'plan_snapshot_run_id': 'AnyOfrunPlanResponsePlanSnapshotRunId'
    }

    attribute_map = {
        'validation_status': 'validationStatus',
        'plan_snapshot_run_id': 'planSnapshotRunId'
    }

    def __init__(self, validation_status=None, plan_snapshot_run_id=None):  # noqa: E501
        """RunPlanResponse - a model defined in Swagger"""  # noqa: E501
        self._validation_status = None
        self._plan_snapshot_run_id = None
        self.discriminator = None
        self.validation_status = validation_status
        self.plan_snapshot_run_id = plan_snapshot_run_id

    @property
    def validation_status(self):
        """Gets the validation_status of this RunPlanResponse.  # noqa: E501

        Response from activate plan * `Valid` - All plan tasks are valid. * `MissingFlowReferences` - Some plan tasks are empty  # noqa: E501

        :return: The validation_status of this RunPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """Sets the validation_status of this RunPlanResponse.

        Response from activate plan * `Valid` - All plan tasks are valid. * `MissingFlowReferences` - Some plan tasks are empty  # noqa: E501

        :param validation_status: The validation_status of this RunPlanResponse.  # noqa: E501
        :type: str
        """
        if validation_status is None:
            raise ValueError("Invalid value for `validation_status`, must not be `None`")  # noqa: E501
        allowed_values = ["Valid", "MissingFlowReferences"]  # noqa: E501
        if validation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_status, allowed_values)
            )

        self._validation_status = validation_status

    @property
    def plan_snapshot_run_id(self):
        """Gets the plan_snapshot_run_id of this RunPlanResponse.  # noqa: E501


        :return: The plan_snapshot_run_id of this RunPlanResponse.  # noqa: E501
        :rtype: AnyOfrunPlanResponsePlanSnapshotRunId
        """
        return self._plan_snapshot_run_id

    @plan_snapshot_run_id.setter
    def plan_snapshot_run_id(self, plan_snapshot_run_id):
        """Sets the plan_snapshot_run_id of this RunPlanResponse.


        :param plan_snapshot_run_id: The plan_snapshot_run_id of this RunPlanResponse.  # noqa: E501
        :type: AnyOfrunPlanResponsePlanSnapshotRunId
        """
        if plan_snapshot_run_id is None:
            raise ValueError("Invalid value for `plan_snapshot_run_id`, must not be `None`")  # noqa: E501

        self._plan_snapshot_run_id = plan_snapshot_run_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunPlanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunPlanResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
