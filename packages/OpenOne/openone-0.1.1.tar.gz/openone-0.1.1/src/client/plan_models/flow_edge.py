# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class FlowEdge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_port_id': 'int',
        'out_port_id': 'int',
        'input_flow_node': 'DataSourceParsingScript',
        'output_flow_node': 'DataSourceParsingScript',
        'flow': 'DataSourceParsingScript',
        'id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'creator': 'BaseObjectSchemaCreator',
        'updater': 'BaseObjectSchemaUpdater'
    }

    attribute_map = {
        'in_port_id': 'inPortId',
        'out_port_id': 'outPortId',
        'input_flow_node': 'inputFlowNode',
        'output_flow_node': 'outputFlowNode',
        'flow': 'flow',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'creator': 'creator',
        'updater': 'updater'
    }

    def __init__(self, in_port_id=None, out_port_id=None, input_flow_node=None, output_flow_node=None, flow=None, id=None, created_at=None, updated_at=None, creator=None, updater=None):  # noqa: E501
        """FlowEdge - a model defined in Swagger"""  # noqa: E501
        self._in_port_id = None
        self._out_port_id = None
        self._input_flow_node = None
        self._output_flow_node = None
        self._flow = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._creator = None
        self._updater = None
        self.discriminator = None
        if in_port_id is not None:
            self.in_port_id = in_port_id
        if out_port_id is not None:
            self.out_port_id = out_port_id
        if input_flow_node is not None:
            self.input_flow_node = input_flow_node
        if output_flow_node is not None:
            self.output_flow_node = output_flow_node
        if flow is not None:
            self.flow = flow
        self.id = id
        self.created_at = created_at
        self.updated_at = updated_at
        if creator is not None:
            self.creator = creator
        if updater is not None:
            self.updater = updater

    @property
    def in_port_id(self):
        """Gets the in_port_id of this FlowEdge.  # noqa: E501


        :return: The in_port_id of this FlowEdge.  # noqa: E501
        :rtype: int
        """
        return self._in_port_id

    @in_port_id.setter
    def in_port_id(self, in_port_id):
        """Sets the in_port_id of this FlowEdge.


        :param in_port_id: The in_port_id of this FlowEdge.  # noqa: E501
        :type: int
        """

        self._in_port_id = in_port_id

    @property
    def out_port_id(self):
        """Gets the out_port_id of this FlowEdge.  # noqa: E501


        :return: The out_port_id of this FlowEdge.  # noqa: E501
        :rtype: int
        """
        return self._out_port_id

    @out_port_id.setter
    def out_port_id(self, out_port_id):
        """Sets the out_port_id of this FlowEdge.


        :param out_port_id: The out_port_id of this FlowEdge.  # noqa: E501
        :type: int
        """

        self._out_port_id = out_port_id

    @property
    def input_flow_node(self):
        """Gets the input_flow_node of this FlowEdge.  # noqa: E501


        :return: The input_flow_node of this FlowEdge.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._input_flow_node

    @input_flow_node.setter
    def input_flow_node(self, input_flow_node):
        """Sets the input_flow_node of this FlowEdge.


        :param input_flow_node: The input_flow_node of this FlowEdge.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._input_flow_node = input_flow_node

    @property
    def output_flow_node(self):
        """Gets the output_flow_node of this FlowEdge.  # noqa: E501


        :return: The output_flow_node of this FlowEdge.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._output_flow_node

    @output_flow_node.setter
    def output_flow_node(self, output_flow_node):
        """Sets the output_flow_node of this FlowEdge.


        :param output_flow_node: The output_flow_node of this FlowEdge.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._output_flow_node = output_flow_node

    @property
    def flow(self):
        """Gets the flow of this FlowEdge.  # noqa: E501


        :return: The flow of this FlowEdge.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this FlowEdge.


        :param flow: The flow of this FlowEdge.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._flow = flow

    @property
    def id(self):
        """Gets the id of this FlowEdge.  # noqa: E501

        unique identifier for this object.  # noqa: E501

        :return: The id of this FlowEdge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlowEdge.

        unique identifier for this object.  # noqa: E501

        :param id: The id of this FlowEdge.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this FlowEdge.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this FlowEdge.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FlowEdge.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this FlowEdge.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this FlowEdge.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this FlowEdge.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FlowEdge.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this FlowEdge.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def creator(self):
        """Gets the creator of this FlowEdge.  # noqa: E501


        :return: The creator of this FlowEdge.  # noqa: E501
        :rtype: BaseObjectSchemaCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this FlowEdge.


        :param creator: The creator of this FlowEdge.  # noqa: E501
        :type: BaseObjectSchemaCreator
        """

        self._creator = creator

    @property
    def updater(self):
        """Gets the updater of this FlowEdge.  # noqa: E501


        :return: The updater of this FlowEdge.  # noqa: E501
        :rtype: BaseObjectSchemaUpdater
        """
        return self._updater

    @updater.setter
    def updater(self, updater):
        """Sets the updater of this FlowEdge.


        :param updater: The updater of this FlowEdge.  # noqa: E501
        :type: BaseObjectSchemaUpdater
        """

        self._updater = updater

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowEdge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
