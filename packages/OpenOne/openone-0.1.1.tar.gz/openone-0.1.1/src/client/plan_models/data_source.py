# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class DataSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dynamic_path': 'str',
        'is_schematized': 'bool',
        'is_dynamic': 'bool',
        'is_converted': 'bool',
        'disable_type_inference': 'bool',
        'has_structuring': 'bool',
        'has_schema_errors': 'bool',
        'parsing_script': 'DataSourceParsingScript',
        'storage_location': 'DataSourceParsingScript',
        'connection': 'DataSourceParsingScript',
        'id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'creator': 'BaseObjectSchemaCreator',
        'updater': 'BaseObjectSchemaUpdater',
        'workspace': 'DataSourceParsingScript'
    }

    attribute_map = {
        'dynamic_path': 'dynamicPath',
        'is_schematized': 'isSchematized',
        'is_dynamic': 'isDynamic',
        'is_converted': 'isConverted',
        'disable_type_inference': 'disableTypeInference',
        'has_structuring': 'hasStructuring',
        'has_schema_errors': 'hasSchemaErrors',
        'parsing_script': 'parsingScript',
        'storage_location': 'storageLocation',
        'connection': 'connection',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'creator': 'creator',
        'updater': 'updater',
        'workspace': 'workspace'
    }

    def __init__(self, dynamic_path=None, is_schematized=None, is_dynamic=None, is_converted=None, disable_type_inference=None, has_structuring=None, has_schema_errors=None, parsing_script=None, storage_location=None, connection=None, id=None, created_at=None, updated_at=None, creator=None, updater=None, workspace=None):  # noqa: E501
        """DataSource - a model defined in Swagger"""  # noqa: E501
        self._dynamic_path = None
        self._is_schematized = None
        self._is_dynamic = None
        self._is_converted = None
        self._disable_type_inference = None
        self._has_structuring = None
        self._has_schema_errors = None
        self._parsing_script = None
        self._storage_location = None
        self._connection = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._creator = None
        self._updater = None
        self._workspace = None
        self.discriminator = None
        if dynamic_path is not None:
            self.dynamic_path = dynamic_path
        if is_schematized is not None:
            self.is_schematized = is_schematized
        if is_dynamic is not None:
            self.is_dynamic = is_dynamic
        if is_converted is not None:
            self.is_converted = is_converted
        if disable_type_inference is not None:
            self.disable_type_inference = disable_type_inference
        if has_structuring is not None:
            self.has_structuring = has_structuring
        if has_schema_errors is not None:
            self.has_schema_errors = has_schema_errors
        if parsing_script is not None:
            self.parsing_script = parsing_script
        if storage_location is not None:
            self.storage_location = storage_location
        if connection is not None:
            self.connection = connection
        self.id = id
        self.created_at = created_at
        self.updated_at = updated_at
        if creator is not None:
            self.creator = creator
        if updater is not None:
            self.updater = updater
        if workspace is not None:
            self.workspace = workspace

    @property
    def dynamic_path(self):
        """Gets the dynamic_path of this DataSource.  # noqa: E501


        :return: The dynamic_path of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_path

    @dynamic_path.setter
    def dynamic_path(self, dynamic_path):
        """Sets the dynamic_path of this DataSource.


        :param dynamic_path: The dynamic_path of this DataSource.  # noqa: E501
        :type: str
        """

        self._dynamic_path = dynamic_path

    @property
    def is_schematized(self):
        """Gets the is_schematized of this DataSource.  # noqa: E501


        :return: The is_schematized of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_schematized

    @is_schematized.setter
    def is_schematized(self, is_schematized):
        """Sets the is_schematized of this DataSource.


        :param is_schematized: The is_schematized of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_schematized = is_schematized

    @property
    def is_dynamic(self):
        """Gets the is_dynamic of this DataSource.  # noqa: E501


        :return: The is_dynamic of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_dynamic

    @is_dynamic.setter
    def is_dynamic(self, is_dynamic):
        """Sets the is_dynamic of this DataSource.


        :param is_dynamic: The is_dynamic of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_dynamic = is_dynamic

    @property
    def is_converted(self):
        """Gets the is_converted of this DataSource.  # noqa: E501


        :return: The is_converted of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_converted

    @is_converted.setter
    def is_converted(self, is_converted):
        """Sets the is_converted of this DataSource.


        :param is_converted: The is_converted of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_converted = is_converted

    @property
    def disable_type_inference(self):
        """Gets the disable_type_inference of this DataSource.  # noqa: E501


        :return: The disable_type_inference of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._disable_type_inference

    @disable_type_inference.setter
    def disable_type_inference(self, disable_type_inference):
        """Sets the disable_type_inference of this DataSource.


        :param disable_type_inference: The disable_type_inference of this DataSource.  # noqa: E501
        :type: bool
        """

        self._disable_type_inference = disable_type_inference

    @property
    def has_structuring(self):
        """Gets the has_structuring of this DataSource.  # noqa: E501


        :return: The has_structuring of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._has_structuring

    @has_structuring.setter
    def has_structuring(self, has_structuring):
        """Sets the has_structuring of this DataSource.


        :param has_structuring: The has_structuring of this DataSource.  # noqa: E501
        :type: bool
        """

        self._has_structuring = has_structuring

    @property
    def has_schema_errors(self):
        """Gets the has_schema_errors of this DataSource.  # noqa: E501


        :return: The has_schema_errors of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._has_schema_errors

    @has_schema_errors.setter
    def has_schema_errors(self, has_schema_errors):
        """Sets the has_schema_errors of this DataSource.


        :param has_schema_errors: The has_schema_errors of this DataSource.  # noqa: E501
        :type: bool
        """

        self._has_schema_errors = has_schema_errors

    @property
    def parsing_script(self):
        """Gets the parsing_script of this DataSource.  # noqa: E501


        :return: The parsing_script of this DataSource.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._parsing_script

    @parsing_script.setter
    def parsing_script(self, parsing_script):
        """Sets the parsing_script of this DataSource.


        :param parsing_script: The parsing_script of this DataSource.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._parsing_script = parsing_script

    @property
    def storage_location(self):
        """Gets the storage_location of this DataSource.  # noqa: E501


        :return: The storage_location of this DataSource.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this DataSource.


        :param storage_location: The storage_location of this DataSource.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._storage_location = storage_location

    @property
    def connection(self):
        """Gets the connection of this DataSource.  # noqa: E501


        :return: The connection of this DataSource.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this DataSource.


        :param connection: The connection of this DataSource.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._connection = connection

    @property
    def id(self):
        """Gets the id of this DataSource.  # noqa: E501

        unique identifier for this object.  # noqa: E501

        :return: The id of this DataSource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSource.

        unique identifier for this object.  # noqa: E501

        :param id: The id of this DataSource.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this DataSource.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this DataSource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataSource.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this DataSource.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataSource.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this DataSource.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataSource.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this DataSource.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def creator(self):
        """Gets the creator of this DataSource.  # noqa: E501


        :return: The creator of this DataSource.  # noqa: E501
        :rtype: BaseObjectSchemaCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DataSource.


        :param creator: The creator of this DataSource.  # noqa: E501
        :type: BaseObjectSchemaCreator
        """

        self._creator = creator

    @property
    def updater(self):
        """Gets the updater of this DataSource.  # noqa: E501


        :return: The updater of this DataSource.  # noqa: E501
        :rtype: BaseObjectSchemaUpdater
        """
        return self._updater

    @updater.setter
    def updater(self, updater):
        """Sets the updater of this DataSource.


        :param updater: The updater of this DataSource.  # noqa: E501
        :type: BaseObjectSchemaUpdater
        """

        self._updater = updater

    @property
    def workspace(self):
        """Gets the workspace of this DataSource.  # noqa: E501


        :return: The workspace of this DataSource.  # noqa: E501
        :rtype: DataSourceParsingScript
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this DataSource.


        :param workspace: The workspace of this DataSource.  # noqa: E501
        :type: DataSourceParsingScript
        """

        self._workspace = workspace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
