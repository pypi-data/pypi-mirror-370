# coding: utf-8

"""
    Identity and Access Managment (IAM) (Alpha)

 

    OpenAPI spec version: v2024.14.0
     
"""

import pprint
import re  # noqa: F401

import six

class WorkspaceTiersInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'AnyOfworkspaceTiersInfoId',
        'is_single_user': 'bool',
        'name': 'str',
        'workspace_id': 'AnyOfworkspaceTiersInfoWorkspaceId'
    }

    attribute_map = {
        'id': 'id',
        'is_single_user': 'isSingleUser',
        'name': 'name',
        'workspace_id': 'workspaceId'
    }

    def __init__(self, id=None, is_single_user=None, name=None, workspace_id=None):  # noqa: E501
        """WorkspaceTiersInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_single_user = None
        self._name = None
        self._workspace_id = None
        self.discriminator = None
        self.id = id
        self.is_single_user = is_single_user
        self.name = name
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def id(self):
        """Gets the id of this WorkspaceTiersInfo.  # noqa: E501


        :return: The id of this WorkspaceTiersInfo.  # noqa: E501
        :rtype: AnyOfworkspaceTiersInfoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceTiersInfo.


        :param id: The id of this WorkspaceTiersInfo.  # noqa: E501
        :type: AnyOfworkspaceTiersInfoId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_single_user(self):
        """Gets the is_single_user of this WorkspaceTiersInfo.  # noqa: E501


        :return: The is_single_user of this WorkspaceTiersInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_single_user

    @is_single_user.setter
    def is_single_user(self, is_single_user):
        """Sets the is_single_user of this WorkspaceTiersInfo.


        :param is_single_user: The is_single_user of this WorkspaceTiersInfo.  # noqa: E501
        :type: bool
        """
        if is_single_user is None:
            raise ValueError("Invalid value for `is_single_user`, must not be `None`")  # noqa: E501

        self._is_single_user = is_single_user

    @property
    def name(self):
        """Gets the name of this WorkspaceTiersInfo.  # noqa: E501


        :return: The name of this WorkspaceTiersInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceTiersInfo.


        :param name: The name of this WorkspaceTiersInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        allowed_values = ["free", "pro", "none", "legacy", "standard", "premium", "standard-free", "starter", "professional", "professional_trial", "enterprise_cloud", "enterprise_cloud_trial", "starter22", "professional22", "enterprise_cloud22", "enterprise_cloud22_trial", "looker_freemium", "platform_packaging"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceTiersInfo.  # noqa: E501


        :return: The workspace_id of this WorkspaceTiersInfo.  # noqa: E501
        :rtype: AnyOfworkspaceTiersInfoWorkspaceId
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceTiersInfo.


        :param workspace_id: The workspace_id of this WorkspaceTiersInfo.  # noqa: E501
        :type: AnyOfworkspaceTiersInfoWorkspaceId
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkspaceTiersInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceTiersInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
