# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class ScheduleErrorResponseException(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'code': 'str',
        'message': 'str',
        'details': 'AnyOfscheduleErrorResponseExceptionDetails'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'message': 'message',
        'details': 'details'
    }

    def __init__(self, name=None, code=None, message=None, details=None):  # noqa: E501
        """ScheduleErrorResponseException - a model defined in API spec"""  # noqa: E501
        self._name = None
        self._code = None
        self._message = None
        self._details = None
        self.discriminator = None
        self.name = name
        if code is not None:
            self.code = code
        self.message = message
        if details is not None:
            self.details = details

    @property
    def name(self):
        """Gets the name of this ScheduleErrorResponseException.  # noqa: E501

        exception name  # noqa: E501

        :return: The name of this ScheduleErrorResponseException.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleErrorResponseException.

        exception name  # noqa: E501

        :param name: The name of this ScheduleErrorResponseException.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this ScheduleErrorResponseException.  # noqa: E501

        error code  # noqa: E501

        :return: The code of this ScheduleErrorResponseException.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ScheduleErrorResponseException.

        error code  # noqa: E501

        :param code: The code of this ScheduleErrorResponseException.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID_CRON_EXPRESSION", "CANNOT_USE_FLOW_IN_SCHEDULE", "CANNOT_USE_PLAN_IN_SCHEDULE", "TRIGGER_WILL_NEVER_FIRE", "SCHEDULE_NAME_TOO_LONG"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"  # noqa: E501
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this ScheduleErrorResponseException.  # noqa: E501

        error message  # noqa: E501

        :return: The message of this ScheduleErrorResponseException.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ScheduleErrorResponseException.

        error message  # noqa: E501

        :param message: The message of this ScheduleErrorResponseException.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def details(self):
        """Gets the details of this ScheduleErrorResponseException.  # noqa: E501


        :return: The details of this ScheduleErrorResponseException.  # noqa: E501
        :rtype: AnyOfscheduleErrorResponseExceptionDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ScheduleErrorResponseException.


        :param details: The details of this ScheduleErrorResponseException.  # noqa: E501
        :type: AnyOfscheduleErrorResponseExceptionDetails
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleErrorResponseException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleErrorResponseException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
