# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'type': 'str',
        'name': 'str',
        'updated_at': 'datetime',
        'created_at': 'datetime'
    }

    attribute_map = {
        'project_id': 'projectId',
        'type': 'type',
        'name': 'name',
        'updated_at': 'updatedAt',
        'created_at': 'createdAt'
    }

    def __init__(self, project_id=None, type=None, name=None, updated_at=None, created_at=None):  # noqa: E501
        """RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence - a model defined in API spec"""  # noqa: E501
        self._project_id = None
        self._type = None
        self._name = None
        self._updated_at = None
        self._created_at = None
        self.discriminator = None
        self.project_id = project_id
        self.type = type
        if name is not None:
            self.name = name
        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def project_id(self):
        """Gets the project_id of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501

        A universal object identifier, which is unique across instances of the platform.  # noqa: E501

        :return: The project_id of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.

        A universal object identifier, which is unique across instances of the platform.  # noqa: E501

        :param project_id: The project_id of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def type(self):
        """Gets the type of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501

        Type of location intelligence asset, eg. `li_project_replay`  # noqa: E501

        :return: The type of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.

        Type of location intelligence asset, eg. `li_project_replay`  # noqa: E501

        :param type: The type of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["li_project_replay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501


        :return: The name of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.


        :param name: The name of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
