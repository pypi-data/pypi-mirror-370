# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class RunLocationIntelligenceTaskWithLocationIntelligenceSchema(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_location_intelligence': 'RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence'
    }

    attribute_map = {
        'run_location_intelligence': 'runLocationIntelligence'
    }

    def __init__(self, run_location_intelligence=None):  # noqa: E501
        """RunLocationIntelligenceTaskWithLocationIntelligenceSchema - a model defined in API spec"""  # noqa: E501
        self._run_location_intelligence = None
        self.discriminator = None
        self.run_location_intelligence = run_location_intelligence

    @property
    def run_location_intelligence(self):
        """Gets the run_location_intelligence of this RunLocationIntelligenceTaskWithLocationIntelligenceSchema.  # noqa: E501


        :return: The run_location_intelligence of this RunLocationIntelligenceTaskWithLocationIntelligenceSchema.  # noqa: E501
        :rtype: RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence
        """
        return self._run_location_intelligence

    @run_location_intelligence.setter
    def run_location_intelligence(self, run_location_intelligence):
        """Sets the run_location_intelligence of this RunLocationIntelligenceTaskWithLocationIntelligenceSchema.


        :param run_location_intelligence: The run_location_intelligence of this RunLocationIntelligenceTaskWithLocationIntelligenceSchema.  # noqa: E501
        :type: RunLocationIntelligenceTaskWithLocationIntelligenceSchemaRunLocationIntelligence
        """
        if run_location_intelligence is None:
            raise ValueError("Invalid value for `run_location_intelligence`, must not be `None`")  # noqa: E501

        self._run_location_intelligence = run_location_intelligence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunLocationIntelligenceTaskWithLocationIntelligenceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunLocationIntelligenceTaskWithLocationIntelligenceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
