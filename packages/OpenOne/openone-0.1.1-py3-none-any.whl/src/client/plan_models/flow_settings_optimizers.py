# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class FlowSettingsOptimizers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files_to_big_query': 'str',
        'files_to_snowflake': 'str',
        'cdwto_files': 'str',
        'full_pushdown': 'str'
    }

    attribute_map = {
        'files_to_big_query': 'filesToBigQuery',
        'files_to_snowflake': 'filesToSnowflake',
        'cdwto_files': 'CDWToFiles',
        'full_pushdown': 'fullPushdown'
    }

    def __init__(self, files_to_big_query=None, files_to_snowflake=None, cdwto_files=None, full_pushdown=None):  # noqa: E501
        """FlowSettingsOptimizers - a model defined in Swagger"""  # noqa: E501
        self._files_to_big_query = None
        self._files_to_snowflake = None
        self._cdwto_files = None
        self._full_pushdown = None
        self.discriminator = None
        if files_to_big_query is not None:
            self.files_to_big_query = files_to_big_query
        if files_to_snowflake is not None:
            self.files_to_snowflake = files_to_snowflake
        if cdwto_files is not None:
            self.cdwto_files = cdwto_files
        if full_pushdown is not None:
            self.full_pushdown = full_pushdown

    @property
    def files_to_big_query(self):
        """Gets the files_to_big_query of this FlowSettingsOptimizers.  # noqa: E501

        Attempt full execution for eligible files in GCS * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :return: The files_to_big_query of this FlowSettingsOptimizers.  # noqa: E501
        :rtype: str
        """
        return self._files_to_big_query

    @files_to_big_query.setter
    def files_to_big_query(self, files_to_big_query):
        """Sets the files_to_big_query of this FlowSettingsOptimizers.

        Attempt full execution for eligible files in GCS * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :param files_to_big_query: The files_to_big_query of this FlowSettingsOptimizers.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "default"]  # noqa: E501
        if files_to_big_query not in allowed_values:
            raise ValueError(
                "Invalid value for `files_to_big_query` ({0}), must be one of {1}"  # noqa: E501
                .format(files_to_big_query, allowed_values)
            )

        self._files_to_big_query = files_to_big_query

    @property
    def files_to_snowflake(self):
        """Gets the files_to_snowflake of this FlowSettingsOptimizers.  # noqa: E501

        Attempt full execution for eligible files in S3 * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :return: The files_to_snowflake of this FlowSettingsOptimizers.  # noqa: E501
        :rtype: str
        """
        return self._files_to_snowflake

    @files_to_snowflake.setter
    def files_to_snowflake(self, files_to_snowflake):
        """Sets the files_to_snowflake of this FlowSettingsOptimizers.

        Attempt full execution for eligible files in S3 * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :param files_to_snowflake: The files_to_snowflake of this FlowSettingsOptimizers.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "default"]  # noqa: E501
        if files_to_snowflake not in allowed_values:
            raise ValueError(
                "Invalid value for `files_to_snowflake` ({0}), must be one of {1}"  # noqa: E501
                .format(files_to_snowflake, allowed_values)
            )

        self._files_to_snowflake = files_to_snowflake

    @property
    def cdwto_files(self):
        """Gets the cdwto_files of this FlowSettingsOptimizers.  # noqa: E501

        Attempt full execution when publishing to files * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :return: The cdwto_files of this FlowSettingsOptimizers.  # noqa: E501
        :rtype: str
        """
        return self._cdwto_files

    @cdwto_files.setter
    def cdwto_files(self, cdwto_files):
        """Sets the cdwto_files of this FlowSettingsOptimizers.

        Attempt full execution when publishing to files * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :param cdwto_files: The cdwto_files of this FlowSettingsOptimizers.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "default"]  # noqa: E501
        if cdwto_files not in allowed_values:
            raise ValueError(
                "Invalid value for `cdwto_files` ({0}), must be one of {1}"  # noqa: E501
                .format(cdwto_files, allowed_values)
            )

        self._cdwto_files = cdwto_files

    @property
    def full_pushdown(self):
        """Gets the full_pushdown of this FlowSettingsOptimizers.  # noqa: E501

        Attempt to execute all transformation logic on source database * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :return: The full_pushdown of this FlowSettingsOptimizers.  # noqa: E501
        :rtype: str
        """
        return self._full_pushdown

    @full_pushdown.setter
    def full_pushdown(self, full_pushdown):
        """Sets the full_pushdown of this FlowSettingsOptimizers.

        Attempt to execute all transformation logic on source database * `enabled` - Turn on optimization * `disabled` - Turn off optimization * `default` - Fallback to default workspace settings  # noqa: E501

        :param full_pushdown: The full_pushdown of this FlowSettingsOptimizers.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled", "default"]  # noqa: E501
        if full_pushdown not in allowed_values:
            raise ValueError(
                "Invalid value for `full_pushdown` ({0}), must be one of {1}"  # noqa: E501
                .format(full_pushdown, allowed_values)
            )

        self._full_pushdown = full_pushdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowSettingsOptimizers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowSettingsOptimizers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
