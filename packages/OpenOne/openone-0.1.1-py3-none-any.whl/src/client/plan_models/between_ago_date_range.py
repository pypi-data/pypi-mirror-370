# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class BetweenAgoDateRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'formats': 'AnyOfbetweenAgoDateRangeFormats',
        'between_ago': 'BetweenAgoDateRangeBetweenAgo'
    }

    attribute_map = {
        'timezone': 'timezone',
        'formats': 'formats',
        'between_ago': 'betweenAgo'
    }

    def __init__(self, timezone=None, formats=None, between_ago=None):  # noqa: E501
        """BetweenAgoDateRange - a model defined in Swagger"""  # noqa: E501
        self._timezone = None
        self._formats = None
        self._between_ago = None
        self.discriminator = None
        self.timezone = timezone
        self.formats = formats
        self.between_ago = between_ago

    @property
    def timezone(self):
        """Gets the timezone of this BetweenAgoDateRange.  # noqa: E501

        ISO Timezone, eg. \"Europe/Berlin\"  # noqa: E501

        :return: The timezone of this BetweenAgoDateRange.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this BetweenAgoDateRange.

        ISO Timezone, eg. \"Europe/Berlin\"  # noqa: E501

        :param timezone: The timezone of this BetweenAgoDateRange.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def formats(self):
        """Gets the formats of this BetweenAgoDateRange.  # noqa: E501


        :return: The formats of this BetweenAgoDateRange.  # noqa: E501
        :rtype: AnyOfbetweenAgoDateRangeFormats
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this BetweenAgoDateRange.


        :param formats: The formats of this BetweenAgoDateRange.  # noqa: E501
        :type: AnyOfbetweenAgoDateRangeFormats
        """
        if formats is None:
            raise ValueError("Invalid value for `formats`, must not be `None`")  # noqa: E501

        self._formats = formats

    @property
    def between_ago(self):
        """Gets the between_ago of this BetweenAgoDateRange.  # noqa: E501


        :return: The between_ago of this BetweenAgoDateRange.  # noqa: E501
        :rtype: BetweenAgoDateRangeBetweenAgo
        """
        return self._between_ago

    @between_ago.setter
    def between_ago(self, between_ago):
        """Sets the between_ago of this BetweenAgoDateRange.


        :param between_ago: The between_ago of this BetweenAgoDateRange.  # noqa: E501
        :type: BetweenAgoDateRangeBetweenAgo
        """
        if between_ago is None:
            raise ValueError("Invalid value for `between_ago`, must not be `None`")  # noqa: E501

        self._between_ago = between_ago

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BetweenAgoDateRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BetweenAgoDateRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
