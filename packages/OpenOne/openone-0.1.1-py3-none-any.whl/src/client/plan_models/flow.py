# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class Flow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'folder': 'FlowFolder',
        'id': 'AnyOfflowId',
        'default_output_dir': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'creator': 'BaseObjectSchemaCreator',
        'updater': 'BaseObjectSchemaUpdater',
        'settings': 'FlowSettings',
        'workspace': 'FlowWorkspace',
        'flow_state': 'FlowState'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'folder': 'folder',
        'id': 'id',
        'default_output_dir': 'defaultOutputDir',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'creator': 'creator',
        'updater': 'updater',
        'settings': 'settings',
        'workspace': 'workspace',
        'flow_state': 'flowState'
    }

    def __init__(self, name=None, description=None, folder=None, id=None, default_output_dir=None, created_at=None, updated_at=None, creator=None, updater=None, settings=None, workspace=None, flow_state=None):  # noqa: E501
        """Flow - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._folder = None
        self._id = None
        self._default_output_dir = None
        self._created_at = None
        self._updated_at = None
        self._creator = None
        self._updater = None
        self._settings = None
        self._workspace = None
        self._flow_state = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if folder is not None:
            self.folder = folder
        self.id = id
        if default_output_dir is not None:
            self.default_output_dir = default_output_dir
        self.created_at = created_at
        self.updated_at = updated_at
        if creator is not None:
            self.creator = creator
        if updater is not None:
            self.updater = updater
        if settings is not None:
            self.settings = settings
        if workspace is not None:
            self.workspace = workspace
        if flow_state is not None:
            self.flow_state = flow_state

    @property
    def name(self):
        """Gets the name of this Flow.  # noqa: E501

        Display name of the flow.  # noqa: E501

        :return: The name of this Flow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flow.

        Display name of the flow.  # noqa: E501

        :param name: The name of this Flow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Flow.  # noqa: E501

        User-friendly description for the flow.  # noqa: E501

        :return: The description of this Flow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Flow.

        User-friendly description for the flow.  # noqa: E501

        :param description: The description of this Flow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder(self):
        """Gets the folder of this Flow.  # noqa: E501


        :return: The folder of this Flow.  # noqa: E501
        :rtype: FlowFolder
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Flow.


        :param folder: The folder of this Flow.  # noqa: E501
        :type: FlowFolder
        """

        self._folder = folder

    @property
    def id(self):
        """Gets the id of this Flow.  # noqa: E501


        :return: The id of this Flow.  # noqa: E501
        :rtype: AnyOfflowId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Flow.


        :param id: The id of this Flow.  # noqa: E501
        :type: AnyOfflowId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def default_output_dir(self):
        """Gets the default_output_dir of this Flow.  # noqa: E501

        output directory location for the flow.  # noqa: E501

        :return: The default_output_dir of this Flow.  # noqa: E501
        :rtype: str
        """
        return self._default_output_dir

    @default_output_dir.setter
    def default_output_dir(self, default_output_dir):
        """Sets the default_output_dir of this Flow.

        output directory location for the flow.  # noqa: E501

        :param default_output_dir: The default_output_dir of this Flow.  # noqa: E501
        :type: str
        """

        self._default_output_dir = default_output_dir

    @property
    def created_at(self):
        """Gets the created_at of this Flow.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this Flow.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Flow.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this Flow.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Flow.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this Flow.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Flow.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Flow.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def creator(self):
        """Gets the creator of this Flow.  # noqa: E501


        :return: The creator of this Flow.  # noqa: E501
        :rtype: BaseObjectSchemaCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Flow.


        :param creator: The creator of this Flow.  # noqa: E501
        :type: BaseObjectSchemaCreator
        """

        self._creator = creator

    @property
    def updater(self):
        """Gets the updater of this Flow.  # noqa: E501


        :return: The updater of this Flow.  # noqa: E501
        :rtype: BaseObjectSchemaUpdater
        """
        return self._updater

    @updater.setter
    def updater(self, updater):
        """Sets the updater of this Flow.


        :param updater: The updater of this Flow.  # noqa: E501
        :type: BaseObjectSchemaUpdater
        """

        self._updater = updater

    @property
    def settings(self):
        """Gets the settings of this Flow.  # noqa: E501


        :return: The settings of this Flow.  # noqa: E501
        :rtype: FlowSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Flow.


        :param settings: The settings of this Flow.  # noqa: E501
        :type: FlowSettings
        """

        self._settings = settings

    @property
    def workspace(self):
        """Gets the workspace of this Flow.  # noqa: E501


        :return: The workspace of this Flow.  # noqa: E501
        :rtype: FlowWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Flow.


        :param workspace: The workspace of this Flow.  # noqa: E501
        :type: FlowWorkspace
        """

        self._workspace = workspace

    @property
    def flow_state(self):
        """Gets the flow_state of this Flow.  # noqa: E501


        :return: The flow_state of this Flow.  # noqa: E501
        :rtype: FlowState
        """
        return self._flow_state

    @flow_state.setter
    def flow_state(self, flow_state):
        """Sets the flow_state of this Flow.


        :param flow_state: The flow_state of this Flow.  # noqa: E501
        :type: FlowState
        """

        self._flow_state = flow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Flow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Flow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
