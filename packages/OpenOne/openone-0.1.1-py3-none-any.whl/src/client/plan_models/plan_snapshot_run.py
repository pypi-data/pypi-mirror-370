# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class PlanSnapshotRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'AnyOfplanSnapshotRunId',
        'status': 'str',
        'created_at': 'datetime',
        'finished_at': 'datetime',
        'started_at': 'datetime',
        'submitted_at': 'datetime',
        'updated_at': 'datetime',
        'schedule_history_id': 'AnyOfplanSnapshotRunScheduleHistoryId',
        'failed_to_cancel_some_jobs': 'bool',
        'plan': 'FlowWorkspace',
        'next_run': 'PlanSnapshotRunNextRun',
        'previous_run': 'PlanSnapshotRunPreviousRun'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'created_at': 'createdAt',
        'finished_at': 'finishedAt',
        'started_at': 'startedAt',
        'submitted_at': 'submittedAt',
        'updated_at': 'updatedAt',
        'schedule_history_id': 'scheduleHistoryId',
        'failed_to_cancel_some_jobs': 'failedToCancelSomeJobs',
        'plan': 'plan',
        'next_run': 'nextRun',
        'previous_run': 'previousRun'
    }

    def __init__(self, id=None, status=None, created_at=None, finished_at=None, started_at=None, submitted_at=None, updated_at=None, schedule_history_id=None, failed_to_cancel_some_jobs=None, plan=None, next_run=None, previous_run=None):  # noqa: E501
        """PlanSnapshotRun - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._created_at = None
        self._finished_at = None
        self._started_at = None
        self._submitted_at = None
        self._updated_at = None
        self._schedule_history_id = None
        self._failed_to_cancel_some_jobs = None
        self._plan = None
        self._next_run = None
        self._previous_run = None
        self.discriminator = None
        self.id = id
        self.status = status
        self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if started_at is not None:
            self.started_at = started_at
        if submitted_at is not None:
            self.submitted_at = submitted_at
        self.updated_at = updated_at
        if schedule_history_id is not None:
            self.schedule_history_id = schedule_history_id
        if failed_to_cancel_some_jobs is not None:
            self.failed_to_cancel_some_jobs = failed_to_cancel_some_jobs
        if plan is not None:
            self.plan = plan
        if next_run is not None:
            self.next_run = next_run
        if previous_run is not None:
            self.previous_run = previous_run

    @property
    def id(self):
        """Gets the id of this PlanSnapshotRun.  # noqa: E501


        :return: The id of this PlanSnapshotRun.  # noqa: E501
        :rtype: AnyOfplanSnapshotRunId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanSnapshotRun.


        :param id: The id of this PlanSnapshotRun.  # noqa: E501
        :type: AnyOfplanSnapshotRunId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this PlanSnapshotRun.  # noqa: E501


        :return: The status of this PlanSnapshotRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlanSnapshotRun.


        :param status: The status of this PlanSnapshotRun.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Created", "InProgress", "Complete", "Failed", "Canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this PlanSnapshotRun.  # noqa: E501

        The time this object was first created.  # noqa: E501

        :return: The created_at of this PlanSnapshotRun.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlanSnapshotRun.

        The time this object was first created.  # noqa: E501

        :param created_at: The created_at of this PlanSnapshotRun.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this PlanSnapshotRun.  # noqa: E501

        The time the plan execution finished.  # noqa: E501

        :return: The finished_at of this PlanSnapshotRun.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this PlanSnapshotRun.

        The time the plan execution finished.  # noqa: E501

        :param finished_at: The finished_at of this PlanSnapshotRun.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def started_at(self):
        """Gets the started_at of this PlanSnapshotRun.  # noqa: E501

        The time the plan execution started.  # noqa: E501

        :return: The started_at of this PlanSnapshotRun.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this PlanSnapshotRun.

        The time the plan execution started.  # noqa: E501

        :param started_at: The started_at of this PlanSnapshotRun.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def submitted_at(self):
        """Gets the submitted_at of this PlanSnapshotRun.  # noqa: E501

        The time the plan execution was submitted to the server.  # noqa: E501

        :return: The submitted_at of this PlanSnapshotRun.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this PlanSnapshotRun.

        The time the plan execution was submitted to the server.  # noqa: E501

        :param submitted_at: The submitted_at of this PlanSnapshotRun.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PlanSnapshotRun.  # noqa: E501

        The time this object was last updated.  # noqa: E501

        :return: The updated_at of this PlanSnapshotRun.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PlanSnapshotRun.

        The time this object was last updated.  # noqa: E501

        :param updated_at: The updated_at of this PlanSnapshotRun.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def schedule_history_id(self):
        """Gets the schedule_history_id of this PlanSnapshotRun.  # noqa: E501


        :return: The schedule_history_id of this PlanSnapshotRun.  # noqa: E501
        :rtype: AnyOfplanSnapshotRunScheduleHistoryId
        """
        return self._schedule_history_id

    @schedule_history_id.setter
    def schedule_history_id(self, schedule_history_id):
        """Sets the schedule_history_id of this PlanSnapshotRun.


        :param schedule_history_id: The schedule_history_id of this PlanSnapshotRun.  # noqa: E501
        :type: AnyOfplanSnapshotRunScheduleHistoryId
        """

        self._schedule_history_id = schedule_history_id

    @property
    def failed_to_cancel_some_jobs(self):
        """Gets the failed_to_cancel_some_jobs of this PlanSnapshotRun.  # noqa: E501


        :return: The failed_to_cancel_some_jobs of this PlanSnapshotRun.  # noqa: E501
        :rtype: bool
        """
        return self._failed_to_cancel_some_jobs

    @failed_to_cancel_some_jobs.setter
    def failed_to_cancel_some_jobs(self, failed_to_cancel_some_jobs):
        """Sets the failed_to_cancel_some_jobs of this PlanSnapshotRun.


        :param failed_to_cancel_some_jobs: The failed_to_cancel_some_jobs of this PlanSnapshotRun.  # noqa: E501
        :type: bool
        """

        self._failed_to_cancel_some_jobs = failed_to_cancel_some_jobs

    @property
    def plan(self):
        """Gets the plan of this PlanSnapshotRun.  # noqa: E501


        :return: The plan of this PlanSnapshotRun.  # noqa: E501
        :rtype: FlowWorkspace
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this PlanSnapshotRun.


        :param plan: The plan of this PlanSnapshotRun.  # noqa: E501
        :type: FlowWorkspace
        """

        self._plan = plan

    @property
    def next_run(self):
        """Gets the next_run of this PlanSnapshotRun.  # noqa: E501


        :return: The next_run of this PlanSnapshotRun.  # noqa: E501
        :rtype: PlanSnapshotRunNextRun
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this PlanSnapshotRun.


        :param next_run: The next_run of this PlanSnapshotRun.  # noqa: E501
        :type: PlanSnapshotRunNextRun
        """

        self._next_run = next_run

    @property
    def previous_run(self):
        """Gets the previous_run of this PlanSnapshotRun.  # noqa: E501


        :return: The previous_run of this PlanSnapshotRun.  # noqa: E501
        :rtype: PlanSnapshotRunPreviousRun
        """
        return self._previous_run

    @previous_run.setter
    def previous_run(self, previous_run):
        """Sets the previous_run of this PlanSnapshotRun.


        :param previous_run: The previous_run of this PlanSnapshotRun.  # noqa: E501
        :type: PlanSnapshotRunPreviousRun
        """

        self._previous_run = previous_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanSnapshotRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanSnapshotRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
