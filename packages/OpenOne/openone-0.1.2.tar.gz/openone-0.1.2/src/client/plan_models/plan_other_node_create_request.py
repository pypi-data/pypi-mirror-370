# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class PlanOtherNodeCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coordinates': 'PlanFlowNodeCreateRequestCoordinates',
        'plan_id': 'AnyOfplanOtherNodeCreateRequestPlanId',
        'task_type': 'str',
        'name': 'str',
        'in_plan_node_ids': 'list[AnyOfplanOtherNodeCreateRequestInPlanNodeIdsItems]',
        'out_plan_node_ids': 'list[AnyOfplanOtherNodeCreateRequestOutPlanNodeIdsItems]'
    }

    attribute_map = {
        'coordinates': 'coordinates',
        'plan_id': 'planId',
        'task_type': 'taskType',
        'name': 'name',
        'in_plan_node_ids': 'inPlanNodeIds',
        'out_plan_node_ids': 'outPlanNodeIds'
    }

    def __init__(self, coordinates=None, plan_id=None, task_type=None, name=None, in_plan_node_ids=None, out_plan_node_ids=None):  # noqa: E501
        """PlanOtherNodeCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._coordinates = None
        self._plan_id = None
        self._task_type = None
        self._name = None
        self._in_plan_node_ids = None
        self._out_plan_node_ids = None
        self.discriminator = None
        if coordinates is not None:
            self.coordinates = coordinates
        self.plan_id = plan_id
        self.task_type = task_type
        self.name = name
        if in_plan_node_ids is not None:
            self.in_plan_node_ids = in_plan_node_ids
        if out_plan_node_ids is not None:
            self.out_plan_node_ids = out_plan_node_ids

    @property
    def coordinates(self):
        """Gets the coordinates of this PlanOtherNodeCreateRequest.  # noqa: E501


        :return: The coordinates of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: PlanFlowNodeCreateRequestCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this PlanOtherNodeCreateRequest.


        :param coordinates: The coordinates of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: PlanFlowNodeCreateRequestCoordinates
        """

        self._coordinates = coordinates

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanOtherNodeCreateRequest.  # noqa: E501


        :return: The plan_id of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: AnyOfplanOtherNodeCreateRequestPlanId
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanOtherNodeCreateRequest.


        :param plan_id: The plan_id of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: AnyOfplanOtherNodeCreateRequestPlanId
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def task_type(self):
        """Gets the task_type of this PlanOtherNodeCreateRequest.  # noqa: E501

         * `ml_predict` -  * `ml_retrain` -  * `script_sql` -  * `ml_project_update` -  * `reporting_generate` -   * `cefd_desktop` -  * `li_project_replay` -  * `ai_dataset` -  * `email` -  * `delay` -   # noqa: E501

        :return: The task_type of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this PlanOtherNodeCreateRequest.

         * `ml_predict` -  * `ml_retrain` -  * `script_sql` -  * `ml_project_update` -  * `reporting_generate` -   * `cefd_desktop` -  * `li_project_replay` -  * `ai_dataset` -  * `email` -  * `delay` -   # noqa: E501

        :param task_type: The task_type of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: str
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ml_predict", "ml_retrain", "script_sql", "ml_project_update", "reporting_generate", "cefd_desktop", "li_project_replay", "ai_dataset", "email", "delay"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def name(self):
        """Gets the name of this PlanOtherNodeCreateRequest.  # noqa: E501


        :return: The name of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanOtherNodeCreateRequest.


        :param name: The name of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def in_plan_node_ids(self):
        """Gets the in_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501


        :return: The in_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: list[AnyOfplanOtherNodeCreateRequestInPlanNodeIdsItems]
        """
        return self._in_plan_node_ids

    @in_plan_node_ids.setter
    def in_plan_node_ids(self, in_plan_node_ids):
        """Sets the in_plan_node_ids of this PlanOtherNodeCreateRequest.


        :param in_plan_node_ids: The in_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: list[AnyOfplanOtherNodeCreateRequestInPlanNodeIdsItems]
        """

        self._in_plan_node_ids = in_plan_node_ids

    @property
    def out_plan_node_ids(self):
        """Gets the out_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501


        :return: The out_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501
        :rtype: list[AnyOfplanOtherNodeCreateRequestOutPlanNodeIdsItems]
        """
        return self._out_plan_node_ids

    @out_plan_node_ids.setter
    def out_plan_node_ids(self, out_plan_node_ids):
        """Sets the out_plan_node_ids of this PlanOtherNodeCreateRequest.


        :param out_plan_node_ids: The out_plan_node_ids of this PlanOtherNodeCreateRequest.  # noqa: E501
        :type: list[AnyOfplanOtherNodeCreateRequestOutPlanNodeIdsItems]
        """

        self._out_plan_node_ids = out_plan_node_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanOtherNodeCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanOtherNodeCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
