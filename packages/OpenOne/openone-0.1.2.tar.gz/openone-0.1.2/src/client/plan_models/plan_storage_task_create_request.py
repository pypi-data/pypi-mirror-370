# coding: utf-8

"""
    Plans (Beta)

 

    OpenAPI spec version: v2024.20.0
     
"""

import pprint
import re  # noqa: F401

import six

class PlanStorageTaskCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'type': 'str',
        'connection_id': 'str'
    }

    attribute_map = {
        'path': 'path',
        'type': 'type',
        'connection_id': 'connectionId'
    }

    def __init__(self, path=None, type=None, connection_id=None):  # noqa: E501
        """PlanStorageTaskCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._type = None
        self._connection_id = None
        self.discriminator = None
        self.path = path
        if type is not None:
            self.type = type
        if connection_id is not None:
            self.connection_id = connection_id

    @property
    def path(self):
        """Gets the path of this PlanStorageTaskCreateRequest.  # noqa: E501


        :return: The path of this PlanStorageTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PlanStorageTaskCreateRequest.


        :param path: The path of this PlanStorageTaskCreateRequest.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def type(self):
        """Gets the type of this PlanStorageTaskCreateRequest.  # noqa: E501


        :return: The type of this PlanStorageTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlanStorageTaskCreateRequest.


        :param type: The type of this PlanStorageTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def connection_id(self):
        """Gets the connection_id of this PlanStorageTaskCreateRequest.  # noqa: E501


        :return: The connection_id of this PlanStorageTaskCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this PlanStorageTaskCreateRequest.


        :param connection_id: The connection_id of this PlanStorageTaskCreateRequest.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanStorageTaskCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanStorageTaskCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
