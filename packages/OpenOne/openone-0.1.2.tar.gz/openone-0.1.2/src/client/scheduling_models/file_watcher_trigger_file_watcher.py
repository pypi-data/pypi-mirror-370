# coding: utf-8

"""
    Scheduling (Alpha)

    No description provided (generated API client)  # noqa: E501

    OpenAPI spec version: v2024.14.0
    
    Generated API client
"""

import pprint
import re  # noqa: F401

import six

class FileWatcherTriggerFileWatcher(object):
    """NOTE: This class is auto generated by the API code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'interval': 'int',
        'event_type': 'str',
        'storage_type': 'str'
    }

    attribute_map = {
        'path': 'path',
        'interval': 'interval',
        'event_type': 'eventType',
        'storage_type': 'storageType'
    }

    def __init__(self, path=None, interval=None, event_type=None, storage_type=None):  # noqa: E501
        """FileWatcherTriggerFileWatcher - a model defined in API spec"""  # noqa: E501
        self._path = None
        self._interval = None
        self._event_type = None
        self._storage_type = None
        self.discriminator = None
        self.path = path
        self.interval = interval
        self.event_type = event_type
        self.storage_type = storage_type

    @property
    def path(self):
        """Gets the path of this FileWatcherTriggerFileWatcher.  # noqa: E501

        VFS file path  # noqa: E501

        :return: The path of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileWatcherTriggerFileWatcher.

        VFS file path  # noqa: E501

        :param path: The path of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def interval(self):
        """Gets the interval of this FileWatcherTriggerFileWatcher.  # noqa: E501

        Interval in milliseconds  # noqa: E501

        :return: The interval of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this FileWatcherTriggerFileWatcher.

        Interval in milliseconds  # noqa: E501

        :param interval: The interval of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :type: int
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def event_type(self):
        """Gets the event_type of this FileWatcherTriggerFileWatcher.  # noqa: E501

        FileWatcher event type  # noqa: E501

        :return: The event_type of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this FileWatcherTriggerFileWatcher.

        FileWatcher event type  # noqa: E501

        :param event_type: The event_type of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ONCHANGE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def storage_type(self):
        """Gets the storage_type of this FileWatcherTriggerFileWatcher.  # noqa: E501

        VFS storage type  # noqa: E501

        :return: The storage_type of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this FileWatcherTriggerFileWatcher.

        VFS storage type  # noqa: E501

        :param storage_type: The storage_type of this FileWatcherTriggerFileWatcher.  # noqa: E501
        :type: str
        """
        if storage_type is None:
            raise ValueError("Invalid value for `storage_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TFS", "S3"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileWatcherTriggerFileWatcher, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileWatcherTriggerFileWatcher):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
