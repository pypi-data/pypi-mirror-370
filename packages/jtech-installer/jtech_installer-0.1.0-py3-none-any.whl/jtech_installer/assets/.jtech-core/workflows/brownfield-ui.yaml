# <!-- Powered by JTECH™ Core -->
workflow:
  id: brownfield-ui
  name: Melhoria de UI/Frontend Brownfield
  description: >-
    Workflow de agentes para melhorar aplicações frontend existentes com novas funcionalidades,
    modernização ou melhorias de design. Lida com análise de UI existente e integração segura.
  type: brownfield
  project_types:
    - modernização-ui
    - migração-framework
    - renovação-design
    - melhoria-frontend

  sequence:
    - step: análise_ui
      agent: architect
      action: analisar projeto existente e usar tarefa document-project
      creates: múltiplos documentos conforme template document-project
      notes: "Revisar aplicação frontend existente, feedback de usuários, dados de analytics e identificar áreas de melhoria."

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: análise_ui_existente
      notes: "Cria PRD abrangente focado na melhoria de UI com análise do sistema existente. SALVAR SAÍDA: Copie o prd.md final para a pasta docs/ do seu projeto."

    - agent: ux-expert
      creates: front-end-spec.md
      uses: front-end-spec-tmpl
      requires: prd.md
      notes: "Cria especificação UI/UX que se integra com padrões de design existentes. SALVAR SAÍDA: Copie o front-end-spec.md final para a pasta docs/ do seu projeto."

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires:
        - prd.md
        - front-end-spec.md
      notes: "Cria arquitetura frontend com estratégia de integração de componentes e planejamento de migração. SALVAR SAÍDA: Copie o architecture.md final para a pasta docs/ do seu projeto."

    - agent: po
      validates: todos_os_artefatos
      uses: po-master-checklist
      notes: "Valida todos os documentos para segurança de integração de UI e experiência do usuário. Pode requerer atualizações em qualquer documento."

    - agent: vários
      action: criação_de_stories
      creates: múltiplas_stories
      uses: story-tmpl
      requires:
        - prd.md
        - front-end-spec.md
        - architecture.md
      notes: |
        Criar stories baseadas nos épicos identificados no PRD:
        1. PM cria stories iniciais usando story-tmpl
        2. UX Expert adiciona especificações detalhadas de design
        3. Architect adiciona notas técnicas para componentes
        4. QA adiciona critérios de teste de UI/UX
        5. SM coordena priorização considerando impacto no usuário

        SALVAR SAÍDA: Salve cada story na pasta docs/stories/ do seu projeto com nomenclatura [épico].[story].[título].md

    - agent: sm
      validates: entrega_completa
      uses: story-dod-checklist
      notes: "Valida que todas as stories estão prontas para desenvolvimento com critérios de design claros. Confirma que a integração com componentes existentes está bem planejada."

  artifacts:
    primary:
      - multiple documents per document-project template
      - prd.md (UI enhancement focused)
      - front-end-spec.md (integration-aware design)
      - architecture.md (frontend integration strategy)
      - multiple story files in docs/stories/

    validation:
      - po-master-checklist validation results
      - story-dod-checklist validation results

  exit_criteria:
    - PRD aprovado com análise completa da UI existente
    - Especificação UI/UX que considera padrões e componentes existentes
    - Arquitetura frontend que garante integração suave
    - Stories prontas para desenvolvimento com critérios de design claros
    - Plano de migração de componentes validado

  team_composition:
    core_agents:
      - architect (análise técnica e arquitetura frontend)
      - pm (gerenciamento de produto)
      - ux-expert (design e experiência do usuário)
      - po (validação de produto)
      - sm (gestão e validação de entrega)
    optional_agents:
      - qa (testes de UI/UX)
      - dev (implementação e viabilidade técnica)

  considerations:
    design_consistency: "Manter consistência com sistema de design existente"
    component_reusability: "Maximizar reutilização de componentes existentes"
    user_experience: "Minimizar fricção na transição para nova UI"
    performance: "Garantir que melhorias não degradem performance"
    accessibility: "Manter ou melhorar padrões de acessibilidade"

  success_metrics:
    - Usuários adotam nova UI sem fricção significativa
    - Métricas de usabilidade melhoram após implementação
    - Performance da aplicação mantida ou melhorada
    - Consistência visual mantida em toda aplicação
    - Feedback positivo dos usuários sobre melhorias

  notes: |
    Workflow especializado para melhorias de frontend com foco em:
    - Preservação da experiência do usuário existente
    - Integração suave de novos componentes
    - Manutenção de consistência de design
    - Validação contínua com usuários reais
