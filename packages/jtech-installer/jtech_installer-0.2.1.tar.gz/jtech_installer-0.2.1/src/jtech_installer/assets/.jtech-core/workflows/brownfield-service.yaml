# <!-- Powered by JTECH™ Core -->
workflow:
  id: brownfield-service
  name: Melhoria de Serviço/API Brownfield
  description: >-
    Workflow de agentes para melhorar serviços backend e APIs existentes com novas funcionalidades,
    modernização ou melhorias de performance. Lida com análise de sistema existente e integração segura.
  type: brownfield
  project_types:
    - modernização-serviço
    - melhoria-api
    - extração-microserviço
    - otimização-performance
    - melhoria-integração

  sequence:
    - step: análise_serviço
      agent: architect
      action: analisar projeto existente e usar tarefa document-project
      creates: múltiplos documentos conforme template document-project
      notes: "Revisar documentação de serviço existente, codebase, métricas de performance e identificar dependências de integração."

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: análise_serviço_existente
      notes: "Cria PRD abrangente focado na melhoria de serviço com análise do sistema existente. SALVAR SAÍDA: Copie o prd.md final para a pasta docs/ do seu projeto."

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires: prd.md
      notes: "Cria arquitetura com estratégia de integração de serviço e planejamento de evolução da API. SALVAR SAÍDA: Copie o architecture.md final para a pasta docs/ do seu projeto."

    - agent: po
      validates: todos_os_artefatos
      uses: po-master-checklist
      notes: "Valida todos os documentos para segurança de integração de serviço e compatibilidade de API. Pode requerer atualizações em qualquer documento."

    - agent: vários
      action: criação_de_stories
      creates: múltiplas_stories
      uses: story-tmpl
      requires:
        - prd.md
        - architecture.md
      notes: |
        Criar stories baseadas nos épicos identificados no PRD:
        1. PM cria stories iniciais usando story-tmpl
        2. Architect adiciona notas técnicas detalhadas para APIs
        3. QA adiciona critérios de teste específicos para serviços
        4. SM coordena priorização considerando dependências de serviço

        SALVAR SAÍDA: Salve cada story na pasta docs/stories/ do seu projeto com nomenclatura [épico].[story].[título].md

    - agent: sm
      validates: entrega_completa
      uses: story-dod-checklist
      notes: "Valida que todas as stories estão prontas para desenvolvimento com critérios claros e testes de API. Confirma que a integração com serviços existentes está bem planejada."

  artifacts:
    primary:
      - multiple documents per document-project template
      - prd.md (service enhancement focused)
      - architecture.md (service integration strategy)
      - multiple story files in docs/stories/

    validation:
      - po-master-checklist validation results
      - story-dod-checklist validation results

  exit_criteria:
    - PRD aprovado com análise completa do serviço existente
    - Arquitetura de serviço que garante integração segura
    - Stories prontas para desenvolvimento com testes de API definidos
    - Plano de evolução de API que mantém compatibilidade
    - Estratégia de migração/deployment validada

  team_composition:
    core_agents:
      - architect (análise técnica e arquitetura de serviço)
      - pm (gerenciamento de produto)
      - po (validação de produto)
      - sm (gestão e validação de entrega)
    optional_agents:
      - qa (testes de API e integração)
      - dev (implementação e viabilidade técnica)

  considerations:
    api_versioning: "Manter compatibilidade com versões anteriores da API"
    service_dependencies: "Mapear e validar dependências entre serviços"
    data_migration: "Planejar migração de dados quando necessário"
    monitoring: "Implementar monitoramento para novas funcionalidades"
    rollback_strategy: "Definir estratégia de rollback para mudanças críticas"

  success_metrics:
    - APIs mantêm compatibilidade com versões anteriores
    - Performance do serviço mantida ou melhorada
    - Integração com serviços dependentes funciona perfeitamente
    - Cobertura de testes adequada para novas funcionalidades
    - Documentação de API atualizada e precisa

  notes: |
    Workflow especializado para melhorias de backend e API com foco em:
    - Manutenção de compatibilidade de API
    - Análise de dependências de serviço
    - Estratégias de versionamento seguras
    - Testes de integração robustos
