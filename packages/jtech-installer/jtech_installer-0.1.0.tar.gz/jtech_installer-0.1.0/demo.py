#!/usr/bin/env python3
"""
üöÄ JTECH‚Ñ¢ Core Installer - Demonstra√ß√£o Final
"""

import os
import tempfile
import subprocess
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

def main():
    """Demonstra√ß√£o completa da CLI JTECH‚Ñ¢ Core Installer."""
    
    console.print(Panel.fit(
        "[bold blue]üöÄ JTECH‚Ñ¢ Core Installer - Demonstra√ß√£o Final[/bold blue]\n\n"
        "[green]Esta demonstra√ß√£o mostra todas as funcionalidades da CLI:[/green]\n"
        "‚Ä¢ Instala√ß√£o autom√°tica usando assets empacotados\n"
        "‚Ä¢ Diferentes tipos de equipe\n"
        "‚Ä¢ Valida√ß√£o de instala√ß√£o\n"
        "‚Ä¢ Estrutura completa .jtech-core copiada",
        title="üéØ Demonstra√ß√£o",
        border_style="blue"
    ))
    
    # Demonstrar comandos dispon√≠veis
    console.print("\n[bold cyan]üìã Comandos Dispon√≠veis:[/bold cyan]")
    
    commands_table = Table()
    commands_table.add_column("Comando", style="cyan")
    commands_table.add_column("Descri√ß√£o", style="white")
    
    commands_table.add_row(
        "python -m jtech_installer.cli.main",
        "Instala√ß√£o padr√£o (fullstack)"
    )
    commands_table.add_row(
        "python -m jtech_installer.cli.main --team ide-minimal",
        "Instala√ß√£o equipe minimal"
    )
    commands_table.add_row(
        "python -m jtech_installer.cli.main --validate-only",
        "Validar instala√ß√£o existente"
    )
    commands_table.add_row(
        "python -m jtech_installer.cli.main --force",
        "Reinstala√ß√£o for√ßada"
    )
    
    console.print(commands_table)
    
    # Mostrar exemplo de uso
    console.print("\n[bold green]‚ú® Exemplo de Uso:[/bold green]")
    console.print("""
[dim]# 1. Criar diret√≥rio do projeto[/dim]
mkdir meu-projeto && cd meu-projeto

[dim]# 2. Instalar JTECH‚Ñ¢ Core[/dim]
python -m jtech_installer.cli.main --team fullstack

[dim]# 3. Abrir no VS Code[/dim]
code .

[dim]# 4. Validar instala√ß√£o[/dim]
python -m jtech_installer.cli.main --validate-only
""")
    
    # Mostrar assets inclu√≠dos
    console.print("[bold magenta]üì¶ Assets Empacotados:[/bold magenta]")
    
    assets_table = Table()
    assets_table.add_column("Componente", style="cyan")
    assets_table.add_column("Localiza√ß√£o", style="green")
    assets_table.add_column("Descri√ß√£o", style="dim")
    
    assets_table.add_row("Estrutura .jtech-core", "assets/.jtech-core/", "Framework completo")
    assets_table.add_row("ChatModes", "assets/.github/chatmodes/", "10 modos especializados")
    assets_table.add_row("VS Code Config", "assets/.vscode/", "Configura√ß√£o otimizada")
    assets_table.add_row("Agentes", "assets/.jtech-core/agents/", "10 agentes especializados")
    assets_table.add_row("Templates", "assets/.jtech-core/templates/", "Templates de documenta√ß√£o")
    
    console.print(assets_table)
    
    # Demonstrar instala√ß√£o real
    if input("\nüöÄ Deseja executar uma demonstra√ß√£o real? (y/n): ").lower() == 'y':
        demo_installation()
    
    console.print(Panel.fit(
        "[bold green]üéâ CLI JTECH‚Ñ¢ Core Installer Pronta![/bold green]\n\n"
        "[white]A CLI est√° 100% funcional com:[/white]\n"
        "‚úÖ Assets empacotados (n√£o hardcoded)\n"
        "‚úÖ Instala√ß√£o autom√°tica no diret√≥rio atual\n"
        "‚úÖ Suporte a m√∫ltiplos tipos de equipe\n"
        "‚úÖ Valida√ß√£o de instala√ß√µes existentes\n"
        "‚úÖ Interface rica com Rich\n"
        "‚úÖ Wrapper execut√°vel\n\n"
        "[cyan]Execute: python -m jtech_installer.cli.main --help[/cyan]",
        title="‚úÖ Sucesso Total",
        border_style="green"
    ))

def demo_installation():
    """Executa uma demonstra√ß√£o real da instala√ß√£o."""
    
    with tempfile.TemporaryDirectory() as temp_dir:
        console.print(f"\n[yellow]üìÅ Criando demo em: {temp_dir}[/yellow]")
        
        # Mudar para o diret√≥rio tempor√°rio
        os.chdir(temp_dir)
        
        # Executar instala√ß√£o
        console.print("\n[blue]üöÄ Executando instala√ß√£o demo...[/blue]")
        result = subprocess.run([
            sys.executable, "-m", "jtech_installer.cli.main", 
            "--team", "ide-minimal"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]‚úÖ Instala√ß√£o demo conclu√≠da![/green]")
            
            # Verificar estrutura criada
            console.print("\n[cyan]üìÇ Estrutura criada:[/cyan]")
            for item in Path(".").rglob("*"):
                if item.is_file() and not item.name.startswith('.'):
                    console.print(f"  üìÑ {item}")
                elif item.is_dir() and not item.name.startswith('.'):
                    console.print(f"  üìÅ {item}/")
            
            # Executar valida√ß√£o
            console.print("\n[blue]üîç Executando valida√ß√£o...[/blue]")
            val_result = subprocess.run([
                sys.executable, "-m", "jtech_installer.cli.main", 
                "--validate-only"
            ], capture_output=True, text=True)
            
            if val_result.returncode == 0:
                console.print("[green]‚úÖ Valida√ß√£o passou![/green]")
            else:
                console.print("[red]‚ùå Valida√ß√£o falhou[/red]")
        else:
            console.print(f"[red]‚ùå Erro na instala√ß√£o: {result.stderr}[/red]")

if __name__ == "__main__":
    main()
