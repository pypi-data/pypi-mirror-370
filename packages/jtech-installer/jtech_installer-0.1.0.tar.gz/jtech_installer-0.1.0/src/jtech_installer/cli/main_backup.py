#!/usr/bin/env python3
"""
üöÄ JTECH‚Ñ¢ Core Installer - CLI Principal
Instalador automatizado para configurar ambiente JTECH‚Ñ¢ Core
"""

import sys
import time
from pathlib import Path

import click
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

from ..core.engine import InstallationEngine
from ..core.models import InstallationConfig, InstallationType, TeamType
from ..validator.integrity import IntegrityValidator
from ..validator.post_installation import PostInstallationValidator

console = Console()


@click.group(invoke_without_command=True)
@click.option("--help", "-h", is_flag=True, help="Mostrar ajuda")
@click.option("--version", "-v", is_flag=True, help="Mostrar vers√£o")
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
    help="Tipo de equipe/configura√ß√£o",
)
@click.option("--force", "-f", is_flag=True, help="For√ßar reinstala√ß√£o")
@click.option(
    "--validate-only", is_flag=True, help="Apenas validar instala√ß√£o existente"
)
@click.pass_context
def cli(ctx, help, version, team, force, validate_only):
    """
    üöÄ JTECH‚Ñ¢ Core Installer

    Instala e configura automaticamente o ambiente JTECH‚Ñ¢ Core no projeto atual.

    Exemplos:
        jtech-installer                    # Instala com configura√ß√£o fullstack
        jtech-installer --team ide-minimal # Instala configura√ß√£o m√≠nima
        jtech-installer --validate-only    # Apenas valida instala√ß√£o
        jtech-installer --help             # Mostra esta ajuda
    """

    if version:
        console.print("üöÄ JTECH‚Ñ¢ Core Installer v0.1.0", style="bold blue")
        return

    if help or ctx.invoked_subcommand is not None:
        if help:
            console.print(ctx.get_help())
        return

    # Comando principal - instalar
    project_path = Path.cwd()

    console.print(
        Panel.fit(
            "[bold blue]üöÄ JTECH‚Ñ¢ Core Installer[/bold blue]\n"
            f"üìÅ Projeto: [cyan]{{project_path}}[/cyan]\n"
            f"‚öôÔ∏è Tipo de equipe: [green]{{team}}[/green]",
            title="üîß Configura√ß√£o",
            border_style="blue",
        )
    )

    if validate_only:
        return validate_installation(project_path, team)

    return install_jtech_core(project_path, team, force)


def install_jtech_core(
    project_path: Path, team_type: str, force: bool = False
):
    """Executa a instala√ß√£o completa do JTECH‚Ñ¢ Core."""

    # Verificar se j√° existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if jtech_core.exists() and not force:
        console.print("‚ö†Ô∏è Instala√ß√£o JTECH‚Ñ¢ Core j√° existe!", style="yellow")
        console.print("üí° Use --force para reinstalar", style="dim")

        if not click.confirm("Deseja continuar e atualizar a instala√ß√£o?"):
            console.print("‚ùå Instala√ß√£o cancelada", style="red")
            return False

    # Mapear tipo de equipe
    team_mapping = {
        "ide-minimal": TeamType.IDE_MINIMAL,
        "fullstack": TeamType.FULLSTACK,
        "no-ui": TeamType.NO_UI,
        "all": TeamType.ALL,
    }

    team_enum = team_mapping[team_type]

    # Determinar tipo de instala√ß√£o
    install_type = (
        InstallationType.BROWNFIELD
        if any(
            p.exists()
            for p in [
                project_path / "package.json",
                project_path / "requirements.txt",
                project_path / "pom.xml",
                project_path / "Cargo.toml",
            ]
        )
        else InstallationType.GREENFIELD
    )

    # Criar configura√ß√£o
    config = InstallationConfig(
        project_path=project_path,
        install_type=install_type,
        team_type=team_enum,
        vs_code_integration=True,
        custom_config={},
        framework_source_path=get_framework_source_path(),
    )

    # Executar instala√ß√£o com progress
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:

        # Passo 1: Criar estrutura
        task = progress.add_task(
            "üèóÔ∏è Criando estrutura de diret√≥rios...", total=None
        )
        engine = InstallationEngine()

        try:
            # Instalar
            result = engine.install(config)
            progress.update(task, description="‚úÖ Estrutura criada")
            time.sleep(0.5)

            # Passo 2: Copiar chatmodes reais
            progress.update(task, description="üí¨ Configurando chatmodes...")
            copy_real_chatmodes(project_path)
            time.sleep(0.5)

            # Passo 3: Configurar VS Code real
            progress.update(task, description="üîß Configurando VS Code...")
            copy_real_vscode_config(project_path)
            time.sleep(0.5)

            # Passo 4: Validar
            progress.update(task, description="üîç Validando instala√ß√£o...")
            validator = PostInstallationValidator(config)
            report = validator.validate_all()

            progress.remove_task(task)

        except Exception as e:
            progress.remove_task(task)
            console.print(f"‚ùå Erro durante instala√ß√£o: {e}", style="red")
            return False

    # Mostrar resultado
    show_installation_result(report, project_path)
    return True


def copy_real_chatmodes(project_path: Path):
    """Copia os chatmodes reais do ambiente do usu√°rio."""
    source_chatmodes = Path(
        "/jtech/home/angelo.vicente/code/jtech-kpi/.github/chatmodes"
    )
    target_chatmodes = project_path / ".github" / "chatmodes"

    if not source_chatmodes.exists():
        console.print("‚ö†Ô∏è Chatmodes de origem n√£o encontrados", style="yellow")
        return

    # Criar diret√≥rio target
    target_chatmodes.mkdir(parents=True, exist_ok=True)

    # Copiar todos os arquivos .chatmode.md
    import shutil

    copied_files = []

    for chatmode_file in source_chatmodes.glob("*.chatmode.md"):
        target_file = target_chatmodes / chatmode_file.name
        shutil.copy2(chatmode_file, target_file)
        copied_files.append(chatmode_file.name)

    console.print(f"‚úÖ Copiados {len(copied_files)} chatmodes", style="green")


def copy_real_vscode_config(project_path: Path):
    """Copia a configura√ß√£o real do VS Code do ambiente do usu√°rio."""
    source_vscode = Path(
        "/jtech/home/angelo.vicente/code/jtech-kpi/.vscode/settings.json"
    )
    target_vscode_dir = project_path / ".vscode"
    target_vscode_file = target_vscode_dir / "settings.json"

    if not source_vscode.exists():
        console.print(
            "‚ö†Ô∏è Configura√ß√£o VS Code de origem n√£o encontrada", style="yellow"
        )
        return

    # Criar diret√≥rio target
    target_vscode_dir.mkdir(parents=True, exist_ok=True)

    # Copiar configura√ß√£o
    import shutil

    shutil.copy2(source_vscode, target_vscode_file)

    console.print("‚úÖ Configura√ß√£o VS Code copiada", style="green")


def get_framework_source_path() -> Path:
    """Retorna o caminho para os arquivos fonte do framework."""
    # Por enquanto, usar o diret√≥rio do pr√≥prio installer
    installer_dir = Path(__file__).parent.parent.parent.parent
    framework_dir = installer_dir / "framework"

    if framework_dir.exists():
        return framework_dir

    # Fallback para diret√≥rio de templates
    return installer_dir / "templates"


def validate_installation(project_path: Path, team_type: str):
    """Valida uma instala√ß√£o existente."""
    console.print("üîç Validando instala√ß√£o JTECH‚Ñ¢ Core...", style="blue")

    # Verificar se existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if not jtech_core.exists():
        console.print(
            "‚ùå Nenhuma instala√ß√£o JTECH‚Ñ¢ Core encontrada", style="red"
        )
        console.print(
            "üí° Execute 'jtech-installer' para instalar", style="dim"
        )
        return False

    # Mapear tipo de equipe
    team_mapping = {
        "ide-minimal": TeamType.IDE_MINIMAL,
        "fullstack": TeamType.FULLSTACK,
        "no-ui": TeamType.NO_UI,
        "all": TeamType.ALL,
    }

    # Criar configura√ß√£o para valida√ß√£o
    config = InstallationConfig(
        project_path=project_path,
        install_type=InstallationType.BROWNFIELD,
        team_type=team_mapping[team_type],
        vs_code_integration=True,
        custom_config={},
        framework_source_path=get_framework_source_path(),
    )

    # Executar valida√ß√£o
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task("üîç Executando valida√ß√£o...", total=None)

        try:
            # Valida√ß√£o p√≥s-instala√ß√£o
            validator = PostInstallationValidator(config)
            report = validator.validate_all()

            # Valida√ß√£o de integridade
            integrity_validator = IntegrityValidator(config)
            integrity_valid = integrity_validator.validate_all()

            progress.remove_task(task)

        except Exception as e:
            progress.remove_task(task)
            console.print(f"‚ùå Erro durante valida√ß√£o: {e}", style="red")
            return False

    # Mostrar resultado da valida√ß√£o
    show_validation_result(report, integrity_valid, project_path)
    return report.is_valid


def show_installation_result(report, project_path: Path):
    """Mostra o resultado da instala√ß√£o."""

    if report.is_valid:
        console.print(
            Panel.fit(
                "[bold green]üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO![/bold green]\n\n"
                f"üìÅ Projeto: [cyan]{{project_path}}[/cyan]\n"
                f"üîß Estrutura: [green].jtech-core/[/green] criada\n"
                f"üí¨ ChatModes: [green].github/chatmodes/[/green] configurados\n"
                f"‚öôÔ∏è VS Code: [green].vscode/settings.json[/green] configurado",
                title="‚úÖ Sucesso",
                border_style="green",
            )
        )

        # Mostrar pr√≥ximos passos
        next_steps = Table(title="üìã Pr√≥ximos Passos")
        next_steps.add_column("Comando", style="cyan")
        next_steps.add_column("Descri√ß√£o", style="white")

        next_steps.add_row("code .", "Abrir projeto no VS Code")
        next_steps.add_row(
            "jtech-installer --validate-only", "Validar instala√ß√£o"
        )
        next_steps.add_row("ls .jtech-core/", "Explorar estrutura criada")

        console.print(next_steps)

    else:
        console.print(
            Panel.fit(
                "[bold yellow]‚ö†Ô∏è INSTALA√á√ÉO COM AVISOS[/bold yellow]\n\n"
                f"üìÅ Projeto: [cyan]{{project_path}}[/cyan]\n"
                f"üîç Valida√ß√µes: [red]{{len([r for r in report.components if not r.is_valid])}}[/red] falharam",
                title="‚ö†Ô∏è Aten√ß√£o",
                border_style="yellow",
            )
        )


def show_validation_result(report, integrity_valid: bool, project_path: Path):
    """Mostra o resultado da valida√ß√£o."""

    # Tabela de resultados
    table = Table(title="üîç Resultado da Valida√ß√£o")
    table.add_column("Componente", style="cyan")
    table.add_column("Status", style="white")
    table.add_column("Detalhes", style="dim")

    # Adicionar resultados individuais
    for result in report.components:
        status = "‚úÖ OK" if result.is_valid else "‚ùå FALHA"
        table.add_row(result.component, status, result.message or "")

    # Adicionar integridade
    integrity_status = "‚úÖ OK" if integrity_valid else "‚ùå FALHA"
    table.add_row("Integridade", integrity_status, "Verifica√ß√£o de checksums")

    console.print(table)

    # Resultado geral
    if report.is_valid and integrity_valid:
        console.print(
            "\nüéâ [bold green]Instala√ß√£o v√°lida e √≠ntegra![/bold green]"
        )
    else:
        console.print(
            "\n‚ö†Ô∏è [bold yellow]Instala√ß√£o com problemas detectados[/bold yellow]"
        )


@cli.command()
def validate():
    """Valida a instala√ß√£o JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return validate_installation(project_path, "fullstack")


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def install(team):
    """Instala JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=False)


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def reinstall(team):
    """Reinstala JTECH‚Ñ¢ Core (for√ßa reinstala√ß√£o)."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=True)


def main():
    """Ponto de entrada principal."""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio", style="red")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n‚ùå Erro inesperado: {e}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()

import sys
import time
from pathlib import Path

import click
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

from ..core.engine import InstallationEngine
from ..core.models import InstallationConfig, InstallationType, TeamType
from ..validator.integrity import IntegrityValidator
from ..validator.post_installation import PostInstallationValidator

console = Console()


@click.group(invoke_without_command=True)
@click.option("--help", "-h", is_flag=True, help="Mostrar ajuda")
@click.option("--version", "-v", is_flag=True, help="Mostrar vers√£o")
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
    help="Tipo de equipe/configura√ß√£o",
)
@click.option("--force", "-f", is_flag=True, help="For√ßar reinstala√ß√£o")
@click.option(
    "--validate-only", is_flag=True, help="Apenas validar instala√ß√£o existente"
)
@click.pass_context
def cli(ctx, help, version, team, force, validate_only):
    """
    üöÄ JTECH‚Ñ¢ Core Installer

    Instala e configura automaticamente o ambiente JTECH‚Ñ¢ Core no projeto atual.

    Exemplos:
        jtech-installer                    # Instala com configura√ß√£o fullstack
        jtech-installer --team ide-minimal # Instala configura√ß√£o m√≠nima
        jtech-installer --validate-only    # Apenas valida instala√ß√£o
        jtech-installer --help             # Mostra esta ajuda
    """

    if version:
        console.print("üöÄ JTECH‚Ñ¢ Core Installer v0.1.0", style="bold blue")
        return

    if help or ctx.invoked_subcommand is not None:
        if help:
            console.print(ctx.get_help())
        return

    # Comando principal - instalar
    project_path = Path.cwd()

    console.print(
        Panel.fit(
            "[bold blue]üöÄ JTECH‚Ñ¢ Core Installer[/bold blue]\n"
            f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
            f"‚öôÔ∏è Tipo de equipe: [green]{team}[/green]",
            title="üîß Configura√ß√£o",
            border_style="blue",
        )
    )

    if validate_only:
        return validate_installation(project_path, team)

    return install_jtech_core(project_path, team, force)


def install_jtech_core(
    project_path: Path, team_type: str, force: bool = False
):
    """Executa a instala√ß√£o completa do JTECH‚Ñ¢ Core."""

    # Verificar se j√° existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if jtech_core.exists() and not force:
        console.print("‚ö†Ô∏è Instala√ß√£o JTECH‚Ñ¢ Core j√° existe!", style="yellow")
        console.print("üí° Use --force para reinstalar", style="dim")

        if not click.confirm("Deseja continuar e atualizar a instala√ß√£o?"):
            console.print("‚ùå Instala√ß√£o cancelada", style="red")
            return False

    # Mapear tipo de equipe
    team_mapping = {
        "ide-minimal": TeamType.IDE_MINIMAL,
        "fullstack": TeamType.FULLSTACK,
        "no-ui": TeamType.NO_UI,
        "all": TeamType.ALL,
    }

    team_enum = team_mapping[team_type]

    # Determinar tipo de instala√ß√£o
    install_type = (
        InstallationType.BROWNFIELD
        if any(
            p.exists()
            for p in [
                project_path / "package.json",
                project_path / "requirements.txt",
                project_path / "pom.xml",
                project_path / "Cargo.toml",
            ]
        )
        else InstallationType.GREENFIELD
    )

    # Criar configura√ß√£o
    config = InstallationConfig(
        project_path=project_path,
        install_type=install_type,
        team_type=team_enum,
        vs_code_integration=True,
        custom_config={},
        framework_source_path=get_framework_source_path(),
    )

    # Executar instala√ß√£o com progress
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:

        # Passo 1: Criar estrutura
        task = progress.add_task(
            "üèóÔ∏è Criando estrutura de diret√≥rios...", total=None
        )
        engine = InstallationEngine()

        try:
            # Instalar
            result = engine.install(config)
            progress.update(task, description="‚úÖ Estrutura criada")
            time.sleep(0.5)

            # Passo 2: Copiar chatmodes reais
            progress.update(task, description="üí¨ Configurando chatmodes...")
            copy_real_chatmodes(project_path)
            time.sleep(0.5)

            # Passo 3: Configurar VS Code real
            progress.update(task, description="üîß Configurando VS Code...")
            copy_real_vscode_config(project_path)
            time.sleep(0.5)

            # Passo 4: Validar
            progress.update(task, description="üîç Validando instala√ß√£o...")
            validator = PostInstallationValidator(config)
            report = validator.validate_all()

            progress.remove_task(task)

        except Exception as e:
            progress.remove_task(task)
            console.print(f"‚ùå Erro durante instala√ß√£o: {e}", style="red")
            return False

    # Mostrar resultado
    show_installation_result(report, project_path)
    return True


def copy_real_chatmodes(project_path: Path):
    """Copia os chatmodes reais do ambiente do usu√°rio."""
    source_chatmodes = Path(
        "/jtech/home/angelo.vicente/code/jtech-kpi/.github/chatmodes"
    )
    target_chatmodes = project_path / ".github" / "chatmodes"

    if not source_chatmodes.exists():
        console.print("‚ö†Ô∏è Chatmodes de origem n√£o encontrados", style="yellow")
        return

    # Criar diret√≥rio target
    target_chatmodes.mkdir(parents=True, exist_ok=True)

    # Copiar todos os arquivos .chatmode.md
    import shutil

    copied_files = []

    for chatmode_file in source_chatmodes.glob("*.chatmode.md"):
        target_file = target_chatmodes / chatmode_file.name
        shutil.copy2(chatmode_file, target_file)
        copied_files.append(chatmode_file.name)

    console.print(f"‚úÖ Copiados {len(copied_files)} chatmodes", style="green")


def copy_real_vscode_config(project_path: Path):
    """Copia a configura√ß√£o real do VS Code do ambiente do usu√°rio."""
    source_vscode = Path(
        "/jtech/home/angelo.vicente/code/jtech-kpi/.vscode/settings.json"
    )
    target_vscode_dir = project_path / ".vscode"
    target_vscode_file = target_vscode_dir / "settings.json"

    if not source_vscode.exists():
        console.print(
            "‚ö†Ô∏è Configura√ß√£o VS Code de origem n√£o encontrada", style="yellow"
        )
        return

    # Criar diret√≥rio target
    target_vscode_dir.mkdir(parents=True, exist_ok=True)

    # Copiar configura√ß√£o
    import shutil

    shutil.copy2(source_vscode, target_vscode_file)

    console.print("‚úÖ Configura√ß√£o VS Code copiada", style="green")


def get_framework_source_path() -> Path:
    """Retorna o caminho para os arquivos fonte do framework."""
    # Por enquanto, usar o diret√≥rio do pr√≥prio installer
    installer_dir = Path(__file__).parent.parent.parent.parent
    framework_dir = installer_dir / "framework"

    if framework_dir.exists():
        return framework_dir

    # Fallback para diret√≥rio de templates
    return installer_dir / "templates"


def validate_installation(project_path: Path, team_type: str):
    """Valida uma instala√ß√£o existente."""
    console.print("üîç Validando instala√ß√£o JTECH‚Ñ¢ Core...", style="blue")

    # Verificar se existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if not jtech_core.exists():
        console.print(
            "‚ùå Nenhuma instala√ß√£o JTECH‚Ñ¢ Core encontrada", style="red"
        )
        console.print(
            "üí° Execute 'jtech-installer' para instalar", style="dim"
        )
        return False

    # Mapear tipo de equipe
    team_mapping = {
        "ide-minimal": TeamType.IDE_MINIMAL,
        "fullstack": TeamType.FULLSTACK,
        "no-ui": TeamType.NO_UI,
        "all": TeamType.ALL,
    }

    # Criar configura√ß√£o para valida√ß√£o
    config = InstallationConfig(
        project_path=project_path,
        install_type=InstallationType.BROWNFIELD,
        team_type=team_mapping[team_type],
        vs_code_integration=True,
        custom_config={},
        framework_source_path=get_framework_source_path(),
    )

    # Executar valida√ß√£o
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task("üîç Executando valida√ß√£o...", total=None)

        try:
            # Valida√ß√£o p√≥s-instala√ß√£o
            validator = PostInstallationValidator(config)
            report = validator.validate_all()

            # Valida√ß√£o de integridade
            integrity_validator = IntegrityValidator(config)
            integrity_valid = integrity_validator.validate_all()

            progress.remove_task(task)

        except Exception as e:
            progress.remove_task(task)
            console.print(f"‚ùå Erro durante valida√ß√£o: {e}", style="red")
            return False

    # Mostrar resultado da valida√ß√£o
    show_validation_result(report, integrity_valid, project_path)
    return report.is_valid


def show_installation_result(report, project_path: Path):
    """Mostra o resultado da instala√ß√£o."""

    if report.is_valid:
        console.print(
            Panel.fit(
                "[bold green]üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO![/bold green]\n\n"
                f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
                f"üîß Estrutura: [green].jtech-core/[/green] criada\n"
                f"üí¨ ChatModes: [green].github/chatmodes/[/green] configurados\n"
                f"‚öôÔ∏è VS Code: [green].vscode/settings.json[/green] configurado",
                title="‚úÖ Sucesso",
                border_style="green",
            )
        )

        # Mostrar pr√≥ximos passos
        next_steps = Table(title="üìã Pr√≥ximos Passos")
        next_steps.add_column("Comando", style="cyan")
        next_steps.add_column("Descri√ß√£o", style="white")

        next_steps.add_row("code .", "Abrir projeto no VS Code")
        next_steps.add_row(
            "jtech-installer --validate-only", "Validar instala√ß√£o"
        )
        next_steps.add_row("ls .jtech-core/", "Explorar estrutura criada")

        console.print(next_steps)

    else:
        console.print(
            Panel.fit(
                "[bold yellow]‚ö†Ô∏è INSTALA√á√ÉO COM AVISOS[/bold yellow]\n\n"
                f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
                f"üîç Valida√ß√µes: [red]{len([r for r in report.components if not r.is_valid])}[/red] falharam",
                title="‚ö†Ô∏è Aten√ß√£o",
                border_style="yellow",
            )
        )


def show_validation_result(report, integrity_valid: bool, project_path: Path):
    """Mostra o resultado da valida√ß√£o."""

    # Tabela de resultados
    table = Table(title="üîç Resultado da Valida√ß√£o")
    table.add_column("Componente", style="cyan")
    table.add_column("Status", style="white")
    table.add_column("Detalhes", style="dim")

    # Adicionar resultados individuais
    for result in report.components:
        status = "‚úÖ OK" if result.is_valid else "‚ùå FALHA"
        table.add_row(result.component, status, result.message or "")

    # Adicionar integridade
    integrity_status = "‚úÖ OK" if integrity_valid else "‚ùå FALHA"
    table.add_row("Integridade", integrity_status, "Verifica√ß√£o de checksums")

    console.print(table)

    # Resultado geral
    if report.is_valid and integrity_valid:
        console.print(
            "\nüéâ [bold green]Instala√ß√£o v√°lida e √≠ntegra![/bold green]"
        )
    else:
        console.print(
            "\n‚ö†Ô∏è [bold yellow]Instala√ß√£o com problemas detectados[/bold yellow]"
        )


@cli.command()
def validate():
    """Valida a instala√ß√£o JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return validate_installation(project_path, "fullstack")


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def install(team):
    """Instala JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=False)


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def reinstall(team):
    """Reinstala JTECH‚Ñ¢ Core (for√ßa reinstala√ß√£o)."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=True)


def main():
    """Ponto de entrada principal."""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio", style="red")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n‚ùå Erro inesperado: {e}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()
