# <!-- Powered by JTECH™ Core -->
workflow:
  id: brownfield-fullstack
  name: Melhoria Brownfield Full-Stack
  description: >-
    Workflow de agentes para melhorar aplicações full-stack existentes com novas funcionalidades,
    modernização ou mudanças significativas. Lida com análise de sistema existente e integração segura.
  type: brownfield
  project_types:
    - adição-funcionalidade
    - refatoração
    - modernização
    - melhoria-integração

  sequence:
    - step: classificação_melhoria
      agent: analyst
      action: classificar escopo da melhoria
      notes: |
        Determine a complexidade da melhoria para rotear para o caminho apropriado:
        - Story única (< 4 horas) → Use tarefa brownfield-create-story
        - Funcionalidade pequena (1-3 stories) → Use tarefa brownfield-create-epic  
        - Melhoria grande (múltiplos épicos) → Continue com workflow completo

        Pergunte ao usuário: "Você pode descrever o escopo da melhoria? É uma correção pequena, uma adição de funcionalidade ou uma melhoria grande que requer mudanças arquiteturais?"

    - step: decisão_roteamento
      condition: baseado_na_classificação
      routes:
        story_única:
          agent: pm
          uses: brownfield-create-story
          notes: "Criar story única para implementação imediata. Sair do workflow após criação da story."
        funcionalidade_pequena:
          agent: pm
          uses: brownfield-create-epic
          notes: "Criar épico focado com 1-3 stories. Sair do workflow após criação do épico."
        melhoria_grande:
          continue: para_próximo_passo
          notes: "Continuar com workflow de planejamento abrangente abaixo."

    - step: análise_projeto_existente
      agent: architect
      action: analisar projeto existente e usar tarefa document-project
      creates: múltiplos documentos conforme template document-project
      notes: "Revisar documentação do projeto existente, codebase, métricas de performance e identificar dependências de integração."

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: análise_projeto_existente
      notes: "Cria PRD abrangente focado na melhoria com análise do sistema existente. SALVAR SAÍDA: Copie o prd.md final para a pasta docs/ do seu projeto."

    - agent: ux-expert
      creates: front-end-spec.md
      uses: front-end-spec-tmpl
      requires: prd.md
      notes: "Cria especificação UI/UX que se integra com padrões de design existentes. SALVAR SAÍDA: Copie o front-end-spec.md final para a pasta docs/ do seu projeto."

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires:
        - prd.md
        - front-end-spec.md
      notes: "Cria arquitetura fullstack com estratégia de integração e planejamento de migração. SALVAR SAÍDA: Copie o architecture.md final para a pasta docs/ do seu projeto."

    - agent: po
      validates: todos_os_artefatos
      uses: po-master-checklist
      notes: "Valida todos os documentos para segurança de integração e viabilidade técnica. Pode requerer atualizações em qualquer documento."

    - agent: vários
      action: criação_de_stories
      creates: múltiplas_stories
      uses: story-tmpl
      requires:
        - prd.md
        - architecture.md
        - front-end-spec.md
      notes: |
        Criar stories baseadas nos épicos identificados no PRD:
        1. PM cria stories iniciais usando story-tmpl
        2. Architect adiciona notas técnicas
        3. UX Expert adiciona especificações de design quando aplicável
        4. QA adiciona critérios de teste
        5. SM coordena priorização e estimativas

        SALVAR SAÍDA: Salve cada story na pasta docs/stories/ do seu projeto com nomenclatura [épico].[story].[título].md

    - agent: sm
      validates: entrega_completa
      uses: story-dod-checklist
      notes: "Valida que todas as stories estão prontas para desenvolvimento com critérios claros e estimativas. Confirma que a integração com sistema existente está bem planejada."

  artifacts:
    primary:
      - multiple documents per document-project template
      - prd.md (brownfield enhancement focused)
      - front-end-spec.md (integration-aware)
      - architecture.md (brownfield integration strategy)
      - multiple story files in docs/stories/

    validation:
      - po-master-checklist validation results
      - story-dod-checklist validation results

  exit_criteria:
    - PRD aprovado com análise completa do sistema existente
    - Arquitetura fullstack que garante integração segura
    - Especificação UI/UX que considera padrões existentes
    - Stories prontas para desenvolvimento com riscos de integração identificados
    - Plano de migração/integração validado

  team_composition:
    core_agents:
      - analyst (classificação inicial)
      - architect (análise técnica e arquitetura)
      - pm (gerenciamento de produto)
      - ux-expert (design e experiência do usuário)
      - po (validação de produto)
      - sm (gestão e validação de entrega)
    optional_agents:
      - qa (critérios de teste)
      - dev (implementação e viabilidade técnica)

  success_metrics:
    - Sistema existente permanece estável durante melhoria
    - Nova funcionalidade se integra perfeitamente
    - Usuários adotam melhorias sem fricção
    - Tempo de desenvolvimento dentro das estimativas
    - Zero regressões em funcionalidades existentes

  notes: |
    Workflow focado na segurança da integração e preservação de funcionalidades existentes.
    Enfatiza análise completa antes de implementação e validação contínua de compatibilidade.
    Adequado para melhorias substanciais que requerem planejamento arquitetural e múltiplas stories coordenadas.
