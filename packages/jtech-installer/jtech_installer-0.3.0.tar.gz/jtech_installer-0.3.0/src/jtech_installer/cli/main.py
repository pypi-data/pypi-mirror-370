#!/usr/bin/env python3
"""
üöÄ JTECH‚Ñ¢ Core Installer - CLI Principal
Instalador automatizado para configurar ambiente JTECH‚Ñ¢ Core
"""

import shutil
import socket
import subprocess
import sys
import time
from importlib import metadata
from pathlib import Path

import click
import requests
from packaging import version
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table

console = Console()


def check_internet_connection():
    """Verifica se h√° conex√£o com a internet."""
    try:
        socket.create_connection(("8.8.8.8", 53), timeout=2)
        return True
    except OSError:
        return False


def get_current_version():
    """Obt√©m a vers√£o atual do package instalado."""
    try:
        return metadata.version("jtech-installer")
    except Exception:
        return "0.3.0"  # Fallback version


def check_update(current_version):
    """Verifica se h√° atualiza√ß√£o dispon√≠vel e pergunta se deve atualizar."""
    package_name = "jtech-installer"

    try:
        console.print("üîç Verificando atualiza√ß√µes...", style="blue")
        response = requests.get(
            f"https://pypi.org/pypi/{package_name}/json", timeout=5
        )
        data = response.json()
        latest_version = data["info"]["version"]

        if version.parse(latest_version) > version.parse(current_version):
            console.print(
                f"‚ú® Nova vers√£o dispon√≠vel: [green]{latest_version}[/green] (atual: {current_version})",
                style="yellow",
            )

            if click.confirm("Deseja atualizar agora?"):
                console.print("‚¨ÜÔ∏è Atualizando JTECH Installer...", style="blue")
                try:
                    subprocess.run(
                        ["pip", "install", "--upgrade", package_name],
                        check=True,
                        capture_output=True,
                    )
                    console.print(
                        "‚úÖ Atualiza√ß√£o realizada com sucesso!", style="green"
                    )
                    console.print(
                        "üîÑ Execute o comando novamente para usar a nova vers√£o.",
                        style="blue",
                    )
                    sys.exit(0)
                except subprocess.CalledProcessError as e:
                    console.print(f"‚ùå Erro ao atualizar: {e}", style="red")
            else:
                console.print(
                    "‚è≠Ô∏è Continuando com a vers√£o atual...", style="dim"
                )
        else:
            console.print(
                "‚úÖ Voc√™ j√° est√° usando a vers√£o mais recente.", style="green"
            )

    except requests.RequestException:
        console.print(
            "‚ö†Ô∏è N√£o foi poss√≠vel verificar atualiza√ß√µes (sem internet)",
            style="yellow",
        )
    except Exception as e:
        console.print(f"‚ö†Ô∏è Erro ao verificar atualiza√ß√µes: {e}", style="yellow")


@click.group(invoke_without_command=True)
@click.option("--help", "-h", is_flag=True, help="Mostrar ajuda")
@click.option(
    "--version", "-v", "version_flag", is_flag=True, help="Mostrar vers√£o"
)
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
    help="Tipo de equipe/configura√ß√£o",
)
@click.option("--force", "-f", is_flag=True, help="For√ßar reinstala√ß√£o")
@click.option(
    "--validate-only", is_flag=True, help="Apenas validar instala√ß√£o existente"
)
@click.pass_context
def cli(ctx, help, version_flag, team, force, validate_only):
    """
    üöÄ JTECH‚Ñ¢ Core Installer

    Instala e configura automaticamente o ambiente JTECH‚Ñ¢ Core
    no projeto atual.

    Exemplos:
        jtech-installer                    # Instala com configura√ß√£o fullstack
        jtech-installer --team ide-minimal # Instala configura√ß√£o m√≠nima
        jtech-installer --validate-only    # Apenas valida instala√ß√£o
        jtech-installer --help             # Mostra esta ajuda
    """

    current_version = get_current_version()

    if version_flag:
        console.print(
            f"üöÄ JTECH‚Ñ¢ Core Installer v{current_version}", style="bold blue"
        )
        return

    if help or ctx.invoked_subcommand is not None:
        if help:
            console.print(ctx.get_help())
        return

    # Verificar conex√£o com internet e atualiza√ß√£o antes de executar
    if check_internet_connection():
        check_update(current_version)
    else:
        console.print(
            "‚ö†Ô∏è Sem conex√£o com internet - continuando sem verificar atualiza√ß√µes",
            style="yellow",
        )

    # Comando principal - instalar
    project_path = Path.cwd()

    console.print(
        Panel.fit(
            f"[bold blue]üöÄ JTECH‚Ñ¢ Core Installer[/bold blue]\n"
            f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
            f"‚öôÔ∏è Tipo de equipe: [green]{team}[/green]",
            title="üîß Configura√ß√£o",
            border_style="blue",
        )
    )

    if validate_only:
        return validate_installation(project_path, team)

    return install_jtech_core(project_path, team, force)


def install_jtech_core(
    project_path: Path, team_type: str, force: bool = False
):
    """Executa a instala√ß√£o completa do JTECH‚Ñ¢ Core."""

    # Verificar se j√° existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if jtech_core.exists() and not force:
        console.print("‚ö†Ô∏è Instala√ß√£o JTECH‚Ñ¢ Core j√° existe!", style="yellow")
        console.print("üí° Use --force para reinstalar", style="dim")

        if not click.confirm("Deseja continuar e atualizar a instala√ß√£o?"):
            console.print("‚ùå Instala√ß√£o cancelada", style="red")
            return False

    # Executar instala√ß√£o com progress
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:

        task = progress.add_task("üèóÔ∏è Iniciando instala√ß√£o...", total=None)

        try:
            # Passo 1: Copiar estrutura .jtech-core completa
            progress.update(task, description="üì¶ Copiando framework...")
            copy_jtech_core_structure(project_path, force)
            time.sleep(0.5)

            # Passo 2: Copiar chatmodes
            progress.update(task, description="üí¨ Configurando chatmodes...")
            copy_chatmodes(project_path)
            time.sleep(0.5)

            # Passo 3: Configurar VS Code
            progress.update(task, description="üîß Configurando VS Code...")
            copy_vscode_config(project_path)
            time.sleep(0.5)

            # Passo 4: Finalizar
            progress.update(task, description="üîç Finalizando...")
            time.sleep(0.5)

            progress.remove_task(task)

        except Exception as e:
            progress.remove_task(task)
            console.print(f"‚ùå Erro durante instala√ß√£o: {e}", style="red")
            return False

    # Mostrar resultado
    show_installation_result(True, project_path)
    return True


def copy_jtech_core_structure(project_path: Path, force: bool = False):
    """Copia toda a estrutura .jtech-core dos assets empacotados."""
    assets_dir = Path(__file__).parent.parent / "assets"
    source_jtech = assets_dir / ".jtech-core"
    target_jtech = project_path / ".jtech-core"

    if not source_jtech.exists():
        console.print(
            "‚ö†Ô∏è Estrutura .jtech-core n√£o encontrada nos assets", style="yellow"
        )
        return

    # Copiar toda a estrutura
    if target_jtech.exists() and force:
        shutil.rmtree(target_jtech)

    if not target_jtech.exists():
        shutil.copytree(source_jtech, target_jtech)
        console.print(
            "‚úÖ Estrutura .jtech-core copiada dos assets", style="green"
        )
    else:
        console.print("‚úÖ Estrutura .jtech-core j√° existe", style="green")


def copy_chatmodes(project_path: Path):
    """Copia os chatmodes dos assets empacotados."""
    assets_dir = Path(__file__).parent.parent / "assets"
    source_chatmodes = assets_dir / ".github" / "chatmodes"
    target_chatmodes = project_path / ".github" / "chatmodes"

    if not source_chatmodes.exists():
        console.print("‚ö†Ô∏è Chatmodes n√£o encontrados nos assets", style="yellow")
        return

    # Criar diret√≥rio target
    target_chatmodes.mkdir(parents=True, exist_ok=True)

    # Copiar todos os arquivos .chatmode.md
    copied_files = []

    for chatmode_file in source_chatmodes.glob("*.chatmode.md"):
        target_file = target_chatmodes / chatmode_file.name
        shutil.copy2(chatmode_file, target_file)
        copied_files.append(chatmode_file.name)

    console.print(
        f"‚úÖ Copiados {len(copied_files)} chatmodes dos assets", style="green"
    )


def copy_vscode_config(project_path: Path):
    """Copia a configura√ß√£o do VS Code dos assets empacotados."""
    assets_dir = Path(__file__).parent.parent / "assets"
    source_vscode = assets_dir / ".vscode" / "settings.json"
    target_vscode_dir = project_path / ".vscode"
    target_vscode_file = target_vscode_dir / "settings.json"

    if not source_vscode.exists():
        console.print(
            "‚ö†Ô∏è Configura√ß√£o VS Code n√£o encontrada nos assets", style="yellow"
        )
        return

    # Criar diret√≥rio target
    target_vscode_dir.mkdir(parents=True, exist_ok=True)

    # Copiar configura√ß√£o
    shutil.copy2(source_vscode, target_vscode_file)

    console.print("‚úÖ Configura√ß√£o VS Code copiada dos assets", style="green")


def validate_installation(project_path: Path, team_type: str):
    """Valida uma instala√ß√£o existente."""
    console.print("üîç Validando instala√ß√£o JTECH‚Ñ¢ Core...", style="blue")

    # Verificar se existe instala√ß√£o
    jtech_core = project_path / ".jtech-core"
    if not jtech_core.exists():
        console.print(
            "‚ùå Nenhuma instala√ß√£o JTECH‚Ñ¢ Core encontrada", style="red"
        )
        console.print(
            "üí° Execute 'jtech-installer' para instalar", style="dim"
        )
        return False

    # Verificar componentes principais
    components = [
        (".jtech-core", "Estrutura principal"),
        (".jtech-core/agents", "Agentes"),
        (".jtech-core/tasks", "Tarefas"),
        (".jtech-core/templates", "Templates"),
        (".github/chatmodes", "ChatModes"),
        (".vscode/settings.json", "Configura√ß√£o VS Code"),
    ]

    # Tabela de resultados
    table = Table(title="üîç Resultado da Valida√ß√£o")
    table.add_column("Componente", style="cyan")
    table.add_column("Status", style="white")

    all_valid = True

    for component_path, component_name in components:
        full_path = project_path / component_path
        if full_path.exists():
            status = "‚úÖ OK"
        else:
            status = "‚ùå FALTA"
            all_valid = False

        table.add_row(component_name, status)

    console.print(table)

    # Resultado geral
    if all_valid:
        console.print("\nüéâ [bold green]Instala√ß√£o v√°lida![/bold green]")
    else:
        console.print(
            "\n‚ö†Ô∏è [bold yellow]Alguns componentes est√£o faltando[/bold yellow]"
        )

    return all_valid


def show_installation_result(success: bool, project_path: Path):
    """Mostra o resultado da instala√ß√£o."""

    if success:
        console.print(
            Panel.fit(
                "[bold green]üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO![/bold green]\n\n"
                f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
                f"üîß Estrutura: [green].jtech-core/[/green] criada\n"
                f"üí¨ ChatModes: [green].github/chatmodes/[/green] configurados\n"
                f"‚öôÔ∏è VS Code: [green].vscode/settings.json[/green] configurado",
                title="‚úÖ Sucesso",
                border_style="green",
            )
        )

        # Mostrar pr√≥ximos passos
        next_steps = Table(title="üìã Pr√≥ximos Passos")
        next_steps.add_column("Comando", style="cyan")
        next_steps.add_column("Descri√ß√£o", style="white")

        next_steps.add_row("code .", "Abrir projeto no VS Code")
        next_steps.add_row(
            "jtech-installer --validate-only", "Validar instala√ß√£o"
        )
        next_steps.add_row("ls .jtech-core/", "Explorar estrutura criada")

        console.print(next_steps)

    else:
        console.print(
            Panel.fit(
                "[bold yellow]‚ö†Ô∏è INSTALA√á√ÉO COM PROBLEMAS[/bold yellow]\n\n"
                f"üìÅ Projeto: [cyan]{project_path}[/cyan]\n"
                f"üîç Verifique os logs acima",
                title="‚ö†Ô∏è Aten√ß√£o",
                border_style="yellow",
            )
        )


@cli.command()
def validate():
    """Valida a instala√ß√£o JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return validate_installation(project_path, "fullstack")


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def install(team):
    """Instala JTECH‚Ñ¢ Core no diret√≥rio atual."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=False)


@cli.command()
@click.option(
    "--team",
    "-t",
    type=click.Choice(["ide-minimal", "fullstack", "no-ui", "all"]),
    default="fullstack",
)
def reinstall(team):
    """Reinstala JTECH‚Ñ¢ Core (for√ßa reinstala√ß√£o)."""
    project_path = Path.cwd()
    return install_jtech_core(project_path, team, force=True)


def main():
    """Ponto de entrada principal."""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio", style="red")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n‚ùå Erro inesperado: {e}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()
