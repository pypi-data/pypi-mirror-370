name: wipac ci/cd

on:
  push:
    # only on branch pushes
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.7


  ############################################################################
  # LINTERS
  #############################################################################

  flake8:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.3
        with:
          max-complexity: 10  # ideal is ~10-15

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0


  ############################################################################
  # PACKAGING
  #############################################################################

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
      - uses: WIPACrepo/wipac-dev-py-setup-action@v5.2
        with:
          mode: PACKAGING_AND_PYPI
          python_min: 3.9
          pypi_name: icecube-skywriter
          author: WIPAC Developers
          author_email: developers@icecube.wisc.edu
          keywords_comma: "IceCube, skymap scanner, skymap, HEALPix, neutrino, reconstruction"
          auto_mypy_option: True

  py-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
          fetch-depth: 0  # setuptools-scm needs to access git tags
      - uses: WIPACrepo/wipac-dev-py-dependencies-action@v3.1


  ############################################################################
  # TESTS
  #############################################################################

  unit-tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        exclude:
          - py3: 3.10  # only 3.10 gives error: `E   ImportError: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.38' not found (required by /__t/Python/3.10.18/x64/lib/libpython3.10.so.1.0)`
    container:
      image: icecube/icetray:icetray-prod-current-ubuntu22.04
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py3 }}
      - name: pip setup
        run: |
          export SETUPTOOLS_SCM_PRETEND_VERSION="0.0.0+ci-untagged"
          pip install --upgrade pip wheel setuptools pytest packaging
          pip install .[tests]
      - name: test
        run: |
          /usr/local/icetray/env-shell.sh << EOF
          pytest -vvv tests/unit
          EOF

  function-tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        file: [Level2pass2_IC86.2011_data_Run00118435_Subrun00000000_00000144_event58198553.i3, Level2pass2_IC86.2013_data_Run00124340_Subrun00000000_00000052_event19400842.i3]
    container:
        image: icecube/icetray:icetray-prod-current-ubuntu22.04
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}  # lock to triggered commit (github.ref is dynamic)
      # - uses: actions/setup-python@v5
      #  with:
      #    python-version: ${{ matrix.py3 }}
      # - name: pip setup
      #  run: |
      #    pip install --upgrade pip wheel setuptools pytest
      #    pip install .[tests]
      - name: download test data
        run: |
          wget --user=icecube --password=${{secrets.ICECUBE_PASSWORD}} -O test-file.zst https://convey.icecube.wisc.edu/data/ana/realtime/alert_catalog_v2/input_files/${{ matrix.file }}.zst
          shasum -c tests/data/${{ matrix.file }}.sha
      - name: test routine
        run: |
          /usr/local/icetray/env-shell.sh << EOF
          export SETUPTOOLS_SCM_PRETEND_VERSION="0.0.0+ci-untagged"
          pip install --upgrade pip wheel setuptools pytest packaging
          pip install .[tests]
          python3 skywriter/i3_to_json.py --extra "OnlineL2_SplineMPE" --extra "OnlineL2_BestFit" --basegcd /opt/i3-data/baseline_gcds/baseline_gcd_136897.i3 test-file.zst
          EOF


  ############################################################################
  # GIT TAG + GITHUB RELEASE
  #############################################################################

  tag-and-release:
    # only run on main/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [
      py-versions,
      flake8,
      mypy,
      py-setup,
      py-dependencies,
      unit-tests,
      function-tests,
    ]
    uses: WIPACrepo/wipac-dev-workflows/.github/workflows/tag-and-release.yml@v1.8
    permissions: # for GITHUB_TOKEN
      contents: write
    with:
      project-type: python
      python-version: "${{ fromJSON(needs.py-versions.outputs.matrix)[0] }}"
      release-artifacts: |
        py-dependencies-logs
      publish-to-pypi: true
    secrets:
      PYPI_TOKEN: ${{ secrets.WIPAC_PYPI_TOKEN }}
