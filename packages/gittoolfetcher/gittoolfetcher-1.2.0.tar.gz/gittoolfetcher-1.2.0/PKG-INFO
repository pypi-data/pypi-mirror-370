Metadata-Version: 2.4
Name: gittoolfetcher
Version: 1.2.0
Summary: A git management tool, making it easy to install and use multiple concurent version of a same project.
Project-URL: Documentation, https://github.com/volexity/gittoolfetcher/blob/main/README.md
Project-URL: Issues, https://github.com/volexity/gittoolfetcher/issues
Project-URL: Source, https://github.com/volexity/gittoolfetcher
Author-email: Killian Raimbaud <kraimbaud@volexity.com>
License-File: LICENSE.md
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.10
Requires-Dist: multiprocess~=0.70.18
Requires-Dist: requests~=2.32.3
Requires-Dist: yaspin~=3.1.0
Description-Content-Type: text/markdown

# GitToolFetcher

GitToolFetcher is a tool to help managing multiple concurent versions of GitHub hosted projects.

## How to install

To install GitToolFetcher, we recommend pulling directly from PyPi :

```bash
pip install gittoolfetcher
```

This will install GitToolFetcher as well as its necessary dependencies.

### Building from source

If you wish to build & install GitToolFetcher from source instead, use Hatch's usual build command :

```bash
hatch build
```

The built archive will be placed in the "dist" directory as a .whl file.
To install GitToolFetcher, simply install the .whl file using pip.

```bash
pip install dist/gittoolfetcher-*.whl
```

## Command Line Usage

Once installed, a new utility `gittoolfetcher` will be available.

```
usage: gittoolfetcher [-h] [-r] [-s] [-i [INSTALL ...]] [-u [UNINSTALL ...]] [-v VERSION] [-l] [-e COMMAND] REPO_NAME

positional arguments:
  REPO_NAME             Name of the GitHub repo to manage.

options:
  -h, --help                                       show this help message and exit
  -r, --refresh                                    Refresh the available version cache.
  -s, --show                                       Show available project versions.
  -i [INSTALL ...], --install [INSTALL ...]        Install one or more project versions.
  -u [UNINSTALL ...], --uninstall [UNINSTALL ...]  Uninstall one or more project versions.
  -v [VERSION ...], --version [VERSION ...]        Select a version of the project.
  -l, --list                                       List installed project versions.
  -e COMMAND, --execute COMMAND                    Execute a command with the selected version of the project.
```

Here is a typical workflow using GitToolFetcher :

```bash
gittoolfetcher golang/go -r -s -i go1.14,go1.6,go1.23.4 -l
```