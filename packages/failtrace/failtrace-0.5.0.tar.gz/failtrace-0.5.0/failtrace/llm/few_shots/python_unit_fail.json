[
  {
    "input": "[EXAMPLE — STYLE & STRUCTURE ONLY, DO NOT COPY ASSUMPTIONS]\nGRAPH SUMMARY: 152 nodes, 289 edges.\n\nTEST SUMMARY:\n• Total: 87\n• Executed: 87 (✅76, ❌2, ⚠️9)\n• Failures detail:\n  - tests/test_math.py::test_divide_by_zero: ZeroDivisionError: division by zero\n\nCRITICAL PATHS for each failed test:\n\nTest: tests/test_math.py::test_divide_by_zero\nError: ZeroDivisionError: division by zero\nUpstream:\n  • math_utils.py::safe_divide → math_utils.py::_normalize_inputs\nDownstream:\n  • tests/test_math.py::test_divide_by_zero\n\nFUNCTION SNIPPETS:\n\nmath_utils.py::safe_divide (line 42):\n\"\"\"\nDivide a by b, guarding invalid inputs.\n\"\"\"\n    def safe_divide(a, b):\n        return a / b\n\nmath_utils.py::_normalize_inputs (line 12):\n\"\"\"\nEnsure inputs are numeric and non-null.\n\"\"\"\n    def _normalize_inputs(a, b):\n        ...",
    "output": "{\n  \"analysis\": [\n    {\n      \"test_name\": \"tests/test_math.py::test_divide_by_zero\",\n      \"error\": \"ZeroDivisionError: division by zero\",\n      \"call_path\": [\"math_utils.py::safe_divide\", \"math_utils.py::_normalize_inputs\"],\n      \"reasoning\": [\n        \"1) safe_divide بدون بررسی b==0 مستقیماً a/b را اجرا می‌کند\",\n        \"2) _normalize_inputs فقط None-check دارد و صفر نبودن b را تضمین نمی‌کند\",\n        \"3) مسیر بحرانی وقوع خطا را در safe_divide تایید می‌کند\"\n      ],\n      \"root_cause\": \"نبود guard برای تقسیم بر صفر در safe_divide\",\n      \"suggested_fixes\": [\n        \"افزودن بررسی b==0 و بازگرداندن مقدار امن یا استثنای کنترل‌شده\",\n        \"افزودن قید b!=0 در _normalize_inputs و پوشش تستی آن\"\n      ]\n    }\n  ]\n}"
  },
  {
    "input": "[EXAMPLE — STYLE & STRUCTURE ONLY, DO NOT COPY ASSUMPTIONS]\nGRAPH SUMMARY: 128 nodes, 260 edges.\n\nTEST SUMMARY:\n• Total: 64\n• Executed: 64 (✅61, ❌1, ⚠️2)\n• Failures detail:\n  - tests/test_math.py::test_sum_types: TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\nCRITICAL PATHS for each failed test:\n\nTest: tests/test_math.py::test_sum_types\nError: TypeError: unsupported operand type(s) for +: 'int' and 'str'\nUpstream:\n  • math_utils.py::add → math_utils.py::_normalize_inputs\nDownstream:\n  • tests/test_math.py::test_sum_types\n\nFUNCTION SNIPPETS:\n\nmath_utils.py::add (line 10):\n    def add(a, b):\n        return a + b\n\nmath_utils.py::_normalize_inputs (line 22):\n    def _normalize_inputs(a, b):\n        return str(a), b  # casts a to string (unintended)",
    "output": "{\n  \"analysis\": [\n    {\n      \"test_name\": \"tests/test_math.py::test_sum_types\",\n      \"error\": \"TypeError: unsupported operand type(s) for +: 'int' and 'str'\",\n      \"call_path\": [\"math_utils.py::add\", \"math_utils.py::_normalize_inputs\"],\n      \"reasoning\": [\n        \"1) حدس رایج: خطای محاسباتی در add\",\n        \"2) اما شواهد نشان می‌دهد _normalize_inputs مقدار a را به str تبدیل می‌کند\",\n        \"3) add روی (str,int) اجرا شده و TypeError رخ می‌دهد\"\n      ],\n      \"root_cause\": \"تبدیل ناخواستهٔ نوع در _normalize_inputs (cast به str)\",\n      \"suggested_fixes\": [\n        \"حذف cast به str و اعتبارسنجی عددی بودن ورودی‌ها\",\n        \"افزودن تست واحد برای ورودی‌های ناهمگون و پیام خطای معنادار\"\n      ]\n    }\n  ]\n}"
  }
]
