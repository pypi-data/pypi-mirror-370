[project]
name = "gitbuilding_qaqc_server"
version = "0.0.1"
description = "An experimental server for storing QA/QC data."
readme = "README.md"
requires-python = ">= 3.11"
license = "AGPL-3.0-or-later"
keywords = ["Documentation", "Hardware"]
authors = [
    { name = "Julian Stirling", email = "julian@julianstirling.co.uk" },
]
dependencies = [
    "fastapi[all]~=0.116",
    "aiosqlite~=0.21.0",
]

[project.optional-dependencies]
dev = [
    "ruff~=0.12",
    "codespell~=2.4",
    "mypy~=1.17",
    "pytest~=8.4",
    "pytest-cov~=6.2",
    "pytest-mock~=3.14",
    "pytest-asyncio~=1.1",
    "hypothesis~=6.138",
    "lxml~=6.0",
    "mypy-gitlab-code-quality~=1.3",
    "curlylint"
]

[project.scripts]
gitbuilding-qaqc-server = "gitbuilding_qaqc_server.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = [
    "gitbuilding_qaqc_server"
]
artifacts = [
    "gitbuilding_qaqc_server/static/*",
    "gitbuilding_qaqc_server/templates/*",
]

[tool.hatch.build.targets.wheel]
artifacts = [
    "gitbuilding_qaqc_server/static/*",
    "gitbuilding_qaqc_server/templates/*",
]


[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
files = "gitbuilding_qaqc_server"

[tool.ruff]
target-version = "py311"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--cov=gitbuilding_qaqc_server",
    "--cov-report=term",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:htmlcov",
    "--junitxml=report.xml",
    "--ignore=.git",
    "--ignore=build",
]

pythonpath = ["."]
testpaths = ["tests"]

[tool.ruff.format]
# Use native line endings for all files
line-ending = "native"

[tool.ruff.lint]

# Slowly add linting rules from ruff-increased-checking.toml commented
# out rules can be checked by running
# ruff --config ruff-increased-checking.toml check
select = [
    "E", # pycodestyle errors
    "W", #pycodestyle warnings
    "F", # PyFlakes
    "PL", # Pylint (a subset of, catches far less than pylint does)
    "B", # Flake8 bugbear
    "A", # Flake8 builtins checker
    "C", # Flake8 comprehensions
    "FIX", #TODO/FIXME's in code. These should be added during development for ongoing tasks.
           # If they are not fixed before merge they should be converted to GitLab issues
    "LOG", # Flake8 logging issues (pedantic logger formatting issues can be added with "G")
    "T20", # Warns for print statements, production code should log
    "PT", # pytest linting
    "RET", # Consistent clear return statements
    "RSE", # Raise parentheses
    "SIM", # Simplifications detected
    "ARG", # unused arguments
    "C90", # McCabe complexity!
    "NPY", # Numpy linting
    "N", # PEP8 naming
    "D", # Docstring checks these may need to be added gradually
    "ERA001", # Commented out code!
]

ignore = [
    "E501", # Ignore long lines for now
    "D203",  # incompatible with D204
    "D213",  # incompatible with D212
    "D400",  # A stricter version of #415 that doesn't allow !
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "B018", # Complaining about useless attribute access in tests, but we need them to check errors are raised
    "PLR2004", # Pylint doesn't like magic numbers in comparisons. Ignore for tests.
]