"""
CLI for envsmith.

Doctest:
$ python3 -m envsmith init
$ python3 -m envsmith validate
$ python3 -m envsmith export --format yaml
"""
import argparse
import sys
import logging
from .core import EnvSmith

logger = logging.getLogger("envsmith.cli")

DEFAULT_SCHEMA = "schema.yaml"
DEFAULT_ENV = ".env"


def main():
    parser = argparse.ArgumentParser(prog="envsmith", description="Environment manager with schema validation.")
    subparsers = parser.add_subparsers(dest="command")

    p_init = subparsers.add_parser("init", help="Create .env and schema.yaml")
    p_validate = subparsers.add_parser("validate", help="Validate .env against schema")
    p_export = subparsers.add_parser("export", help="Export env as JSON/YAML")
    p_export.add_argument("--format", choices=["json", "yaml"], default="json")

    args = parser.parse_args()

    if args.command == "init":
        with open(DEFAULT_ENV, "w") as f:
            f.write("# .env generated by envsmith\n")
        with open(DEFAULT_SCHEMA, "w") as f:
            f.write("""DATABASE_URL:\n  type: str\n  required: true\nSECRET_KEY:\n  type: str\n  required: true\nENV:\n  type: str\n  default: development\n""")
        print("Created .env and schema.yaml")
    elif args.command == "validate":
        try:
            EnvSmith(schema_path=DEFAULT_SCHEMA, env_file=DEFAULT_ENV)
            print("Validation successful.")
        except Exception as e:
            print(f"Validation failed: {e}")
            sys.exit(1)
    elif args.command == "export":
        s = EnvSmith(schema_path=DEFAULT_SCHEMA, env_file=DEFAULT_ENV)
        print(s.export(as_format=args.format))
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
