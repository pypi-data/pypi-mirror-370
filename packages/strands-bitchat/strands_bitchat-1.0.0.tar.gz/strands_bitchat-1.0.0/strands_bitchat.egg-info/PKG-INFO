Metadata-Version: 2.4
Name: strands-bitchat
Version: 1.0.0
Summary: Decentralized P2P Encrypted Chat Agent powered by Strands Agents & Bluetooth LE
Home-page: https://github.com/cagataycali/strands-bitchat
Author: Cagatay Cali
Author-email: Cagatay Cali <cagataycali@icloud.com>
Maintainer: Cagatay Cali
Maintainer-email: Cagatay Cali <cagataycali@icloud.com>
License: MIT
Project-URL: Homepage, https://github.com/cagataycali/strands-bitchat
Project-URL: Documentation, https://github.com/cagataycali/strands-bitchat#readme
Project-URL: Repository, https://github.com/cagataycali/strands-bitchat
Project-URL: Bug Tracker, https://github.com/cagataycali/strands-bitchat/issues
Keywords: strands-agents,ai-agent,bitchat,p2p,bluetooth,encryption,mesh-network,decentralized,privacy,secure-chat,noise-protocol,ble,agent-to-agent,offline-communication
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Communications :: Chat
Classifier: Topic :: Internet
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Networking
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: strands-agents
Requires-Dist: strands-agents-tools
Requires-Dist: bleak>=0.20.0
Requires-Dist: pybloom-live>=4.0.0
Requires-Dist: lz4>=4.3.0
Requires-Dist: aioconsole>=0.6.0
Requires-Dist: cryptography>=41.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Requires-Dist: build>=0.8.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Requires-Dist: myst-parser>=0.18.0; extra == "docs"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: maintainer
Dynamic: platform
Dynamic: requires-python

# üîê BitChat Strands Agent

**Decentralized P2P Encrypted Chat Agent powered by Strands Agents & Bluetooth LE**

A revolutionary AI agent that communicates through decentralized, peer-to-peer encrypted chat networks over Bluetooth Low Energy. Enables secure agent-to-agent and agent-to-human communication without internet dependency.

[![Strands Agents](https://img.shields.io/badge/Powered%20by-Strands%20Agents-blue)](https://github.com/cagataycali/strands-agents)
[![Bluetooth LE](https://img.shields.io/badge/Bluetooth-LE%20Mesh-green)](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy)
[![End-to-End Encryption](https://img.shields.io/badge/Security-E2E%20Encrypted-red)](https://noiseprotocol.org/)

## üöÄ **Features**

### üî• **Core Capabilities**
- **ü§ñ AI Agent Integration** - Full Strands Agent with BitChat communication
- **üì° P2P Mesh Network** - Direct device-to-device communication over Bluetooth LE
- **üîê End-to-End Encryption** - Noise Protocol with ChaCha20-Poly1305 and forward secrecy
- **üåê No Internet Required** - Works completely offline in air-gapped environments
- **‚ö° Auto-Installation** - Automatically installs all required dependencies

### üí¨ **Communication Types**
- **üì¢ Public Broadcasts** - Send messages to all connected peers
- **üîí Private Messages** - End-to-end encrypted direct messages
- **üì∫ Secure Channels** - Password-protected group conversations
- **üîÑ Message Relay** - Mesh network message forwarding for extended range

### üõ°Ô∏è **Security & Privacy**
- **Noise Protocol XX** - Modern cryptographic handshake protocol
- **ChaCha20-Poly1305** - Authenticated encryption with additional data (AEAD)
- **Forward Secrecy** - Past communications remain secure even if keys are compromised  
- **Identity Keys** - Persistent cryptographic identity across sessions
- **Peer Blocking** - Privacy controls and user management
- **Traffic Analysis Resistance** - PKCS#7 padding and cover traffic

### ü§ù **Agent Collaboration**
- **Trigger Keywords** - Agents respond to mentions (e.g., "max, analyze this")
- **Context Awareness** - Full conversation history in agent responses
- **Cross-Platform** - Works across different devices and operating systems
- **Emergency Coordination** - Agents coordinate during network outages
- **Team Automation** - Automatic task distribution across agent network

## üìã **Requirements**

### **System Requirements**
- **Python 3.8+**
- **Bluetooth Low Energy** support (most modern devices)
- **macOS, Linux, or Windows**

### **Dependencies** (Auto-installed)
- `strands-agents` - Core AI agent framework
- `strands-agents-tools` - Extended tool ecosystem
- `bleak>=0.20.0` - Bluetooth Low Energy library
- `pybloom-live>=4.0.0` - Bloom filters for message deduplication
- `lz4>=4.3.0` - Fast compression
- `cryptography>=41.0.0` - Cryptographic primitives

## üîß **Installation**

### **1. Clone the Repository**
```bash
git clone https://github.com/cagataycali/strands-bitchat.git
cd strands-bitchat
```

### **2. Install Dependencies**
```bash
pip install -r requirements.txt
```

### **3. Run the Agent**
```bash
python agent.py
```

That's it! The agent will automatically install any missing BitChat dependencies on first use.

## üéÆ **Usage**

### **Starting the Agent**
```bash
python agent.py
```

### **Basic Commands**

#### **Start BitChat Network**
```
> start bitchat
```

#### **Send Public Message**
```
> send public message "Hello BitChat network!"
```

#### **Join Password-Protected Channel**  
```
> join channel #secure with password mysecret
```

#### **Send Private Message**
```
> send private message to alice "This is encrypted!"
```

#### **Enable Agent Auto-Responses**
```
> enable agent triggers with keyword "assistant"
```

### **Advanced Usage Examples**

#### **Agent-to-Agent Communication**
```python
# Enable automatic responses to "max" trigger in BitChat
bitchat(action="enable_agent", trigger_keyword="max", agent=agent)

# Other agents can now trigger responses:
# In BitChat: "max, what time is it?"
# Agent automatically responds via BitChat
```

#### **Secure Team Coordination**
```python  
# Join secure team channel
bitchat(action="join_channel", channel="#operations", password="team2024")

# Send encrypted team message
bitchat(action="send_channel", message="Task completed successfully", channel="#operations")
```

#### **Emergency Network Operations**
```python
# Works without internet - pure P2P mesh
bitchat(action="start")  # Connects to local Bluetooth LE mesh
bitchat(action="send_public", message="Emergency coordination active")
```

## üõ†Ô∏è **BitChat Tool API**

### **Available Actions**

| Action | Description | Parameters |
|--------|-------------|------------|
| `start` | Start BitChat client | None |
| `stop` | Stop BitChat client | None |
| `status` | Get connection status | None |
| `send_public` | Send public broadcast | `message` |
| `send_private` | Send encrypted DM | `message`, `recipient` |
| `send_channel` | Send channel message | `message`, `channel` |
| `join_channel` | Join/create channel | `channel`, `password` (optional) |
| `leave_channel` | Leave current channel | None |
| `list_peers` | List connected peers | None |
| `list_channels` | List discovered channels | None |
| `block_user` | Block a user | `nickname` |
| `unblock_user` | Unblock a user | `nickname` |
| `set_nickname` | Change nickname | `nickname` |
| `get_messages` | Get message history | None |
| `enable_agent` | Enable auto-responses | `trigger_keyword`, `agent` |
| `disable_agent` | Disable auto-responses | None |
| `agent_status` | Check agent integration | None |

### **Python API Examples**

#### **Basic Usage**
```python
from strands import Agent
from src.tools import bitchat

agent = Agent(tools=[bitchat])

# Start BitChat
result = agent.tool.bitchat(action="start")

# Send message
result = agent.tool.bitchat(action="send_public", message="Hello world!")

# Enable agent integration
result = agent.tool.bitchat(action="enable_agent", trigger_keyword="max", agent=agent)
```

#### **Advanced Integration**
```python
# Multi-channel coordination
agent.tool.bitchat(action="join_channel", channel="#team", password="secret")
agent.tool.bitchat(action="join_channel", channel="#public") 

# Automated responses across channels
agent.tool.bitchat(action="enable_agent", trigger_keyword="assistant", agent=agent)

# Now other users can interact:
# - Public: "assistant, analyze this data"  
# - Team channel: "assistant, status report"
# - Direct message: "assistant, help with task"
```

## üîê **Security Architecture**

### **Encryption Details**
- **Handshake**: Noise Protocol XX pattern
- **Transport**: ChaCha20-Poly1305 AEAD cipher
- **Key Exchange**: Curve25519 ECDH
- **Hash Function**: SHA-256
- **Forward Secrecy**: Automatic key rotation

### **Network Security**
- **Mesh Topology**: No single point of failure
- **Message Deduplication**: Bloom filters prevent replay attacks
- **TTL (Time To Live)**: Prevents infinite message loops
- **Fragmentation**: Large messages split and reassembled securely

### **Privacy Features**
- **Pseudonymous Identity**: No real identity required
- **Local Storage**: All data stored locally
- **No Cloud Dependencies**: Pure P2P architecture
- **Cover Traffic**: Traffic analysis resistance

## üåê **Network Topology**

```
Device A ‚Üê‚Üí Device B ‚Üê‚Üí Device C
    ‚Üë           ‚Üë           ‚Üë
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Device D ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    
‚Ä¢ Each device can relay messages
‚Ä¢ No central server required  
‚Ä¢ Works in isolated environments
‚Ä¢ Automatic peer discovery
‚Ä¢ Mesh healing capabilities
```

## üéØ **Use Cases**

### **ü§ñ Agent Networks**
- **Multi-agent collaboration** on complex tasks
- **Distributed AI processing** across devices
- **Agent-to-agent knowledge sharing**
- **Coordinated autonomous operations**

### **üõ°Ô∏è Security & Privacy**
- **Air-gapped secure communications**
- **Emergency response coordination**  
- **Sensitive data discussions**
- **Privacy-focused team communication**

### **üåç Offline Operations**
- **Remote area communications**
- **Internet outage scenarios**
- **Conference/event networking**
- **IoT device coordination**

### **üíº Enterprise Applications**
- **Secure team coordination**
- **Agent-assisted workflows**
- **Distributed system monitoring** 
- **Edge computing coordination**

## üöÄ **Getting Started Examples**

### **Example 1: Basic Agent Chat**
```python
python agent.py

> start bitchat
‚úÖ BitChat started! Status: connecting

> set nickname to "MyAgent"  
üìõ Nickname changed to: MyAgent

> send public message "Hello from Strands Agent!"
üì¢ Public message sent: Hello from Strands Agent!
```

### **Example 2: Agent Auto-Response Setup**
```python
> enable agent triggers with keyword "assistant"
ü§ñ Agent trigger enabled! Will respond to 'assistant' in BitChat messages

# Now other users can trigger agent responses:
# Other user: "assistant, what's 2+2?"
# Agent automatically responds: "The answer is 4"
```

### **Example 3: Secure Channel Operations**
```python
> join channel #team with password secretkey
üè† Joined channel #team (with password)

> send to channel "Secure team message"
üì∫ Channel message sent to #team: Secure team message

> list channels
üì∫ Discovered Channels:
  ‚Ä¢ #team üîí ‚úÖ
  ‚Ä¢ #public
  
üîí = Password protected, ‚úÖ = Joined
```

## üîß **Troubleshooting**

### **Connection Issues**
```bash
# Check Bluetooth status
> status bitchat
üìä BitChat Status: Connected ‚úÖ

# Restart if needed
> stop bitchat
> start bitchat
```

### **Permission Issues**
- **macOS**: Grant Bluetooth permission in System Preferences
- **Linux**: Ensure user is in `bluetooth` group
- **Windows**: Enable Bluetooth in Device Manager

### **Common Problems**
1. **No peers found**: Check Bluetooth is enabled on all devices
2. **Failed to connect**: Restart BitChat and try again
3. **Messages not decrypting**: Verify channel password is correct
4. **Agent not responding**: Check trigger keyword and agent status

## üìö **Documentation**

### **Protocol Specification**
- Based on **Noise Protocol Framework XX pattern**
- **Bluetooth LE GATT** service implementation
- **Message fragmentation** for large payloads
- **Delivery acknowledgments** for reliability

### **Architecture Overview**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Strands       ‚îÇ    ‚îÇ    BitChat       ‚îÇ    ‚îÇ   Bluetooth     ‚îÇ
‚îÇ   Agent         ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ    Protocol      ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   LE Mesh       ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ                  ‚îÇ    ‚îÇ                 ‚îÇ
‚îÇ ‚Ä¢ AI Processing ‚îÇ    ‚îÇ ‚Ä¢ Encryption     ‚îÇ    ‚îÇ ‚Ä¢ P2P Network   ‚îÇ
‚îÇ ‚Ä¢ Tool Calling  ‚îÇ    ‚îÇ ‚Ä¢ Message Relay  ‚îÇ    ‚îÇ ‚Ä¢ Device Discovery‚îÇ  
‚îÇ ‚Ä¢ Context Mgmt  ‚îÇ    ‚îÇ ‚Ä¢ Channel Mgmt   ‚îÇ    ‚îÇ ‚Ä¢ Data Transport‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## ü§ù **Contributing**

Contributions welcome! Areas for improvement:

- **Performance optimization** for large networks
- **Additional encryption** algorithms  
- **Protocol extensions** for new message types
- **Integration** with other Strands tools
- **Documentation** and examples

## üìÑ **License**

MIT License - see LICENSE file for details.

## üôè **Acknowledgments**

- **[Strands Agents](https://github.com/cagataycali/strands-agents)** - Core AI agent framework
- **[Noise Protocol](https://noiseprotocol.org/)** - Cryptographic protocol design
- **[Bleak](https://github.com/hbldh/bleak)** - Cross-platform Bluetooth LE library
- **[BitChat Protocol](https://github.com/kaganisildak/bitchat-python)** - Original BitChat implementation

---

**üöÄ Ready to build the future of decentralized AI communication!**

*Create autonomous agent networks that work anywhere, anytime, without internet dependency.*
