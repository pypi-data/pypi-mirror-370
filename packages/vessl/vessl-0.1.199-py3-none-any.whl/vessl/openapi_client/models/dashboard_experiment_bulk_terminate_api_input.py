# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class DashboardExperimentBulkTerminateAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all': 'bool',
        'excluded_experiment_numbers': 'list[int]',
        'experiment_numbers': 'list[int]',
        'keyword': 'str'
    }

    attribute_map = {
        'all': 'all',
        'excluded_experiment_numbers': 'excluded_experiment_numbers',
        'experiment_numbers': 'experiment_numbers',
        'keyword': 'keyword'
    }

    def __init__(self, all=None, excluded_experiment_numbers=None, experiment_numbers=None, keyword=None, local_vars_configuration=None):  # noqa: E501
        """DashboardExperimentBulkTerminateAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._all = None
        self._excluded_experiment_numbers = None
        self._experiment_numbers = None
        self._keyword = None
        self.discriminator = None

        if all is not None:
            self.all = all
        if excluded_experiment_numbers is not None:
            self.excluded_experiment_numbers = excluded_experiment_numbers
        if experiment_numbers is not None:
            self.experiment_numbers = experiment_numbers
        self.keyword = keyword

    @property
    def all(self):
        """Gets the all of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501


        :return: The all of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this DashboardExperimentBulkTerminateAPIInput.


        :param all: The all of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :type all: bool
        """

        self._all = all

    @property
    def excluded_experiment_numbers(self):
        """Gets the excluded_experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501


        :return: The excluded_experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._excluded_experiment_numbers

    @excluded_experiment_numbers.setter
    def excluded_experiment_numbers(self, excluded_experiment_numbers):
        """Sets the excluded_experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.


        :param excluded_experiment_numbers: The excluded_experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :type excluded_experiment_numbers: list[int]
        """

        self._excluded_experiment_numbers = excluded_experiment_numbers

    @property
    def experiment_numbers(self):
        """Gets the experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501


        :return: The experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._experiment_numbers

    @experiment_numbers.setter
    def experiment_numbers(self, experiment_numbers):
        """Sets the experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.


        :param experiment_numbers: The experiment_numbers of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :type experiment_numbers: list[int]
        """

        self._experiment_numbers = experiment_numbers

    @property
    def keyword(self):
        """Gets the keyword of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501


        :return: The keyword of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this DashboardExperimentBulkTerminateAPIInput.


        :param keyword: The keyword of this DashboardExperimentBulkTerminateAPIInput.  # noqa: E501
        :type keyword: str
        """

        self._keyword = keyword

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardExperimentBulkTerminateAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardExperimentBulkTerminateAPIInput):
            return True

        return self.to_dict() != other.to_dict()
