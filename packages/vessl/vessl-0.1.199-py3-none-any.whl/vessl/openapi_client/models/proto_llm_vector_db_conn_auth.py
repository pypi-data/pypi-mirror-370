# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ProtoLLMVectorDBConnAuth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'header_key': 'str',
        'header_value': 'str',
        'password': 'str',
        'token': 'str',
        'type': 'str',
        'username': 'str'
    }

    attribute_map = {
        'header_key': 'header_key',
        'header_value': 'header_value',
        'password': 'password',
        'token': 'token',
        'type': 'type',
        'username': 'username'
    }

    def __init__(self, header_key=None, header_value=None, password=None, token=None, type=None, username=None, local_vars_configuration=None):  # noqa: E501
        """ProtoLLMVectorDBConnAuth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._header_key = None
        self._header_value = None
        self._password = None
        self._token = None
        self._type = None
        self._username = None
        self.discriminator = None

        if header_key is not None:
            self.header_key = header_key
        if header_value is not None:
            self.header_value = header_value
        if password is not None:
            self.password = password
        if token is not None:
            self.token = token
        self.type = type
        if username is not None:
            self.username = username

    @property
    def header_key(self):
        """Gets the header_key of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The header_key of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._header_key

    @header_key.setter
    def header_key(self, header_key):
        """Sets the header_key of this ProtoLLMVectorDBConnAuth.


        :param header_key: The header_key of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type header_key: str
        """

        self._header_key = header_key

    @property
    def header_value(self):
        """Gets the header_value of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The header_value of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._header_value

    @header_value.setter
    def header_value(self, header_value):
        """Sets the header_value of this ProtoLLMVectorDBConnAuth.


        :param header_value: The header_value of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type header_value: str
        """

        self._header_value = header_value

    @property
    def password(self):
        """Gets the password of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The password of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ProtoLLMVectorDBConnAuth.


        :param password: The password of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def token(self):
        """Gets the token of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The token of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ProtoLLMVectorDBConnAuth.


        :param token: The token of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The type of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProtoLLMVectorDBConnAuth.


        :param type: The type of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["userpass", "bearer", "header", "none"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this ProtoLLMVectorDBConnAuth.  # noqa: E501


        :return: The username of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ProtoLLMVectorDBConnAuth.


        :param username: The username of this ProtoLLMVectorDBConnAuth.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtoLLMVectorDBConnAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtoLLMVectorDBConnAuth):
            return True

        return self.to_dict() != other.to_dict()
