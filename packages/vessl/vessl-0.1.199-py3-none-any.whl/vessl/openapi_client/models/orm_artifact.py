# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_created_by': 'int',
        'artifact_organization': 'int',
        'artifact_origin': 'int',
        'artifact_run_execution': 'int',
        'artifact_workload': 'int',
        'claim_name': 'str',
        'created_dt': 'datetime',
        'description': 'str',
        'edges': 'OrmArtifactEdges',
        'id': 'int',
        'immutable_slug': 'str',
        'is_plot_artifact': 'bool',
        'name': 'str',
        'parent_artifact_id': 'int',
        'storage_config': 'dict[str, object]',
        'storage_type': 'str',
        'sub_path': 'str',
        'type': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'artifact_created_by': 'artifact_created_by',
        'artifact_organization': 'artifact_organization',
        'artifact_origin': 'artifact_origin',
        'artifact_run_execution': 'artifact_run_execution',
        'artifact_workload': 'artifact_workload',
        'claim_name': 'claim_name',
        'created_dt': 'created_dt',
        'description': 'description',
        'edges': 'edges',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_plot_artifact': 'is_plot_artifact',
        'name': 'name',
        'parent_artifact_id': 'parent_artifact_id',
        'storage_config': 'storage_config',
        'storage_type': 'storage_type',
        'sub_path': 'sub_path',
        'type': 'type',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, artifact_created_by=None, artifact_organization=None, artifact_origin=None, artifact_run_execution=None, artifact_workload=None, claim_name=None, created_dt=None, description=None, edges=None, id=None, immutable_slug=None, is_plot_artifact=None, name=None, parent_artifact_id=None, storage_config=None, storage_type=None, sub_path=None, type=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_created_by = None
        self._artifact_organization = None
        self._artifact_origin = None
        self._artifact_run_execution = None
        self._artifact_workload = None
        self._claim_name = None
        self._created_dt = None
        self._description = None
        self._edges = None
        self._id = None
        self._immutable_slug = None
        self._is_plot_artifact = None
        self._name = None
        self._parent_artifact_id = None
        self._storage_config = None
        self._storage_type = None
        self._sub_path = None
        self._type = None
        self._updated_dt = None
        self.discriminator = None

        self.artifact_created_by = artifact_created_by
        if artifact_organization is not None:
            self.artifact_organization = artifact_organization
        self.artifact_origin = artifact_origin
        self.artifact_run_execution = artifact_run_execution
        self.artifact_workload = artifact_workload
        self.claim_name = claim_name
        if created_dt is not None:
            self.created_dt = created_dt
        self.description = description
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_plot_artifact is not None:
            self.is_plot_artifact = is_plot_artifact
        self.name = name
        self.parent_artifact_id = parent_artifact_id
        if storage_config is not None:
            self.storage_config = storage_config
        self.storage_type = storage_type
        if sub_path is not None:
            self.sub_path = sub_path
        if type is not None:
            self.type = type
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def artifact_created_by(self):
        """Gets the artifact_created_by of this OrmArtifact.  # noqa: E501


        :return: The artifact_created_by of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_created_by

    @artifact_created_by.setter
    def artifact_created_by(self, artifact_created_by):
        """Sets the artifact_created_by of this OrmArtifact.


        :param artifact_created_by: The artifact_created_by of this OrmArtifact.  # noqa: E501
        :type artifact_created_by: int
        """

        self._artifact_created_by = artifact_created_by

    @property
    def artifact_organization(self):
        """Gets the artifact_organization of this OrmArtifact.  # noqa: E501


        :return: The artifact_organization of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_organization

    @artifact_organization.setter
    def artifact_organization(self, artifact_organization):
        """Sets the artifact_organization of this OrmArtifact.


        :param artifact_organization: The artifact_organization of this OrmArtifact.  # noqa: E501
        :type artifact_organization: int
        """

        self._artifact_organization = artifact_organization

    @property
    def artifact_origin(self):
        """Gets the artifact_origin of this OrmArtifact.  # noqa: E501


        :return: The artifact_origin of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_origin

    @artifact_origin.setter
    def artifact_origin(self, artifact_origin):
        """Sets the artifact_origin of this OrmArtifact.


        :param artifact_origin: The artifact_origin of this OrmArtifact.  # noqa: E501
        :type artifact_origin: int
        """

        self._artifact_origin = artifact_origin

    @property
    def artifact_run_execution(self):
        """Gets the artifact_run_execution of this OrmArtifact.  # noqa: E501


        :return: The artifact_run_execution of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_run_execution

    @artifact_run_execution.setter
    def artifact_run_execution(self, artifact_run_execution):
        """Sets the artifact_run_execution of this OrmArtifact.


        :param artifact_run_execution: The artifact_run_execution of this OrmArtifact.  # noqa: E501
        :type artifact_run_execution: int
        """

        self._artifact_run_execution = artifact_run_execution

    @property
    def artifact_workload(self):
        """Gets the artifact_workload of this OrmArtifact.  # noqa: E501


        :return: The artifact_workload of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_workload

    @artifact_workload.setter
    def artifact_workload(self, artifact_workload):
        """Sets the artifact_workload of this OrmArtifact.


        :param artifact_workload: The artifact_workload of this OrmArtifact.  # noqa: E501
        :type artifact_workload: int
        """

        self._artifact_workload = artifact_workload

    @property
    def claim_name(self):
        """Gets the claim_name of this OrmArtifact.  # noqa: E501


        :return: The claim_name of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._claim_name

    @claim_name.setter
    def claim_name(self, claim_name):
        """Sets the claim_name of this OrmArtifact.


        :param claim_name: The claim_name of this OrmArtifact.  # noqa: E501
        :type claim_name: str
        """

        self._claim_name = claim_name

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmArtifact.  # noqa: E501


        :return: The created_dt of this OrmArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmArtifact.


        :param created_dt: The created_dt of this OrmArtifact.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this OrmArtifact.  # noqa: E501


        :return: The description of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrmArtifact.


        :param description: The description of this OrmArtifact.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def edges(self):
        """Gets the edges of this OrmArtifact.  # noqa: E501


        :return: The edges of this OrmArtifact.  # noqa: E501
        :rtype: OrmArtifactEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmArtifact.


        :param edges: The edges of this OrmArtifact.  # noqa: E501
        :type edges: OrmArtifactEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmArtifact.  # noqa: E501


        :return: The id of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmArtifact.


        :param id: The id of this OrmArtifact.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmArtifact.  # noqa: E501


        :return: The immutable_slug of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmArtifact.


        :param immutable_slug: The immutable_slug of this OrmArtifact.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_plot_artifact(self):
        """Gets the is_plot_artifact of this OrmArtifact.  # noqa: E501


        :return: The is_plot_artifact of this OrmArtifact.  # noqa: E501
        :rtype: bool
        """
        return self._is_plot_artifact

    @is_plot_artifact.setter
    def is_plot_artifact(self, is_plot_artifact):
        """Sets the is_plot_artifact of this OrmArtifact.


        :param is_plot_artifact: The is_plot_artifact of this OrmArtifact.  # noqa: E501
        :type is_plot_artifact: bool
        """

        self._is_plot_artifact = is_plot_artifact

    @property
    def name(self):
        """Gets the name of this OrmArtifact.  # noqa: E501


        :return: The name of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrmArtifact.


        :param name: The name of this OrmArtifact.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this OrmArtifact.  # noqa: E501


        :return: The parent_artifact_id of this OrmArtifact.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this OrmArtifact.


        :param parent_artifact_id: The parent_artifact_id of this OrmArtifact.  # noqa: E501
        :type parent_artifact_id: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def storage_config(self):
        """Gets the storage_config of this OrmArtifact.  # noqa: E501


        :return: The storage_config of this OrmArtifact.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._storage_config

    @storage_config.setter
    def storage_config(self, storage_config):
        """Sets the storage_config of this OrmArtifact.


        :param storage_config: The storage_config of this OrmArtifact.  # noqa: E501
        :type storage_config: dict[str, object]
        """

        self._storage_config = storage_config

    @property
    def storage_type(self):
        """Gets the storage_type of this OrmArtifact.  # noqa: E501


        :return: The storage_type of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this OrmArtifact.


        :param storage_type: The storage_type of this OrmArtifact.  # noqa: E501
        :type storage_type: str
        """

        self._storage_type = storage_type

    @property
    def sub_path(self):
        """Gets the sub_path of this OrmArtifact.  # noqa: E501


        :return: The sub_path of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this OrmArtifact.


        :param sub_path: The sub_path of this OrmArtifact.  # noqa: E501
        :type sub_path: str
        """

        self._sub_path = sub_path

    @property
    def type(self):
        """Gets the type of this OrmArtifact.  # noqa: E501


        :return: The type of this OrmArtifact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrmArtifact.


        :param type: The type of this OrmArtifact.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmArtifact.  # noqa: E501


        :return: The updated_dt of this OrmArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmArtifact.


        :param updated_dt: The updated_dt of this OrmArtifact.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmArtifact):
            return True

        return self.to_dict() != other.to_dict()
