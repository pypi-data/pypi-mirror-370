# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ExportClaim(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact': 'V1ArtifactReference',
        'dataset': 'V1DatasetReference',
        'gs': 'V1GSReference',
        'model': 'V1ModelReference',
        'ref_type': 'str',
        's3': 'V1S3Reference'
    }

    attribute_map = {
        'artifact': 'artifact',
        'dataset': 'dataset',
        'gs': 'gs',
        'model': 'model',
        'ref_type': 'ref_type',
        's3': 's3'
    }

    def __init__(self, artifact=None, dataset=None, gs=None, model=None, ref_type=None, s3=None, local_vars_configuration=None):  # noqa: E501
        """V1ExportClaim - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifact = None
        self._dataset = None
        self._gs = None
        self._model = None
        self._ref_type = None
        self._s3 = None
        self.discriminator = None

        if artifact is not None:
            self.artifact = artifact
        if dataset is not None:
            self.dataset = dataset
        if gs is not None:
            self.gs = gs
        if model is not None:
            self.model = model
        self.ref_type = ref_type
        if s3 is not None:
            self.s3 = s3

    @property
    def artifact(self):
        """Gets the artifact of this V1ExportClaim.  # noqa: E501


        :return: The artifact of this V1ExportClaim.  # noqa: E501
        :rtype: V1ArtifactReference
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this V1ExportClaim.


        :param artifact: The artifact of this V1ExportClaim.  # noqa: E501
        :type artifact: V1ArtifactReference
        """

        self._artifact = artifact

    @property
    def dataset(self):
        """Gets the dataset of this V1ExportClaim.  # noqa: E501


        :return: The dataset of this V1ExportClaim.  # noqa: E501
        :rtype: V1DatasetReference
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1ExportClaim.


        :param dataset: The dataset of this V1ExportClaim.  # noqa: E501
        :type dataset: V1DatasetReference
        """

        self._dataset = dataset

    @property
    def gs(self):
        """Gets the gs of this V1ExportClaim.  # noqa: E501


        :return: The gs of this V1ExportClaim.  # noqa: E501
        :rtype: V1GSReference
        """
        return self._gs

    @gs.setter
    def gs(self, gs):
        """Sets the gs of this V1ExportClaim.


        :param gs: The gs of this V1ExportClaim.  # noqa: E501
        :type gs: V1GSReference
        """

        self._gs = gs

    @property
    def model(self):
        """Gets the model of this V1ExportClaim.  # noqa: E501


        :return: The model of this V1ExportClaim.  # noqa: E501
        :rtype: V1ModelReference
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this V1ExportClaim.


        :param model: The model of this V1ExportClaim.  # noqa: E501
        :type model: V1ModelReference
        """

        self._model = model

    @property
    def ref_type(self):
        """Gets the ref_type of this V1ExportClaim.  # noqa: E501


        :return: The ref_type of this V1ExportClaim.  # noqa: E501
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this V1ExportClaim.


        :param ref_type: The ref_type of this V1ExportClaim.  # noqa: E501
        :type ref_type: str
        """
        if self.local_vars_configuration.client_side_validation and ref_type is None:  # noqa: E501
            raise ValueError("Invalid value for `ref_type`, must not be `None`")  # noqa: E501
        allowed_values = ["dataset", "model", "artifact", "s3", "gs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ref_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ref_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ref_type, allowed_values)
            )

        self._ref_type = ref_type

    @property
    def s3(self):
        """Gets the s3 of this V1ExportClaim.  # noqa: E501


        :return: The s3 of this V1ExportClaim.  # noqa: E501
        :rtype: V1S3Reference
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this V1ExportClaim.


        :param s3: The s3 of this V1ExportClaim.  # noqa: E501
        :type s3: V1S3Reference
        """

        self._s3 = s3

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ExportClaim):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ExportClaim):
            return True

        return self.to_dict() != other.to_dict()
