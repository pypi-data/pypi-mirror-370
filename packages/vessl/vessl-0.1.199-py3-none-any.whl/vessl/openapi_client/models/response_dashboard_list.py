# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseDashboardList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'main_dashboard': 'ResponseDashboardBasic',
        'other_dashboards': 'list[ResponseDashboardBasic]',
        'private_dashboard': 'ResponseDashboardBasic',
        'starred_dashboards': 'list[ResponseDashboardBasic]'
    }

    attribute_map = {
        'main_dashboard': 'main_dashboard',
        'other_dashboards': 'other_dashboards',
        'private_dashboard': 'private_dashboard',
        'starred_dashboards': 'starred_dashboards'
    }

    def __init__(self, main_dashboard=None, other_dashboards=None, private_dashboard=None, starred_dashboards=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDashboardList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._main_dashboard = None
        self._other_dashboards = None
        self._private_dashboard = None
        self._starred_dashboards = None
        self.discriminator = None

        self.main_dashboard = main_dashboard
        self.other_dashboards = other_dashboards
        if private_dashboard is not None:
            self.private_dashboard = private_dashboard
        self.starred_dashboards = starred_dashboards

    @property
    def main_dashboard(self):
        """Gets the main_dashboard of this ResponseDashboardList.  # noqa: E501


        :return: The main_dashboard of this ResponseDashboardList.  # noqa: E501
        :rtype: ResponseDashboardBasic
        """
        return self._main_dashboard

    @main_dashboard.setter
    def main_dashboard(self, main_dashboard):
        """Sets the main_dashboard of this ResponseDashboardList.


        :param main_dashboard: The main_dashboard of this ResponseDashboardList.  # noqa: E501
        :type main_dashboard: ResponseDashboardBasic
        """
        if self.local_vars_configuration.client_side_validation and main_dashboard is None:  # noqa: E501
            raise ValueError("Invalid value for `main_dashboard`, must not be `None`")  # noqa: E501

        self._main_dashboard = main_dashboard

    @property
    def other_dashboards(self):
        """Gets the other_dashboards of this ResponseDashboardList.  # noqa: E501


        :return: The other_dashboards of this ResponseDashboardList.  # noqa: E501
        :rtype: list[ResponseDashboardBasic]
        """
        return self._other_dashboards

    @other_dashboards.setter
    def other_dashboards(self, other_dashboards):
        """Sets the other_dashboards of this ResponseDashboardList.


        :param other_dashboards: The other_dashboards of this ResponseDashboardList.  # noqa: E501
        :type other_dashboards: list[ResponseDashboardBasic]
        """
        if self.local_vars_configuration.client_side_validation and other_dashboards is None:  # noqa: E501
            raise ValueError("Invalid value for `other_dashboards`, must not be `None`")  # noqa: E501

        self._other_dashboards = other_dashboards

    @property
    def private_dashboard(self):
        """Gets the private_dashboard of this ResponseDashboardList.  # noqa: E501


        :return: The private_dashboard of this ResponseDashboardList.  # noqa: E501
        :rtype: ResponseDashboardBasic
        """
        return self._private_dashboard

    @private_dashboard.setter
    def private_dashboard(self, private_dashboard):
        """Sets the private_dashboard of this ResponseDashboardList.


        :param private_dashboard: The private_dashboard of this ResponseDashboardList.  # noqa: E501
        :type private_dashboard: ResponseDashboardBasic
        """

        self._private_dashboard = private_dashboard

    @property
    def starred_dashboards(self):
        """Gets the starred_dashboards of this ResponseDashboardList.  # noqa: E501


        :return: The starred_dashboards of this ResponseDashboardList.  # noqa: E501
        :rtype: list[ResponseDashboardBasic]
        """
        return self._starred_dashboards

    @starred_dashboards.setter
    def starred_dashboards(self, starred_dashboards):
        """Sets the starred_dashboards of this ResponseDashboardList.


        :param starred_dashboards: The starred_dashboards of this ResponseDashboardList.  # noqa: E501
        :type starred_dashboards: list[ResponseDashboardBasic]
        """
        if self.local_vars_configuration.client_side_validation and starred_dashboards is None:  # noqa: E501
            raise ValueError("Invalid value for `starred_dashboards`, must not be `None`")  # noqa: E501

        self._starred_dashboards = starred_dashboards

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDashboardList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDashboardList):
            return True

        return self.to_dict() != other.to_dict()
