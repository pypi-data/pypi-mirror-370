# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ExpectedRevisionStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'from_step_number': 'int',
        'is_new_revision': 'bool',
        'number': 'int',
        'terminating': 'bool',
        'traffic_weight': 'int'
    }

    attribute_map = {
        'from_step_number': 'from_step_number',
        'is_new_revision': 'is_new_revision',
        'number': 'number',
        'terminating': 'terminating',
        'traffic_weight': 'traffic_weight'
    }

    def __init__(self, from_step_number=None, is_new_revision=None, number=None, terminating=None, traffic_weight=None, local_vars_configuration=None):  # noqa: E501
        """V1ExpectedRevisionStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._from_step_number = None
        self._is_new_revision = None
        self._number = None
        self._terminating = None
        self._traffic_weight = None
        self.discriminator = None

        self.from_step_number = from_step_number
        self.is_new_revision = is_new_revision
        self.number = number
        self.terminating = terminating
        self.traffic_weight = traffic_weight

    @property
    def from_step_number(self):
        """Gets the from_step_number of this V1ExpectedRevisionStatus.  # noqa: E501


        :return: The from_step_number of this V1ExpectedRevisionStatus.  # noqa: E501
        :rtype: int
        """
        return self._from_step_number

    @from_step_number.setter
    def from_step_number(self, from_step_number):
        """Sets the from_step_number of this V1ExpectedRevisionStatus.


        :param from_step_number: The from_step_number of this V1ExpectedRevisionStatus.  # noqa: E501
        :type from_step_number: int
        """
        if self.local_vars_configuration.client_side_validation and from_step_number is None:  # noqa: E501
            raise ValueError("Invalid value for `from_step_number`, must not be `None`")  # noqa: E501

        self._from_step_number = from_step_number

    @property
    def is_new_revision(self):
        """Gets the is_new_revision of this V1ExpectedRevisionStatus.  # noqa: E501


        :return: The is_new_revision of this V1ExpectedRevisionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_revision

    @is_new_revision.setter
    def is_new_revision(self, is_new_revision):
        """Sets the is_new_revision of this V1ExpectedRevisionStatus.


        :param is_new_revision: The is_new_revision of this V1ExpectedRevisionStatus.  # noqa: E501
        :type is_new_revision: bool
        """
        if self.local_vars_configuration.client_side_validation and is_new_revision is None:  # noqa: E501
            raise ValueError("Invalid value for `is_new_revision`, must not be `None`")  # noqa: E501

        self._is_new_revision = is_new_revision

    @property
    def number(self):
        """Gets the number of this V1ExpectedRevisionStatus.  # noqa: E501


        :return: The number of this V1ExpectedRevisionStatus.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this V1ExpectedRevisionStatus.


        :param number: The number of this V1ExpectedRevisionStatus.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def terminating(self):
        """Gets the terminating of this V1ExpectedRevisionStatus.  # noqa: E501


        :return: The terminating of this V1ExpectedRevisionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._terminating

    @terminating.setter
    def terminating(self, terminating):
        """Sets the terminating of this V1ExpectedRevisionStatus.


        :param terminating: The terminating of this V1ExpectedRevisionStatus.  # noqa: E501
        :type terminating: bool
        """
        if self.local_vars_configuration.client_side_validation and terminating is None:  # noqa: E501
            raise ValueError("Invalid value for `terminating`, must not be `None`")  # noqa: E501

        self._terminating = terminating

    @property
    def traffic_weight(self):
        """Gets the traffic_weight of this V1ExpectedRevisionStatus.  # noqa: E501


        :return: The traffic_weight of this V1ExpectedRevisionStatus.  # noqa: E501
        :rtype: int
        """
        return self._traffic_weight

    @traffic_weight.setter
    def traffic_weight(self, traffic_weight):
        """Sets the traffic_weight of this V1ExpectedRevisionStatus.


        :param traffic_weight: The traffic_weight of this V1ExpectedRevisionStatus.  # noqa: E501
        :type traffic_weight: int
        """
        if self.local_vars_configuration.client_side_validation and traffic_weight is None:  # noqa: E501
            raise ValueError("Invalid value for `traffic_weight`, must not be `None`")  # noqa: E501

        self._traffic_weight = traffic_weight

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ExpectedRevisionStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ExpectedRevisionStatus):
            return True

        return self.to_dict() != other.to_dict()
