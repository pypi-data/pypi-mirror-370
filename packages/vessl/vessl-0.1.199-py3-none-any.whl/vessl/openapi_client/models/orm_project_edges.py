# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmProjectEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dashboards': 'list[OrmProjectDashboard]',
        'experiment_fields': 'list[OrmProjectExperimentField]',
        'experiments': 'list[OrmExperiment]',
        'organization': 'OrmOrganization',
        'persistent_artifacts': 'list[OrmArtifact]',
        'pipelines': 'list[OrmPipeline]',
        'primary_owner': 'OrmUser',
        'project_datasets': 'list[OrmProjectDataset]',
        'repositories': 'list[OrmProjectRepository]',
        'run_executions': 'list[OrmRunExecution]',
        'run_tracking_dashboards': 'list[OrmRunTrackingDashboard]',
        'run_tracking_fields': 'list[OrmProjectRunTrackingField]',
        'tag_group': 'OrmTagGroup',
        'user_starred_projects': 'list[OrmUserStarredProjects]',
        'volume': 'OrmVolume'
    }

    attribute_map = {
        'dashboards': 'dashboards',
        'experiment_fields': 'experiment_fields',
        'experiments': 'experiments',
        'organization': 'organization',
        'persistent_artifacts': 'persistent_artifacts',
        'pipelines': 'pipelines',
        'primary_owner': 'primary_owner',
        'project_datasets': 'project_datasets',
        'repositories': 'repositories',
        'run_executions': 'run_executions',
        'run_tracking_dashboards': 'run_tracking_dashboards',
        'run_tracking_fields': 'run_tracking_fields',
        'tag_group': 'tag_group',
        'user_starred_projects': 'user_starred_projects',
        'volume': 'volume'
    }

    def __init__(self, dashboards=None, experiment_fields=None, experiments=None, organization=None, persistent_artifacts=None, pipelines=None, primary_owner=None, project_datasets=None, repositories=None, run_executions=None, run_tracking_dashboards=None, run_tracking_fields=None, tag_group=None, user_starred_projects=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """OrmProjectEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dashboards = None
        self._experiment_fields = None
        self._experiments = None
        self._organization = None
        self._persistent_artifacts = None
        self._pipelines = None
        self._primary_owner = None
        self._project_datasets = None
        self._repositories = None
        self._run_executions = None
        self._run_tracking_dashboards = None
        self._run_tracking_fields = None
        self._tag_group = None
        self._user_starred_projects = None
        self._volume = None
        self.discriminator = None

        if dashboards is not None:
            self.dashboards = dashboards
        if experiment_fields is not None:
            self.experiment_fields = experiment_fields
        if experiments is not None:
            self.experiments = experiments
        if organization is not None:
            self.organization = organization
        if persistent_artifacts is not None:
            self.persistent_artifacts = persistent_artifacts
        if pipelines is not None:
            self.pipelines = pipelines
        if primary_owner is not None:
            self.primary_owner = primary_owner
        if project_datasets is not None:
            self.project_datasets = project_datasets
        if repositories is not None:
            self.repositories = repositories
        if run_executions is not None:
            self.run_executions = run_executions
        if run_tracking_dashboards is not None:
            self.run_tracking_dashboards = run_tracking_dashboards
        if run_tracking_fields is not None:
            self.run_tracking_fields = run_tracking_fields
        if tag_group is not None:
            self.tag_group = tag_group
        if user_starred_projects is not None:
            self.user_starred_projects = user_starred_projects
        if volume is not None:
            self.volume = volume

    @property
    def dashboards(self):
        """Gets the dashboards of this OrmProjectEdges.  # noqa: E501


        :return: The dashboards of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this OrmProjectEdges.


        :param dashboards: The dashboards of this OrmProjectEdges.  # noqa: E501
        :type dashboards: list[OrmProjectDashboard]
        """

        self._dashboards = dashboards

    @property
    def experiment_fields(self):
        """Gets the experiment_fields of this OrmProjectEdges.  # noqa: E501


        :return: The experiment_fields of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmProjectExperimentField]
        """
        return self._experiment_fields

    @experiment_fields.setter
    def experiment_fields(self, experiment_fields):
        """Sets the experiment_fields of this OrmProjectEdges.


        :param experiment_fields: The experiment_fields of this OrmProjectEdges.  # noqa: E501
        :type experiment_fields: list[OrmProjectExperimentField]
        """

        self._experiment_fields = experiment_fields

    @property
    def experiments(self):
        """Gets the experiments of this OrmProjectEdges.  # noqa: E501


        :return: The experiments of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmExperiment]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this OrmProjectEdges.


        :param experiments: The experiments of this OrmProjectEdges.  # noqa: E501
        :type experiments: list[OrmExperiment]
        """

        self._experiments = experiments

    @property
    def organization(self):
        """Gets the organization of this OrmProjectEdges.  # noqa: E501


        :return: The organization of this OrmProjectEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmProjectEdges.


        :param organization: The organization of this OrmProjectEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def persistent_artifacts(self):
        """Gets the persistent_artifacts of this OrmProjectEdges.  # noqa: E501


        :return: The persistent_artifacts of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmArtifact]
        """
        return self._persistent_artifacts

    @persistent_artifacts.setter
    def persistent_artifacts(self, persistent_artifacts):
        """Sets the persistent_artifacts of this OrmProjectEdges.


        :param persistent_artifacts: The persistent_artifacts of this OrmProjectEdges.  # noqa: E501
        :type persistent_artifacts: list[OrmArtifact]
        """

        self._persistent_artifacts = persistent_artifacts

    @property
    def pipelines(self):
        """Gets the pipelines of this OrmProjectEdges.  # noqa: E501


        :return: The pipelines of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this OrmProjectEdges.


        :param pipelines: The pipelines of this OrmProjectEdges.  # noqa: E501
        :type pipelines: list[OrmPipeline]
        """

        self._pipelines = pipelines

    @property
    def primary_owner(self):
        """Gets the primary_owner of this OrmProjectEdges.  # noqa: E501


        :return: The primary_owner of this OrmProjectEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._primary_owner

    @primary_owner.setter
    def primary_owner(self, primary_owner):
        """Sets the primary_owner of this OrmProjectEdges.


        :param primary_owner: The primary_owner of this OrmProjectEdges.  # noqa: E501
        :type primary_owner: OrmUser
        """

        self._primary_owner = primary_owner

    @property
    def project_datasets(self):
        """Gets the project_datasets of this OrmProjectEdges.  # noqa: E501


        :return: The project_datasets of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmProjectDataset]
        """
        return self._project_datasets

    @project_datasets.setter
    def project_datasets(self, project_datasets):
        """Sets the project_datasets of this OrmProjectEdges.


        :param project_datasets: The project_datasets of this OrmProjectEdges.  # noqa: E501
        :type project_datasets: list[OrmProjectDataset]
        """

        self._project_datasets = project_datasets

    @property
    def repositories(self):
        """Gets the repositories of this OrmProjectEdges.  # noqa: E501


        :return: The repositories of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmProjectRepository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this OrmProjectEdges.


        :param repositories: The repositories of this OrmProjectEdges.  # noqa: E501
        :type repositories: list[OrmProjectRepository]
        """

        self._repositories = repositories

    @property
    def run_executions(self):
        """Gets the run_executions of this OrmProjectEdges.  # noqa: E501


        :return: The run_executions of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmRunExecution]
        """
        return self._run_executions

    @run_executions.setter
    def run_executions(self, run_executions):
        """Sets the run_executions of this OrmProjectEdges.


        :param run_executions: The run_executions of this OrmProjectEdges.  # noqa: E501
        :type run_executions: list[OrmRunExecution]
        """

        self._run_executions = run_executions

    @property
    def run_tracking_dashboards(self):
        """Gets the run_tracking_dashboards of this OrmProjectEdges.  # noqa: E501


        :return: The run_tracking_dashboards of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmRunTrackingDashboard]
        """
        return self._run_tracking_dashboards

    @run_tracking_dashboards.setter
    def run_tracking_dashboards(self, run_tracking_dashboards):
        """Sets the run_tracking_dashboards of this OrmProjectEdges.


        :param run_tracking_dashboards: The run_tracking_dashboards of this OrmProjectEdges.  # noqa: E501
        :type run_tracking_dashboards: list[OrmRunTrackingDashboard]
        """

        self._run_tracking_dashboards = run_tracking_dashboards

    @property
    def run_tracking_fields(self):
        """Gets the run_tracking_fields of this OrmProjectEdges.  # noqa: E501


        :return: The run_tracking_fields of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmProjectRunTrackingField]
        """
        return self._run_tracking_fields

    @run_tracking_fields.setter
    def run_tracking_fields(self, run_tracking_fields):
        """Sets the run_tracking_fields of this OrmProjectEdges.


        :param run_tracking_fields: The run_tracking_fields of this OrmProjectEdges.  # noqa: E501
        :type run_tracking_fields: list[OrmProjectRunTrackingField]
        """

        self._run_tracking_fields = run_tracking_fields

    @property
    def tag_group(self):
        """Gets the tag_group of this OrmProjectEdges.  # noqa: E501


        :return: The tag_group of this OrmProjectEdges.  # noqa: E501
        :rtype: OrmTagGroup
        """
        return self._tag_group

    @tag_group.setter
    def tag_group(self, tag_group):
        """Sets the tag_group of this OrmProjectEdges.


        :param tag_group: The tag_group of this OrmProjectEdges.  # noqa: E501
        :type tag_group: OrmTagGroup
        """

        self._tag_group = tag_group

    @property
    def user_starred_projects(self):
        """Gets the user_starred_projects of this OrmProjectEdges.  # noqa: E501


        :return: The user_starred_projects of this OrmProjectEdges.  # noqa: E501
        :rtype: list[OrmUserStarredProjects]
        """
        return self._user_starred_projects

    @user_starred_projects.setter
    def user_starred_projects(self, user_starred_projects):
        """Sets the user_starred_projects of this OrmProjectEdges.


        :param user_starred_projects: The user_starred_projects of this OrmProjectEdges.  # noqa: E501
        :type user_starred_projects: list[OrmUserStarredProjects]
        """

        self._user_starred_projects = user_starred_projects

    @property
    def volume(self):
        """Gets the volume of this OrmProjectEdges.  # noqa: E501


        :return: The volume of this OrmProjectEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OrmProjectEdges.


        :param volume: The volume of this OrmProjectEdges.  # noqa: E501
        :type volume: OrmVolume
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmProjectEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmProjectEdges):
            return True

        return self.to_dict() != other.to_dict()
