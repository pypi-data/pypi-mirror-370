# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class PipelinePipelineOverviewResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_execution_seconds': 'int',
        'overview_pie_chart': 'list[PipelineOverviewPieChartElem]',
        'recent_executions': 'list[ResponseReducedPipelineExecution]',
        'running_executions_count': 'int'
    }

    attribute_map = {
        'average_execution_seconds': 'average_execution_seconds',
        'overview_pie_chart': 'overview_pie_chart',
        'recent_executions': 'recent_executions',
        'running_executions_count': 'running_executions_count'
    }

    def __init__(self, average_execution_seconds=None, overview_pie_chart=None, recent_executions=None, running_executions_count=None, local_vars_configuration=None):  # noqa: E501
        """PipelinePipelineOverviewResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._average_execution_seconds = None
        self._overview_pie_chart = None
        self._recent_executions = None
        self._running_executions_count = None
        self.discriminator = None

        self.average_execution_seconds = average_execution_seconds
        if overview_pie_chart is not None:
            self.overview_pie_chart = overview_pie_chart
        if recent_executions is not None:
            self.recent_executions = recent_executions
        self.running_executions_count = running_executions_count

    @property
    def average_execution_seconds(self):
        """Gets the average_execution_seconds of this PipelinePipelineOverviewResponse.  # noqa: E501


        :return: The average_execution_seconds of this PipelinePipelineOverviewResponse.  # noqa: E501
        :rtype: int
        """
        return self._average_execution_seconds

    @average_execution_seconds.setter
    def average_execution_seconds(self, average_execution_seconds):
        """Sets the average_execution_seconds of this PipelinePipelineOverviewResponse.


        :param average_execution_seconds: The average_execution_seconds of this PipelinePipelineOverviewResponse.  # noqa: E501
        :type average_execution_seconds: int
        """
        if self.local_vars_configuration.client_side_validation and average_execution_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `average_execution_seconds`, must not be `None`")  # noqa: E501

        self._average_execution_seconds = average_execution_seconds

    @property
    def overview_pie_chart(self):
        """Gets the overview_pie_chart of this PipelinePipelineOverviewResponse.  # noqa: E501


        :return: The overview_pie_chart of this PipelinePipelineOverviewResponse.  # noqa: E501
        :rtype: list[PipelineOverviewPieChartElem]
        """
        return self._overview_pie_chart

    @overview_pie_chart.setter
    def overview_pie_chart(self, overview_pie_chart):
        """Sets the overview_pie_chart of this PipelinePipelineOverviewResponse.


        :param overview_pie_chart: The overview_pie_chart of this PipelinePipelineOverviewResponse.  # noqa: E501
        :type overview_pie_chart: list[PipelineOverviewPieChartElem]
        """

        self._overview_pie_chart = overview_pie_chart

    @property
    def recent_executions(self):
        """Gets the recent_executions of this PipelinePipelineOverviewResponse.  # noqa: E501


        :return: The recent_executions of this PipelinePipelineOverviewResponse.  # noqa: E501
        :rtype: list[ResponseReducedPipelineExecution]
        """
        return self._recent_executions

    @recent_executions.setter
    def recent_executions(self, recent_executions):
        """Sets the recent_executions of this PipelinePipelineOverviewResponse.


        :param recent_executions: The recent_executions of this PipelinePipelineOverviewResponse.  # noqa: E501
        :type recent_executions: list[ResponseReducedPipelineExecution]
        """

        self._recent_executions = recent_executions

    @property
    def running_executions_count(self):
        """Gets the running_executions_count of this PipelinePipelineOverviewResponse.  # noqa: E501


        :return: The running_executions_count of this PipelinePipelineOverviewResponse.  # noqa: E501
        :rtype: int
        """
        return self._running_executions_count

    @running_executions_count.setter
    def running_executions_count(self, running_executions_count):
        """Sets the running_executions_count of this PipelinePipelineOverviewResponse.


        :param running_executions_count: The running_executions_count of this PipelinePipelineOverviewResponse.  # noqa: E501
        :type running_executions_count: int
        """
        if self.local_vars_configuration.client_side_validation and running_executions_count is None:  # noqa: E501
            raise ValueError("Invalid value for `running_executions_count`, must not be `None`")  # noqa: E501

        self._running_executions_count = running_executions_count

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelinePipelineOverviewResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelinePipelineOverviewResponse):
            return True

        return self.to_dict() != other.to_dict()
