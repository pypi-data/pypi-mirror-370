# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ContextMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_step_key': 'str',
        'execution': 'V1Execution',
        'resolved_step_keys': 'list[str]'
    }

    attribute_map = {
        'current_step_key': 'current_step_key',
        'execution': 'execution',
        'resolved_step_keys': 'resolved_step_keys'
    }

    def __init__(self, current_step_key=None, execution=None, resolved_step_keys=None, local_vars_configuration=None):  # noqa: E501
        """V1ContextMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_step_key = None
        self._execution = None
        self._resolved_step_keys = None
        self.discriminator = None

        self.current_step_key = current_step_key
        self.execution = execution
        if resolved_step_keys is not None:
            self.resolved_step_keys = resolved_step_keys

    @property
    def current_step_key(self):
        """Gets the current_step_key of this V1ContextMetadata.  # noqa: E501


        :return: The current_step_key of this V1ContextMetadata.  # noqa: E501
        :rtype: str
        """
        return self._current_step_key

    @current_step_key.setter
    def current_step_key(self, current_step_key):
        """Sets the current_step_key of this V1ContextMetadata.


        :param current_step_key: The current_step_key of this V1ContextMetadata.  # noqa: E501
        :type current_step_key: str
        """
        if self.local_vars_configuration.client_side_validation and current_step_key is None:  # noqa: E501
            raise ValueError("Invalid value for `current_step_key`, must not be `None`")  # noqa: E501

        self._current_step_key = current_step_key

    @property
    def execution(self):
        """Gets the execution of this V1ContextMetadata.  # noqa: E501


        :return: The execution of this V1ContextMetadata.  # noqa: E501
        :rtype: V1Execution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this V1ContextMetadata.


        :param execution: The execution of this V1ContextMetadata.  # noqa: E501
        :type execution: V1Execution
        """
        if self.local_vars_configuration.client_side_validation and execution is None:  # noqa: E501
            raise ValueError("Invalid value for `execution`, must not be `None`")  # noqa: E501

        self._execution = execution

    @property
    def resolved_step_keys(self):
        """Gets the resolved_step_keys of this V1ContextMetadata.  # noqa: E501


        :return: The resolved_step_keys of this V1ContextMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._resolved_step_keys

    @resolved_step_keys.setter
    def resolved_step_keys(self, resolved_step_keys):
        """Sets the resolved_step_keys of this V1ContextMetadata.


        :param resolved_step_keys: The resolved_step_keys of this V1ContextMetadata.  # noqa: E501
        :type resolved_step_keys: list[str]
        """

        self._resolved_step_keys = resolved_step_keys

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ContextMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ContextMetadata):
            return True

        return self.to_dict() != other.to_dict()
