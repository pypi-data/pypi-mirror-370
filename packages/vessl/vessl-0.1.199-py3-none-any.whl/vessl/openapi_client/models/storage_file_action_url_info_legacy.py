# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class StorageFileActionURLInfoLegacy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'list[str]',
        'federation_token': 'StorageFederationTokenLegacy',
        'headers': 'list[str]',
        'method': 'str',
        'url': 'str'
    }

    attribute_map = {
        'body': 'body',
        'federation_token': 'federation_token',
        'headers': 'headers',
        'method': 'method',
        'url': 'url'
    }

    def __init__(self, body=None, federation_token=None, headers=None, method=None, url=None, local_vars_configuration=None):  # noqa: E501
        """StorageFileActionURLInfoLegacy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._federation_token = None
        self._headers = None
        self._method = None
        self._url = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if federation_token is not None:
            self.federation_token = federation_token
        if headers is not None:
            self.headers = headers
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url

    @property
    def body(self):
        """Gets the body of this StorageFileActionURLInfoLegacy.  # noqa: E501


        :return: The body of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :rtype: list[str]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this StorageFileActionURLInfoLegacy.


        :param body: The body of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :type body: list[str]
        """

        self._body = body

    @property
    def federation_token(self):
        """Gets the federation_token of this StorageFileActionURLInfoLegacy.  # noqa: E501


        :return: The federation_token of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :rtype: StorageFederationTokenLegacy
        """
        return self._federation_token

    @federation_token.setter
    def federation_token(self, federation_token):
        """Sets the federation_token of this StorageFileActionURLInfoLegacy.


        :param federation_token: The federation_token of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :type federation_token: StorageFederationTokenLegacy
        """

        self._federation_token = federation_token

    @property
    def headers(self):
        """Gets the headers of this StorageFileActionURLInfoLegacy.  # noqa: E501


        :return: The headers of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :rtype: list[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this StorageFileActionURLInfoLegacy.


        :param headers: The headers of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :type headers: list[str]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this StorageFileActionURLInfoLegacy.  # noqa: E501


        :return: The method of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this StorageFileActionURLInfoLegacy.


        :param method: The method of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :type method: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this StorageFileActionURLInfoLegacy.  # noqa: E501


        :return: The url of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StorageFileActionURLInfoLegacy.


        :param url: The url of this StorageFileActionURLInfoLegacy.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageFileActionURLInfoLegacy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageFileActionURLInfoLegacy):
            return True

        return self.to_dict() != other.to_dict()
