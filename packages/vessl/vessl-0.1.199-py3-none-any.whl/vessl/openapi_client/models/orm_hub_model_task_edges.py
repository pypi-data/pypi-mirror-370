# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmHubModelTaskEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'OrmHubModelTaskCategory',
        'created_by_user': 'OrmUser',
        'histories': 'list[OrmHubModelTaskHistory]',
        'hub_tags': 'list[OrmHubTag]',
        'organization_hub_model_tasks': 'list[OrmOrganizationHubModelTask]',
        'owner_organization': 'OrmOrganization',
        'pipeline_spec': 'OrmPipelineSpec'
    }

    attribute_map = {
        'category': 'category',
        'created_by_user': 'created_by_user',
        'histories': 'histories',
        'hub_tags': 'hub_tags',
        'organization_hub_model_tasks': 'organization_hub_model_tasks',
        'owner_organization': 'owner_organization',
        'pipeline_spec': 'pipeline_spec'
    }

    def __init__(self, category=None, created_by_user=None, histories=None, hub_tags=None, organization_hub_model_tasks=None, owner_organization=None, pipeline_spec=None, local_vars_configuration=None):  # noqa: E501
        """OrmHubModelTaskEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._created_by_user = None
        self._histories = None
        self._hub_tags = None
        self._organization_hub_model_tasks = None
        self._owner_organization = None
        self._pipeline_spec = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if histories is not None:
            self.histories = histories
        if hub_tags is not None:
            self.hub_tags = hub_tags
        if organization_hub_model_tasks is not None:
            self.organization_hub_model_tasks = organization_hub_model_tasks
        if owner_organization is not None:
            self.owner_organization = owner_organization
        if pipeline_spec is not None:
            self.pipeline_spec = pipeline_spec

    @property
    def category(self):
        """Gets the category of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The category of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: OrmHubModelTaskCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OrmHubModelTaskEdges.


        :param category: The category of this OrmHubModelTaskEdges.  # noqa: E501
        :type category: OrmHubModelTaskCategory
        """

        self._category = category

    @property
    def created_by_user(self):
        """Gets the created_by_user of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The created_by_user of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this OrmHubModelTaskEdges.


        :param created_by_user: The created_by_user of this OrmHubModelTaskEdges.  # noqa: E501
        :type created_by_user: OrmUser
        """

        self._created_by_user = created_by_user

    @property
    def histories(self):
        """Gets the histories of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The histories of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: list[OrmHubModelTaskHistory]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this OrmHubModelTaskEdges.


        :param histories: The histories of this OrmHubModelTaskEdges.  # noqa: E501
        :type histories: list[OrmHubModelTaskHistory]
        """

        self._histories = histories

    @property
    def hub_tags(self):
        """Gets the hub_tags of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The hub_tags of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: list[OrmHubTag]
        """
        return self._hub_tags

    @hub_tags.setter
    def hub_tags(self, hub_tags):
        """Sets the hub_tags of this OrmHubModelTaskEdges.


        :param hub_tags: The hub_tags of this OrmHubModelTaskEdges.  # noqa: E501
        :type hub_tags: list[OrmHubTag]
        """

        self._hub_tags = hub_tags

    @property
    def organization_hub_model_tasks(self):
        """Gets the organization_hub_model_tasks of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The organization_hub_model_tasks of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: list[OrmOrganizationHubModelTask]
        """
        return self._organization_hub_model_tasks

    @organization_hub_model_tasks.setter
    def organization_hub_model_tasks(self, organization_hub_model_tasks):
        """Sets the organization_hub_model_tasks of this OrmHubModelTaskEdges.


        :param organization_hub_model_tasks: The organization_hub_model_tasks of this OrmHubModelTaskEdges.  # noqa: E501
        :type organization_hub_model_tasks: list[OrmOrganizationHubModelTask]
        """

        self._organization_hub_model_tasks = organization_hub_model_tasks

    @property
    def owner_organization(self):
        """Gets the owner_organization of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The owner_organization of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._owner_organization

    @owner_organization.setter
    def owner_organization(self, owner_organization):
        """Sets the owner_organization of this OrmHubModelTaskEdges.


        :param owner_organization: The owner_organization of this OrmHubModelTaskEdges.  # noqa: E501
        :type owner_organization: OrmOrganization
        """

        self._owner_organization = owner_organization

    @property
    def pipeline_spec(self):
        """Gets the pipeline_spec of this OrmHubModelTaskEdges.  # noqa: E501


        :return: The pipeline_spec of this OrmHubModelTaskEdges.  # noqa: E501
        :rtype: OrmPipelineSpec
        """
        return self._pipeline_spec

    @pipeline_spec.setter
    def pipeline_spec(self, pipeline_spec):
        """Sets the pipeline_spec of this OrmHubModelTaskEdges.


        :param pipeline_spec: The pipeline_spec of this OrmHubModelTaskEdges.  # noqa: E501
        :type pipeline_spec: OrmPipelineSpec
        """

        self._pipeline_spec = pipeline_spec

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmHubModelTaskEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmHubModelTaskEdges):
            return True

        return self.to_dict() != other.to_dict()
