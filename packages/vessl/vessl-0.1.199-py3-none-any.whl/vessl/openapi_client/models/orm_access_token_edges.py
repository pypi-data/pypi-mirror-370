# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmAccessTokenEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment': 'OrmExperiment',
        'model_service': 'OrmModelService',
        'model_service_revision': 'OrmModelServiceRevision',
        'pipeline_step_execution': 'OrmPipelineStepExecution',
        'run_execution': 'OrmRunExecution',
        'user': 'OrmUser',
        'workspace': 'OrmWorkspace'
    }

    attribute_map = {
        'experiment': 'experiment',
        'model_service': 'model_service',
        'model_service_revision': 'model_service_revision',
        'pipeline_step_execution': 'pipeline_step_execution',
        'run_execution': 'run_execution',
        'user': 'user',
        'workspace': 'workspace'
    }

    def __init__(self, experiment=None, model_service=None, model_service_revision=None, pipeline_step_execution=None, run_execution=None, user=None, workspace=None, local_vars_configuration=None):  # noqa: E501
        """OrmAccessTokenEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._experiment = None
        self._model_service = None
        self._model_service_revision = None
        self._pipeline_step_execution = None
        self._run_execution = None
        self._user = None
        self._workspace = None
        self.discriminator = None

        if experiment is not None:
            self.experiment = experiment
        if model_service is not None:
            self.model_service = model_service
        if model_service_revision is not None:
            self.model_service_revision = model_service_revision
        if pipeline_step_execution is not None:
            self.pipeline_step_execution = pipeline_step_execution
        if run_execution is not None:
            self.run_execution = run_execution
        if user is not None:
            self.user = user
        if workspace is not None:
            self.workspace = workspace

    @property
    def experiment(self):
        """Gets the experiment of this OrmAccessTokenEdges.  # noqa: E501


        :return: The experiment of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmExperiment
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this OrmAccessTokenEdges.


        :param experiment: The experiment of this OrmAccessTokenEdges.  # noqa: E501
        :type experiment: OrmExperiment
        """

        self._experiment = experiment

    @property
    def model_service(self):
        """Gets the model_service of this OrmAccessTokenEdges.  # noqa: E501


        :return: The model_service of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmModelService
        """
        return self._model_service

    @model_service.setter
    def model_service(self, model_service):
        """Sets the model_service of this OrmAccessTokenEdges.


        :param model_service: The model_service of this OrmAccessTokenEdges.  # noqa: E501
        :type model_service: OrmModelService
        """

        self._model_service = model_service

    @property
    def model_service_revision(self):
        """Gets the model_service_revision of this OrmAccessTokenEdges.  # noqa: E501


        :return: The model_service_revision of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmModelServiceRevision
        """
        return self._model_service_revision

    @model_service_revision.setter
    def model_service_revision(self, model_service_revision):
        """Sets the model_service_revision of this OrmAccessTokenEdges.


        :param model_service_revision: The model_service_revision of this OrmAccessTokenEdges.  # noqa: E501
        :type model_service_revision: OrmModelServiceRevision
        """

        self._model_service_revision = model_service_revision

    @property
    def pipeline_step_execution(self):
        """Gets the pipeline_step_execution of this OrmAccessTokenEdges.  # noqa: E501


        :return: The pipeline_step_execution of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmPipelineStepExecution
        """
        return self._pipeline_step_execution

    @pipeline_step_execution.setter
    def pipeline_step_execution(self, pipeline_step_execution):
        """Sets the pipeline_step_execution of this OrmAccessTokenEdges.


        :param pipeline_step_execution: The pipeline_step_execution of this OrmAccessTokenEdges.  # noqa: E501
        :type pipeline_step_execution: OrmPipelineStepExecution
        """

        self._pipeline_step_execution = pipeline_step_execution

    @property
    def run_execution(self):
        """Gets the run_execution of this OrmAccessTokenEdges.  # noqa: E501


        :return: The run_execution of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmRunExecution
        """
        return self._run_execution

    @run_execution.setter
    def run_execution(self, run_execution):
        """Sets the run_execution of this OrmAccessTokenEdges.


        :param run_execution: The run_execution of this OrmAccessTokenEdges.  # noqa: E501
        :type run_execution: OrmRunExecution
        """

        self._run_execution = run_execution

    @property
    def user(self):
        """Gets the user of this OrmAccessTokenEdges.  # noqa: E501


        :return: The user of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OrmAccessTokenEdges.


        :param user: The user of this OrmAccessTokenEdges.  # noqa: E501
        :type user: OrmUser
        """

        self._user = user

    @property
    def workspace(self):
        """Gets the workspace of this OrmAccessTokenEdges.  # noqa: E501


        :return: The workspace of this OrmAccessTokenEdges.  # noqa: E501
        :rtype: OrmWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this OrmAccessTokenEdges.


        :param workspace: The workspace of this OrmAccessTokenEdges.  # noqa: E501
        :type workspace: OrmWorkspace
        """

        self._workspace = workspace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmAccessTokenEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmAccessTokenEdges):
            return True

        return self.to_dict() != other.to_dict()
