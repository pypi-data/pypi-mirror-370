# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmHubModelTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_id': 'int',
        'created_by': 'int',
        'created_dt': 'datetime',
        'description': 'str',
        'edges': 'OrmHubModelTaskEdges',
        'hide': 'bool',
        'id': 'int',
        'key': 'str',
        'order_number': 'int',
        'owner_organization_id': 'int',
        'public_url': 'str',
        'readme': 'str',
        'run_count': 'int',
        'scope': 'str',
        'status': 'str',
        'thumbnail_url': 'str',
        'title': 'str',
        'type': 'str',
        'updated_dt': 'datetime',
        'yaml': 'str'
    }

    attribute_map = {
        'category_id': 'category_id',
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'description': 'description',
        'edges': 'edges',
        'hide': 'hide',
        'id': 'id',
        'key': 'key',
        'order_number': 'order_number',
        'owner_organization_id': 'owner_organization_id',
        'public_url': 'public_url',
        'readme': 'readme',
        'run_count': 'run_count',
        'scope': 'scope',
        'status': 'status',
        'thumbnail_url': 'thumbnail_url',
        'title': 'title',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'yaml': 'yaml'
    }

    def __init__(self, category_id=None, created_by=None, created_dt=None, description=None, edges=None, hide=None, id=None, key=None, order_number=None, owner_organization_id=None, public_url=None, readme=None, run_count=None, scope=None, status=None, thumbnail_url=None, title=None, type=None, updated_dt=None, yaml=None, local_vars_configuration=None):  # noqa: E501
        """OrmHubModelTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category_id = None
        self._created_by = None
        self._created_dt = None
        self._description = None
        self._edges = None
        self._hide = None
        self._id = None
        self._key = None
        self._order_number = None
        self._owner_organization_id = None
        self._public_url = None
        self._readme = None
        self._run_count = None
        self._scope = None
        self._status = None
        self._thumbnail_url = None
        self._title = None
        self._type = None
        self._updated_dt = None
        self._yaml = None
        self.discriminator = None

        self.category_id = category_id
        if created_by is not None:
            self.created_by = created_by
        if created_dt is not None:
            self.created_dt = created_dt
        if description is not None:
            self.description = description
        if edges is not None:
            self.edges = edges
        if hide is not None:
            self.hide = hide
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if order_number is not None:
            self.order_number = order_number
        if owner_organization_id is not None:
            self.owner_organization_id = owner_organization_id
        if public_url is not None:
            self.public_url = public_url
        if readme is not None:
            self.readme = readme
        if run_count is not None:
            self.run_count = run_count
        if scope is not None:
            self.scope = scope
        if status is not None:
            self.status = status
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if yaml is not None:
            self.yaml = yaml

    @property
    def category_id(self):
        """Gets the category_id of this OrmHubModelTask.  # noqa: E501


        :return: The category_id of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this OrmHubModelTask.


        :param category_id: The category_id of this OrmHubModelTask.  # noqa: E501
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def created_by(self):
        """Gets the created_by of this OrmHubModelTask.  # noqa: E501


        :return: The created_by of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmHubModelTask.


        :param created_by: The created_by of this OrmHubModelTask.  # noqa: E501
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmHubModelTask.  # noqa: E501


        :return: The created_dt of this OrmHubModelTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmHubModelTask.


        :param created_dt: The created_dt of this OrmHubModelTask.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this OrmHubModelTask.  # noqa: E501


        :return: The description of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrmHubModelTask.


        :param description: The description of this OrmHubModelTask.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def edges(self):
        """Gets the edges of this OrmHubModelTask.  # noqa: E501


        :return: The edges of this OrmHubModelTask.  # noqa: E501
        :rtype: OrmHubModelTaskEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmHubModelTask.


        :param edges: The edges of this OrmHubModelTask.  # noqa: E501
        :type edges: OrmHubModelTaskEdges
        """

        self._edges = edges

    @property
    def hide(self):
        """Gets the hide of this OrmHubModelTask.  # noqa: E501


        :return: The hide of this OrmHubModelTask.  # noqa: E501
        :rtype: bool
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this OrmHubModelTask.


        :param hide: The hide of this OrmHubModelTask.  # noqa: E501
        :type hide: bool
        """

        self._hide = hide

    @property
    def id(self):
        """Gets the id of this OrmHubModelTask.  # noqa: E501


        :return: The id of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmHubModelTask.


        :param id: The id of this OrmHubModelTask.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this OrmHubModelTask.  # noqa: E501


        :return: The key of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this OrmHubModelTask.


        :param key: The key of this OrmHubModelTask.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def order_number(self):
        """Gets the order_number of this OrmHubModelTask.  # noqa: E501


        :return: The order_number of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this OrmHubModelTask.


        :param order_number: The order_number of this OrmHubModelTask.  # noqa: E501
        :type order_number: int
        """

        self._order_number = order_number

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this OrmHubModelTask.  # noqa: E501


        :return: The owner_organization_id of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this OrmHubModelTask.


        :param owner_organization_id: The owner_organization_id of this OrmHubModelTask.  # noqa: E501
        :type owner_organization_id: int
        """

        self._owner_organization_id = owner_organization_id

    @property
    def public_url(self):
        """Gets the public_url of this OrmHubModelTask.  # noqa: E501


        :return: The public_url of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this OrmHubModelTask.


        :param public_url: The public_url of this OrmHubModelTask.  # noqa: E501
        :type public_url: str
        """

        self._public_url = public_url

    @property
    def readme(self):
        """Gets the readme of this OrmHubModelTask.  # noqa: E501


        :return: The readme of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this OrmHubModelTask.


        :param readme: The readme of this OrmHubModelTask.  # noqa: E501
        :type readme: str
        """

        self._readme = readme

    @property
    def run_count(self):
        """Gets the run_count of this OrmHubModelTask.  # noqa: E501


        :return: The run_count of this OrmHubModelTask.  # noqa: E501
        :rtype: int
        """
        return self._run_count

    @run_count.setter
    def run_count(self, run_count):
        """Sets the run_count of this OrmHubModelTask.


        :param run_count: The run_count of this OrmHubModelTask.  # noqa: E501
        :type run_count: int
        """

        self._run_count = run_count

    @property
    def scope(self):
        """Gets the scope of this OrmHubModelTask.  # noqa: E501


        :return: The scope of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrmHubModelTask.


        :param scope: The scope of this OrmHubModelTask.  # noqa: E501
        :type scope: str
        """

        self._scope = scope

    @property
    def status(self):
        """Gets the status of this OrmHubModelTask.  # noqa: E501


        :return: The status of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmHubModelTask.


        :param status: The status of this OrmHubModelTask.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this OrmHubModelTask.  # noqa: E501


        :return: The thumbnail_url of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this OrmHubModelTask.


        :param thumbnail_url: The thumbnail_url of this OrmHubModelTask.  # noqa: E501
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this OrmHubModelTask.  # noqa: E501


        :return: The title of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrmHubModelTask.


        :param title: The title of this OrmHubModelTask.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this OrmHubModelTask.  # noqa: E501


        :return: The type of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrmHubModelTask.


        :param type: The type of this OrmHubModelTask.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmHubModelTask.  # noqa: E501


        :return: The updated_dt of this OrmHubModelTask.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmHubModelTask.


        :param updated_dt: The updated_dt of this OrmHubModelTask.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def yaml(self):
        """Gets the yaml of this OrmHubModelTask.  # noqa: E501


        :return: The yaml of this OrmHubModelTask.  # noqa: E501
        :rtype: str
        """
        return self._yaml

    @yaml.setter
    def yaml(self, yaml):
        """Sets the yaml of this OrmHubModelTask.


        :param yaml: The yaml of this OrmHubModelTask.  # noqa: E501
        :type yaml: str
        """

        self._yaml = yaml

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmHubModelTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmHubModelTask):
            return True

        return self.to_dict() != other.to_dict()
