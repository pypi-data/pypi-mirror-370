# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmSweepEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'OrmUser',
        'experiments': 'list[OrmExperiment]',
        'histories': 'list[OrmSweepHistory]',
        'kernel_cluster': 'OrmKernelCluster',
        'kernel_cluster_node': 'OrmKernelClusterNode',
        'kernel_image': 'OrmKernelImage',
        'kernel_resource_spec': 'OrmKernelResourceSpec',
        'organization': 'OrmOrganization',
        'project': 'OrmProject'
    }

    attribute_map = {
        'created_by': 'created_by',
        'experiments': 'experiments',
        'histories': 'histories',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_image': 'kernel_image',
        'kernel_resource_spec': 'kernel_resource_spec',
        'organization': 'organization',
        'project': 'project'
    }

    def __init__(self, created_by=None, experiments=None, histories=None, kernel_cluster=None, kernel_cluster_node=None, kernel_image=None, kernel_resource_spec=None, organization=None, project=None, local_vars_configuration=None):  # noqa: E501
        """OrmSweepEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._experiments = None
        self._histories = None
        self._kernel_cluster = None
        self._kernel_cluster_node = None
        self._kernel_image = None
        self._kernel_resource_spec = None
        self._organization = None
        self._project = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if experiments is not None:
            self.experiments = experiments
        if histories is not None:
            self.histories = histories
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        if kernel_image is not None:
            self.kernel_image = kernel_image
        if kernel_resource_spec is not None:
            self.kernel_resource_spec = kernel_resource_spec
        if organization is not None:
            self.organization = organization
        if project is not None:
            self.project = project

    @property
    def created_by(self):
        """Gets the created_by of this OrmSweepEdges.  # noqa: E501


        :return: The created_by of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmSweepEdges.


        :param created_by: The created_by of this OrmSweepEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def experiments(self):
        """Gets the experiments of this OrmSweepEdges.  # noqa: E501


        :return: The experiments of this OrmSweepEdges.  # noqa: E501
        :rtype: list[OrmExperiment]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this OrmSweepEdges.


        :param experiments: The experiments of this OrmSweepEdges.  # noqa: E501
        :type experiments: list[OrmExperiment]
        """

        self._experiments = experiments

    @property
    def histories(self):
        """Gets the histories of this OrmSweepEdges.  # noqa: E501


        :return: The histories of this OrmSweepEdges.  # noqa: E501
        :rtype: list[OrmSweepHistory]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this OrmSweepEdges.


        :param histories: The histories of this OrmSweepEdges.  # noqa: E501
        :type histories: list[OrmSweepHistory]
        """

        self._histories = histories

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this OrmSweepEdges.  # noqa: E501


        :return: The kernel_cluster of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this OrmSweepEdges.


        :param kernel_cluster: The kernel_cluster of this OrmSweepEdges.  # noqa: E501
        :type kernel_cluster: OrmKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this OrmSweepEdges.  # noqa: E501


        :return: The kernel_cluster_node of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this OrmSweepEdges.


        :param kernel_cluster_node: The kernel_cluster_node of this OrmSweepEdges.  # noqa: E501
        :type kernel_cluster_node: OrmKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_image(self):
        """Gets the kernel_image of this OrmSweepEdges.  # noqa: E501


        :return: The kernel_image of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this OrmSweepEdges.


        :param kernel_image: The kernel_image of this OrmSweepEdges.  # noqa: E501
        :type kernel_image: OrmKernelImage
        """

        self._kernel_image = kernel_image

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this OrmSweepEdges.  # noqa: E501


        :return: The kernel_resource_spec of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this OrmSweepEdges.


        :param kernel_resource_spec: The kernel_resource_spec of this OrmSweepEdges.  # noqa: E501
        :type kernel_resource_spec: OrmKernelResourceSpec
        """

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def organization(self):
        """Gets the organization of this OrmSweepEdges.  # noqa: E501


        :return: The organization of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmSweepEdges.


        :param organization: The organization of this OrmSweepEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def project(self):
        """Gets the project of this OrmSweepEdges.  # noqa: E501


        :return: The project of this OrmSweepEdges.  # noqa: E501
        :rtype: OrmProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OrmSweepEdges.


        :param project: The project of this OrmSweepEdges.  # noqa: E501
        :type project: OrmProject
        """

        self._project = project

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmSweepEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmSweepEdges):
            return True

        return self.to_dict() != other.to_dict()
