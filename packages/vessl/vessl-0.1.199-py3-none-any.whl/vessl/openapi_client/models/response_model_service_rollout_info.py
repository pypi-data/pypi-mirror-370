# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseModelServiceRolloutInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'current_step': 'int',
        'desired_endpoint': 'str',
        'desired_traffic_split': 'list[OrmModelServiceGatewayTrafficSplitEntry]',
        'message': 'str',
        'model_service_name': 'str',
        'number': 'int',
        'related_revisions': 'list[ResponseModelServiceRolloutRelatedRevisionInfo]',
        'rollout_spec': 'OrmModelServiceRolloutSpec',
        'status': 'str',
        'step_statuses': 'dict[str, OrmModelServiceRolloutStepStatus]'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'current_step': 'current_step',
        'desired_endpoint': 'desired_endpoint',
        'desired_traffic_split': 'desired_traffic_split',
        'message': 'message',
        'model_service_name': 'model_service_name',
        'number': 'number',
        'related_revisions': 'related_revisions',
        'rollout_spec': 'rollout_spec',
        'status': 'status',
        'step_statuses': 'step_statuses'
    }

    def __init__(self, created_by=None, created_dt=None, current_step=None, desired_endpoint=None, desired_traffic_split=None, message=None, model_service_name=None, number=None, related_revisions=None, rollout_spec=None, status=None, step_statuses=None, local_vars_configuration=None):  # noqa: E501
        """ResponseModelServiceRolloutInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_dt = None
        self._current_step = None
        self._desired_endpoint = None
        self._desired_traffic_split = None
        self._message = None
        self._model_service_name = None
        self._number = None
        self._related_revisions = None
        self._rollout_spec = None
        self._status = None
        self._step_statuses = None
        self.discriminator = None

        self.created_by = created_by
        self.created_dt = created_dt
        self.current_step = current_step
        if desired_endpoint is not None:
            self.desired_endpoint = desired_endpoint
        if desired_traffic_split is not None:
            self.desired_traffic_split = desired_traffic_split
        self.message = message
        self.model_service_name = model_service_name
        self.number = number
        if related_revisions is not None:
            self.related_revisions = related_revisions
        self.rollout_spec = rollout_spec
        self.status = status
        self.step_statuses = step_statuses

    @property
    def created_by(self):
        """Gets the created_by of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The created_by of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseModelServiceRolloutInfo.


        :param created_by: The created_by of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The created_dt of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseModelServiceRolloutInfo.


        :param created_dt: The created_dt of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def current_step(self):
        """Gets the current_step of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The current_step of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: int
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step):
        """Sets the current_step of this ResponseModelServiceRolloutInfo.


        :param current_step: The current_step of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type current_step: int
        """
        if self.local_vars_configuration.client_side_validation and current_step is None:  # noqa: E501
            raise ValueError("Invalid value for `current_step`, must not be `None`")  # noqa: E501

        self._current_step = current_step

    @property
    def desired_endpoint(self):
        """Gets the desired_endpoint of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The desired_endpoint of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: str
        """
        return self._desired_endpoint

    @desired_endpoint.setter
    def desired_endpoint(self, desired_endpoint):
        """Sets the desired_endpoint of this ResponseModelServiceRolloutInfo.


        :param desired_endpoint: The desired_endpoint of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type desired_endpoint: str
        """

        self._desired_endpoint = desired_endpoint

    @property
    def desired_traffic_split(self):
        """Gets the desired_traffic_split of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The desired_traffic_split of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: list[OrmModelServiceGatewayTrafficSplitEntry]
        """
        return self._desired_traffic_split

    @desired_traffic_split.setter
    def desired_traffic_split(self, desired_traffic_split):
        """Sets the desired_traffic_split of this ResponseModelServiceRolloutInfo.


        :param desired_traffic_split: The desired_traffic_split of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type desired_traffic_split: list[OrmModelServiceGatewayTrafficSplitEntry]
        """

        self._desired_traffic_split = desired_traffic_split

    @property
    def message(self):
        """Gets the message of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The message of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseModelServiceRolloutInfo.


        :param message: The message of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def model_service_name(self):
        """Gets the model_service_name of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The model_service_name of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_service_name

    @model_service_name.setter
    def model_service_name(self, model_service_name):
        """Sets the model_service_name of this ResponseModelServiceRolloutInfo.


        :param model_service_name: The model_service_name of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type model_service_name: str
        """
        if self.local_vars_configuration.client_side_validation and model_service_name is None:  # noqa: E501
            raise ValueError("Invalid value for `model_service_name`, must not be `None`")  # noqa: E501

        self._model_service_name = model_service_name

    @property
    def number(self):
        """Gets the number of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The number of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseModelServiceRolloutInfo.


        :param number: The number of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def related_revisions(self):
        """Gets the related_revisions of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The related_revisions of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: list[ResponseModelServiceRolloutRelatedRevisionInfo]
        """
        return self._related_revisions

    @related_revisions.setter
    def related_revisions(self, related_revisions):
        """Sets the related_revisions of this ResponseModelServiceRolloutInfo.


        :param related_revisions: The related_revisions of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type related_revisions: list[ResponseModelServiceRolloutRelatedRevisionInfo]
        """

        self._related_revisions = related_revisions

    @property
    def rollout_spec(self):
        """Gets the rollout_spec of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The rollout_spec of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: OrmModelServiceRolloutSpec
        """
        return self._rollout_spec

    @rollout_spec.setter
    def rollout_spec(self, rollout_spec):
        """Sets the rollout_spec of this ResponseModelServiceRolloutInfo.


        :param rollout_spec: The rollout_spec of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type rollout_spec: OrmModelServiceRolloutSpec
        """
        if self.local_vars_configuration.client_side_validation and rollout_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `rollout_spec`, must not be `None`")  # noqa: E501

        self._rollout_spec = rollout_spec

    @property
    def status(self):
        """Gets the status of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The status of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseModelServiceRolloutInfo.


        :param status: The status of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def step_statuses(self):
        """Gets the step_statuses of this ResponseModelServiceRolloutInfo.  # noqa: E501


        :return: The step_statuses of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :rtype: dict[str, OrmModelServiceRolloutStepStatus]
        """
        return self._step_statuses

    @step_statuses.setter
    def step_statuses(self, step_statuses):
        """Sets the step_statuses of this ResponseModelServiceRolloutInfo.


        :param step_statuses: The step_statuses of this ResponseModelServiceRolloutInfo.  # noqa: E501
        :type step_statuses: dict[str, OrmModelServiceRolloutStepStatus]
        """
        if self.local_vars_configuration.client_side_validation and step_statuses is None:  # noqa: E501
            raise ValueError("Invalid value for `step_statuses`, must not be `None`")  # noqa: E501

        self._step_statuses = step_statuses

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseModelServiceRolloutInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseModelServiceRolloutInfo):
            return True

        return self.to_dict() != other.to_dict()
