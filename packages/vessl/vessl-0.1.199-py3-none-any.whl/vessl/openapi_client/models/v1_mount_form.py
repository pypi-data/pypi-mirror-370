# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1MountForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_storage': 'object',
        'cifs': 'object',
        'container_storage': 'object',
        'dataset': 'V1DatasetRefForm',
        'gcs_fuse': 'V1GCSFuseRefForm',
        'google_disk': 'V1GoogleDiskRefForm',
        'hostpath': 'V1HostPathRefForm',
        'nfs': 'V1NFSRefForm',
        'options': 'V1MountOptions',
        'ref_type': 'str',
        'volume': 'V1VolumeV2Form'
    }

    attribute_map = {
        'block_storage': 'block_storage',
        'cifs': 'cifs',
        'container_storage': 'container_storage',
        'dataset': 'dataset',
        'gcs_fuse': 'gcs_fuse',
        'google_disk': 'google_disk',
        'hostpath': 'hostpath',
        'nfs': 'nfs',
        'options': 'options',
        'ref_type': 'ref_type',
        'volume': 'volume'
    }

    def __init__(self, block_storage=None, cifs=None, container_storage=None, dataset=None, gcs_fuse=None, google_disk=None, hostpath=None, nfs=None, options=None, ref_type=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """V1MountForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._block_storage = None
        self._cifs = None
        self._container_storage = None
        self._dataset = None
        self._gcs_fuse = None
        self._google_disk = None
        self._hostpath = None
        self._nfs = None
        self._options = None
        self._ref_type = None
        self._volume = None
        self.discriminator = None

        if block_storage is not None:
            self.block_storage = block_storage
        if cifs is not None:
            self.cifs = cifs
        if container_storage is not None:
            self.container_storage = container_storage
        if dataset is not None:
            self.dataset = dataset
        if gcs_fuse is not None:
            self.gcs_fuse = gcs_fuse
        if google_disk is not None:
            self.google_disk = google_disk
        if hostpath is not None:
            self.hostpath = hostpath
        if nfs is not None:
            self.nfs = nfs
        if options is not None:
            self.options = options
        if ref_type is not None:
            self.ref_type = ref_type
        if volume is not None:
            self.volume = volume

    @property
    def block_storage(self):
        """Gets the block_storage of this V1MountForm.  # noqa: E501


        :return: The block_storage of this V1MountForm.  # noqa: E501
        :rtype: object
        """
        return self._block_storage

    @block_storage.setter
    def block_storage(self, block_storage):
        """Sets the block_storage of this V1MountForm.


        :param block_storage: The block_storage of this V1MountForm.  # noqa: E501
        :type block_storage: object
        """

        self._block_storage = block_storage

    @property
    def cifs(self):
        """Gets the cifs of this V1MountForm.  # noqa: E501


        :return: The cifs of this V1MountForm.  # noqa: E501
        :rtype: object
        """
        return self._cifs

    @cifs.setter
    def cifs(self, cifs):
        """Sets the cifs of this V1MountForm.


        :param cifs: The cifs of this V1MountForm.  # noqa: E501
        :type cifs: object
        """

        self._cifs = cifs

    @property
    def container_storage(self):
        """Gets the container_storage of this V1MountForm.  # noqa: E501


        :return: The container_storage of this V1MountForm.  # noqa: E501
        :rtype: object
        """
        return self._container_storage

    @container_storage.setter
    def container_storage(self, container_storage):
        """Sets the container_storage of this V1MountForm.


        :param container_storage: The container_storage of this V1MountForm.  # noqa: E501
        :type container_storage: object
        """

        self._container_storage = container_storage

    @property
    def dataset(self):
        """Gets the dataset of this V1MountForm.  # noqa: E501


        :return: The dataset of this V1MountForm.  # noqa: E501
        :rtype: V1DatasetRefForm
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1MountForm.


        :param dataset: The dataset of this V1MountForm.  # noqa: E501
        :type dataset: V1DatasetRefForm
        """

        self._dataset = dataset

    @property
    def gcs_fuse(self):
        """Gets the gcs_fuse of this V1MountForm.  # noqa: E501


        :return: The gcs_fuse of this V1MountForm.  # noqa: E501
        :rtype: V1GCSFuseRefForm
        """
        return self._gcs_fuse

    @gcs_fuse.setter
    def gcs_fuse(self, gcs_fuse):
        """Sets the gcs_fuse of this V1MountForm.


        :param gcs_fuse: The gcs_fuse of this V1MountForm.  # noqa: E501
        :type gcs_fuse: V1GCSFuseRefForm
        """

        self._gcs_fuse = gcs_fuse

    @property
    def google_disk(self):
        """Gets the google_disk of this V1MountForm.  # noqa: E501


        :return: The google_disk of this V1MountForm.  # noqa: E501
        :rtype: V1GoogleDiskRefForm
        """
        return self._google_disk

    @google_disk.setter
    def google_disk(self, google_disk):
        """Sets the google_disk of this V1MountForm.


        :param google_disk: The google_disk of this V1MountForm.  # noqa: E501
        :type google_disk: V1GoogleDiskRefForm
        """

        self._google_disk = google_disk

    @property
    def hostpath(self):
        """Gets the hostpath of this V1MountForm.  # noqa: E501


        :return: The hostpath of this V1MountForm.  # noqa: E501
        :rtype: V1HostPathRefForm
        """
        return self._hostpath

    @hostpath.setter
    def hostpath(self, hostpath):
        """Sets the hostpath of this V1MountForm.


        :param hostpath: The hostpath of this V1MountForm.  # noqa: E501
        :type hostpath: V1HostPathRefForm
        """

        self._hostpath = hostpath

    @property
    def nfs(self):
        """Gets the nfs of this V1MountForm.  # noqa: E501


        :return: The nfs of this V1MountForm.  # noqa: E501
        :rtype: V1NFSRefForm
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this V1MountForm.


        :param nfs: The nfs of this V1MountForm.  # noqa: E501
        :type nfs: V1NFSRefForm
        """

        self._nfs = nfs

    @property
    def options(self):
        """Gets the options of this V1MountForm.  # noqa: E501


        :return: The options of this V1MountForm.  # noqa: E501
        :rtype: V1MountOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this V1MountForm.


        :param options: The options of this V1MountForm.  # noqa: E501
        :type options: V1MountOptions
        """

        self._options = options

    @property
    def ref_type(self):
        """Gets the ref_type of this V1MountForm.  # noqa: E501


        :return: The ref_type of this V1MountForm.  # noqa: E501
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this V1MountForm.


        :param ref_type: The ref_type of this V1MountForm.  # noqa: E501
        :type ref_type: str
        """
        allowed_values = ["dataset", "hostpath", "nfs", "cifs", "google_disk", "container_storage", "gcs_fuse", "volume-v2", "block-storage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ref_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ref_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ref_type, allowed_values)
            )

        self._ref_type = ref_type

    @property
    def volume(self):
        """Gets the volume of this V1MountForm.  # noqa: E501


        :return: The volume of this V1MountForm.  # noqa: E501
        :rtype: V1VolumeV2Form
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this V1MountForm.


        :param volume: The volume of this V1MountForm.  # noqa: E501
        :type volume: V1VolumeV2Form
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MountForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1MountForm):
            return True

        return self.to_dict() != other.to_dict()
