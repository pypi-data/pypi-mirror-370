# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class SamlIndexedEndpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'binding': 'str',
        'index': 'int',
        'is_default': 'bool',
        'location': 'str',
        'response_location': 'str'
    }

    attribute_map = {
        'binding': 'Binding',
        'index': 'Index',
        'is_default': 'IsDefault',
        'location': 'Location',
        'response_location': 'ResponseLocation'
    }

    def __init__(self, binding=None, index=None, is_default=None, location=None, response_location=None, local_vars_configuration=None):  # noqa: E501
        """SamlIndexedEndpoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._binding = None
        self._index = None
        self._is_default = None
        self._location = None
        self._response_location = None
        self.discriminator = None

        if binding is not None:
            self.binding = binding
        if index is not None:
            self.index = index
        self.is_default = is_default
        if location is not None:
            self.location = location
        self.response_location = response_location

    @property
    def binding(self):
        """Gets the binding of this SamlIndexedEndpoint.  # noqa: E501


        :return: The binding of this SamlIndexedEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this SamlIndexedEndpoint.


        :param binding: The binding of this SamlIndexedEndpoint.  # noqa: E501
        :type binding: str
        """

        self._binding = binding

    @property
    def index(self):
        """Gets the index of this SamlIndexedEndpoint.  # noqa: E501


        :return: The index of this SamlIndexedEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SamlIndexedEndpoint.


        :param index: The index of this SamlIndexedEndpoint.  # noqa: E501
        :type index: int
        """

        self._index = index

    @property
    def is_default(self):
        """Gets the is_default of this SamlIndexedEndpoint.  # noqa: E501


        :return: The is_default of this SamlIndexedEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SamlIndexedEndpoint.


        :param is_default: The is_default of this SamlIndexedEndpoint.  # noqa: E501
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def location(self):
        """Gets the location of this SamlIndexedEndpoint.  # noqa: E501


        :return: The location of this SamlIndexedEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SamlIndexedEndpoint.


        :param location: The location of this SamlIndexedEndpoint.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def response_location(self):
        """Gets the response_location of this SamlIndexedEndpoint.  # noqa: E501


        :return: The response_location of this SamlIndexedEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._response_location

    @response_location.setter
    def response_location(self, response_location):
        """Sets the response_location of this SamlIndexedEndpoint.


        :param response_location: The response_location of this SamlIndexedEndpoint.  # noqa: E501
        :type response_location: str
        """

        self._response_location = response_location

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlIndexedEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlIndexedEndpoint):
            return True

        return self.to_dict() != other.to_dict()
