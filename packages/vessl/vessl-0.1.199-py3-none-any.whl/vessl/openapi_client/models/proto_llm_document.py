# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ProtoLLMDocument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chunking_method_params': 'dict[str, object]',
        'chunking_type': 'str',
        'created_by': 'ProtoUser',
        'created_by_id': 'int',
        'created_dt': 'float',
        'download_url': 'str',
        'extension': 'str',
        'filename': 'str',
        'id': 'int',
        'parser_type': 'str',
        'size': 'str',
        'updated_dt': 'float',
        'upload_successful': 'bool'
    }

    attribute_map = {
        'chunking_method_params': 'chunking_method_params',
        'chunking_type': 'chunking_type',
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'created_dt': 'created_dt',
        'download_url': 'download_url',
        'extension': 'extension',
        'filename': 'filename',
        'id': 'id',
        'parser_type': 'parser_type',
        'size': 'size',
        'updated_dt': 'updated_dt',
        'upload_successful': 'upload_successful'
    }

    def __init__(self, chunking_method_params=None, chunking_type=None, created_by=None, created_by_id=None, created_dt=None, download_url=None, extension=None, filename=None, id=None, parser_type=None, size=None, updated_dt=None, upload_successful=None, local_vars_configuration=None):  # noqa: E501
        """ProtoLLMDocument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._chunking_method_params = None
        self._chunking_type = None
        self._created_by = None
        self._created_by_id = None
        self._created_dt = None
        self._download_url = None
        self._extension = None
        self._filename = None
        self._id = None
        self._parser_type = None
        self._size = None
        self._updated_dt = None
        self._upload_successful = None
        self.discriminator = None

        if chunking_method_params is not None:
            self.chunking_method_params = chunking_method_params
        if chunking_type is not None:
            self.chunking_type = chunking_type
        if created_by is not None:
            self.created_by = created_by
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_dt is not None:
            self.created_dt = created_dt
        self.download_url = download_url
        self.extension = extension
        self.filename = filename
        if id is not None:
            self.id = id
        if parser_type is not None:
            self.parser_type = parser_type
        self.size = size
        if updated_dt is not None:
            self.updated_dt = updated_dt
        self.upload_successful = upload_successful

    @property
    def chunking_method_params(self):
        """Gets the chunking_method_params of this ProtoLLMDocument.  # noqa: E501


        :return: The chunking_method_params of this ProtoLLMDocument.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._chunking_method_params

    @chunking_method_params.setter
    def chunking_method_params(self, chunking_method_params):
        """Sets the chunking_method_params of this ProtoLLMDocument.


        :param chunking_method_params: The chunking_method_params of this ProtoLLMDocument.  # noqa: E501
        :type chunking_method_params: dict[str, object]
        """

        self._chunking_method_params = chunking_method_params

    @property
    def chunking_type(self):
        """Gets the chunking_type of this ProtoLLMDocument.  # noqa: E501


        :return: The chunking_type of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._chunking_type

    @chunking_type.setter
    def chunking_type(self, chunking_type):
        """Sets the chunking_type of this ProtoLLMDocument.


        :param chunking_type: The chunking_type of this ProtoLLMDocument.  # noqa: E501
        :type chunking_type: str
        """

        self._chunking_type = chunking_type

    @property
    def created_by(self):
        """Gets the created_by of this ProtoLLMDocument.  # noqa: E501


        :return: The created_by of this ProtoLLMDocument.  # noqa: E501
        :rtype: ProtoUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProtoLLMDocument.


        :param created_by: The created_by of this ProtoLLMDocument.  # noqa: E501
        :type created_by: ProtoUser
        """

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ProtoLLMDocument.  # noqa: E501


        :return: The created_by_id of this ProtoLLMDocument.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ProtoLLMDocument.


        :param created_by_id: The created_by_id of this ProtoLLMDocument.  # noqa: E501
        :type created_by_id: int
        """

        self._created_by_id = created_by_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ProtoLLMDocument.  # noqa: E501


        :return: The created_dt of this ProtoLLMDocument.  # noqa: E501
        :rtype: float
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ProtoLLMDocument.


        :param created_dt: The created_dt of this ProtoLLMDocument.  # noqa: E501
        :type created_dt: float
        """

        self._created_dt = created_dt

    @property
    def download_url(self):
        """Gets the download_url of this ProtoLLMDocument.  # noqa: E501


        :return: The download_url of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ProtoLLMDocument.


        :param download_url: The download_url of this ProtoLLMDocument.  # noqa: E501
        :type download_url: str
        """
        if self.local_vars_configuration.client_side_validation and download_url is None:  # noqa: E501
            raise ValueError("Invalid value for `download_url`, must not be `None`")  # noqa: E501

        self._download_url = download_url

    @property
    def extension(self):
        """Gets the extension of this ProtoLLMDocument.  # noqa: E501


        :return: The extension of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this ProtoLLMDocument.


        :param extension: The extension of this ProtoLLMDocument.  # noqa: E501
        :type extension: str
        """
        if self.local_vars_configuration.client_side_validation and extension is None:  # noqa: E501
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension

    @property
    def filename(self):
        """Gets the filename of this ProtoLLMDocument.  # noqa: E501


        :return: The filename of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ProtoLLMDocument.


        :param filename: The filename of this ProtoLLMDocument.  # noqa: E501
        :type filename: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def id(self):
        """Gets the id of this ProtoLLMDocument.  # noqa: E501


        :return: The id of this ProtoLLMDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtoLLMDocument.


        :param id: The id of this ProtoLLMDocument.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def parser_type(self):
        """Gets the parser_type of this ProtoLLMDocument.  # noqa: E501


        :return: The parser_type of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._parser_type

    @parser_type.setter
    def parser_type(self, parser_type):
        """Sets the parser_type of this ProtoLLMDocument.


        :param parser_type: The parser_type of this ProtoLLMDocument.  # noqa: E501
        :type parser_type: str
        """

        self._parser_type = parser_type

    @property
    def size(self):
        """Gets the size of this ProtoLLMDocument.  # noqa: E501


        :return: The size of this ProtoLLMDocument.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ProtoLLMDocument.


        :param size: The size of this ProtoLLMDocument.  # noqa: E501
        :type size: str
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ProtoLLMDocument.  # noqa: E501


        :return: The updated_dt of this ProtoLLMDocument.  # noqa: E501
        :rtype: float
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ProtoLLMDocument.


        :param updated_dt: The updated_dt of this ProtoLLMDocument.  # noqa: E501
        :type updated_dt: float
        """

        self._updated_dt = updated_dt

    @property
    def upload_successful(self):
        """Gets the upload_successful of this ProtoLLMDocument.  # noqa: E501


        :return: The upload_successful of this ProtoLLMDocument.  # noqa: E501
        :rtype: bool
        """
        return self._upload_successful

    @upload_successful.setter
    def upload_successful(self, upload_successful):
        """Sets the upload_successful of this ProtoLLMDocument.


        :param upload_successful: The upload_successful of this ProtoLLMDocument.  # noqa: E501
        :type upload_successful: bool
        """
        if self.local_vars_configuration.client_side_validation and upload_successful is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_successful`, must not be `None`")  # noqa: E501

        self._upload_successful = upload_successful

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtoLLMDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtoLLMDocument):
            return True

        return self.to_dict() != other.to_dict()
