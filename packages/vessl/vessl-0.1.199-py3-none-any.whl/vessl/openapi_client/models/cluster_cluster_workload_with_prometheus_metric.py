# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ClusterClusterWorkloadWithPrometheusMetric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'experiment': 'ResponseExperimentListResponse',
        'id': 'int',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'metrics': 'dict[str, list[PrometheusquerySample]]',
        'model_service_revision': 'ResponseModelServiceRevision',
        'name': 'str',
        'organization_name': 'str',
        'path': 'str',
        'run_execution': 'ResponseRunExecution',
        'status': 'str',
        'status_last_updated': 'datetime',
        'type': 'str',
        'workspace': 'ResponseWorkspaceList'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'experiment': 'experiment',
        'id': 'id',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_resource_spec': 'kernel_resource_spec',
        'metrics': 'metrics',
        'model_service_revision': 'model_service_revision',
        'name': 'name',
        'organization_name': 'organization_name',
        'path': 'path',
        'run_execution': 'run_execution',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'type': 'type',
        'workspace': 'workspace'
    }

    def __init__(self, created_dt=None, experiment=None, id=None, kernel_cluster_node=None, kernel_resource_spec=None, metrics=None, model_service_revision=None, name=None, organization_name=None, path=None, run_execution=None, status=None, status_last_updated=None, type=None, workspace=None, local_vars_configuration=None):  # noqa: E501
        """ClusterClusterWorkloadWithPrometheusMetric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._experiment = None
        self._id = None
        self._kernel_cluster_node = None
        self._kernel_resource_spec = None
        self._metrics = None
        self._model_service_revision = None
        self._name = None
        self._organization_name = None
        self._path = None
        self._run_execution = None
        self._status = None
        self._status_last_updated = None
        self._type = None
        self._workspace = None
        self.discriminator = None

        self.created_dt = created_dt
        if experiment is not None:
            self.experiment = experiment
        self.id = id
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        if kernel_resource_spec is not None:
            self.kernel_resource_spec = kernel_resource_spec
        if metrics is not None:
            self.metrics = metrics
        if model_service_revision is not None:
            self.model_service_revision = model_service_revision
        self.name = name
        self.organization_name = organization_name
        self.path = path
        if run_execution is not None:
            self.run_execution = run_execution
        self.status = status
        self.status_last_updated = status_last_updated
        self.type = type
        if workspace is not None:
            self.workspace = workspace

    @property
    def created_dt(self):
        """Gets the created_dt of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The created_dt of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ClusterClusterWorkloadWithPrometheusMetric.


        :param created_dt: The created_dt of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def experiment(self):
        """Gets the experiment of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The experiment of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseExperimentListResponse
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this ClusterClusterWorkloadWithPrometheusMetric.


        :param experiment: The experiment of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type experiment: ResponseExperimentListResponse
        """

        self._experiment = experiment

    @property
    def id(self):
        """Gets the id of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The id of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterClusterWorkloadWithPrometheusMetric.


        :param id: The id of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The kernel_cluster_node of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ClusterClusterWorkloadWithPrometheusMetric.


        :param kernel_cluster_node: The kernel_cluster_node of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The kernel_resource_spec of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ClusterClusterWorkloadWithPrometheusMetric.


        :param kernel_resource_spec: The kernel_resource_spec of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def metrics(self):
        """Gets the metrics of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The metrics of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: dict[str, list[PrometheusquerySample]]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ClusterClusterWorkloadWithPrometheusMetric.


        :param metrics: The metrics of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type metrics: dict[str, list[PrometheusquerySample]]
        """

        self._metrics = metrics

    @property
    def model_service_revision(self):
        """Gets the model_service_revision of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The model_service_revision of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseModelServiceRevision
        """
        return self._model_service_revision

    @model_service_revision.setter
    def model_service_revision(self, model_service_revision):
        """Sets the model_service_revision of this ClusterClusterWorkloadWithPrometheusMetric.


        :param model_service_revision: The model_service_revision of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type model_service_revision: ResponseModelServiceRevision
        """

        self._model_service_revision = model_service_revision

    @property
    def name(self):
        """Gets the name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterClusterWorkloadWithPrometheusMetric.


        :param name: The name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_name(self):
        """Gets the organization_name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The organization_name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this ClusterClusterWorkloadWithPrometheusMetric.


        :param organization_name: The organization_name of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type organization_name: str
        """
        if self.local_vars_configuration.client_side_validation and organization_name is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def path(self):
        """Gets the path of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The path of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ClusterClusterWorkloadWithPrometheusMetric.


        :param path: The path of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type path: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def run_execution(self):
        """Gets the run_execution of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The run_execution of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseRunExecution
        """
        return self._run_execution

    @run_execution.setter
    def run_execution(self, run_execution):
        """Sets the run_execution of this ClusterClusterWorkloadWithPrometheusMetric.


        :param run_execution: The run_execution of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type run_execution: ResponseRunExecution
        """

        self._run_execution = run_execution

    @property
    def status(self):
        """Gets the status of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The status of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterClusterWorkloadWithPrometheusMetric.


        :param status: The status of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The status_last_updated of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ClusterClusterWorkloadWithPrometheusMetric.


        :param status_last_updated: The status_last_updated of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def type(self):
        """Gets the type of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The type of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterClusterWorkloadWithPrometheusMetric.


        :param type: The type of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def workspace(self):
        """Gets the workspace of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501


        :return: The workspace of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :rtype: ResponseWorkspaceList
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ClusterClusterWorkloadWithPrometheusMetric.


        :param workspace: The workspace of this ClusterClusterWorkloadWithPrometheusMetric.  # noqa: E501
        :type workspace: ResponseWorkspaceList
        """

        self._workspace = workspace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterClusterWorkloadWithPrometheusMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterClusterWorkloadWithPrometheusMetric):
            return True

        return self.to_dict() != other.to_dict()
