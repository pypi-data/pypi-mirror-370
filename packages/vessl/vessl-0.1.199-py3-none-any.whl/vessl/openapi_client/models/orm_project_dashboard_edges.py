# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmProjectDashboardEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chart_sections': 'list[OrmProjectDashboardChartSection]',
        'created_by': 'OrmUser',
        'field_configs': 'list[OrmProjectDashboardExperimentFieldConfig]',
        'filters': 'list[OrmProjectDashboardExperimentFilter]',
        'hide_plots_experiments': 'list[OrmExperiment]',
        'last_updated_by': 'OrmUser',
        'project': 'OrmProject',
        'sorts': 'list[OrmProjectDashboardExperimentSort]',
        'starred_users': 'list[OrmUser]'
    }

    attribute_map = {
        'chart_sections': 'chart_sections',
        'created_by': 'created_by',
        'field_configs': 'field_configs',
        'filters': 'filters',
        'hide_plots_experiments': 'hide_plots_experiments',
        'last_updated_by': 'last_updated_by',
        'project': 'project',
        'sorts': 'sorts',
        'starred_users': 'starred_users'
    }

    def __init__(self, chart_sections=None, created_by=None, field_configs=None, filters=None, hide_plots_experiments=None, last_updated_by=None, project=None, sorts=None, starred_users=None, local_vars_configuration=None):  # noqa: E501
        """OrmProjectDashboardEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._chart_sections = None
        self._created_by = None
        self._field_configs = None
        self._filters = None
        self._hide_plots_experiments = None
        self._last_updated_by = None
        self._project = None
        self._sorts = None
        self._starred_users = None
        self.discriminator = None

        if chart_sections is not None:
            self.chart_sections = chart_sections
        if created_by is not None:
            self.created_by = created_by
        if field_configs is not None:
            self.field_configs = field_configs
        if filters is not None:
            self.filters = filters
        if hide_plots_experiments is not None:
            self.hide_plots_experiments = hide_plots_experiments
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if project is not None:
            self.project = project
        if sorts is not None:
            self.sorts = sorts
        if starred_users is not None:
            self.starred_users = starred_users

    @property
    def chart_sections(self):
        """Gets the chart_sections of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The chart_sections of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardChartSection]
        """
        return self._chart_sections

    @chart_sections.setter
    def chart_sections(self, chart_sections):
        """Sets the chart_sections of this OrmProjectDashboardEdges.


        :param chart_sections: The chart_sections of this OrmProjectDashboardEdges.  # noqa: E501
        :type chart_sections: list[OrmProjectDashboardChartSection]
        """

        self._chart_sections = chart_sections

    @property
    def created_by(self):
        """Gets the created_by of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The created_by of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmProjectDashboardEdges.


        :param created_by: The created_by of this OrmProjectDashboardEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def field_configs(self):
        """Gets the field_configs of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The field_configs of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentFieldConfig]
        """
        return self._field_configs

    @field_configs.setter
    def field_configs(self, field_configs):
        """Sets the field_configs of this OrmProjectDashboardEdges.


        :param field_configs: The field_configs of this OrmProjectDashboardEdges.  # noqa: E501
        :type field_configs: list[OrmProjectDashboardExperimentFieldConfig]
        """

        self._field_configs = field_configs

    @property
    def filters(self):
        """Gets the filters of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The filters of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this OrmProjectDashboardEdges.


        :param filters: The filters of this OrmProjectDashboardEdges.  # noqa: E501
        :type filters: list[OrmProjectDashboardExperimentFilter]
        """

        self._filters = filters

    @property
    def hide_plots_experiments(self):
        """Gets the hide_plots_experiments of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The hide_plots_experiments of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmExperiment]
        """
        return self._hide_plots_experiments

    @hide_plots_experiments.setter
    def hide_plots_experiments(self, hide_plots_experiments):
        """Sets the hide_plots_experiments of this OrmProjectDashboardEdges.


        :param hide_plots_experiments: The hide_plots_experiments of this OrmProjectDashboardEdges.  # noqa: E501
        :type hide_plots_experiments: list[OrmExperiment]
        """

        self._hide_plots_experiments = hide_plots_experiments

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The last_updated_by of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this OrmProjectDashboardEdges.


        :param last_updated_by: The last_updated_by of this OrmProjectDashboardEdges.  # noqa: E501
        :type last_updated_by: OrmUser
        """

        self._last_updated_by = last_updated_by

    @property
    def project(self):
        """Gets the project of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The project of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: OrmProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OrmProjectDashboardEdges.


        :param project: The project of this OrmProjectDashboardEdges.  # noqa: E501
        :type project: OrmProject
        """

        self._project = project

    @property
    def sorts(self):
        """Gets the sorts of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The sorts of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentSort]
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this OrmProjectDashboardEdges.


        :param sorts: The sorts of this OrmProjectDashboardEdges.  # noqa: E501
        :type sorts: list[OrmProjectDashboardExperimentSort]
        """

        self._sorts = sorts

    @property
    def starred_users(self):
        """Gets the starred_users of this OrmProjectDashboardEdges.  # noqa: E501


        :return: The starred_users of this OrmProjectDashboardEdges.  # noqa: E501
        :rtype: list[OrmUser]
        """
        return self._starred_users

    @starred_users.setter
    def starred_users(self, starred_users):
        """Sets the starred_users of this OrmProjectDashboardEdges.


        :param starred_users: The starred_users of this OrmProjectDashboardEdges.  # noqa: E501
        :type starred_users: list[OrmUser]
        """

        self._starred_users = starred_users

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmProjectDashboardEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmProjectDashboardEdges):
            return True

        return self.to_dict() != other.to_dict()
