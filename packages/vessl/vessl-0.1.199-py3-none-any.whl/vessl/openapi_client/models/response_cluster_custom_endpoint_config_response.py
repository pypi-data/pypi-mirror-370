# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseClusterCustomEndpointConfigResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_domain': 'str',
        'custom_endpoint_config': 'ResponseClusterCustomEndpointConfig',
        'enabled': 'bool',
        'nodeport_enabled': 'bool'
    }

    attribute_map = {
        'cluster_domain': 'cluster_domain',
        'custom_endpoint_config': 'custom_endpoint_config',
        'enabled': 'enabled',
        'nodeport_enabled': 'nodeport_enabled'
    }

    def __init__(self, cluster_domain=None, custom_endpoint_config=None, enabled=None, nodeport_enabled=None, local_vars_configuration=None):  # noqa: E501
        """ResponseClusterCustomEndpointConfigResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_domain = None
        self._custom_endpoint_config = None
        self._enabled = None
        self._nodeport_enabled = None
        self.discriminator = None

        if cluster_domain is not None:
            self.cluster_domain = cluster_domain
        if custom_endpoint_config is not None:
            self.custom_endpoint_config = custom_endpoint_config
        if enabled is not None:
            self.enabled = enabled
        if nodeport_enabled is not None:
            self.nodeport_enabled = nodeport_enabled

    @property
    def cluster_domain(self):
        """Gets the cluster_domain of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501


        :return: The cluster_domain of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_domain

    @cluster_domain.setter
    def cluster_domain(self, cluster_domain):
        """Sets the cluster_domain of this ResponseClusterCustomEndpointConfigResponse.


        :param cluster_domain: The cluster_domain of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :type cluster_domain: str
        """

        self._cluster_domain = cluster_domain

    @property
    def custom_endpoint_config(self):
        """Gets the custom_endpoint_config of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501


        :return: The custom_endpoint_config of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :rtype: ResponseClusterCustomEndpointConfig
        """
        return self._custom_endpoint_config

    @custom_endpoint_config.setter
    def custom_endpoint_config(self, custom_endpoint_config):
        """Sets the custom_endpoint_config of this ResponseClusterCustomEndpointConfigResponse.


        :param custom_endpoint_config: The custom_endpoint_config of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :type custom_endpoint_config: ResponseClusterCustomEndpointConfig
        """

        self._custom_endpoint_config = custom_endpoint_config

    @property
    def enabled(self):
        """Gets the enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501


        :return: The enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ResponseClusterCustomEndpointConfigResponse.


        :param enabled: The enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def nodeport_enabled(self):
        """Gets the nodeport_enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501


        :return: The nodeport_enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._nodeport_enabled

    @nodeport_enabled.setter
    def nodeport_enabled(self, nodeport_enabled):
        """Sets the nodeport_enabled of this ResponseClusterCustomEndpointConfigResponse.


        :param nodeport_enabled: The nodeport_enabled of this ResponseClusterCustomEndpointConfigResponse.  # noqa: E501
        :type nodeport_enabled: bool
        """

        self._nodeport_enabled = nodeport_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseClusterCustomEndpointConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseClusterCustomEndpointConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
