# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmProjectExperimentFieldEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'charts': 'list[OrmProjectDashboardChart]',
        'configs': 'list[OrmProjectDashboardExperimentFieldConfig]',
        'filters': 'list[OrmProjectDashboardExperimentFilter]',
        'project': 'OrmProject',
        'sorts': 'list[OrmProjectDashboardExperimentSort]'
    }

    attribute_map = {
        'charts': 'charts',
        'configs': 'configs',
        'filters': 'filters',
        'project': 'project',
        'sorts': 'sorts'
    }

    def __init__(self, charts=None, configs=None, filters=None, project=None, sorts=None, local_vars_configuration=None):  # noqa: E501
        """OrmProjectExperimentFieldEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._charts = None
        self._configs = None
        self._filters = None
        self._project = None
        self._sorts = None
        self.discriminator = None

        if charts is not None:
            self.charts = charts
        if configs is not None:
            self.configs = configs
        if filters is not None:
            self.filters = filters
        if project is not None:
            self.project = project
        if sorts is not None:
            self.sorts = sorts

    @property
    def charts(self):
        """Gets the charts of this OrmProjectExperimentFieldEdges.  # noqa: E501


        :return: The charts of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardChart]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """Sets the charts of this OrmProjectExperimentFieldEdges.


        :param charts: The charts of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :type charts: list[OrmProjectDashboardChart]
        """

        self._charts = charts

    @property
    def configs(self):
        """Gets the configs of this OrmProjectExperimentFieldEdges.  # noqa: E501


        :return: The configs of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentFieldConfig]
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this OrmProjectExperimentFieldEdges.


        :param configs: The configs of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :type configs: list[OrmProjectDashboardExperimentFieldConfig]
        """

        self._configs = configs

    @property
    def filters(self):
        """Gets the filters of this OrmProjectExperimentFieldEdges.  # noqa: E501


        :return: The filters of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this OrmProjectExperimentFieldEdges.


        :param filters: The filters of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :type filters: list[OrmProjectDashboardExperimentFilter]
        """

        self._filters = filters

    @property
    def project(self):
        """Gets the project of this OrmProjectExperimentFieldEdges.  # noqa: E501


        :return: The project of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :rtype: OrmProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OrmProjectExperimentFieldEdges.


        :param project: The project of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :type project: OrmProject
        """

        self._project = project

    @property
    def sorts(self):
        """Gets the sorts of this OrmProjectExperimentFieldEdges.  # noqa: E501


        :return: The sorts of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboardExperimentSort]
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this OrmProjectExperimentFieldEdges.


        :param sorts: The sorts of this OrmProjectExperimentFieldEdges.  # noqa: E501
        :type sorts: list[OrmProjectDashboardExperimentSort]
        """

        self._sorts = sorts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmProjectExperimentFieldEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmProjectExperimentFieldEdges):
            return True

        return self.to_dict() != other.to_dict()
