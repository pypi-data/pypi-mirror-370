# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmOrganization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_control_config': 'dict[str, object]',
        'auto_top_up_charge_amount': 'float',
        'auto_top_up_enabled': 'bool',
        'auto_top_up_trigger_amount': 'float',
        'aws_external_id': 'str',
        'created_dt': 'datetime',
        'description': 'str',
        'display_name': 'str',
        'edges': 'OrmOrganizationEdges',
        'grafana_org_id': 'int',
        'id': 'int',
        'immutable_slug': 'str',
        'name': 'str',
        'organization_default_storage': 'int',
        'organization_default_volume': 'int',
        'organization_pricing_plan': 'int',
        'organization_pricing_plan_expire_dt': 'datetime',
        'organization_primary_owner': 'int',
        'show_tutorial': 'bool',
        'sso_config': 'dict[str, object]',
        'sso_enabled': 'bool',
        'sso_forced': 'bool',
        'status': 'bool',
        'stripe_customer_id': 'str',
        'stripe_subscription_id': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'access_control_config': 'access_control_config',
        'auto_top_up_charge_amount': 'auto_top_up_charge_amount',
        'auto_top_up_enabled': 'auto_top_up_enabled',
        'auto_top_up_trigger_amount': 'auto_top_up_trigger_amount',
        'aws_external_id': 'aws_external_id',
        'created_dt': 'created_dt',
        'description': 'description',
        'display_name': 'display_name',
        'edges': 'edges',
        'grafana_org_id': 'grafana_org_id',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'name': 'name',
        'organization_default_storage': 'organization_default_storage',
        'organization_default_volume': 'organization_default_volume',
        'organization_pricing_plan': 'organization_pricing_plan',
        'organization_pricing_plan_expire_dt': 'organization_pricing_plan_expire_dt',
        'organization_primary_owner': 'organization_primary_owner',
        'show_tutorial': 'show_tutorial',
        'sso_config': 'sso_config',
        'sso_enabled': 'sso_enabled',
        'sso_forced': 'sso_forced',
        'status': 'status',
        'stripe_customer_id': 'stripe_customer_id',
        'stripe_subscription_id': 'stripe_subscription_id',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, access_control_config=None, auto_top_up_charge_amount=None, auto_top_up_enabled=None, auto_top_up_trigger_amount=None, aws_external_id=None, created_dt=None, description=None, display_name=None, edges=None, grafana_org_id=None, id=None, immutable_slug=None, name=None, organization_default_storage=None, organization_default_volume=None, organization_pricing_plan=None, organization_pricing_plan_expire_dt=None, organization_primary_owner=None, show_tutorial=None, sso_config=None, sso_enabled=None, sso_forced=None, status=None, stripe_customer_id=None, stripe_subscription_id=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmOrganization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_control_config = None
        self._auto_top_up_charge_amount = None
        self._auto_top_up_enabled = None
        self._auto_top_up_trigger_amount = None
        self._aws_external_id = None
        self._created_dt = None
        self._description = None
        self._display_name = None
        self._edges = None
        self._grafana_org_id = None
        self._id = None
        self._immutable_slug = None
        self._name = None
        self._organization_default_storage = None
        self._organization_default_volume = None
        self._organization_pricing_plan = None
        self._organization_pricing_plan_expire_dt = None
        self._organization_primary_owner = None
        self._show_tutorial = None
        self._sso_config = None
        self._sso_enabled = None
        self._sso_forced = None
        self._status = None
        self._stripe_customer_id = None
        self._stripe_subscription_id = None
        self._updated_dt = None
        self.discriminator = None

        if access_control_config is not None:
            self.access_control_config = access_control_config
        if auto_top_up_charge_amount is not None:
            self.auto_top_up_charge_amount = auto_top_up_charge_amount
        if auto_top_up_enabled is not None:
            self.auto_top_up_enabled = auto_top_up_enabled
        if auto_top_up_trigger_amount is not None:
            self.auto_top_up_trigger_amount = auto_top_up_trigger_amount
        if aws_external_id is not None:
            self.aws_external_id = aws_external_id
        if created_dt is not None:
            self.created_dt = created_dt
        self.description = description
        if display_name is not None:
            self.display_name = display_name
        if edges is not None:
            self.edges = edges
        self.grafana_org_id = grafana_org_id
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if name is not None:
            self.name = name
        self.organization_default_storage = organization_default_storage
        self.organization_default_volume = organization_default_volume
        self.organization_pricing_plan = organization_pricing_plan
        self.organization_pricing_plan_expire_dt = organization_pricing_plan_expire_dt
        if organization_primary_owner is not None:
            self.organization_primary_owner = organization_primary_owner
        if show_tutorial is not None:
            self.show_tutorial = show_tutorial
        if sso_config is not None:
            self.sso_config = sso_config
        if sso_enabled is not None:
            self.sso_enabled = sso_enabled
        if sso_forced is not None:
            self.sso_forced = sso_forced
        if status is not None:
            self.status = status
        self.stripe_customer_id = stripe_customer_id
        self.stripe_subscription_id = stripe_subscription_id
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def access_control_config(self):
        """Gets the access_control_config of this OrmOrganization.  # noqa: E501


        :return: The access_control_config of this OrmOrganization.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._access_control_config

    @access_control_config.setter
    def access_control_config(self, access_control_config):
        """Sets the access_control_config of this OrmOrganization.


        :param access_control_config: The access_control_config of this OrmOrganization.  # noqa: E501
        :type access_control_config: dict[str, object]
        """

        self._access_control_config = access_control_config

    @property
    def auto_top_up_charge_amount(self):
        """Gets the auto_top_up_charge_amount of this OrmOrganization.  # noqa: E501


        :return: The auto_top_up_charge_amount of this OrmOrganization.  # noqa: E501
        :rtype: float
        """
        return self._auto_top_up_charge_amount

    @auto_top_up_charge_amount.setter
    def auto_top_up_charge_amount(self, auto_top_up_charge_amount):
        """Sets the auto_top_up_charge_amount of this OrmOrganization.


        :param auto_top_up_charge_amount: The auto_top_up_charge_amount of this OrmOrganization.  # noqa: E501
        :type auto_top_up_charge_amount: float
        """

        self._auto_top_up_charge_amount = auto_top_up_charge_amount

    @property
    def auto_top_up_enabled(self):
        """Gets the auto_top_up_enabled of this OrmOrganization.  # noqa: E501


        :return: The auto_top_up_enabled of this OrmOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._auto_top_up_enabled

    @auto_top_up_enabled.setter
    def auto_top_up_enabled(self, auto_top_up_enabled):
        """Sets the auto_top_up_enabled of this OrmOrganization.


        :param auto_top_up_enabled: The auto_top_up_enabled of this OrmOrganization.  # noqa: E501
        :type auto_top_up_enabled: bool
        """

        self._auto_top_up_enabled = auto_top_up_enabled

    @property
    def auto_top_up_trigger_amount(self):
        """Gets the auto_top_up_trigger_amount of this OrmOrganization.  # noqa: E501


        :return: The auto_top_up_trigger_amount of this OrmOrganization.  # noqa: E501
        :rtype: float
        """
        return self._auto_top_up_trigger_amount

    @auto_top_up_trigger_amount.setter
    def auto_top_up_trigger_amount(self, auto_top_up_trigger_amount):
        """Sets the auto_top_up_trigger_amount of this OrmOrganization.


        :param auto_top_up_trigger_amount: The auto_top_up_trigger_amount of this OrmOrganization.  # noqa: E501
        :type auto_top_up_trigger_amount: float
        """

        self._auto_top_up_trigger_amount = auto_top_up_trigger_amount

    @property
    def aws_external_id(self):
        """Gets the aws_external_id of this OrmOrganization.  # noqa: E501


        :return: The aws_external_id of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._aws_external_id

    @aws_external_id.setter
    def aws_external_id(self, aws_external_id):
        """Sets the aws_external_id of this OrmOrganization.


        :param aws_external_id: The aws_external_id of this OrmOrganization.  # noqa: E501
        :type aws_external_id: str
        """

        self._aws_external_id = aws_external_id

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmOrganization.  # noqa: E501


        :return: The created_dt of this OrmOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmOrganization.


        :param created_dt: The created_dt of this OrmOrganization.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this OrmOrganization.  # noqa: E501


        :return: The description of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrmOrganization.


        :param description: The description of this OrmOrganization.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this OrmOrganization.  # noqa: E501


        :return: The display_name of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrmOrganization.


        :param display_name: The display_name of this OrmOrganization.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def edges(self):
        """Gets the edges of this OrmOrganization.  # noqa: E501


        :return: The edges of this OrmOrganization.  # noqa: E501
        :rtype: OrmOrganizationEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmOrganization.


        :param edges: The edges of this OrmOrganization.  # noqa: E501
        :type edges: OrmOrganizationEdges
        """

        self._edges = edges

    @property
    def grafana_org_id(self):
        """Gets the grafana_org_id of this OrmOrganization.  # noqa: E501


        :return: The grafana_org_id of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._grafana_org_id

    @grafana_org_id.setter
    def grafana_org_id(self, grafana_org_id):
        """Sets the grafana_org_id of this OrmOrganization.


        :param grafana_org_id: The grafana_org_id of this OrmOrganization.  # noqa: E501
        :type grafana_org_id: int
        """

        self._grafana_org_id = grafana_org_id

    @property
    def id(self):
        """Gets the id of this OrmOrganization.  # noqa: E501


        :return: The id of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmOrganization.


        :param id: The id of this OrmOrganization.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmOrganization.  # noqa: E501


        :return: The immutable_slug of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmOrganization.


        :param immutable_slug: The immutable_slug of this OrmOrganization.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def name(self):
        """Gets the name of this OrmOrganization.  # noqa: E501


        :return: The name of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrmOrganization.


        :param name: The name of this OrmOrganization.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def organization_default_storage(self):
        """Gets the organization_default_storage of this OrmOrganization.  # noqa: E501


        :return: The organization_default_storage of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._organization_default_storage

    @organization_default_storage.setter
    def organization_default_storage(self, organization_default_storage):
        """Sets the organization_default_storage of this OrmOrganization.


        :param organization_default_storage: The organization_default_storage of this OrmOrganization.  # noqa: E501
        :type organization_default_storage: int
        """

        self._organization_default_storage = organization_default_storage

    @property
    def organization_default_volume(self):
        """Gets the organization_default_volume of this OrmOrganization.  # noqa: E501


        :return: The organization_default_volume of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._organization_default_volume

    @organization_default_volume.setter
    def organization_default_volume(self, organization_default_volume):
        """Sets the organization_default_volume of this OrmOrganization.


        :param organization_default_volume: The organization_default_volume of this OrmOrganization.  # noqa: E501
        :type organization_default_volume: int
        """

        self._organization_default_volume = organization_default_volume

    @property
    def organization_pricing_plan(self):
        """Gets the organization_pricing_plan of this OrmOrganization.  # noqa: E501


        :return: The organization_pricing_plan of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._organization_pricing_plan

    @organization_pricing_plan.setter
    def organization_pricing_plan(self, organization_pricing_plan):
        """Sets the organization_pricing_plan of this OrmOrganization.


        :param organization_pricing_plan: The organization_pricing_plan of this OrmOrganization.  # noqa: E501
        :type organization_pricing_plan: int
        """

        self._organization_pricing_plan = organization_pricing_plan

    @property
    def organization_pricing_plan_expire_dt(self):
        """Gets the organization_pricing_plan_expire_dt of this OrmOrganization.  # noqa: E501


        :return: The organization_pricing_plan_expire_dt of this OrmOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._organization_pricing_plan_expire_dt

    @organization_pricing_plan_expire_dt.setter
    def organization_pricing_plan_expire_dt(self, organization_pricing_plan_expire_dt):
        """Sets the organization_pricing_plan_expire_dt of this OrmOrganization.


        :param organization_pricing_plan_expire_dt: The organization_pricing_plan_expire_dt of this OrmOrganization.  # noqa: E501
        :type organization_pricing_plan_expire_dt: datetime
        """

        self._organization_pricing_plan_expire_dt = organization_pricing_plan_expire_dt

    @property
    def organization_primary_owner(self):
        """Gets the organization_primary_owner of this OrmOrganization.  # noqa: E501


        :return: The organization_primary_owner of this OrmOrganization.  # noqa: E501
        :rtype: int
        """
        return self._organization_primary_owner

    @organization_primary_owner.setter
    def organization_primary_owner(self, organization_primary_owner):
        """Sets the organization_primary_owner of this OrmOrganization.


        :param organization_primary_owner: The organization_primary_owner of this OrmOrganization.  # noqa: E501
        :type organization_primary_owner: int
        """

        self._organization_primary_owner = organization_primary_owner

    @property
    def show_tutorial(self):
        """Gets the show_tutorial of this OrmOrganization.  # noqa: E501


        :return: The show_tutorial of this OrmOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._show_tutorial

    @show_tutorial.setter
    def show_tutorial(self, show_tutorial):
        """Sets the show_tutorial of this OrmOrganization.


        :param show_tutorial: The show_tutorial of this OrmOrganization.  # noqa: E501
        :type show_tutorial: bool
        """

        self._show_tutorial = show_tutorial

    @property
    def sso_config(self):
        """Gets the sso_config of this OrmOrganization.  # noqa: E501


        :return: The sso_config of this OrmOrganization.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._sso_config

    @sso_config.setter
    def sso_config(self, sso_config):
        """Sets the sso_config of this OrmOrganization.


        :param sso_config: The sso_config of this OrmOrganization.  # noqa: E501
        :type sso_config: dict[str, object]
        """

        self._sso_config = sso_config

    @property
    def sso_enabled(self):
        """Gets the sso_enabled of this OrmOrganization.  # noqa: E501


        :return: The sso_enabled of this OrmOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._sso_enabled

    @sso_enabled.setter
    def sso_enabled(self, sso_enabled):
        """Sets the sso_enabled of this OrmOrganization.


        :param sso_enabled: The sso_enabled of this OrmOrganization.  # noqa: E501
        :type sso_enabled: bool
        """

        self._sso_enabled = sso_enabled

    @property
    def sso_forced(self):
        """Gets the sso_forced of this OrmOrganization.  # noqa: E501


        :return: The sso_forced of this OrmOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._sso_forced

    @sso_forced.setter
    def sso_forced(self, sso_forced):
        """Sets the sso_forced of this OrmOrganization.


        :param sso_forced: The sso_forced of this OrmOrganization.  # noqa: E501
        :type sso_forced: bool
        """

        self._sso_forced = sso_forced

    @property
    def status(self):
        """Gets the status of this OrmOrganization.  # noqa: E501


        :return: The status of this OrmOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmOrganization.


        :param status: The status of this OrmOrganization.  # noqa: E501
        :type status: bool
        """

        self._status = status

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this OrmOrganization.  # noqa: E501


        :return: The stripe_customer_id of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this OrmOrganization.


        :param stripe_customer_id: The stripe_customer_id of this OrmOrganization.  # noqa: E501
        :type stripe_customer_id: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def stripe_subscription_id(self):
        """Gets the stripe_subscription_id of this OrmOrganization.  # noqa: E501


        :return: The stripe_subscription_id of this OrmOrganization.  # noqa: E501
        :rtype: str
        """
        return self._stripe_subscription_id

    @stripe_subscription_id.setter
    def stripe_subscription_id(self, stripe_subscription_id):
        """Sets the stripe_subscription_id of this OrmOrganization.


        :param stripe_subscription_id: The stripe_subscription_id of this OrmOrganization.  # noqa: E501
        :type stripe_subscription_id: str
        """

        self._stripe_subscription_id = stripe_subscription_id

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmOrganization.  # noqa: E501


        :return: The updated_dt of this OrmOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmOrganization.


        :param updated_dt: The updated_dt of this OrmOrganization.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmOrganization):
            return True

        return self.to_dict() != other.to_dict()
