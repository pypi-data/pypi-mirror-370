# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmModelServiceGateway(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'OrmModelServiceGatewayEdges',
        'enabled': 'bool',
        'endpoint': 'str',
        'generated_hostname': 'str',
        'id': 'int',
        'immutable_slug': 'str',
        'ingress_config': 'dict[str, object]',
        'last_error': 'str',
        'model_service_id': 'int',
        'nodeport_config': 'dict[str, object]',
        'status': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'enabled': 'enabled',
        'endpoint': 'endpoint',
        'generated_hostname': 'generated_hostname',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'ingress_config': 'ingress_config',
        'last_error': 'last_error',
        'model_service_id': 'model_service_id',
        'nodeport_config': 'nodeport_config',
        'status': 'status',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, edges=None, enabled=None, endpoint=None, generated_hostname=None, id=None, immutable_slug=None, ingress_config=None, last_error=None, model_service_id=None, nodeport_config=None, status=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmModelServiceGateway - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._enabled = None
        self._endpoint = None
        self._generated_hostname = None
        self._id = None
        self._immutable_slug = None
        self._ingress_config = None
        self._last_error = None
        self._model_service_id = None
        self._nodeport_config = None
        self._status = None
        self._updated_dt = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if enabled is not None:
            self.enabled = enabled
        if endpoint is not None:
            self.endpoint = endpoint
        if generated_hostname is not None:
            self.generated_hostname = generated_hostname
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if ingress_config is not None:
            self.ingress_config = ingress_config
        if last_error is not None:
            self.last_error = last_error
        if model_service_id is not None:
            self.model_service_id = model_service_id
        if nodeport_config is not None:
            self.nodeport_config = nodeport_config
        if status is not None:
            self.status = status
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmModelServiceGateway.  # noqa: E501


        :return: The created_dt of this OrmModelServiceGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmModelServiceGateway.


        :param created_dt: The created_dt of this OrmModelServiceGateway.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmModelServiceGateway.  # noqa: E501


        :return: The edges of this OrmModelServiceGateway.  # noqa: E501
        :rtype: OrmModelServiceGatewayEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmModelServiceGateway.


        :param edges: The edges of this OrmModelServiceGateway.  # noqa: E501
        :type edges: OrmModelServiceGatewayEdges
        """

        self._edges = edges

    @property
    def enabled(self):
        """Gets the enabled of this OrmModelServiceGateway.  # noqa: E501


        :return: The enabled of this OrmModelServiceGateway.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OrmModelServiceGateway.


        :param enabled: The enabled of this OrmModelServiceGateway.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def endpoint(self):
        """Gets the endpoint of this OrmModelServiceGateway.  # noqa: E501


        :return: The endpoint of this OrmModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this OrmModelServiceGateway.


        :param endpoint: The endpoint of this OrmModelServiceGateway.  # noqa: E501
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def generated_hostname(self):
        """Gets the generated_hostname of this OrmModelServiceGateway.  # noqa: E501


        :return: The generated_hostname of this OrmModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._generated_hostname

    @generated_hostname.setter
    def generated_hostname(self, generated_hostname):
        """Sets the generated_hostname of this OrmModelServiceGateway.


        :param generated_hostname: The generated_hostname of this OrmModelServiceGateway.  # noqa: E501
        :type generated_hostname: str
        """

        self._generated_hostname = generated_hostname

    @property
    def id(self):
        """Gets the id of this OrmModelServiceGateway.  # noqa: E501


        :return: The id of this OrmModelServiceGateway.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmModelServiceGateway.


        :param id: The id of this OrmModelServiceGateway.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmModelServiceGateway.  # noqa: E501


        :return: The immutable_slug of this OrmModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmModelServiceGateway.


        :param immutable_slug: The immutable_slug of this OrmModelServiceGateway.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def ingress_config(self):
        """Gets the ingress_config of this OrmModelServiceGateway.  # noqa: E501


        :return: The ingress_config of this OrmModelServiceGateway.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._ingress_config

    @ingress_config.setter
    def ingress_config(self, ingress_config):
        """Sets the ingress_config of this OrmModelServiceGateway.


        :param ingress_config: The ingress_config of this OrmModelServiceGateway.  # noqa: E501
        :type ingress_config: dict[str, object]
        """

        self._ingress_config = ingress_config

    @property
    def last_error(self):
        """Gets the last_error of this OrmModelServiceGateway.  # noqa: E501


        :return: The last_error of this OrmModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """Sets the last_error of this OrmModelServiceGateway.


        :param last_error: The last_error of this OrmModelServiceGateway.  # noqa: E501
        :type last_error: str
        """

        self._last_error = last_error

    @property
    def model_service_id(self):
        """Gets the model_service_id of this OrmModelServiceGateway.  # noqa: E501


        :return: The model_service_id of this OrmModelServiceGateway.  # noqa: E501
        :rtype: int
        """
        return self._model_service_id

    @model_service_id.setter
    def model_service_id(self, model_service_id):
        """Sets the model_service_id of this OrmModelServiceGateway.


        :param model_service_id: The model_service_id of this OrmModelServiceGateway.  # noqa: E501
        :type model_service_id: int
        """

        self._model_service_id = model_service_id

    @property
    def nodeport_config(self):
        """Gets the nodeport_config of this OrmModelServiceGateway.  # noqa: E501


        :return: The nodeport_config of this OrmModelServiceGateway.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._nodeport_config

    @nodeport_config.setter
    def nodeport_config(self, nodeport_config):
        """Sets the nodeport_config of this OrmModelServiceGateway.


        :param nodeport_config: The nodeport_config of this OrmModelServiceGateway.  # noqa: E501
        :type nodeport_config: dict[str, object]
        """

        self._nodeport_config = nodeport_config

    @property
    def status(self):
        """Gets the status of this OrmModelServiceGateway.  # noqa: E501


        :return: The status of this OrmModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmModelServiceGateway.


        :param status: The status of this OrmModelServiceGateway.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmModelServiceGateway.  # noqa: E501


        :return: The updated_dt of this OrmModelServiceGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmModelServiceGateway.


        :param updated_dt: The updated_dt of this OrmModelServiceGateway.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmModelServiceGateway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmModelServiceGateway):
            return True

        return self.to_dict() != other.to_dict()
