# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseVolumeV2FederateInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket_name': 'str',
        'endpoint': 'str',
        'force_path_style': 'bool',
        'gcs_token': 'StorageGoogleStorageFederationToken',
        'path': 'str',
        'region': 'str',
        's3_token': 'StorageS3FederationToken',
        'type': 'str'
    }

    attribute_map = {
        'bucket_name': 'bucket_name',
        'endpoint': 'endpoint',
        'force_path_style': 'force_path_style',
        'gcs_token': 'gcs_token',
        'path': 'path',
        'region': 'region',
        's3_token': 's3_token',
        'type': 'type'
    }

    def __init__(self, bucket_name=None, endpoint=None, force_path_style=None, gcs_token=None, path=None, region=None, s3_token=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolumeV2FederateInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bucket_name = None
        self._endpoint = None
        self._force_path_style = None
        self._gcs_token = None
        self._path = None
        self._region = None
        self._s3_token = None
        self._type = None
        self.discriminator = None

        if bucket_name is not None:
            self.bucket_name = bucket_name
        self.endpoint = endpoint
        self.force_path_style = force_path_style
        if gcs_token is not None:
            self.gcs_token = gcs_token
        if path is not None:
            self.path = path
        self.region = region
        if s3_token is not None:
            self.s3_token = s3_token
        self.type = type

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The bucket_name of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ResponseVolumeV2FederateInfo.


        :param bucket_name: The bucket_name of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def endpoint(self):
        """Gets the endpoint of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The endpoint of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ResponseVolumeV2FederateInfo.


        :param endpoint: The endpoint of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def force_path_style(self):
        """Gets the force_path_style of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The force_path_style of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: bool
        """
        return self._force_path_style

    @force_path_style.setter
    def force_path_style(self, force_path_style):
        """Sets the force_path_style of this ResponseVolumeV2FederateInfo.


        :param force_path_style: The force_path_style of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type force_path_style: bool
        """
        if self.local_vars_configuration.client_side_validation and force_path_style is None:  # noqa: E501
            raise ValueError("Invalid value for `force_path_style`, must not be `None`")  # noqa: E501

        self._force_path_style = force_path_style

    @property
    def gcs_token(self):
        """Gets the gcs_token of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The gcs_token of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: StorageGoogleStorageFederationToken
        """
        return self._gcs_token

    @gcs_token.setter
    def gcs_token(self, gcs_token):
        """Sets the gcs_token of this ResponseVolumeV2FederateInfo.


        :param gcs_token: The gcs_token of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type gcs_token: StorageGoogleStorageFederationToken
        """

        self._gcs_token = gcs_token

    @property
    def path(self):
        """Gets the path of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The path of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponseVolumeV2FederateInfo.


        :param path: The path of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def region(self):
        """Gets the region of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The region of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ResponseVolumeV2FederateInfo.


        :param region: The region of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def s3_token(self):
        """Gets the s3_token of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The s3_token of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: StorageS3FederationToken
        """
        return self._s3_token

    @s3_token.setter
    def s3_token(self, s3_token):
        """Sets the s3_token of this ResponseVolumeV2FederateInfo.


        :param s3_token: The s3_token of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type s3_token: StorageS3FederationToken
        """

        self._s3_token = s3_token

    @property
    def type(self):
        """Gets the type of this ResponseVolumeV2FederateInfo.  # noqa: E501


        :return: The type of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseVolumeV2FederateInfo.


        :param type: The type of this ResponseVolumeV2FederateInfo.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolumeV2FederateInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolumeV2FederateInfo):
            return True

        return self.to_dict() != other.to_dict()
