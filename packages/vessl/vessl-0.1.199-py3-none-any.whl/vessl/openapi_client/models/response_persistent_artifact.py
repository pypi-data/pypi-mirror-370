# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponsePersistentArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'managed_storage_configuration': 'V1ManagedStorageConfiguration',
        'name': 'str',
        'nfs_storage_configuration': 'V1NFSStorageConfiguration',
        'parent_artifact_id': 'int',
        'path_description': 'str',
        's3_storage_configuration': 'V1S3StorageConfiguration',
        'storage_type': 'str'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'managed_storage_configuration': 'managed_storage_configuration',
        'name': 'name',
        'nfs_storage_configuration': 'nfs_storage_configuration',
        'parent_artifact_id': 'parent_artifact_id',
        'path_description': 'path_description',
        's3_storage_configuration': 's3_storage_configuration',
        'storage_type': 'storage_type'
    }

    def __init__(self, created_by=None, created_dt=None, managed_storage_configuration=None, name=None, nfs_storage_configuration=None, parent_artifact_id=None, path_description=None, s3_storage_configuration=None, storage_type=None, local_vars_configuration=None):  # noqa: E501
        """ResponsePersistentArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_dt = None
        self._managed_storage_configuration = None
        self._name = None
        self._nfs_storage_configuration = None
        self._parent_artifact_id = None
        self._path_description = None
        self._s3_storage_configuration = None
        self._storage_type = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if created_dt is not None:
            self.created_dt = created_dt
        if managed_storage_configuration is not None:
            self.managed_storage_configuration = managed_storage_configuration
        if name is not None:
            self.name = name
        if nfs_storage_configuration is not None:
            self.nfs_storage_configuration = nfs_storage_configuration
        self.parent_artifact_id = parent_artifact_id
        if path_description is not None:
            self.path_description = path_description
        if s3_storage_configuration is not None:
            self.s3_storage_configuration = s3_storage_configuration
        if storage_type is not None:
            self.storage_type = storage_type

    @property
    def created_by(self):
        """Gets the created_by of this ResponsePersistentArtifact.  # noqa: E501


        :return: The created_by of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponsePersistentArtifact.


        :param created_by: The created_by of this ResponsePersistentArtifact.  # noqa: E501
        :type created_by: ResponseUser
        """

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponsePersistentArtifact.  # noqa: E501


        :return: The created_dt of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponsePersistentArtifact.


        :param created_dt: The created_dt of this ResponsePersistentArtifact.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def managed_storage_configuration(self):
        """Gets the managed_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501


        :return: The managed_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: V1ManagedStorageConfiguration
        """
        return self._managed_storage_configuration

    @managed_storage_configuration.setter
    def managed_storage_configuration(self, managed_storage_configuration):
        """Sets the managed_storage_configuration of this ResponsePersistentArtifact.


        :param managed_storage_configuration: The managed_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :type managed_storage_configuration: V1ManagedStorageConfiguration
        """

        self._managed_storage_configuration = managed_storage_configuration

    @property
    def name(self):
        """Gets the name of this ResponsePersistentArtifact.  # noqa: E501


        :return: The name of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponsePersistentArtifact.


        :param name: The name of this ResponsePersistentArtifact.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def nfs_storage_configuration(self):
        """Gets the nfs_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501


        :return: The nfs_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: V1NFSStorageConfiguration
        """
        return self._nfs_storage_configuration

    @nfs_storage_configuration.setter
    def nfs_storage_configuration(self, nfs_storage_configuration):
        """Sets the nfs_storage_configuration of this ResponsePersistentArtifact.


        :param nfs_storage_configuration: The nfs_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :type nfs_storage_configuration: V1NFSStorageConfiguration
        """

        self._nfs_storage_configuration = nfs_storage_configuration

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this ResponsePersistentArtifact.  # noqa: E501


        :return: The parent_artifact_id of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this ResponsePersistentArtifact.


        :param parent_artifact_id: The parent_artifact_id of this ResponsePersistentArtifact.  # noqa: E501
        :type parent_artifact_id: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def path_description(self):
        """Gets the path_description of this ResponsePersistentArtifact.  # noqa: E501


        :return: The path_description of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: str
        """
        return self._path_description

    @path_description.setter
    def path_description(self, path_description):
        """Sets the path_description of this ResponsePersistentArtifact.


        :param path_description: The path_description of this ResponsePersistentArtifact.  # noqa: E501
        :type path_description: str
        """

        self._path_description = path_description

    @property
    def s3_storage_configuration(self):
        """Gets the s3_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501


        :return: The s3_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: V1S3StorageConfiguration
        """
        return self._s3_storage_configuration

    @s3_storage_configuration.setter
    def s3_storage_configuration(self, s3_storage_configuration):
        """Sets the s3_storage_configuration of this ResponsePersistentArtifact.


        :param s3_storage_configuration: The s3_storage_configuration of this ResponsePersistentArtifact.  # noqa: E501
        :type s3_storage_configuration: V1S3StorageConfiguration
        """

        self._s3_storage_configuration = s3_storage_configuration

    @property
    def storage_type(self):
        """Gets the storage_type of this ResponsePersistentArtifact.  # noqa: E501


        :return: The storage_type of this ResponsePersistentArtifact.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this ResponsePersistentArtifact.


        :param storage_type: The storage_type of this ResponsePersistentArtifact.  # noqa: E501
        :type storage_type: str
        """
        allowed_values = ["managed", "s3", "nfs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and storage_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePersistentArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponsePersistentArtifact):
            return True

        return self.to_dict() != other.to_dict()
