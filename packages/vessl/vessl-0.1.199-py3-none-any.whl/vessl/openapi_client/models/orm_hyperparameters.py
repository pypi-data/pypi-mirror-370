# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmHyperparameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'list[OrmHyperparameter]',
        'map': 'dict[str, str]',
        'number_map': 'dict[str, float]'
    }

    attribute_map = {
        'data': 'data',
        'map': 'map',
        'number_map': 'number_map'
    }

    def __init__(self, data=None, map=None, number_map=None, local_vars_configuration=None):  # noqa: E501
        """OrmHyperparameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._map = None
        self._number_map = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if map is not None:
            self.map = map
        if number_map is not None:
            self.number_map = number_map

    @property
    def data(self):
        """Gets the data of this OrmHyperparameters.  # noqa: E501


        :return: The data of this OrmHyperparameters.  # noqa: E501
        :rtype: list[OrmHyperparameter]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OrmHyperparameters.


        :param data: The data of this OrmHyperparameters.  # noqa: E501
        :type data: list[OrmHyperparameter]
        """

        self._data = data

    @property
    def map(self):
        """Gets the map of this OrmHyperparameters.  # noqa: E501


        :return: The map of this OrmHyperparameters.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this OrmHyperparameters.


        :param map: The map of this OrmHyperparameters.  # noqa: E501
        :type map: dict[str, str]
        """

        self._map = map

    @property
    def number_map(self):
        """Gets the number_map of this OrmHyperparameters.  # noqa: E501


        :return: The number_map of this OrmHyperparameters.  # noqa: E501
        :rtype: dict[str, float]
        """
        return self._number_map

    @number_map.setter
    def number_map(self, number_map):
        """Sets the number_map of this OrmHyperparameters.


        :param number_map: The number_map of this OrmHyperparameters.  # noqa: E501
        :type number_map: dict[str, float]
        """

        self._number_map = number_map

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmHyperparameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmHyperparameters):
            return True

        return self.to_dict() != other.to_dict()
