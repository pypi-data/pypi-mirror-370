# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmUserEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_tokens': 'list[OrmAccessToken]',
        'cluster_quotas': 'list[OrmClusterQuota]',
        'coupon_redemptions': 'list[OrmCouponRedemption]',
        'created_volume_v2s': 'list[OrmVolumeV2]',
        'credit_earn_histories': 'list[OrmCreditEarnHistory]',
        'default_organization': 'OrmOrganization',
        'experiments': 'list[OrmExperiment]',
        'hub_model_task_histories': 'list[OrmHubModelTaskHistory]',
        'hub_model_tasks': 'list[OrmHubModelTask]',
        'judged_pipeline_step_executions': 'list[OrmPipelineStepExecution]',
        'llm_api_keys': 'list[OrmLLMApiKey]',
        'llm_documents': 'list[OrmLLMDocument]',
        'llm_knowledge': 'list[OrmLLMKnowledge]',
        'llm_knowledge_jobs': 'list[OrmLLMKnowledgeJob]',
        'llm_model_connections': 'list[OrmLLMModelConnection]',
        'llm_model_parameter_definitions': 'list[OrmLLMModelParameterDefinition]',
        'llm_model_parameter_presets': 'list[OrmLLMModelParameterPreset]',
        'llm_user_groups': 'list[OrmLLMUserGroup]',
        'llm_vectordb_connections': 'list[OrmLLMVectorDBConnection]',
        'llm_workflow_revisions': 'list[OrmLLMWorkflowRevision]',
        'llm_workflows': 'list[OrmLLMWorkflow]',
        'memberships': 'list[OrmUserGroupMembership]',
        'model_service_revisions': 'list[OrmModelServiceRevision]',
        'model_service_rollouts': 'list[OrmModelServiceRollout]',
        'model_services': 'list[OrmModelService]',
        'models': 'list[OrmModel]',
        'onboardings': 'list[OrmOnboarding]',
        'owned_organizations': 'list[OrmOrganization]',
        'persistent_artifacts': 'list[OrmArtifact]',
        'pipelines': 'list[OrmPipeline]',
        'project_dashboards': 'list[OrmProjectDashboard]',
        'reset_password_tokens': 'list[OrmResetPasswordToken]',
        'run_executions': 'list[OrmRunExecution]',
        'run_tracking_dashboards': 'list[OrmRunTrackingDashboard]',
        'starred_dashboards': 'list[OrmProjectDashboard]',
        'triggered_pipeline_executions': 'list[OrmPipelineExecution]',
        'user_history_as_transferer': 'list[OrmUserHistory]',
        'user_organization': 'list[OrmUserOrganization]',
        'user_starred_projects': 'list[OrmUserStarredProjects]',
        'withdraw_history_organizations': 'list[OrmWithdrawHistoryOrganization]',
        'withdraw_history_workloads': 'list[OrmWithdrawHistoryWorkload]',
        'workspaces': 'list[OrmWorkspace]'
    }

    attribute_map = {
        'access_tokens': 'access_tokens',
        'cluster_quotas': 'cluster_quotas',
        'coupon_redemptions': 'coupon_redemptions',
        'created_volume_v2s': 'createdVolumeV2s',
        'credit_earn_histories': 'credit_earn_histories',
        'default_organization': 'default_organization',
        'experiments': 'experiments',
        'hub_model_task_histories': 'hub_model_task_histories',
        'hub_model_tasks': 'hub_model_tasks',
        'judged_pipeline_step_executions': 'judged_pipeline_step_executions',
        'llm_api_keys': 'llm_api_keys',
        'llm_documents': 'llm_documents',
        'llm_knowledge': 'llm_knowledge',
        'llm_knowledge_jobs': 'llm_knowledge_jobs',
        'llm_model_connections': 'llm_model_connections',
        'llm_model_parameter_definitions': 'llm_model_parameter_definitions',
        'llm_model_parameter_presets': 'llm_model_parameter_presets',
        'llm_user_groups': 'llm_user_groups',
        'llm_vectordb_connections': 'llm_vectordb_connections',
        'llm_workflow_revisions': 'llm_workflow_revisions',
        'llm_workflows': 'llm_workflows',
        'memberships': 'memberships',
        'model_service_revisions': 'model_service_revisions',
        'model_service_rollouts': 'model_service_rollouts',
        'model_services': 'model_services',
        'models': 'models',
        'onboardings': 'onboardings',
        'owned_organizations': 'owned_organizations',
        'persistent_artifacts': 'persistent_artifacts',
        'pipelines': 'pipelines',
        'project_dashboards': 'project_dashboards',
        'reset_password_tokens': 'reset_password_tokens',
        'run_executions': 'run_executions',
        'run_tracking_dashboards': 'run_tracking_dashboards',
        'starred_dashboards': 'starred_dashboards',
        'triggered_pipeline_executions': 'triggered_pipeline_executions',
        'user_history_as_transferer': 'user_history_as_transferer',
        'user_organization': 'user_organization',
        'user_starred_projects': 'user_starred_projects',
        'withdraw_history_organizations': 'withdraw_history_organizations',
        'withdraw_history_workloads': 'withdraw_history_workloads',
        'workspaces': 'workspaces'
    }

    def __init__(self, access_tokens=None, cluster_quotas=None, coupon_redemptions=None, created_volume_v2s=None, credit_earn_histories=None, default_organization=None, experiments=None, hub_model_task_histories=None, hub_model_tasks=None, judged_pipeline_step_executions=None, llm_api_keys=None, llm_documents=None, llm_knowledge=None, llm_knowledge_jobs=None, llm_model_connections=None, llm_model_parameter_definitions=None, llm_model_parameter_presets=None, llm_user_groups=None, llm_vectordb_connections=None, llm_workflow_revisions=None, llm_workflows=None, memberships=None, model_service_revisions=None, model_service_rollouts=None, model_services=None, models=None, onboardings=None, owned_organizations=None, persistent_artifacts=None, pipelines=None, project_dashboards=None, reset_password_tokens=None, run_executions=None, run_tracking_dashboards=None, starred_dashboards=None, triggered_pipeline_executions=None, user_history_as_transferer=None, user_organization=None, user_starred_projects=None, withdraw_history_organizations=None, withdraw_history_workloads=None, workspaces=None, local_vars_configuration=None):  # noqa: E501
        """OrmUserEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_tokens = None
        self._cluster_quotas = None
        self._coupon_redemptions = None
        self._created_volume_v2s = None
        self._credit_earn_histories = None
        self._default_organization = None
        self._experiments = None
        self._hub_model_task_histories = None
        self._hub_model_tasks = None
        self._judged_pipeline_step_executions = None
        self._llm_api_keys = None
        self._llm_documents = None
        self._llm_knowledge = None
        self._llm_knowledge_jobs = None
        self._llm_model_connections = None
        self._llm_model_parameter_definitions = None
        self._llm_model_parameter_presets = None
        self._llm_user_groups = None
        self._llm_vectordb_connections = None
        self._llm_workflow_revisions = None
        self._llm_workflows = None
        self._memberships = None
        self._model_service_revisions = None
        self._model_service_rollouts = None
        self._model_services = None
        self._models = None
        self._onboardings = None
        self._owned_organizations = None
        self._persistent_artifacts = None
        self._pipelines = None
        self._project_dashboards = None
        self._reset_password_tokens = None
        self._run_executions = None
        self._run_tracking_dashboards = None
        self._starred_dashboards = None
        self._triggered_pipeline_executions = None
        self._user_history_as_transferer = None
        self._user_organization = None
        self._user_starred_projects = None
        self._withdraw_history_organizations = None
        self._withdraw_history_workloads = None
        self._workspaces = None
        self.discriminator = None

        if access_tokens is not None:
            self.access_tokens = access_tokens
        if cluster_quotas is not None:
            self.cluster_quotas = cluster_quotas
        if coupon_redemptions is not None:
            self.coupon_redemptions = coupon_redemptions
        if created_volume_v2s is not None:
            self.created_volume_v2s = created_volume_v2s
        if credit_earn_histories is not None:
            self.credit_earn_histories = credit_earn_histories
        if default_organization is not None:
            self.default_organization = default_organization
        if experiments is not None:
            self.experiments = experiments
        if hub_model_task_histories is not None:
            self.hub_model_task_histories = hub_model_task_histories
        if hub_model_tasks is not None:
            self.hub_model_tasks = hub_model_tasks
        if judged_pipeline_step_executions is not None:
            self.judged_pipeline_step_executions = judged_pipeline_step_executions
        if llm_api_keys is not None:
            self.llm_api_keys = llm_api_keys
        if llm_documents is not None:
            self.llm_documents = llm_documents
        if llm_knowledge is not None:
            self.llm_knowledge = llm_knowledge
        if llm_knowledge_jobs is not None:
            self.llm_knowledge_jobs = llm_knowledge_jobs
        if llm_model_connections is not None:
            self.llm_model_connections = llm_model_connections
        if llm_model_parameter_definitions is not None:
            self.llm_model_parameter_definitions = llm_model_parameter_definitions
        if llm_model_parameter_presets is not None:
            self.llm_model_parameter_presets = llm_model_parameter_presets
        if llm_user_groups is not None:
            self.llm_user_groups = llm_user_groups
        if llm_vectordb_connections is not None:
            self.llm_vectordb_connections = llm_vectordb_connections
        if llm_workflow_revisions is not None:
            self.llm_workflow_revisions = llm_workflow_revisions
        if llm_workflows is not None:
            self.llm_workflows = llm_workflows
        if memberships is not None:
            self.memberships = memberships
        if model_service_revisions is not None:
            self.model_service_revisions = model_service_revisions
        if model_service_rollouts is not None:
            self.model_service_rollouts = model_service_rollouts
        if model_services is not None:
            self.model_services = model_services
        if models is not None:
            self.models = models
        if onboardings is not None:
            self.onboardings = onboardings
        if owned_organizations is not None:
            self.owned_organizations = owned_organizations
        if persistent_artifacts is not None:
            self.persistent_artifacts = persistent_artifacts
        if pipelines is not None:
            self.pipelines = pipelines
        if project_dashboards is not None:
            self.project_dashboards = project_dashboards
        if reset_password_tokens is not None:
            self.reset_password_tokens = reset_password_tokens
        if run_executions is not None:
            self.run_executions = run_executions
        if run_tracking_dashboards is not None:
            self.run_tracking_dashboards = run_tracking_dashboards
        if starred_dashboards is not None:
            self.starred_dashboards = starred_dashboards
        if triggered_pipeline_executions is not None:
            self.triggered_pipeline_executions = triggered_pipeline_executions
        if user_history_as_transferer is not None:
            self.user_history_as_transferer = user_history_as_transferer
        if user_organization is not None:
            self.user_organization = user_organization
        if user_starred_projects is not None:
            self.user_starred_projects = user_starred_projects
        if withdraw_history_organizations is not None:
            self.withdraw_history_organizations = withdraw_history_organizations
        if withdraw_history_workloads is not None:
            self.withdraw_history_workloads = withdraw_history_workloads
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def access_tokens(self):
        """Gets the access_tokens of this OrmUserEdges.  # noqa: E501


        :return: The access_tokens of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmAccessToken]
        """
        return self._access_tokens

    @access_tokens.setter
    def access_tokens(self, access_tokens):
        """Sets the access_tokens of this OrmUserEdges.


        :param access_tokens: The access_tokens of this OrmUserEdges.  # noqa: E501
        :type access_tokens: list[OrmAccessToken]
        """

        self._access_tokens = access_tokens

    @property
    def cluster_quotas(self):
        """Gets the cluster_quotas of this OrmUserEdges.  # noqa: E501


        :return: The cluster_quotas of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmClusterQuota]
        """
        return self._cluster_quotas

    @cluster_quotas.setter
    def cluster_quotas(self, cluster_quotas):
        """Sets the cluster_quotas of this OrmUserEdges.


        :param cluster_quotas: The cluster_quotas of this OrmUserEdges.  # noqa: E501
        :type cluster_quotas: list[OrmClusterQuota]
        """

        self._cluster_quotas = cluster_quotas

    @property
    def coupon_redemptions(self):
        """Gets the coupon_redemptions of this OrmUserEdges.  # noqa: E501


        :return: The coupon_redemptions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmCouponRedemption]
        """
        return self._coupon_redemptions

    @coupon_redemptions.setter
    def coupon_redemptions(self, coupon_redemptions):
        """Sets the coupon_redemptions of this OrmUserEdges.


        :param coupon_redemptions: The coupon_redemptions of this OrmUserEdges.  # noqa: E501
        :type coupon_redemptions: list[OrmCouponRedemption]
        """

        self._coupon_redemptions = coupon_redemptions

    @property
    def created_volume_v2s(self):
        """Gets the created_volume_v2s of this OrmUserEdges.  # noqa: E501


        :return: The created_volume_v2s of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmVolumeV2]
        """
        return self._created_volume_v2s

    @created_volume_v2s.setter
    def created_volume_v2s(self, created_volume_v2s):
        """Sets the created_volume_v2s of this OrmUserEdges.


        :param created_volume_v2s: The created_volume_v2s of this OrmUserEdges.  # noqa: E501
        :type created_volume_v2s: list[OrmVolumeV2]
        """

        self._created_volume_v2s = created_volume_v2s

    @property
    def credit_earn_histories(self):
        """Gets the credit_earn_histories of this OrmUserEdges.  # noqa: E501


        :return: The credit_earn_histories of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmCreditEarnHistory]
        """
        return self._credit_earn_histories

    @credit_earn_histories.setter
    def credit_earn_histories(self, credit_earn_histories):
        """Sets the credit_earn_histories of this OrmUserEdges.


        :param credit_earn_histories: The credit_earn_histories of this OrmUserEdges.  # noqa: E501
        :type credit_earn_histories: list[OrmCreditEarnHistory]
        """

        self._credit_earn_histories = credit_earn_histories

    @property
    def default_organization(self):
        """Gets the default_organization of this OrmUserEdges.  # noqa: E501


        :return: The default_organization of this OrmUserEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._default_organization

    @default_organization.setter
    def default_organization(self, default_organization):
        """Sets the default_organization of this OrmUserEdges.


        :param default_organization: The default_organization of this OrmUserEdges.  # noqa: E501
        :type default_organization: OrmOrganization
        """

        self._default_organization = default_organization

    @property
    def experiments(self):
        """Gets the experiments of this OrmUserEdges.  # noqa: E501


        :return: The experiments of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmExperiment]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this OrmUserEdges.


        :param experiments: The experiments of this OrmUserEdges.  # noqa: E501
        :type experiments: list[OrmExperiment]
        """

        self._experiments = experiments

    @property
    def hub_model_task_histories(self):
        """Gets the hub_model_task_histories of this OrmUserEdges.  # noqa: E501


        :return: The hub_model_task_histories of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmHubModelTaskHistory]
        """
        return self._hub_model_task_histories

    @hub_model_task_histories.setter
    def hub_model_task_histories(self, hub_model_task_histories):
        """Sets the hub_model_task_histories of this OrmUserEdges.


        :param hub_model_task_histories: The hub_model_task_histories of this OrmUserEdges.  # noqa: E501
        :type hub_model_task_histories: list[OrmHubModelTaskHistory]
        """

        self._hub_model_task_histories = hub_model_task_histories

    @property
    def hub_model_tasks(self):
        """Gets the hub_model_tasks of this OrmUserEdges.  # noqa: E501


        :return: The hub_model_tasks of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmHubModelTask]
        """
        return self._hub_model_tasks

    @hub_model_tasks.setter
    def hub_model_tasks(self, hub_model_tasks):
        """Sets the hub_model_tasks of this OrmUserEdges.


        :param hub_model_tasks: The hub_model_tasks of this OrmUserEdges.  # noqa: E501
        :type hub_model_tasks: list[OrmHubModelTask]
        """

        self._hub_model_tasks = hub_model_tasks

    @property
    def judged_pipeline_step_executions(self):
        """Gets the judged_pipeline_step_executions of this OrmUserEdges.  # noqa: E501


        :return: The judged_pipeline_step_executions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmPipelineStepExecution]
        """
        return self._judged_pipeline_step_executions

    @judged_pipeline_step_executions.setter
    def judged_pipeline_step_executions(self, judged_pipeline_step_executions):
        """Sets the judged_pipeline_step_executions of this OrmUserEdges.


        :param judged_pipeline_step_executions: The judged_pipeline_step_executions of this OrmUserEdges.  # noqa: E501
        :type judged_pipeline_step_executions: list[OrmPipelineStepExecution]
        """

        self._judged_pipeline_step_executions = judged_pipeline_step_executions

    @property
    def llm_api_keys(self):
        """Gets the llm_api_keys of this OrmUserEdges.  # noqa: E501


        :return: The llm_api_keys of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMApiKey]
        """
        return self._llm_api_keys

    @llm_api_keys.setter
    def llm_api_keys(self, llm_api_keys):
        """Sets the llm_api_keys of this OrmUserEdges.


        :param llm_api_keys: The llm_api_keys of this OrmUserEdges.  # noqa: E501
        :type llm_api_keys: list[OrmLLMApiKey]
        """

        self._llm_api_keys = llm_api_keys

    @property
    def llm_documents(self):
        """Gets the llm_documents of this OrmUserEdges.  # noqa: E501


        :return: The llm_documents of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMDocument]
        """
        return self._llm_documents

    @llm_documents.setter
    def llm_documents(self, llm_documents):
        """Sets the llm_documents of this OrmUserEdges.


        :param llm_documents: The llm_documents of this OrmUserEdges.  # noqa: E501
        :type llm_documents: list[OrmLLMDocument]
        """

        self._llm_documents = llm_documents

    @property
    def llm_knowledge(self):
        """Gets the llm_knowledge of this OrmUserEdges.  # noqa: E501


        :return: The llm_knowledge of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMKnowledge]
        """
        return self._llm_knowledge

    @llm_knowledge.setter
    def llm_knowledge(self, llm_knowledge):
        """Sets the llm_knowledge of this OrmUserEdges.


        :param llm_knowledge: The llm_knowledge of this OrmUserEdges.  # noqa: E501
        :type llm_knowledge: list[OrmLLMKnowledge]
        """

        self._llm_knowledge = llm_knowledge

    @property
    def llm_knowledge_jobs(self):
        """Gets the llm_knowledge_jobs of this OrmUserEdges.  # noqa: E501


        :return: The llm_knowledge_jobs of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMKnowledgeJob]
        """
        return self._llm_knowledge_jobs

    @llm_knowledge_jobs.setter
    def llm_knowledge_jobs(self, llm_knowledge_jobs):
        """Sets the llm_knowledge_jobs of this OrmUserEdges.


        :param llm_knowledge_jobs: The llm_knowledge_jobs of this OrmUserEdges.  # noqa: E501
        :type llm_knowledge_jobs: list[OrmLLMKnowledgeJob]
        """

        self._llm_knowledge_jobs = llm_knowledge_jobs

    @property
    def llm_model_connections(self):
        """Gets the llm_model_connections of this OrmUserEdges.  # noqa: E501


        :return: The llm_model_connections of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMModelConnection]
        """
        return self._llm_model_connections

    @llm_model_connections.setter
    def llm_model_connections(self, llm_model_connections):
        """Sets the llm_model_connections of this OrmUserEdges.


        :param llm_model_connections: The llm_model_connections of this OrmUserEdges.  # noqa: E501
        :type llm_model_connections: list[OrmLLMModelConnection]
        """

        self._llm_model_connections = llm_model_connections

    @property
    def llm_model_parameter_definitions(self):
        """Gets the llm_model_parameter_definitions of this OrmUserEdges.  # noqa: E501


        :return: The llm_model_parameter_definitions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMModelParameterDefinition]
        """
        return self._llm_model_parameter_definitions

    @llm_model_parameter_definitions.setter
    def llm_model_parameter_definitions(self, llm_model_parameter_definitions):
        """Sets the llm_model_parameter_definitions of this OrmUserEdges.


        :param llm_model_parameter_definitions: The llm_model_parameter_definitions of this OrmUserEdges.  # noqa: E501
        :type llm_model_parameter_definitions: list[OrmLLMModelParameterDefinition]
        """

        self._llm_model_parameter_definitions = llm_model_parameter_definitions

    @property
    def llm_model_parameter_presets(self):
        """Gets the llm_model_parameter_presets of this OrmUserEdges.  # noqa: E501


        :return: The llm_model_parameter_presets of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMModelParameterPreset]
        """
        return self._llm_model_parameter_presets

    @llm_model_parameter_presets.setter
    def llm_model_parameter_presets(self, llm_model_parameter_presets):
        """Sets the llm_model_parameter_presets of this OrmUserEdges.


        :param llm_model_parameter_presets: The llm_model_parameter_presets of this OrmUserEdges.  # noqa: E501
        :type llm_model_parameter_presets: list[OrmLLMModelParameterPreset]
        """

        self._llm_model_parameter_presets = llm_model_parameter_presets

    @property
    def llm_user_groups(self):
        """Gets the llm_user_groups of this OrmUserEdges.  # noqa: E501


        :return: The llm_user_groups of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMUserGroup]
        """
        return self._llm_user_groups

    @llm_user_groups.setter
    def llm_user_groups(self, llm_user_groups):
        """Sets the llm_user_groups of this OrmUserEdges.


        :param llm_user_groups: The llm_user_groups of this OrmUserEdges.  # noqa: E501
        :type llm_user_groups: list[OrmLLMUserGroup]
        """

        self._llm_user_groups = llm_user_groups

    @property
    def llm_vectordb_connections(self):
        """Gets the llm_vectordb_connections of this OrmUserEdges.  # noqa: E501


        :return: The llm_vectordb_connections of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMVectorDBConnection]
        """
        return self._llm_vectordb_connections

    @llm_vectordb_connections.setter
    def llm_vectordb_connections(self, llm_vectordb_connections):
        """Sets the llm_vectordb_connections of this OrmUserEdges.


        :param llm_vectordb_connections: The llm_vectordb_connections of this OrmUserEdges.  # noqa: E501
        :type llm_vectordb_connections: list[OrmLLMVectorDBConnection]
        """

        self._llm_vectordb_connections = llm_vectordb_connections

    @property
    def llm_workflow_revisions(self):
        """Gets the llm_workflow_revisions of this OrmUserEdges.  # noqa: E501


        :return: The llm_workflow_revisions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMWorkflowRevision]
        """
        return self._llm_workflow_revisions

    @llm_workflow_revisions.setter
    def llm_workflow_revisions(self, llm_workflow_revisions):
        """Sets the llm_workflow_revisions of this OrmUserEdges.


        :param llm_workflow_revisions: The llm_workflow_revisions of this OrmUserEdges.  # noqa: E501
        :type llm_workflow_revisions: list[OrmLLMWorkflowRevision]
        """

        self._llm_workflow_revisions = llm_workflow_revisions

    @property
    def llm_workflows(self):
        """Gets the llm_workflows of this OrmUserEdges.  # noqa: E501


        :return: The llm_workflows of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmLLMWorkflow]
        """
        return self._llm_workflows

    @llm_workflows.setter
    def llm_workflows(self, llm_workflows):
        """Sets the llm_workflows of this OrmUserEdges.


        :param llm_workflows: The llm_workflows of this OrmUserEdges.  # noqa: E501
        :type llm_workflows: list[OrmLLMWorkflow]
        """

        self._llm_workflows = llm_workflows

    @property
    def memberships(self):
        """Gets the memberships of this OrmUserEdges.  # noqa: E501


        :return: The memberships of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserGroupMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this OrmUserEdges.


        :param memberships: The memberships of this OrmUserEdges.  # noqa: E501
        :type memberships: list[OrmUserGroupMembership]
        """

        self._memberships = memberships

    @property
    def model_service_revisions(self):
        """Gets the model_service_revisions of this OrmUserEdges.  # noqa: E501


        :return: The model_service_revisions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelServiceRevision]
        """
        return self._model_service_revisions

    @model_service_revisions.setter
    def model_service_revisions(self, model_service_revisions):
        """Sets the model_service_revisions of this OrmUserEdges.


        :param model_service_revisions: The model_service_revisions of this OrmUserEdges.  # noqa: E501
        :type model_service_revisions: list[OrmModelServiceRevision]
        """

        self._model_service_revisions = model_service_revisions

    @property
    def model_service_rollouts(self):
        """Gets the model_service_rollouts of this OrmUserEdges.  # noqa: E501


        :return: The model_service_rollouts of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelServiceRollout]
        """
        return self._model_service_rollouts

    @model_service_rollouts.setter
    def model_service_rollouts(self, model_service_rollouts):
        """Sets the model_service_rollouts of this OrmUserEdges.


        :param model_service_rollouts: The model_service_rollouts of this OrmUserEdges.  # noqa: E501
        :type model_service_rollouts: list[OrmModelServiceRollout]
        """

        self._model_service_rollouts = model_service_rollouts

    @property
    def model_services(self):
        """Gets the model_services of this OrmUserEdges.  # noqa: E501


        :return: The model_services of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModelService]
        """
        return self._model_services

    @model_services.setter
    def model_services(self, model_services):
        """Sets the model_services of this OrmUserEdges.


        :param model_services: The model_services of this OrmUserEdges.  # noqa: E501
        :type model_services: list[OrmModelService]
        """

        self._model_services = model_services

    @property
    def models(self):
        """Gets the models of this OrmUserEdges.  # noqa: E501


        :return: The models of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this OrmUserEdges.


        :param models: The models of this OrmUserEdges.  # noqa: E501
        :type models: list[OrmModel]
        """

        self._models = models

    @property
    def onboardings(self):
        """Gets the onboardings of this OrmUserEdges.  # noqa: E501


        :return: The onboardings of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmOnboarding]
        """
        return self._onboardings

    @onboardings.setter
    def onboardings(self, onboardings):
        """Sets the onboardings of this OrmUserEdges.


        :param onboardings: The onboardings of this OrmUserEdges.  # noqa: E501
        :type onboardings: list[OrmOnboarding]
        """

        self._onboardings = onboardings

    @property
    def owned_organizations(self):
        """Gets the owned_organizations of this OrmUserEdges.  # noqa: E501


        :return: The owned_organizations of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmOrganization]
        """
        return self._owned_organizations

    @owned_organizations.setter
    def owned_organizations(self, owned_organizations):
        """Sets the owned_organizations of this OrmUserEdges.


        :param owned_organizations: The owned_organizations of this OrmUserEdges.  # noqa: E501
        :type owned_organizations: list[OrmOrganization]
        """

        self._owned_organizations = owned_organizations

    @property
    def persistent_artifacts(self):
        """Gets the persistent_artifacts of this OrmUserEdges.  # noqa: E501


        :return: The persistent_artifacts of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmArtifact]
        """
        return self._persistent_artifacts

    @persistent_artifacts.setter
    def persistent_artifacts(self, persistent_artifacts):
        """Sets the persistent_artifacts of this OrmUserEdges.


        :param persistent_artifacts: The persistent_artifacts of this OrmUserEdges.  # noqa: E501
        :type persistent_artifacts: list[OrmArtifact]
        """

        self._persistent_artifacts = persistent_artifacts

    @property
    def pipelines(self):
        """Gets the pipelines of this OrmUserEdges.  # noqa: E501


        :return: The pipelines of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this OrmUserEdges.


        :param pipelines: The pipelines of this OrmUserEdges.  # noqa: E501
        :type pipelines: list[OrmPipeline]
        """

        self._pipelines = pipelines

    @property
    def project_dashboards(self):
        """Gets the project_dashboards of this OrmUserEdges.  # noqa: E501


        :return: The project_dashboards of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._project_dashboards

    @project_dashboards.setter
    def project_dashboards(self, project_dashboards):
        """Sets the project_dashboards of this OrmUserEdges.


        :param project_dashboards: The project_dashboards of this OrmUserEdges.  # noqa: E501
        :type project_dashboards: list[OrmProjectDashboard]
        """

        self._project_dashboards = project_dashboards

    @property
    def reset_password_tokens(self):
        """Gets the reset_password_tokens of this OrmUserEdges.  # noqa: E501


        :return: The reset_password_tokens of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmResetPasswordToken]
        """
        return self._reset_password_tokens

    @reset_password_tokens.setter
    def reset_password_tokens(self, reset_password_tokens):
        """Sets the reset_password_tokens of this OrmUserEdges.


        :param reset_password_tokens: The reset_password_tokens of this OrmUserEdges.  # noqa: E501
        :type reset_password_tokens: list[OrmResetPasswordToken]
        """

        self._reset_password_tokens = reset_password_tokens

    @property
    def run_executions(self):
        """Gets the run_executions of this OrmUserEdges.  # noqa: E501


        :return: The run_executions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmRunExecution]
        """
        return self._run_executions

    @run_executions.setter
    def run_executions(self, run_executions):
        """Sets the run_executions of this OrmUserEdges.


        :param run_executions: The run_executions of this OrmUserEdges.  # noqa: E501
        :type run_executions: list[OrmRunExecution]
        """

        self._run_executions = run_executions

    @property
    def run_tracking_dashboards(self):
        """Gets the run_tracking_dashboards of this OrmUserEdges.  # noqa: E501


        :return: The run_tracking_dashboards of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmRunTrackingDashboard]
        """
        return self._run_tracking_dashboards

    @run_tracking_dashboards.setter
    def run_tracking_dashboards(self, run_tracking_dashboards):
        """Sets the run_tracking_dashboards of this OrmUserEdges.


        :param run_tracking_dashboards: The run_tracking_dashboards of this OrmUserEdges.  # noqa: E501
        :type run_tracking_dashboards: list[OrmRunTrackingDashboard]
        """

        self._run_tracking_dashboards = run_tracking_dashboards

    @property
    def starred_dashboards(self):
        """Gets the starred_dashboards of this OrmUserEdges.  # noqa: E501


        :return: The starred_dashboards of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._starred_dashboards

    @starred_dashboards.setter
    def starred_dashboards(self, starred_dashboards):
        """Sets the starred_dashboards of this OrmUserEdges.


        :param starred_dashboards: The starred_dashboards of this OrmUserEdges.  # noqa: E501
        :type starred_dashboards: list[OrmProjectDashboard]
        """

        self._starred_dashboards = starred_dashboards

    @property
    def triggered_pipeline_executions(self):
        """Gets the triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501


        :return: The triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmPipelineExecution]
        """
        return self._triggered_pipeline_executions

    @triggered_pipeline_executions.setter
    def triggered_pipeline_executions(self, triggered_pipeline_executions):
        """Sets the triggered_pipeline_executions of this OrmUserEdges.


        :param triggered_pipeline_executions: The triggered_pipeline_executions of this OrmUserEdges.  # noqa: E501
        :type triggered_pipeline_executions: list[OrmPipelineExecution]
        """

        self._triggered_pipeline_executions = triggered_pipeline_executions

    @property
    def user_history_as_transferer(self):
        """Gets the user_history_as_transferer of this OrmUserEdges.  # noqa: E501


        :return: The user_history_as_transferer of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserHistory]
        """
        return self._user_history_as_transferer

    @user_history_as_transferer.setter
    def user_history_as_transferer(self, user_history_as_transferer):
        """Sets the user_history_as_transferer of this OrmUserEdges.


        :param user_history_as_transferer: The user_history_as_transferer of this OrmUserEdges.  # noqa: E501
        :type user_history_as_transferer: list[OrmUserHistory]
        """

        self._user_history_as_transferer = user_history_as_transferer

    @property
    def user_organization(self):
        """Gets the user_organization of this OrmUserEdges.  # noqa: E501


        :return: The user_organization of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserOrganization]
        """
        return self._user_organization

    @user_organization.setter
    def user_organization(self, user_organization):
        """Sets the user_organization of this OrmUserEdges.


        :param user_organization: The user_organization of this OrmUserEdges.  # noqa: E501
        :type user_organization: list[OrmUserOrganization]
        """

        self._user_organization = user_organization

    @property
    def user_starred_projects(self):
        """Gets the user_starred_projects of this OrmUserEdges.  # noqa: E501


        :return: The user_starred_projects of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserStarredProjects]
        """
        return self._user_starred_projects

    @user_starred_projects.setter
    def user_starred_projects(self, user_starred_projects):
        """Sets the user_starred_projects of this OrmUserEdges.


        :param user_starred_projects: The user_starred_projects of this OrmUserEdges.  # noqa: E501
        :type user_starred_projects: list[OrmUserStarredProjects]
        """

        self._user_starred_projects = user_starred_projects

    @property
    def withdraw_history_organizations(self):
        """Gets the withdraw_history_organizations of this OrmUserEdges.  # noqa: E501


        :return: The withdraw_history_organizations of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmWithdrawHistoryOrganization]
        """
        return self._withdraw_history_organizations

    @withdraw_history_organizations.setter
    def withdraw_history_organizations(self, withdraw_history_organizations):
        """Sets the withdraw_history_organizations of this OrmUserEdges.


        :param withdraw_history_organizations: The withdraw_history_organizations of this OrmUserEdges.  # noqa: E501
        :type withdraw_history_organizations: list[OrmWithdrawHistoryOrganization]
        """

        self._withdraw_history_organizations = withdraw_history_organizations

    @property
    def withdraw_history_workloads(self):
        """Gets the withdraw_history_workloads of this OrmUserEdges.  # noqa: E501


        :return: The withdraw_history_workloads of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmWithdrawHistoryWorkload]
        """
        return self._withdraw_history_workloads

    @withdraw_history_workloads.setter
    def withdraw_history_workloads(self, withdraw_history_workloads):
        """Sets the withdraw_history_workloads of this OrmUserEdges.


        :param withdraw_history_workloads: The withdraw_history_workloads of this OrmUserEdges.  # noqa: E501
        :type withdraw_history_workloads: list[OrmWithdrawHistoryWorkload]
        """

        self._withdraw_history_workloads = withdraw_history_workloads

    @property
    def workspaces(self):
        """Gets the workspaces of this OrmUserEdges.  # noqa: E501


        :return: The workspaces of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this OrmUserEdges.


        :param workspaces: The workspaces of this OrmUserEdges.  # noqa: E501
        :type workspaces: list[OrmWorkspace]
        """

        self._workspaces = workspaces

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmUserEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmUserEdges):
            return True

        return self.to_dict() != other.to_dict()
