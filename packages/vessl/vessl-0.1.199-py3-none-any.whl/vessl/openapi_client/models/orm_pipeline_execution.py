# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmPipelineExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'dict[str, object]',
        'created_dt': 'datetime',
        'debug_enabled': 'bool',
        'edges': 'OrmPipelineExecutionEdges',
        'end_dt': 'datetime',
        'id': 'int',
        'immutable_slug': 'str',
        'number': 'int',
        'output_variables': 'dict[str, object]',
        'pipeline_id': 'int',
        'pipeline_spec_id': 'int',
        'reason': 'str',
        'source_trigger_id': 'int',
        'status': 'str',
        'triggered_user_id': 'int',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'arguments': 'arguments',
        'created_dt': 'created_dt',
        'debug_enabled': 'debug_enabled',
        'edges': 'edges',
        'end_dt': 'end_dt',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'number': 'number',
        'output_variables': 'output_variables',
        'pipeline_id': 'pipeline_id',
        'pipeline_spec_id': 'pipeline_spec_id',
        'reason': 'reason',
        'source_trigger_id': 'source_trigger_id',
        'status': 'status',
        'triggered_user_id': 'triggered_user_id',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, arguments=None, created_dt=None, debug_enabled=None, edges=None, end_dt=None, id=None, immutable_slug=None, number=None, output_variables=None, pipeline_id=None, pipeline_spec_id=None, reason=None, source_trigger_id=None, status=None, triggered_user_id=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._created_dt = None
        self._debug_enabled = None
        self._edges = None
        self._end_dt = None
        self._id = None
        self._immutable_slug = None
        self._number = None
        self._output_variables = None
        self._pipeline_id = None
        self._pipeline_spec_id = None
        self._reason = None
        self._source_trigger_id = None
        self._status = None
        self._triggered_user_id = None
        self._updated_dt = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        if created_dt is not None:
            self.created_dt = created_dt
        if debug_enabled is not None:
            self.debug_enabled = debug_enabled
        if edges is not None:
            self.edges = edges
        self.end_dt = end_dt
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if number is not None:
            self.number = number
        if output_variables is not None:
            self.output_variables = output_variables
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if pipeline_spec_id is not None:
            self.pipeline_spec_id = pipeline_spec_id
        if reason is not None:
            self.reason = reason
        self.source_trigger_id = source_trigger_id
        if status is not None:
            self.status = status
        self.triggered_user_id = triggered_user_id
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def arguments(self):
        """Gets the arguments of this OrmPipelineExecution.  # noqa: E501


        :return: The arguments of this OrmPipelineExecution.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this OrmPipelineExecution.


        :param arguments: The arguments of this OrmPipelineExecution.  # noqa: E501
        :type arguments: dict[str, object]
        """

        self._arguments = arguments

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmPipelineExecution.  # noqa: E501


        :return: The created_dt of this OrmPipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmPipelineExecution.


        :param created_dt: The created_dt of this OrmPipelineExecution.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def debug_enabled(self):
        """Gets the debug_enabled of this OrmPipelineExecution.  # noqa: E501


        :return: The debug_enabled of this OrmPipelineExecution.  # noqa: E501
        :rtype: bool
        """
        return self._debug_enabled

    @debug_enabled.setter
    def debug_enabled(self, debug_enabled):
        """Sets the debug_enabled of this OrmPipelineExecution.


        :param debug_enabled: The debug_enabled of this OrmPipelineExecution.  # noqa: E501
        :type debug_enabled: bool
        """

        self._debug_enabled = debug_enabled

    @property
    def edges(self):
        """Gets the edges of this OrmPipelineExecution.  # noqa: E501


        :return: The edges of this OrmPipelineExecution.  # noqa: E501
        :rtype: OrmPipelineExecutionEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmPipelineExecution.


        :param edges: The edges of this OrmPipelineExecution.  # noqa: E501
        :type edges: OrmPipelineExecutionEdges
        """

        self._edges = edges

    @property
    def end_dt(self):
        """Gets the end_dt of this OrmPipelineExecution.  # noqa: E501


        :return: The end_dt of this OrmPipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_dt

    @end_dt.setter
    def end_dt(self, end_dt):
        """Sets the end_dt of this OrmPipelineExecution.


        :param end_dt: The end_dt of this OrmPipelineExecution.  # noqa: E501
        :type end_dt: datetime
        """

        self._end_dt = end_dt

    @property
    def id(self):
        """Gets the id of this OrmPipelineExecution.  # noqa: E501


        :return: The id of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmPipelineExecution.


        :param id: The id of this OrmPipelineExecution.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmPipelineExecution.  # noqa: E501


        :return: The immutable_slug of this OrmPipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmPipelineExecution.


        :param immutable_slug: The immutable_slug of this OrmPipelineExecution.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def number(self):
        """Gets the number of this OrmPipelineExecution.  # noqa: E501


        :return: The number of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrmPipelineExecution.


        :param number: The number of this OrmPipelineExecution.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def output_variables(self):
        """Gets the output_variables of this OrmPipelineExecution.  # noqa: E501


        :return: The output_variables of this OrmPipelineExecution.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._output_variables

    @output_variables.setter
    def output_variables(self, output_variables):
        """Sets the output_variables of this OrmPipelineExecution.


        :param output_variables: The output_variables of this OrmPipelineExecution.  # noqa: E501
        :type output_variables: dict[str, object]
        """

        self._output_variables = output_variables

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this OrmPipelineExecution.  # noqa: E501


        :return: The pipeline_id of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this OrmPipelineExecution.


        :param pipeline_id: The pipeline_id of this OrmPipelineExecution.  # noqa: E501
        :type pipeline_id: int
        """

        self._pipeline_id = pipeline_id

    @property
    def pipeline_spec_id(self):
        """Gets the pipeline_spec_id of this OrmPipelineExecution.  # noqa: E501


        :return: The pipeline_spec_id of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_spec_id

    @pipeline_spec_id.setter
    def pipeline_spec_id(self, pipeline_spec_id):
        """Sets the pipeline_spec_id of this OrmPipelineExecution.


        :param pipeline_spec_id: The pipeline_spec_id of this OrmPipelineExecution.  # noqa: E501
        :type pipeline_spec_id: int
        """

        self._pipeline_spec_id = pipeline_spec_id

    @property
    def reason(self):
        """Gets the reason of this OrmPipelineExecution.  # noqa: E501


        :return: The reason of this OrmPipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this OrmPipelineExecution.


        :param reason: The reason of this OrmPipelineExecution.  # noqa: E501
        :type reason: str
        """

        self._reason = reason

    @property
    def source_trigger_id(self):
        """Gets the source_trigger_id of this OrmPipelineExecution.  # noqa: E501


        :return: The source_trigger_id of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._source_trigger_id

    @source_trigger_id.setter
    def source_trigger_id(self, source_trigger_id):
        """Sets the source_trigger_id of this OrmPipelineExecution.


        :param source_trigger_id: The source_trigger_id of this OrmPipelineExecution.  # noqa: E501
        :type source_trigger_id: int
        """

        self._source_trigger_id = source_trigger_id

    @property
    def status(self):
        """Gets the status of this OrmPipelineExecution.  # noqa: E501


        :return: The status of this OrmPipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmPipelineExecution.


        :param status: The status of this OrmPipelineExecution.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def triggered_user_id(self):
        """Gets the triggered_user_id of this OrmPipelineExecution.  # noqa: E501


        :return: The triggered_user_id of this OrmPipelineExecution.  # noqa: E501
        :rtype: int
        """
        return self._triggered_user_id

    @triggered_user_id.setter
    def triggered_user_id(self, triggered_user_id):
        """Sets the triggered_user_id of this OrmPipelineExecution.


        :param triggered_user_id: The triggered_user_id of this OrmPipelineExecution.  # noqa: E501
        :type triggered_user_id: int
        """

        self._triggered_user_id = triggered_user_id

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmPipelineExecution.  # noqa: E501


        :return: The updated_dt of this OrmPipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmPipelineExecution.


        :param updated_dt: The updated_dt of this OrmPipelineExecution.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineExecution):
            return True

        return self.to_dict() != other.to_dict()
