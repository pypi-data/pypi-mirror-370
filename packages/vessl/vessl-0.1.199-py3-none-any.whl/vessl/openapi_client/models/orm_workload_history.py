# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmWorkloadHistory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'OrmWorkloadHistoryEdges',
        'end_dt': 'datetime',
        'hourly_micro_credit': 'int',
        'id': 'int',
        'immutable_slug': 'str',
        'is_running_time_extended': 'bool',
        'message': 'str',
        'resource_spec_id': 'int',
        'status': 'str',
        'updated_dt': 'datetime',
        'workload_history_workload': 'int'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'end_dt': 'end_dt',
        'hourly_micro_credit': 'hourly_micro_credit',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_running_time_extended': 'is_running_time_extended',
        'message': 'message',
        'resource_spec_id': 'resource_spec_id',
        'status': 'status',
        'updated_dt': 'updated_dt',
        'workload_history_workload': 'workload_history_workload'
    }

    def __init__(self, created_dt=None, edges=None, end_dt=None, hourly_micro_credit=None, id=None, immutable_slug=None, is_running_time_extended=None, message=None, resource_spec_id=None, status=None, updated_dt=None, workload_history_workload=None, local_vars_configuration=None):  # noqa: E501
        """OrmWorkloadHistory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._end_dt = None
        self._hourly_micro_credit = None
        self._id = None
        self._immutable_slug = None
        self._is_running_time_extended = None
        self._message = None
        self._resource_spec_id = None
        self._status = None
        self._updated_dt = None
        self._workload_history_workload = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        self.end_dt = end_dt
        self.hourly_micro_credit = hourly_micro_credit
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_running_time_extended is not None:
            self.is_running_time_extended = is_running_time_extended
        if message is not None:
            self.message = message
        self.resource_spec_id = resource_spec_id
        if status is not None:
            self.status = status
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if workload_history_workload is not None:
            self.workload_history_workload = workload_history_workload

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmWorkloadHistory.  # noqa: E501


        :return: The created_dt of this OrmWorkloadHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmWorkloadHistory.


        :param created_dt: The created_dt of this OrmWorkloadHistory.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmWorkloadHistory.  # noqa: E501


        :return: The edges of this OrmWorkloadHistory.  # noqa: E501
        :rtype: OrmWorkloadHistoryEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmWorkloadHistory.


        :param edges: The edges of this OrmWorkloadHistory.  # noqa: E501
        :type edges: OrmWorkloadHistoryEdges
        """

        self._edges = edges

    @property
    def end_dt(self):
        """Gets the end_dt of this OrmWorkloadHistory.  # noqa: E501


        :return: The end_dt of this OrmWorkloadHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._end_dt

    @end_dt.setter
    def end_dt(self, end_dt):
        """Sets the end_dt of this OrmWorkloadHistory.


        :param end_dt: The end_dt of this OrmWorkloadHistory.  # noqa: E501
        :type end_dt: datetime
        """

        self._end_dt = end_dt

    @property
    def hourly_micro_credit(self):
        """Gets the hourly_micro_credit of this OrmWorkloadHistory.  # noqa: E501


        :return: The hourly_micro_credit of this OrmWorkloadHistory.  # noqa: E501
        :rtype: int
        """
        return self._hourly_micro_credit

    @hourly_micro_credit.setter
    def hourly_micro_credit(self, hourly_micro_credit):
        """Sets the hourly_micro_credit of this OrmWorkloadHistory.


        :param hourly_micro_credit: The hourly_micro_credit of this OrmWorkloadHistory.  # noqa: E501
        :type hourly_micro_credit: int
        """

        self._hourly_micro_credit = hourly_micro_credit

    @property
    def id(self):
        """Gets the id of this OrmWorkloadHistory.  # noqa: E501


        :return: The id of this OrmWorkloadHistory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmWorkloadHistory.


        :param id: The id of this OrmWorkloadHistory.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmWorkloadHistory.  # noqa: E501


        :return: The immutable_slug of this OrmWorkloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmWorkloadHistory.


        :param immutable_slug: The immutable_slug of this OrmWorkloadHistory.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_running_time_extended(self):
        """Gets the is_running_time_extended of this OrmWorkloadHistory.  # noqa: E501


        :return: The is_running_time_extended of this OrmWorkloadHistory.  # noqa: E501
        :rtype: bool
        """
        return self._is_running_time_extended

    @is_running_time_extended.setter
    def is_running_time_extended(self, is_running_time_extended):
        """Sets the is_running_time_extended of this OrmWorkloadHistory.


        :param is_running_time_extended: The is_running_time_extended of this OrmWorkloadHistory.  # noqa: E501
        :type is_running_time_extended: bool
        """

        self._is_running_time_extended = is_running_time_extended

    @property
    def message(self):
        """Gets the message of this OrmWorkloadHistory.  # noqa: E501


        :return: The message of this OrmWorkloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OrmWorkloadHistory.


        :param message: The message of this OrmWorkloadHistory.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def resource_spec_id(self):
        """Gets the resource_spec_id of this OrmWorkloadHistory.  # noqa: E501


        :return: The resource_spec_id of this OrmWorkloadHistory.  # noqa: E501
        :rtype: int
        """
        return self._resource_spec_id

    @resource_spec_id.setter
    def resource_spec_id(self, resource_spec_id):
        """Sets the resource_spec_id of this OrmWorkloadHistory.


        :param resource_spec_id: The resource_spec_id of this OrmWorkloadHistory.  # noqa: E501
        :type resource_spec_id: int
        """

        self._resource_spec_id = resource_spec_id

    @property
    def status(self):
        """Gets the status of this OrmWorkloadHistory.  # noqa: E501


        :return: The status of this OrmWorkloadHistory.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmWorkloadHistory.


        :param status: The status of this OrmWorkloadHistory.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmWorkloadHistory.  # noqa: E501


        :return: The updated_dt of this OrmWorkloadHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmWorkloadHistory.


        :param updated_dt: The updated_dt of this OrmWorkloadHistory.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def workload_history_workload(self):
        """Gets the workload_history_workload of this OrmWorkloadHistory.  # noqa: E501


        :return: The workload_history_workload of this OrmWorkloadHistory.  # noqa: E501
        :rtype: int
        """
        return self._workload_history_workload

    @workload_history_workload.setter
    def workload_history_workload(self, workload_history_workload):
        """Sets the workload_history_workload of this OrmWorkloadHistory.


        :param workload_history_workload: The workload_history_workload of this OrmWorkloadHistory.  # noqa: E501
        :type workload_history_workload: int
        """

        self._workload_history_workload = workload_history_workload

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmWorkloadHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmWorkloadHistory):
            return True

        return self.to_dict() != other.to_dict()
