# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ProtoLLMVectorDBConnConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authentication': 'ProtoLLMVectorDBConnAuth',
        'created_by': 'ProtoUser',
        'created_dt': 'float',
        'id': 'int',
        'name': 'str',
        'updated_dt': 'float',
        'url': 'str',
        'vdb_type': 'str'
    }

    attribute_map = {
        'authentication': 'authentication',
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'id': 'id',
        'name': 'name',
        'updated_dt': 'updated_dt',
        'url': 'url',
        'vdb_type': 'vdb_type'
    }

    def __init__(self, authentication=None, created_by=None, created_dt=None, id=None, name=None, updated_dt=None, url=None, vdb_type=None, local_vars_configuration=None):  # noqa: E501
        """ProtoLLMVectorDBConnConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._authentication = None
        self._created_by = None
        self._created_dt = None
        self._id = None
        self._name = None
        self._updated_dt = None
        self._url = None
        self._vdb_type = None
        self.discriminator = None

        self.authentication = authentication
        if created_by is not None:
            self.created_by = created_by
        if created_dt is not None:
            self.created_dt = created_dt
        if id is not None:
            self.id = id
        self.name = name
        if updated_dt is not None:
            self.updated_dt = updated_dt
        self.url = url
        self.vdb_type = vdb_type

    @property
    def authentication(self):
        """Gets the authentication of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The authentication of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: ProtoLLMVectorDBConnAuth
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ProtoLLMVectorDBConnConfig.


        :param authentication: The authentication of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type authentication: ProtoLLMVectorDBConnAuth
        """
        if self.local_vars_configuration.client_side_validation and authentication is None:  # noqa: E501
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def created_by(self):
        """Gets the created_by of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The created_by of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: ProtoUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProtoLLMVectorDBConnConfig.


        :param created_by: The created_by of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type created_by: ProtoUser
        """

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The created_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: float
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ProtoLLMVectorDBConnConfig.


        :param created_dt: The created_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type created_dt: float
        """

        self._created_dt = created_dt

    @property
    def id(self):
        """Gets the id of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The id of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtoLLMVectorDBConnConfig.


        :param id: The id of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The name of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProtoLLMVectorDBConnConfig.


        :param name: The name of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The updated_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: float
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ProtoLLMVectorDBConnConfig.


        :param updated_dt: The updated_dt of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type updated_dt: float
        """

        self._updated_dt = updated_dt

    @property
    def url(self):
        """Gets the url of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The url of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProtoLLMVectorDBConnConfig.


        :param url: The url of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def vdb_type(self):
        """Gets the vdb_type of this ProtoLLMVectorDBConnConfig.  # noqa: E501


        :return: The vdb_type of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :rtype: str
        """
        return self._vdb_type

    @vdb_type.setter
    def vdb_type(self, vdb_type):
        """Sets the vdb_type of this ProtoLLMVectorDBConnConfig.


        :param vdb_type: The vdb_type of this ProtoLLMVectorDBConnConfig.  # noqa: E501
        :type vdb_type: str
        """
        if self.local_vars_configuration.client_side_validation and vdb_type is None:  # noqa: E501
            raise ValueError("Invalid value for `vdb_type`, must not be `None`")  # noqa: E501
        allowed_values = ["chroma"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vdb_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vdb_type` ({0}), must be one of {1}"  # noqa: E501
                .format(vdb_type, allowed_values)
            )

        self._vdb_type = vdb_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtoLLMVectorDBConnConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtoLLMVectorDBConnConfig):
            return True

        return self.to_dict() != other.to_dict()
