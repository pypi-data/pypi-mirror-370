# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseModelServiceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_rollout': 'ResponseActiveModelServiceRolloutSummary',
        'alive_revision_numbers': 'list[int]',
        'assume_subject': 'ResponseRbacPolicySubject',
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'description': 'str',
        'docs_enabled': 'bool',
        'gateway_config': 'ResponseModelServiceGatewayInfo',
        'id': 'int',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_id': 'int',
        'kernel_cluster_name': 'str',
        'last_updated_by': 'ResponseUser',
        'name': 'str',
        'running_replicas': 'int',
        'secret': 'ResponseSecret',
        'serverless': 'ResponseModelServiceServerlessProperties',
        'status': 'str',
        'total_replicas': 'int',
        'total_revisions': 'int',
        'type': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'active_rollout': 'active_rollout',
        'alive_revision_numbers': 'alive_revision_numbers',
        'assume_subject': 'assume_subject',
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'description': 'description',
        'docs_enabled': 'docs_enabled',
        'gateway_config': 'gateway_config',
        'id': 'id',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_id': 'kernel_cluster_id',
        'kernel_cluster_name': 'kernel_cluster_name',
        'last_updated_by': 'last_updated_by',
        'name': 'name',
        'running_replicas': 'running_replicas',
        'secret': 'secret',
        'serverless': 'serverless',
        'status': 'status',
        'total_replicas': 'total_replicas',
        'total_revisions': 'total_revisions',
        'type': 'type',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, active_rollout=None, alive_revision_numbers=None, assume_subject=None, created_by=None, created_dt=None, description=None, docs_enabled=None, gateway_config=None, id=None, kernel_cluster=None, kernel_cluster_id=None, kernel_cluster_name=None, last_updated_by=None, name=None, running_replicas=None, secret=None, serverless=None, status=None, total_replicas=None, total_revisions=None, type=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseModelServiceInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._active_rollout = None
        self._alive_revision_numbers = None
        self._assume_subject = None
        self._created_by = None
        self._created_dt = None
        self._description = None
        self._docs_enabled = None
        self._gateway_config = None
        self._id = None
        self._kernel_cluster = None
        self._kernel_cluster_id = None
        self._kernel_cluster_name = None
        self._last_updated_by = None
        self._name = None
        self._running_replicas = None
        self._secret = None
        self._serverless = None
        self._status = None
        self._total_replicas = None
        self._total_revisions = None
        self._type = None
        self._updated_dt = None
        self.discriminator = None

        if active_rollout is not None:
            self.active_rollout = active_rollout
        self.alive_revision_numbers = alive_revision_numbers
        self.assume_subject = assume_subject
        self.created_by = created_by
        self.created_dt = created_dt
        self.description = description
        self.docs_enabled = docs_enabled
        if gateway_config is not None:
            self.gateway_config = gateway_config
        self.id = id
        self.kernel_cluster = kernel_cluster
        self.kernel_cluster_id = kernel_cluster_id
        self.kernel_cluster_name = kernel_cluster_name
        self.last_updated_by = last_updated_by
        self.name = name
        self.running_replicas = running_replicas
        if secret is not None:
            self.secret = secret
        if serverless is not None:
            self.serverless = serverless
        self.status = status
        self.total_replicas = total_replicas
        self.total_revisions = total_revisions
        self.type = type
        self.updated_dt = updated_dt

    @property
    def active_rollout(self):
        """Gets the active_rollout of this ResponseModelServiceInfo.  # noqa: E501


        :return: The active_rollout of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseActiveModelServiceRolloutSummary
        """
        return self._active_rollout

    @active_rollout.setter
    def active_rollout(self, active_rollout):
        """Sets the active_rollout of this ResponseModelServiceInfo.


        :param active_rollout: The active_rollout of this ResponseModelServiceInfo.  # noqa: E501
        :type active_rollout: ResponseActiveModelServiceRolloutSummary
        """

        self._active_rollout = active_rollout

    @property
    def alive_revision_numbers(self):
        """Gets the alive_revision_numbers of this ResponseModelServiceInfo.  # noqa: E501


        :return: The alive_revision_numbers of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._alive_revision_numbers

    @alive_revision_numbers.setter
    def alive_revision_numbers(self, alive_revision_numbers):
        """Sets the alive_revision_numbers of this ResponseModelServiceInfo.


        :param alive_revision_numbers: The alive_revision_numbers of this ResponseModelServiceInfo.  # noqa: E501
        :type alive_revision_numbers: list[int]
        """
        if self.local_vars_configuration.client_side_validation and alive_revision_numbers is None:  # noqa: E501
            raise ValueError("Invalid value for `alive_revision_numbers`, must not be `None`")  # noqa: E501

        self._alive_revision_numbers = alive_revision_numbers

    @property
    def assume_subject(self):
        """Gets the assume_subject of this ResponseModelServiceInfo.  # noqa: E501


        :return: The assume_subject of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseRbacPolicySubject
        """
        return self._assume_subject

    @assume_subject.setter
    def assume_subject(self, assume_subject):
        """Sets the assume_subject of this ResponseModelServiceInfo.


        :param assume_subject: The assume_subject of this ResponseModelServiceInfo.  # noqa: E501
        :type assume_subject: ResponseRbacPolicySubject
        """
        if self.local_vars_configuration.client_side_validation and assume_subject is None:  # noqa: E501
            raise ValueError("Invalid value for `assume_subject`, must not be `None`")  # noqa: E501

        self._assume_subject = assume_subject

    @property
    def created_by(self):
        """Gets the created_by of this ResponseModelServiceInfo.  # noqa: E501


        :return: The created_by of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseModelServiceInfo.


        :param created_by: The created_by of this ResponseModelServiceInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseModelServiceInfo.  # noqa: E501


        :return: The created_dt of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseModelServiceInfo.


        :param created_dt: The created_dt of this ResponseModelServiceInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this ResponseModelServiceInfo.  # noqa: E501


        :return: The description of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResponseModelServiceInfo.


        :param description: The description of this ResponseModelServiceInfo.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def docs_enabled(self):
        """Gets the docs_enabled of this ResponseModelServiceInfo.  # noqa: E501


        :return: The docs_enabled of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._docs_enabled

    @docs_enabled.setter
    def docs_enabled(self, docs_enabled):
        """Sets the docs_enabled of this ResponseModelServiceInfo.


        :param docs_enabled: The docs_enabled of this ResponseModelServiceInfo.  # noqa: E501
        :type docs_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and docs_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `docs_enabled`, must not be `None`")  # noqa: E501

        self._docs_enabled = docs_enabled

    @property
    def gateway_config(self):
        """Gets the gateway_config of this ResponseModelServiceInfo.  # noqa: E501


        :return: The gateway_config of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseModelServiceGatewayInfo
        """
        return self._gateway_config

    @gateway_config.setter
    def gateway_config(self, gateway_config):
        """Sets the gateway_config of this ResponseModelServiceInfo.


        :param gateway_config: The gateway_config of this ResponseModelServiceInfo.  # noqa: E501
        :type gateway_config: ResponseModelServiceGatewayInfo
        """

        self._gateway_config = gateway_config

    @property
    def id(self):
        """Gets the id of this ResponseModelServiceInfo.  # noqa: E501


        :return: The id of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseModelServiceInfo.


        :param id: The id of this ResponseModelServiceInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseModelServiceInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster`, must not be `None`")  # noqa: E501

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseModelServiceInfo.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster_id`, must not be `None`")  # noqa: E501

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def kernel_cluster_name(self):
        """Gets the kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501


        :return: The kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._kernel_cluster_name

    @kernel_cluster_name.setter
    def kernel_cluster_name(self, kernel_cluster_name):
        """Sets the kernel_cluster_name of this ResponseModelServiceInfo.


        :param kernel_cluster_name: The kernel_cluster_name of this ResponseModelServiceInfo.  # noqa: E501
        :type kernel_cluster_name: str
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster_name`, must not be `None`")  # noqa: E501

        self._kernel_cluster_name = kernel_cluster_name

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this ResponseModelServiceInfo.  # noqa: E501


        :return: The last_updated_by of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this ResponseModelServiceInfo.


        :param last_updated_by: The last_updated_by of this ResponseModelServiceInfo.  # noqa: E501
        :type last_updated_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and last_updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_by`, must not be `None`")  # noqa: E501

        self._last_updated_by = last_updated_by

    @property
    def name(self):
        """Gets the name of this ResponseModelServiceInfo.  # noqa: E501


        :return: The name of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseModelServiceInfo.


        :param name: The name of this ResponseModelServiceInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def running_replicas(self):
        """Gets the running_replicas of this ResponseModelServiceInfo.  # noqa: E501


        :return: The running_replicas of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._running_replicas

    @running_replicas.setter
    def running_replicas(self, running_replicas):
        """Sets the running_replicas of this ResponseModelServiceInfo.


        :param running_replicas: The running_replicas of this ResponseModelServiceInfo.  # noqa: E501
        :type running_replicas: int
        """
        if self.local_vars_configuration.client_side_validation and running_replicas is None:  # noqa: E501
            raise ValueError("Invalid value for `running_replicas`, must not be `None`")  # noqa: E501

        self._running_replicas = running_replicas

    @property
    def secret(self):
        """Gets the secret of this ResponseModelServiceInfo.  # noqa: E501


        :return: The secret of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseSecret
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ResponseModelServiceInfo.


        :param secret: The secret of this ResponseModelServiceInfo.  # noqa: E501
        :type secret: ResponseSecret
        """

        self._secret = secret

    @property
    def serverless(self):
        """Gets the serverless of this ResponseModelServiceInfo.  # noqa: E501


        :return: The serverless of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: ResponseModelServiceServerlessProperties
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this ResponseModelServiceInfo.


        :param serverless: The serverless of this ResponseModelServiceInfo.  # noqa: E501
        :type serverless: ResponseModelServiceServerlessProperties
        """

        self._serverless = serverless

    @property
    def status(self):
        """Gets the status of this ResponseModelServiceInfo.  # noqa: E501


        :return: The status of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseModelServiceInfo.


        :param status: The status of this ResponseModelServiceInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ready", "running", "error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_replicas(self):
        """Gets the total_replicas of this ResponseModelServiceInfo.  # noqa: E501


        :return: The total_replicas of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_replicas

    @total_replicas.setter
    def total_replicas(self, total_replicas):
        """Sets the total_replicas of this ResponseModelServiceInfo.


        :param total_replicas: The total_replicas of this ResponseModelServiceInfo.  # noqa: E501
        :type total_replicas: int
        """
        if self.local_vars_configuration.client_side_validation and total_replicas is None:  # noqa: E501
            raise ValueError("Invalid value for `total_replicas`, must not be `None`")  # noqa: E501

        self._total_replicas = total_replicas

    @property
    def total_revisions(self):
        """Gets the total_revisions of this ResponseModelServiceInfo.  # noqa: E501


        :return: The total_revisions of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_revisions

    @total_revisions.setter
    def total_revisions(self, total_revisions):
        """Sets the total_revisions of this ResponseModelServiceInfo.


        :param total_revisions: The total_revisions of this ResponseModelServiceInfo.  # noqa: E501
        :type total_revisions: int
        """
        if self.local_vars_configuration.client_side_validation and total_revisions is None:  # noqa: E501
            raise ValueError("Invalid value for `total_revisions`, must not be `None`")  # noqa: E501

        self._total_revisions = total_revisions

    @property
    def type(self):
        """Gets the type of this ResponseModelServiceInfo.  # noqa: E501


        :return: The type of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseModelServiceInfo.


        :param type: The type of this ResponseModelServiceInfo.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseModelServiceInfo.  # noqa: E501


        :return: The updated_dt of this ResponseModelServiceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseModelServiceInfo.


        :param updated_dt: The updated_dt of this ResponseModelServiceInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseModelServiceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseModelServiceInfo):
            return True

        return self.to_dict() != other.to_dict()
