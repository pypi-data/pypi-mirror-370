# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1GitRepository(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credential_id': 'int',
        'credential_name': 'str',
        'custom_provider_url': 'str',
        'fullpath': 'str',
        'owner': 'str',
        'provider': 'str',
        'repo': 'str'
    }

    attribute_map = {
        'credential_id': 'credential_id',
        'credential_name': 'credential_name',
        'custom_provider_url': 'custom_provider_url',
        'fullpath': 'fullpath',
        'owner': 'owner',
        'provider': 'provider',
        'repo': 'repo'
    }

    def __init__(self, credential_id=None, credential_name=None, custom_provider_url=None, fullpath=None, owner=None, provider=None, repo=None, local_vars_configuration=None):  # noqa: E501
        """V1GitRepository - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credential_id = None
        self._credential_name = None
        self._custom_provider_url = None
        self._fullpath = None
        self._owner = None
        self._provider = None
        self._repo = None
        self.discriminator = None

        self.credential_id = credential_id
        self.credential_name = credential_name
        self.custom_provider_url = custom_provider_url
        self.fullpath = fullpath
        self.owner = owner
        self.provider = provider
        self.repo = repo

    @property
    def credential_id(self):
        """Gets the credential_id of this V1GitRepository.  # noqa: E501


        :return: The credential_id of this V1GitRepository.  # noqa: E501
        :rtype: int
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this V1GitRepository.


        :param credential_id: The credential_id of this V1GitRepository.  # noqa: E501
        :type credential_id: int
        """

        self._credential_id = credential_id

    @property
    def credential_name(self):
        """Gets the credential_name of this V1GitRepository.  # noqa: E501


        :return: The credential_name of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._credential_name

    @credential_name.setter
    def credential_name(self, credential_name):
        """Sets the credential_name of this V1GitRepository.


        :param credential_name: The credential_name of this V1GitRepository.  # noqa: E501
        :type credential_name: str
        """

        self._credential_name = credential_name

    @property
    def custom_provider_url(self):
        """Gets the custom_provider_url of this V1GitRepository.  # noqa: E501


        :return: The custom_provider_url of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._custom_provider_url

    @custom_provider_url.setter
    def custom_provider_url(self, custom_provider_url):
        """Sets the custom_provider_url of this V1GitRepository.


        :param custom_provider_url: The custom_provider_url of this V1GitRepository.  # noqa: E501
        :type custom_provider_url: str
        """

        self._custom_provider_url = custom_provider_url

    @property
    def fullpath(self):
        """Gets the fullpath of this V1GitRepository.  # noqa: E501


        :return: The fullpath of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._fullpath

    @fullpath.setter
    def fullpath(self, fullpath):
        """Sets the fullpath of this V1GitRepository.


        :param fullpath: The fullpath of this V1GitRepository.  # noqa: E501
        :type fullpath: str
        """

        self._fullpath = fullpath

    @property
    def owner(self):
        """Gets the owner of this V1GitRepository.  # noqa: E501


        :return: The owner of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this V1GitRepository.


        :param owner: The owner of this V1GitRepository.  # noqa: E501
        :type owner: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def provider(self):
        """Gets the provider of this V1GitRepository.  # noqa: E501


        :return: The provider of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this V1GitRepository.


        :param provider: The provider of this V1GitRepository.  # noqa: E501
        :type provider: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["github", "gitlab", "bitbucket", "huggingface", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def repo(self):
        """Gets the repo of this V1GitRepository.  # noqa: E501


        :return: The repo of this V1GitRepository.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this V1GitRepository.


        :param repo: The repo of this V1GitRepository.  # noqa: E501
        :type repo: str
        """
        if self.local_vars_configuration.client_side_validation and repo is None:  # noqa: E501
            raise ValueError("Invalid value for `repo`, must not be `None`")  # noqa: E501

        self._repo = repo

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GitRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GitRepository):
            return True

        return self.to_dict() != other.to_dict()
