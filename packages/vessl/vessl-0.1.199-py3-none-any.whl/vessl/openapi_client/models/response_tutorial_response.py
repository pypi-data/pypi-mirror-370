# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseTutorialResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'has_finished': 'bool',
        'id': 'int',
        'step': 'int',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'has_finished': 'has_finished',
        'id': 'id',
        'step': 'step',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, description=None, has_finished=None, id=None, step=None, title=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ResponseTutorialResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._has_finished = None
        self._id = None
        self._step = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.description = description
        self.has_finished = has_finished
        self.id = id
        self.step = step
        self.title = title
        self.type = type

    @property
    def description(self):
        """Gets the description of this ResponseTutorialResponse.  # noqa: E501


        :return: The description of this ResponseTutorialResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResponseTutorialResponse.


        :param description: The description of this ResponseTutorialResponse.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def has_finished(self):
        """Gets the has_finished of this ResponseTutorialResponse.  # noqa: E501


        :return: The has_finished of this ResponseTutorialResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_finished

    @has_finished.setter
    def has_finished(self, has_finished):
        """Sets the has_finished of this ResponseTutorialResponse.


        :param has_finished: The has_finished of this ResponseTutorialResponse.  # noqa: E501
        :type has_finished: bool
        """
        if self.local_vars_configuration.client_side_validation and has_finished is None:  # noqa: E501
            raise ValueError("Invalid value for `has_finished`, must not be `None`")  # noqa: E501

        self._has_finished = has_finished

    @property
    def id(self):
        """Gets the id of this ResponseTutorialResponse.  # noqa: E501


        :return: The id of this ResponseTutorialResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseTutorialResponse.


        :param id: The id of this ResponseTutorialResponse.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def step(self):
        """Gets the step of this ResponseTutorialResponse.  # noqa: E501


        :return: The step of this ResponseTutorialResponse.  # noqa: E501
        :rtype: int
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this ResponseTutorialResponse.


        :param step: The step of this ResponseTutorialResponse.  # noqa: E501
        :type step: int
        """
        if self.local_vars_configuration.client_side_validation and step is None:  # noqa: E501
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501

        self._step = step

    @property
    def title(self):
        """Gets the title of this ResponseTutorialResponse.  # noqa: E501


        :return: The title of this ResponseTutorialResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResponseTutorialResponse.


        :param title: The title of this ResponseTutorialResponse.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this ResponseTutorialResponse.  # noqa: E501


        :return: The type of this ResponseTutorialResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseTutorialResponse.


        :param type: The type of this ResponseTutorialResponse.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseTutorialResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseTutorialResponse):
            return True

        return self.to_dict() != other.to_dict()
