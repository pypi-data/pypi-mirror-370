# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmOnPremiseVolumeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_id': 'int',
        'flex_volume': 'OrmOnPremiseVolumeConfigFlexVolume',
        'google_disk': 'OrmOnPremiseVolumeConfigGoogleDisk',
        'host_path': 'OrmOnPremiseVolumeConfigHostPath',
        'minio_endpoint': 'str',
        'nfs': 'OrmOnPremiseVolumeConfigNFS',
        'type': 'str'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'flex_volume': 'flex_volume',
        'google_disk': 'google_disk',
        'host_path': 'host_path',
        'minio_endpoint': 'minio_endpoint',
        'nfs': 'nfs',
        'type': 'type'
    }

    def __init__(self, cluster_id=None, flex_volume=None, google_disk=None, host_path=None, minio_endpoint=None, nfs=None, type=None, local_vars_configuration=None):  # noqa: E501
        """OrmOnPremiseVolumeConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._flex_volume = None
        self._google_disk = None
        self._host_path = None
        self._minio_endpoint = None
        self._nfs = None
        self._type = None
        self.discriminator = None

        self.cluster_id = cluster_id
        if flex_volume is not None:
            self.flex_volume = flex_volume
        if google_disk is not None:
            self.google_disk = google_disk
        if host_path is not None:
            self.host_path = host_path
        self.minio_endpoint = minio_endpoint
        if nfs is not None:
            self.nfs = nfs
        self.type = type

    @property
    def cluster_id(self):
        """Gets the cluster_id of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The cluster_id of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this OrmOnPremiseVolumeConfig.


        :param cluster_id: The cluster_id of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def flex_volume(self):
        """Gets the flex_volume of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The flex_volume of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfigFlexVolume
        """
        return self._flex_volume

    @flex_volume.setter
    def flex_volume(self, flex_volume):
        """Sets the flex_volume of this OrmOnPremiseVolumeConfig.


        :param flex_volume: The flex_volume of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type flex_volume: OrmOnPremiseVolumeConfigFlexVolume
        """

        self._flex_volume = flex_volume

    @property
    def google_disk(self):
        """Gets the google_disk of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The google_disk of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfigGoogleDisk
        """
        return self._google_disk

    @google_disk.setter
    def google_disk(self, google_disk):
        """Sets the google_disk of this OrmOnPremiseVolumeConfig.


        :param google_disk: The google_disk of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type google_disk: OrmOnPremiseVolumeConfigGoogleDisk
        """

        self._google_disk = google_disk

    @property
    def host_path(self):
        """Gets the host_path of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The host_path of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfigHostPath
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this OrmOnPremiseVolumeConfig.


        :param host_path: The host_path of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type host_path: OrmOnPremiseVolumeConfigHostPath
        """

        self._host_path = host_path

    @property
    def minio_endpoint(self):
        """Gets the minio_endpoint of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The minio_endpoint of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: str
        """
        return self._minio_endpoint

    @minio_endpoint.setter
    def minio_endpoint(self, minio_endpoint):
        """Sets the minio_endpoint of this OrmOnPremiseVolumeConfig.


        :param minio_endpoint: The minio_endpoint of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type minio_endpoint: str
        """

        self._minio_endpoint = minio_endpoint

    @property
    def nfs(self):
        """Gets the nfs of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The nfs of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfigNFS
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this OrmOnPremiseVolumeConfig.


        :param nfs: The nfs of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type nfs: OrmOnPremiseVolumeConfigNFS
        """

        self._nfs = nfs

    @property
    def type(self):
        """Gets the type of this OrmOnPremiseVolumeConfig.  # noqa: E501


        :return: The type of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrmOnPremiseVolumeConfig.


        :param type: The type of this OrmOnPremiseVolumeConfig.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["none", "nfs", "flex-volume", "host-path", "google-disk"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmOnPremiseVolumeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmOnPremiseVolumeConfig):
            return True

        return self.to_dict() != other.to_dict()
