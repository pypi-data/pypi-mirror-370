# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class SamlAffiliationDescriptor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affiliate_members': 'list[str]',
        'affiliation_owner_id': 'str',
        'cache_duration': 'str',
        'id': 'str',
        'key_descriptors': 'list[SamlKeyDescriptor]',
        'signature': 'EtreeElement',
        'valid_until': 'datetime'
    }

    attribute_map = {
        'affiliate_members': 'AffiliateMembers',
        'affiliation_owner_id': 'AffiliationOwnerID',
        'cache_duration': 'CacheDuration',
        'id': 'ID',
        'key_descriptors': 'KeyDescriptors',
        'signature': 'Signature',
        'valid_until': 'ValidUntil'
    }

    def __init__(self, affiliate_members=None, affiliation_owner_id=None, cache_duration=None, id=None, key_descriptors=None, signature=None, valid_until=None, local_vars_configuration=None):  # noqa: E501
        """SamlAffiliationDescriptor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._affiliate_members = None
        self._affiliation_owner_id = None
        self._cache_duration = None
        self._id = None
        self._key_descriptors = None
        self._signature = None
        self._valid_until = None
        self.discriminator = None

        if affiliate_members is not None:
            self.affiliate_members = affiliate_members
        if affiliation_owner_id is not None:
            self.affiliation_owner_id = affiliation_owner_id
        if cache_duration is not None:
            self.cache_duration = cache_duration
        if id is not None:
            self.id = id
        if key_descriptors is not None:
            self.key_descriptors = key_descriptors
        if signature is not None:
            self.signature = signature
        if valid_until is not None:
            self.valid_until = valid_until

    @property
    def affiliate_members(self):
        """Gets the affiliate_members of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The affiliate_members of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: list[str]
        """
        return self._affiliate_members

    @affiliate_members.setter
    def affiliate_members(self, affiliate_members):
        """Sets the affiliate_members of this SamlAffiliationDescriptor.


        :param affiliate_members: The affiliate_members of this SamlAffiliationDescriptor.  # noqa: E501
        :type affiliate_members: list[str]
        """

        self._affiliate_members = affiliate_members

    @property
    def affiliation_owner_id(self):
        """Gets the affiliation_owner_id of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The affiliation_owner_id of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._affiliation_owner_id

    @affiliation_owner_id.setter
    def affiliation_owner_id(self, affiliation_owner_id):
        """Sets the affiliation_owner_id of this SamlAffiliationDescriptor.


        :param affiliation_owner_id: The affiliation_owner_id of this SamlAffiliationDescriptor.  # noqa: E501
        :type affiliation_owner_id: str
        """

        self._affiliation_owner_id = affiliation_owner_id

    @property
    def cache_duration(self):
        """Gets the cache_duration of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The cache_duration of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._cache_duration

    @cache_duration.setter
    def cache_duration(self, cache_duration):
        """Sets the cache_duration of this SamlAffiliationDescriptor.


        :param cache_duration: The cache_duration of this SamlAffiliationDescriptor.  # noqa: E501
        :type cache_duration: str
        """

        self._cache_duration = cache_duration

    @property
    def id(self):
        """Gets the id of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The id of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SamlAffiliationDescriptor.


        :param id: The id of this SamlAffiliationDescriptor.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def key_descriptors(self):
        """Gets the key_descriptors of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The key_descriptors of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: list[SamlKeyDescriptor]
        """
        return self._key_descriptors

    @key_descriptors.setter
    def key_descriptors(self, key_descriptors):
        """Sets the key_descriptors of this SamlAffiliationDescriptor.


        :param key_descriptors: The key_descriptors of this SamlAffiliationDescriptor.  # noqa: E501
        :type key_descriptors: list[SamlKeyDescriptor]
        """

        self._key_descriptors = key_descriptors

    @property
    def signature(self):
        """Gets the signature of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The signature of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: EtreeElement
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this SamlAffiliationDescriptor.


        :param signature: The signature of this SamlAffiliationDescriptor.  # noqa: E501
        :type signature: EtreeElement
        """

        self._signature = signature

    @property
    def valid_until(self):
        """Gets the valid_until of this SamlAffiliationDescriptor.  # noqa: E501


        :return: The valid_until of this SamlAffiliationDescriptor.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this SamlAffiliationDescriptor.


        :param valid_until: The valid_until of this SamlAffiliationDescriptor.  # noqa: E501
        :type valid_until: datetime
        """

        self._valid_until = valid_until

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlAffiliationDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlAffiliationDescriptor):
            return True

        return self.to_dict() != other.to_dict()
