# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseCmdkSearchResultInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hub_key': 'str',
        'name': 'str',
        'organization_name': 'str',
        'project_name': 'str',
        'reference_id': 'int',
        'type': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'hub_key': 'hub_key',
        'name': 'name',
        'organization_name': 'organization_name',
        'project_name': 'project_name',
        'reference_id': 'reference_id',
        'type': 'type',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, hub_key=None, name=None, organization_name=None, project_name=None, reference_id=None, type=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseCmdkSearchResultInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._hub_key = None
        self._name = None
        self._organization_name = None
        self._project_name = None
        self._reference_id = None
        self._type = None
        self._updated_dt = None
        self.discriminator = None

        self.hub_key = hub_key
        self.name = name
        self.organization_name = organization_name
        self.project_name = project_name
        self.reference_id = reference_id
        if type is not None:
            self.type = type
        self.updated_dt = updated_dt

    @property
    def hub_key(self):
        """Gets the hub_key of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The hub_key of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: str
        """
        return self._hub_key

    @hub_key.setter
    def hub_key(self, hub_key):
        """Sets the hub_key of this ResponseCmdkSearchResultInfo.


        :param hub_key: The hub_key of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type hub_key: str
        """

        self._hub_key = hub_key

    @property
    def name(self):
        """Gets the name of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseCmdkSearchResultInfo.


        :param name: The name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_name(self):
        """Gets the organization_name of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The organization_name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this ResponseCmdkSearchResultInfo.


        :param organization_name: The organization_name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type organization_name: str
        """
        if self.local_vars_configuration.client_side_validation and organization_name is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def project_name(self):
        """Gets the project_name of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The project_name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ResponseCmdkSearchResultInfo.


        :param project_name: The project_name of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def reference_id(self):
        """Gets the reference_id of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The reference_id of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ResponseCmdkSearchResultInfo.


        :param reference_id: The reference_id of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type reference_id: int
        """
        if self.local_vars_configuration.client_side_validation and reference_id is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_id`, must not be `None`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def type(self):
        """Gets the type of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The type of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseCmdkSearchResultInfo.


        :param type: The type of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseCmdkSearchResultInfo.  # noqa: E501


        :return: The updated_dt of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseCmdkSearchResultInfo.


        :param updated_dt: The updated_dt of this ResponseCmdkSearchResultInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseCmdkSearchResultInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseCmdkSearchResultInfo):
            return True

        return self.to_dict() != other.to_dict()
