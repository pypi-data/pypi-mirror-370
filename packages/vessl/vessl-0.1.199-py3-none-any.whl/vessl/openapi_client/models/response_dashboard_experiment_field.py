# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseDashboardExperimentField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'id': 'int',
        'is_filterable': 'bool',
        'is_hidden': 'bool',
        'is_pinned': 'bool',
        'is_sortable': 'bool',
        'name': 'str',
        'source': 'str',
        'type': 'str',
        'width': 'int'
    }

    attribute_map = {
        'display_name': 'display_name',
        'id': 'id',
        'is_filterable': 'is_filterable',
        'is_hidden': 'is_hidden',
        'is_pinned': 'is_pinned',
        'is_sortable': 'is_sortable',
        'name': 'name',
        'source': 'source',
        'type': 'type',
        'width': 'width'
    }

    def __init__(self, display_name=None, id=None, is_filterable=None, is_hidden=None, is_pinned=None, is_sortable=None, name=None, source=None, type=None, width=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDashboardExperimentField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._id = None
        self._is_filterable = None
        self._is_hidden = None
        self._is_pinned = None
        self._is_sortable = None
        self._name = None
        self._source = None
        self._type = None
        self._width = None
        self.discriminator = None

        self.display_name = display_name
        self.id = id
        self.is_filterable = is_filterable
        self.is_hidden = is_hidden
        self.is_pinned = is_pinned
        self.is_sortable = is_sortable
        self.name = name
        self.source = source
        self.type = type
        self.width = width

    @property
    def display_name(self):
        """Gets the display_name of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The display_name of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ResponseDashboardExperimentField.


        :param display_name: The display_name of this ResponseDashboardExperimentField.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The id of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseDashboardExperimentField.


        :param id: The id of this ResponseDashboardExperimentField.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_filterable(self):
        """Gets the is_filterable of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The is_filterable of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: bool
        """
        return self._is_filterable

    @is_filterable.setter
    def is_filterable(self, is_filterable):
        """Sets the is_filterable of this ResponseDashboardExperimentField.


        :param is_filterable: The is_filterable of this ResponseDashboardExperimentField.  # noqa: E501
        :type is_filterable: bool
        """
        if self.local_vars_configuration.client_side_validation and is_filterable is None:  # noqa: E501
            raise ValueError("Invalid value for `is_filterable`, must not be `None`")  # noqa: E501

        self._is_filterable = is_filterable

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The is_hidden of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ResponseDashboardExperimentField.


        :param is_hidden: The is_hidden of this ResponseDashboardExperimentField.  # noqa: E501
        :type is_hidden: bool
        """
        if self.local_vars_configuration.client_side_validation and is_hidden is None:  # noqa: E501
            raise ValueError("Invalid value for `is_hidden`, must not be `None`")  # noqa: E501

        self._is_hidden = is_hidden

    @property
    def is_pinned(self):
        """Gets the is_pinned of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The is_pinned of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this ResponseDashboardExperimentField.


        :param is_pinned: The is_pinned of this ResponseDashboardExperimentField.  # noqa: E501
        :type is_pinned: bool
        """
        if self.local_vars_configuration.client_side_validation and is_pinned is None:  # noqa: E501
            raise ValueError("Invalid value for `is_pinned`, must not be `None`")  # noqa: E501

        self._is_pinned = is_pinned

    @property
    def is_sortable(self):
        """Gets the is_sortable of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The is_sortable of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: bool
        """
        return self._is_sortable

    @is_sortable.setter
    def is_sortable(self, is_sortable):
        """Sets the is_sortable of this ResponseDashboardExperimentField.


        :param is_sortable: The is_sortable of this ResponseDashboardExperimentField.  # noqa: E501
        :type is_sortable: bool
        """
        if self.local_vars_configuration.client_side_validation and is_sortable is None:  # noqa: E501
            raise ValueError("Invalid value for `is_sortable`, must not be `None`")  # noqa: E501

        self._is_sortable = is_sortable

    @property
    def name(self):
        """Gets the name of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The name of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseDashboardExperimentField.


        :param name: The name of this ResponseDashboardExperimentField.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The source of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResponseDashboardExperimentField.


        :param source: The source of this ResponseDashboardExperimentField.  # noqa: E501
        :type source: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def type(self):
        """Gets the type of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The type of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseDashboardExperimentField.


        :param type: The type of this ResponseDashboardExperimentField.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def width(self):
        """Gets the width of this ResponseDashboardExperimentField.  # noqa: E501


        :return: The width of this ResponseDashboardExperimentField.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ResponseDashboardExperimentField.


        :param width: The width of this ResponseDashboardExperimentField.  # noqa: E501
        :type width: int
        """

        self._width = width

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDashboardExperimentField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDashboardExperimentField):
            return True

        return self.to_dict() != other.to_dict()
