# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmWorkload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'autoscaler_config': 'dict[str, object]',
        'created_dt': 'datetime',
        'distributed_number': 'int',
        'edges': 'OrmWorkloadEdges',
        'endpoints': 'dict[str, object]',
        'env_vars': 'dict[str, object]',
        'exit_code': 'int',
        'experiment_id': 'int',
        'final_cost': 'float',
        'id': 'int',
        'is_transfered': 'bool',
        'kernel_cluster_select_policies': 'dict[str, object]',
        'kubernetes_service_account': 'str',
        'last_alive_updated': 'datetime',
        'last_charged': 'datetime',
        'model_service_revision_id': 'int',
        'organization_id': 'int',
        'priority': 'int',
        'run_argument': 'dict[str, object]',
        'run_exec_id': 'int',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'type': 'str',
        'updated_dt': 'datetime',
        'use_log_manager': 'bool',
        'version': 'int',
        'volume_mounts': 'dict[str, object]',
        'wait_kill_reason': 'str',
        'workload_kernel_cluster': 'int',
        'workload_kernel_cluster_node': 'int',
        'workload_kernel_image': 'int',
        'workload_kernel_resource_spec': 'int',
        'workspace_id': 'int'
    }

    attribute_map = {
        'autoscaler_config': 'autoscaler_config',
        'created_dt': 'created_dt',
        'distributed_number': 'distributed_number',
        'edges': 'edges',
        'endpoints': 'endpoints',
        'env_vars': 'env_vars',
        'exit_code': 'exit_code',
        'experiment_id': 'experiment_id',
        'final_cost': 'final_cost',
        'id': 'id',
        'is_transfered': 'is_transfered',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'kubernetes_service_account': 'kubernetes_service_account',
        'last_alive_updated': 'last_alive_updated',
        'last_charged': 'last_charged',
        'model_service_revision_id': 'model_service_revision_id',
        'organization_id': 'organization_id',
        'priority': 'priority',
        'run_argument': 'run_argument',
        'run_exec_id': 'run_exec_id',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'use_log_manager': 'use_log_manager',
        'version': 'version',
        'volume_mounts': 'volume_mounts',
        'wait_kill_reason': 'wait_kill_reason',
        'workload_kernel_cluster': 'workload_kernel_cluster',
        'workload_kernel_cluster_node': 'workload_kernel_cluster_node',
        'workload_kernel_image': 'workload_kernel_image',
        'workload_kernel_resource_spec': 'workload_kernel_resource_spec',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, autoscaler_config=None, created_dt=None, distributed_number=None, edges=None, endpoints=None, env_vars=None, exit_code=None, experiment_id=None, final_cost=None, id=None, is_transfered=None, kernel_cluster_select_policies=None, kubernetes_service_account=None, last_alive_updated=None, last_charged=None, model_service_revision_id=None, organization_id=None, priority=None, run_argument=None, run_exec_id=None, start_command=None, status=None, status_last_updated=None, status_reason=None, type=None, updated_dt=None, use_log_manager=None, version=None, volume_mounts=None, wait_kill_reason=None, workload_kernel_cluster=None, workload_kernel_cluster_node=None, workload_kernel_image=None, workload_kernel_resource_spec=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """OrmWorkload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._autoscaler_config = None
        self._created_dt = None
        self._distributed_number = None
        self._edges = None
        self._endpoints = None
        self._env_vars = None
        self._exit_code = None
        self._experiment_id = None
        self._final_cost = None
        self._id = None
        self._is_transfered = None
        self._kernel_cluster_select_policies = None
        self._kubernetes_service_account = None
        self._last_alive_updated = None
        self._last_charged = None
        self._model_service_revision_id = None
        self._organization_id = None
        self._priority = None
        self._run_argument = None
        self._run_exec_id = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._type = None
        self._updated_dt = None
        self._use_log_manager = None
        self._version = None
        self._volume_mounts = None
        self._wait_kill_reason = None
        self._workload_kernel_cluster = None
        self._workload_kernel_cluster_node = None
        self._workload_kernel_image = None
        self._workload_kernel_resource_spec = None
        self._workspace_id = None
        self.discriminator = None

        if autoscaler_config is not None:
            self.autoscaler_config = autoscaler_config
        if created_dt is not None:
            self.created_dt = created_dt
        self.distributed_number = distributed_number
        if edges is not None:
            self.edges = edges
        if endpoints is not None:
            self.endpoints = endpoints
        if env_vars is not None:
            self.env_vars = env_vars
        self.exit_code = exit_code
        self.experiment_id = experiment_id
        self.final_cost = final_cost
        if id is not None:
            self.id = id
        if is_transfered is not None:
            self.is_transfered = is_transfered
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        if kubernetes_service_account is not None:
            self.kubernetes_service_account = kubernetes_service_account
        self.last_alive_updated = last_alive_updated
        self.last_charged = last_charged
        self.model_service_revision_id = model_service_revision_id
        if organization_id is not None:
            self.organization_id = organization_id
        if priority is not None:
            self.priority = priority
        if run_argument is not None:
            self.run_argument = run_argument
        self.run_exec_id = run_exec_id
        if start_command is not None:
            self.start_command = start_command
        if status is not None:
            self.status = status
        if status_last_updated is not None:
            self.status_last_updated = status_last_updated
        if status_reason is not None:
            self.status_reason = status_reason
        if type is not None:
            self.type = type
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if use_log_manager is not None:
            self.use_log_manager = use_log_manager
        if version is not None:
            self.version = version
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts
        self.wait_kill_reason = wait_kill_reason
        self.workload_kernel_cluster = workload_kernel_cluster
        self.workload_kernel_cluster_node = workload_kernel_cluster_node
        if workload_kernel_image is not None:
            self.workload_kernel_image = workload_kernel_image
        self.workload_kernel_resource_spec = workload_kernel_resource_spec
        self.workspace_id = workspace_id

    @property
    def autoscaler_config(self):
        """Gets the autoscaler_config of this OrmWorkload.  # noqa: E501


        :return: The autoscaler_config of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._autoscaler_config

    @autoscaler_config.setter
    def autoscaler_config(self, autoscaler_config):
        """Sets the autoscaler_config of this OrmWorkload.


        :param autoscaler_config: The autoscaler_config of this OrmWorkload.  # noqa: E501
        :type autoscaler_config: dict[str, object]
        """

        self._autoscaler_config = autoscaler_config

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmWorkload.  # noqa: E501


        :return: The created_dt of this OrmWorkload.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmWorkload.


        :param created_dt: The created_dt of this OrmWorkload.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def distributed_number(self):
        """Gets the distributed_number of this OrmWorkload.  # noqa: E501


        :return: The distributed_number of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._distributed_number

    @distributed_number.setter
    def distributed_number(self, distributed_number):
        """Sets the distributed_number of this OrmWorkload.


        :param distributed_number: The distributed_number of this OrmWorkload.  # noqa: E501
        :type distributed_number: int
        """

        self._distributed_number = distributed_number

    @property
    def edges(self):
        """Gets the edges of this OrmWorkload.  # noqa: E501


        :return: The edges of this OrmWorkload.  # noqa: E501
        :rtype: OrmWorkloadEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmWorkload.


        :param edges: The edges of this OrmWorkload.  # noqa: E501
        :type edges: OrmWorkloadEdges
        """

        self._edges = edges

    @property
    def endpoints(self):
        """Gets the endpoints of this OrmWorkload.  # noqa: E501


        :return: The endpoints of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this OrmWorkload.


        :param endpoints: The endpoints of this OrmWorkload.  # noqa: E501
        :type endpoints: dict[str, object]
        """

        self._endpoints = endpoints

    @property
    def env_vars(self):
        """Gets the env_vars of this OrmWorkload.  # noqa: E501


        :return: The env_vars of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this OrmWorkload.


        :param env_vars: The env_vars of this OrmWorkload.  # noqa: E501
        :type env_vars: dict[str, object]
        """

        self._env_vars = env_vars

    @property
    def exit_code(self):
        """Gets the exit_code of this OrmWorkload.  # noqa: E501


        :return: The exit_code of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this OrmWorkload.


        :param exit_code: The exit_code of this OrmWorkload.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_id(self):
        """Gets the experiment_id of this OrmWorkload.  # noqa: E501


        :return: The experiment_id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this OrmWorkload.


        :param experiment_id: The experiment_id of this OrmWorkload.  # noqa: E501
        :type experiment_id: int
        """

        self._experiment_id = experiment_id

    @property
    def final_cost(self):
        """Gets the final_cost of this OrmWorkload.  # noqa: E501


        :return: The final_cost of this OrmWorkload.  # noqa: E501
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """Sets the final_cost of this OrmWorkload.


        :param final_cost: The final_cost of this OrmWorkload.  # noqa: E501
        :type final_cost: float
        """

        self._final_cost = final_cost

    @property
    def id(self):
        """Gets the id of this OrmWorkload.  # noqa: E501


        :return: The id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmWorkload.


        :param id: The id of this OrmWorkload.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def is_transfered(self):
        """Gets the is_transfered of this OrmWorkload.  # noqa: E501


        :return: The is_transfered of this OrmWorkload.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfered

    @is_transfered.setter
    def is_transfered(self, is_transfered):
        """Sets the is_transfered of this OrmWorkload.


        :param is_transfered: The is_transfered of this OrmWorkload.  # noqa: E501
        :type is_transfered: bool
        """

        self._is_transfered = is_transfered

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this OrmWorkload.  # noqa: E501


        :return: The kernel_cluster_select_policies of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this OrmWorkload.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this OrmWorkload.  # noqa: E501
        :type kernel_cluster_select_policies: dict[str, object]
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def kubernetes_service_account(self):
        """Gets the kubernetes_service_account of this OrmWorkload.  # noqa: E501


        :return: The kubernetes_service_account of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_service_account

    @kubernetes_service_account.setter
    def kubernetes_service_account(self, kubernetes_service_account):
        """Sets the kubernetes_service_account of this OrmWorkload.


        :param kubernetes_service_account: The kubernetes_service_account of this OrmWorkload.  # noqa: E501
        :type kubernetes_service_account: str
        """

        self._kubernetes_service_account = kubernetes_service_account

    @property
    def last_alive_updated(self):
        """Gets the last_alive_updated of this OrmWorkload.  # noqa: E501


        :return: The last_alive_updated of this OrmWorkload.  # noqa: E501
        :rtype: datetime
        """
        return self._last_alive_updated

    @last_alive_updated.setter
    def last_alive_updated(self, last_alive_updated):
        """Sets the last_alive_updated of this OrmWorkload.


        :param last_alive_updated: The last_alive_updated of this OrmWorkload.  # noqa: E501
        :type last_alive_updated: datetime
        """

        self._last_alive_updated = last_alive_updated

    @property
    def last_charged(self):
        """Gets the last_charged of this OrmWorkload.  # noqa: E501


        :return: The last_charged of this OrmWorkload.  # noqa: E501
        :rtype: datetime
        """
        return self._last_charged

    @last_charged.setter
    def last_charged(self, last_charged):
        """Sets the last_charged of this OrmWorkload.


        :param last_charged: The last_charged of this OrmWorkload.  # noqa: E501
        :type last_charged: datetime
        """

        self._last_charged = last_charged

    @property
    def model_service_revision_id(self):
        """Gets the model_service_revision_id of this OrmWorkload.  # noqa: E501


        :return: The model_service_revision_id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._model_service_revision_id

    @model_service_revision_id.setter
    def model_service_revision_id(self, model_service_revision_id):
        """Sets the model_service_revision_id of this OrmWorkload.


        :param model_service_revision_id: The model_service_revision_id of this OrmWorkload.  # noqa: E501
        :type model_service_revision_id: int
        """

        self._model_service_revision_id = model_service_revision_id

    @property
    def organization_id(self):
        """Gets the organization_id of this OrmWorkload.  # noqa: E501


        :return: The organization_id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrmWorkload.


        :param organization_id: The organization_id of this OrmWorkload.  # noqa: E501
        :type organization_id: int
        """

        self._organization_id = organization_id

    @property
    def priority(self):
        """Gets the priority of this OrmWorkload.  # noqa: E501


        :return: The priority of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this OrmWorkload.


        :param priority: The priority of this OrmWorkload.  # noqa: E501
        :type priority: int
        """

        self._priority = priority

    @property
    def run_argument(self):
        """Gets the run_argument of this OrmWorkload.  # noqa: E501


        :return: The run_argument of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._run_argument

    @run_argument.setter
    def run_argument(self, run_argument):
        """Sets the run_argument of this OrmWorkload.


        :param run_argument: The run_argument of this OrmWorkload.  # noqa: E501
        :type run_argument: dict[str, object]
        """

        self._run_argument = run_argument

    @property
    def run_exec_id(self):
        """Gets the run_exec_id of this OrmWorkload.  # noqa: E501


        :return: The run_exec_id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._run_exec_id

    @run_exec_id.setter
    def run_exec_id(self, run_exec_id):
        """Sets the run_exec_id of this OrmWorkload.


        :param run_exec_id: The run_exec_id of this OrmWorkload.  # noqa: E501
        :type run_exec_id: int
        """

        self._run_exec_id = run_exec_id

    @property
    def start_command(self):
        """Gets the start_command of this OrmWorkload.  # noqa: E501


        :return: The start_command of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this OrmWorkload.


        :param start_command: The start_command of this OrmWorkload.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this OrmWorkload.  # noqa: E501


        :return: The status of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmWorkload.


        :param status: The status of this OrmWorkload.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this OrmWorkload.  # noqa: E501


        :return: The status_last_updated of this OrmWorkload.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this OrmWorkload.


        :param status_last_updated: The status_last_updated of this OrmWorkload.  # noqa: E501
        :type status_last_updated: datetime
        """

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this OrmWorkload.  # noqa: E501


        :return: The status_reason of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this OrmWorkload.


        :param status_reason: The status_reason of this OrmWorkload.  # noqa: E501
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def type(self):
        """Gets the type of this OrmWorkload.  # noqa: E501


        :return: The type of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrmWorkload.


        :param type: The type of this OrmWorkload.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmWorkload.  # noqa: E501


        :return: The updated_dt of this OrmWorkload.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmWorkload.


        :param updated_dt: The updated_dt of this OrmWorkload.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def use_log_manager(self):
        """Gets the use_log_manager of this OrmWorkload.  # noqa: E501


        :return: The use_log_manager of this OrmWorkload.  # noqa: E501
        :rtype: bool
        """
        return self._use_log_manager

    @use_log_manager.setter
    def use_log_manager(self, use_log_manager):
        """Sets the use_log_manager of this OrmWorkload.


        :param use_log_manager: The use_log_manager of this OrmWorkload.  # noqa: E501
        :type use_log_manager: bool
        """

        self._use_log_manager = use_log_manager

    @property
    def version(self):
        """Gets the version of this OrmWorkload.  # noqa: E501


        :return: The version of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OrmWorkload.


        :param version: The version of this OrmWorkload.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this OrmWorkload.  # noqa: E501


        :return: The volume_mounts of this OrmWorkload.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this OrmWorkload.


        :param volume_mounts: The volume_mounts of this OrmWorkload.  # noqa: E501
        :type volume_mounts: dict[str, object]
        """

        self._volume_mounts = volume_mounts

    @property
    def wait_kill_reason(self):
        """Gets the wait_kill_reason of this OrmWorkload.  # noqa: E501


        :return: The wait_kill_reason of this OrmWorkload.  # noqa: E501
        :rtype: str
        """
        return self._wait_kill_reason

    @wait_kill_reason.setter
    def wait_kill_reason(self, wait_kill_reason):
        """Sets the wait_kill_reason of this OrmWorkload.


        :param wait_kill_reason: The wait_kill_reason of this OrmWorkload.  # noqa: E501
        :type wait_kill_reason: str
        """

        self._wait_kill_reason = wait_kill_reason

    @property
    def workload_kernel_cluster(self):
        """Gets the workload_kernel_cluster of this OrmWorkload.  # noqa: E501


        :return: The workload_kernel_cluster of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_cluster

    @workload_kernel_cluster.setter
    def workload_kernel_cluster(self, workload_kernel_cluster):
        """Sets the workload_kernel_cluster of this OrmWorkload.


        :param workload_kernel_cluster: The workload_kernel_cluster of this OrmWorkload.  # noqa: E501
        :type workload_kernel_cluster: int
        """

        self._workload_kernel_cluster = workload_kernel_cluster

    @property
    def workload_kernel_cluster_node(self):
        """Gets the workload_kernel_cluster_node of this OrmWorkload.  # noqa: E501


        :return: The workload_kernel_cluster_node of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_cluster_node

    @workload_kernel_cluster_node.setter
    def workload_kernel_cluster_node(self, workload_kernel_cluster_node):
        """Sets the workload_kernel_cluster_node of this OrmWorkload.


        :param workload_kernel_cluster_node: The workload_kernel_cluster_node of this OrmWorkload.  # noqa: E501
        :type workload_kernel_cluster_node: int
        """

        self._workload_kernel_cluster_node = workload_kernel_cluster_node

    @property
    def workload_kernel_image(self):
        """Gets the workload_kernel_image of this OrmWorkload.  # noqa: E501


        :return: The workload_kernel_image of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_image

    @workload_kernel_image.setter
    def workload_kernel_image(self, workload_kernel_image):
        """Sets the workload_kernel_image of this OrmWorkload.


        :param workload_kernel_image: The workload_kernel_image of this OrmWorkload.  # noqa: E501
        :type workload_kernel_image: int
        """

        self._workload_kernel_image = workload_kernel_image

    @property
    def workload_kernel_resource_spec(self):
        """Gets the workload_kernel_resource_spec of this OrmWorkload.  # noqa: E501


        :return: The workload_kernel_resource_spec of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_resource_spec

    @workload_kernel_resource_spec.setter
    def workload_kernel_resource_spec(self, workload_kernel_resource_spec):
        """Sets the workload_kernel_resource_spec of this OrmWorkload.


        :param workload_kernel_resource_spec: The workload_kernel_resource_spec of this OrmWorkload.  # noqa: E501
        :type workload_kernel_resource_spec: int
        """

        self._workload_kernel_resource_spec = workload_kernel_resource_spec

    @property
    def workspace_id(self):
        """Gets the workspace_id of this OrmWorkload.  # noqa: E501


        :return: The workspace_id of this OrmWorkload.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this OrmWorkload.


        :param workspace_id: The workspace_id of this OrmWorkload.  # noqa: E501
        :type workspace_id: int
        """

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmWorkload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmWorkload):
            return True

        return self.to_dict() != other.to_dict()
