# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseExperimentInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'distributed_spec': 'OrmDistributedSpec',
        'endpoints': 'ResponseWorkloadEndpoints',
        'estimated_end_dt': 'datetime',
        'exit_code': 'int',
        'experiment_plot_volume': 'int',
        'experiment_plot_volume_id': 'int',
        'histories': 'list[ResponseWorkloadHistoryInfo]',
        'hyperparameters': 'OrmHyperparameters',
        'id': 'int',
        'is_distributed': 'bool',
        'is_local': 'bool',
        'is_starred': 'bool',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_cluster_select_policies': 'OrmKernelClusterSelectPolicies',
        'kernel_image': 'ResponseKernelImage',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'kubernetes_resource_info': 'ResponseKubernetesResourceInfo',
        'last_alive': 'datetime',
        'local_execution_spec': 'OrmLocalExecutionSpec',
        'message': 'str',
        'metrics_summary': 'OrmExperimentMetricsSummary',
        'number': 'int',
        'organization': 'ResponseOrganization',
        'progress_percent': 'float',
        'project': 'ResponseProject',
        'reproduce_command': 'str',
        'service_account_name': 'str',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_list': 'list[ResponseWorkloadStatusInfo]',
        'status_reason': 'str',
        'sweep': 'ResponseSweepInfo',
        'termination_protection': 'bool',
        'volume_mounts': 'ResponseVolumeMountInfos',
        'volume_mounts_list': 'list[ResponseVolumeMountInfos]',
        'workload_id': 'int',
        'workload_status': 'str'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'distributed_spec': 'distributed_spec',
        'endpoints': 'endpoints',
        'estimated_end_dt': 'estimated_end_dt',
        'exit_code': 'exit_code',
        'experiment_plot_volume': 'experiment_plot_volume',
        'experiment_plot_volume_id': 'experiment_plot_volume_id',
        'histories': 'histories',
        'hyperparameters': 'hyperparameters',
        'id': 'id',
        'is_distributed': 'is_distributed',
        'is_local': 'is_local',
        'is_starred': 'is_starred',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'kernel_image': 'kernel_image',
        'kernel_resource_spec': 'kernel_resource_spec',
        'kubernetes_resource_info': 'kubernetes_resource_info',
        'last_alive': 'last_alive',
        'local_execution_spec': 'local_execution_spec',
        'message': 'message',
        'metrics_summary': 'metrics_summary',
        'number': 'number',
        'organization': 'organization',
        'progress_percent': 'progress_percent',
        'project': 'project',
        'reproduce_command': 'reproduce_command',
        'service_account_name': 'service_account_name',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_list': 'status_list',
        'status_reason': 'status_reason',
        'sweep': 'sweep',
        'termination_protection': 'termination_protection',
        'volume_mounts': 'volume_mounts',
        'volume_mounts_list': 'volume_mounts_list',
        'workload_id': 'workload_id',
        'workload_status': 'workload_status'
    }

    def __init__(self, created_by=None, created_dt=None, distributed_spec=None, endpoints=None, estimated_end_dt=None, exit_code=None, experiment_plot_volume=None, experiment_plot_volume_id=None, histories=None, hyperparameters=None, id=None, is_distributed=None, is_local=None, is_starred=None, kernel_cluster=None, kernel_cluster_node=None, kernel_cluster_select_policies=None, kernel_image=None, kernel_resource_spec=None, kubernetes_resource_info=None, last_alive=None, local_execution_spec=None, message=None, metrics_summary=None, number=None, organization=None, progress_percent=None, project=None, reproduce_command=None, service_account_name=None, start_command=None, status=None, status_last_updated=None, status_list=None, status_reason=None, sweep=None, termination_protection=None, volume_mounts=None, volume_mounts_list=None, workload_id=None, workload_status=None, local_vars_configuration=None):  # noqa: E501
        """ResponseExperimentInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_dt = None
        self._distributed_spec = None
        self._endpoints = None
        self._estimated_end_dt = None
        self._exit_code = None
        self._experiment_plot_volume = None
        self._experiment_plot_volume_id = None
        self._histories = None
        self._hyperparameters = None
        self._id = None
        self._is_distributed = None
        self._is_local = None
        self._is_starred = None
        self._kernel_cluster = None
        self._kernel_cluster_node = None
        self._kernel_cluster_select_policies = None
        self._kernel_image = None
        self._kernel_resource_spec = None
        self._kubernetes_resource_info = None
        self._last_alive = None
        self._local_execution_spec = None
        self._message = None
        self._metrics_summary = None
        self._number = None
        self._organization = None
        self._progress_percent = None
        self._project = None
        self._reproduce_command = None
        self._service_account_name = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_list = None
        self._status_reason = None
        self._sweep = None
        self._termination_protection = None
        self._volume_mounts = None
        self._volume_mounts_list = None
        self._workload_id = None
        self._workload_status = None
        self.discriminator = None

        self.created_by = created_by
        self.created_dt = created_dt
        if distributed_spec is not None:
            self.distributed_spec = distributed_spec
        self.endpoints = endpoints
        self.estimated_end_dt = estimated_end_dt
        self.exit_code = exit_code
        self.experiment_plot_volume = experiment_plot_volume
        self.experiment_plot_volume_id = experiment_plot_volume_id
        self.histories = histories
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters
        self.id = id
        self.is_distributed = is_distributed
        self.is_local = is_local
        self.is_starred = is_starred
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        if kernel_image is not None:
            self.kernel_image = kernel_image
        if kernel_resource_spec is not None:
            self.kernel_resource_spec = kernel_resource_spec
        if kubernetes_resource_info is not None:
            self.kubernetes_resource_info = kubernetes_resource_info
        if last_alive is not None:
            self.last_alive = last_alive
        if local_execution_spec is not None:
            self.local_execution_spec = local_execution_spec
        self.message = message
        if metrics_summary is not None:
            self.metrics_summary = metrics_summary
        self.number = number
        self.organization = organization
        self.progress_percent = progress_percent
        self.project = project
        if reproduce_command is not None:
            self.reproduce_command = reproduce_command
        if service_account_name is not None:
            self.service_account_name = service_account_name
        self.start_command = start_command
        self.status = status
        self.status_last_updated = status_last_updated
        if status_list is not None:
            self.status_list = status_list
        self.status_reason = status_reason
        if sweep is not None:
            self.sweep = sweep
        self.termination_protection = termination_protection
        self.volume_mounts = volume_mounts
        self.volume_mounts_list = volume_mounts_list
        if workload_id is not None:
            self.workload_id = workload_id
        if workload_status is not None:
            self.workload_status = workload_status

    @property
    def created_by(self):
        """Gets the created_by of this ResponseExperimentInfo.  # noqa: E501


        :return: The created_by of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseExperimentInfo.


        :param created_by: The created_by of this ResponseExperimentInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseExperimentInfo.  # noqa: E501


        :return: The created_dt of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseExperimentInfo.


        :param created_dt: The created_dt of this ResponseExperimentInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def distributed_spec(self):
        """Gets the distributed_spec of this ResponseExperimentInfo.  # noqa: E501


        :return: The distributed_spec of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmDistributedSpec
        """
        return self._distributed_spec

    @distributed_spec.setter
    def distributed_spec(self, distributed_spec):
        """Sets the distributed_spec of this ResponseExperimentInfo.


        :param distributed_spec: The distributed_spec of this ResponseExperimentInfo.  # noqa: E501
        :type distributed_spec: OrmDistributedSpec
        """

        self._distributed_spec = distributed_spec

    @property
    def endpoints(self):
        """Gets the endpoints of this ResponseExperimentInfo.  # noqa: E501


        :return: The endpoints of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseWorkloadEndpoints
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ResponseExperimentInfo.


        :param endpoints: The endpoints of this ResponseExperimentInfo.  # noqa: E501
        :type endpoints: ResponseWorkloadEndpoints
        """
        if self.local_vars_configuration.client_side_validation and endpoints is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def estimated_end_dt(self):
        """Gets the estimated_end_dt of this ResponseExperimentInfo.  # noqa: E501


        :return: The estimated_end_dt of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_end_dt

    @estimated_end_dt.setter
    def estimated_end_dt(self, estimated_end_dt):
        """Sets the estimated_end_dt of this ResponseExperimentInfo.


        :param estimated_end_dt: The estimated_end_dt of this ResponseExperimentInfo.  # noqa: E501
        :type estimated_end_dt: datetime
        """

        self._estimated_end_dt = estimated_end_dt

    @property
    def exit_code(self):
        """Gets the exit_code of this ResponseExperimentInfo.  # noqa: E501


        :return: The exit_code of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ResponseExperimentInfo.


        :param exit_code: The exit_code of this ResponseExperimentInfo.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_plot_volume(self):
        """Gets the experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume

    @experiment_plot_volume.setter
    def experiment_plot_volume(self, experiment_plot_volume):
        """Sets the experiment_plot_volume of this ResponseExperimentInfo.


        :param experiment_plot_volume: The experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_plot_volume: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_plot_volume is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_plot_volume`, must not be `None`")  # noqa: E501

        self._experiment_plot_volume = experiment_plot_volume

    @property
    def experiment_plot_volume_id(self):
        """Gets the experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume_id

    @experiment_plot_volume_id.setter
    def experiment_plot_volume_id(self, experiment_plot_volume_id):
        """Sets the experiment_plot_volume_id of this ResponseExperimentInfo.


        :param experiment_plot_volume_id: The experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_plot_volume_id: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_plot_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_plot_volume_id`, must not be `None`")  # noqa: E501

        self._experiment_plot_volume_id = experiment_plot_volume_id

    @property
    def histories(self):
        """Gets the histories of this ResponseExperimentInfo.  # noqa: E501


        :return: The histories of this ResponseExperimentInfo.  # noqa: E501
        :rtype: list[ResponseWorkloadHistoryInfo]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this ResponseExperimentInfo.


        :param histories: The histories of this ResponseExperimentInfo.  # noqa: E501
        :type histories: list[ResponseWorkloadHistoryInfo]
        """
        if self.local_vars_configuration.client_side_validation and histories is None:  # noqa: E501
            raise ValueError("Invalid value for `histories`, must not be `None`")  # noqa: E501

        self._histories = histories

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this ResponseExperimentInfo.  # noqa: E501


        :return: The hyperparameters of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmHyperparameters
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this ResponseExperimentInfo.


        :param hyperparameters: The hyperparameters of this ResponseExperimentInfo.  # noqa: E501
        :type hyperparameters: OrmHyperparameters
        """

        self._hyperparameters = hyperparameters

    @property
    def id(self):
        """Gets the id of this ResponseExperimentInfo.  # noqa: E501


        :return: The id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseExperimentInfo.


        :param id: The id of this ResponseExperimentInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_distributed(self):
        """Gets the is_distributed of this ResponseExperimentInfo.  # noqa: E501


        :return: The is_distributed of this ResponseExperimentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_distributed

    @is_distributed.setter
    def is_distributed(self, is_distributed):
        """Sets the is_distributed of this ResponseExperimentInfo.


        :param is_distributed: The is_distributed of this ResponseExperimentInfo.  # noqa: E501
        :type is_distributed: bool
        """
        if self.local_vars_configuration.client_side_validation and is_distributed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_distributed`, must not be `None`")  # noqa: E501

        self._is_distributed = is_distributed

    @property
    def is_local(self):
        """Gets the is_local of this ResponseExperimentInfo.  # noqa: E501


        :return: The is_local of this ResponseExperimentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this ResponseExperimentInfo.


        :param is_local: The is_local of this ResponseExperimentInfo.  # noqa: E501
        :type is_local: bool
        """
        if self.local_vars_configuration.client_side_validation and is_local is None:  # noqa: E501
            raise ValueError("Invalid value for `is_local`, must not be `None`")  # noqa: E501

        self._is_local = is_local

    @property
    def is_starred(self):
        """Gets the is_starred of this ResponseExperimentInfo.  # noqa: E501


        :return: The is_starred of this ResponseExperimentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this ResponseExperimentInfo.


        :param is_starred: The is_starred of this ResponseExperimentInfo.  # noqa: E501
        :type is_starred: bool
        """
        if self.local_vars_configuration.client_side_validation and is_starred is None:  # noqa: E501
            raise ValueError("Invalid value for `is_starred`, must not be `None`")  # noqa: E501

        self._is_starred = is_starred

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseExperimentInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ResponseExperimentInfo.


        :param kernel_cluster_node: The kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmKernelClusterSelectPolicies
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ResponseExperimentInfo.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_select_policies: OrmKernelClusterSelectPolicies
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponseExperimentInfo.


        :param kernel_image: The kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_image: ResponseKernelImage
        """

        self._kernel_image = kernel_image

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ResponseExperimentInfo.


        :param kernel_resource_spec: The kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def kubernetes_resource_info(self):
        """Gets the kubernetes_resource_info of this ResponseExperimentInfo.  # noqa: E501


        :return: The kubernetes_resource_info of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKubernetesResourceInfo
        """
        return self._kubernetes_resource_info

    @kubernetes_resource_info.setter
    def kubernetes_resource_info(self, kubernetes_resource_info):
        """Sets the kubernetes_resource_info of this ResponseExperimentInfo.


        :param kubernetes_resource_info: The kubernetes_resource_info of this ResponseExperimentInfo.  # noqa: E501
        :type kubernetes_resource_info: ResponseKubernetesResourceInfo
        """

        self._kubernetes_resource_info = kubernetes_resource_info

    @property
    def last_alive(self):
        """Gets the last_alive of this ResponseExperimentInfo.  # noqa: E501


        :return: The last_alive of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_alive

    @last_alive.setter
    def last_alive(self, last_alive):
        """Sets the last_alive of this ResponseExperimentInfo.


        :param last_alive: The last_alive of this ResponseExperimentInfo.  # noqa: E501
        :type last_alive: datetime
        """

        self._last_alive = last_alive

    @property
    def local_execution_spec(self):
        """Gets the local_execution_spec of this ResponseExperimentInfo.  # noqa: E501


        :return: The local_execution_spec of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmLocalExecutionSpec
        """
        return self._local_execution_spec

    @local_execution_spec.setter
    def local_execution_spec(self, local_execution_spec):
        """Sets the local_execution_spec of this ResponseExperimentInfo.


        :param local_execution_spec: The local_execution_spec of this ResponseExperimentInfo.  # noqa: E501
        :type local_execution_spec: OrmLocalExecutionSpec
        """

        self._local_execution_spec = local_execution_spec

    @property
    def message(self):
        """Gets the message of this ResponseExperimentInfo.  # noqa: E501


        :return: The message of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseExperimentInfo.


        :param message: The message of this ResponseExperimentInfo.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this ResponseExperimentInfo.  # noqa: E501


        :return: The metrics_summary of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmExperimentMetricsSummary
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this ResponseExperimentInfo.


        :param metrics_summary: The metrics_summary of this ResponseExperimentInfo.  # noqa: E501
        :type metrics_summary: OrmExperimentMetricsSummary
        """

        self._metrics_summary = metrics_summary

    @property
    def number(self):
        """Gets the number of this ResponseExperimentInfo.  # noqa: E501


        :return: The number of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseExperimentInfo.


        :param number: The number of this ResponseExperimentInfo.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def organization(self):
        """Gets the organization of this ResponseExperimentInfo.  # noqa: E501


        :return: The organization of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResponseExperimentInfo.


        :param organization: The organization of this ResponseExperimentInfo.  # noqa: E501
        :type organization: ResponseOrganization
        """
        if self.local_vars_configuration.client_side_validation and organization is None:  # noqa: E501
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def progress_percent(self):
        """Gets the progress_percent of this ResponseExperimentInfo.  # noqa: E501


        :return: The progress_percent of this ResponseExperimentInfo.  # noqa: E501
        :rtype: float
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this ResponseExperimentInfo.


        :param progress_percent: The progress_percent of this ResponseExperimentInfo.  # noqa: E501
        :type progress_percent: float
        """

        self._progress_percent = progress_percent

    @property
    def project(self):
        """Gets the project of this ResponseExperimentInfo.  # noqa: E501


        :return: The project of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseExperimentInfo.


        :param project: The project of this ResponseExperimentInfo.  # noqa: E501
        :type project: ResponseProject
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def reproduce_command(self):
        """Gets the reproduce_command of this ResponseExperimentInfo.  # noqa: E501


        :return: The reproduce_command of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._reproduce_command

    @reproduce_command.setter
    def reproduce_command(self, reproduce_command):
        """Sets the reproduce_command of this ResponseExperimentInfo.


        :param reproduce_command: The reproduce_command of this ResponseExperimentInfo.  # noqa: E501
        :type reproduce_command: str
        """

        self._reproduce_command = reproduce_command

    @property
    def service_account_name(self):
        """Gets the service_account_name of this ResponseExperimentInfo.  # noqa: E501


        :return: The service_account_name of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this ResponseExperimentInfo.


        :param service_account_name: The service_account_name of this ResponseExperimentInfo.  # noqa: E501
        :type service_account_name: str
        """

        self._service_account_name = service_account_name

    @property
    def start_command(self):
        """Gets the start_command of this ResponseExperimentInfo.  # noqa: E501


        :return: The start_command of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponseExperimentInfo.


        :param start_command: The start_command of this ResponseExperimentInfo.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ResponseExperimentInfo.  # noqa: E501


        :return: The status of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseExperimentInfo.


        :param status: The status of this ResponseExperimentInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseExperimentInfo.  # noqa: E501


        :return: The status_last_updated of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseExperimentInfo.


        :param status_last_updated: The status_last_updated of this ResponseExperimentInfo.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def status_list(self):
        """Gets the status_list of this ResponseExperimentInfo.  # noqa: E501


        :return: The status_list of this ResponseExperimentInfo.  # noqa: E501
        :rtype: list[ResponseWorkloadStatusInfo]
        """
        return self._status_list

    @status_list.setter
    def status_list(self, status_list):
        """Sets the status_list of this ResponseExperimentInfo.


        :param status_list: The status_list of this ResponseExperimentInfo.  # noqa: E501
        :type status_list: list[ResponseWorkloadStatusInfo]
        """

        self._status_list = status_list

    @property
    def status_reason(self):
        """Gets the status_reason of this ResponseExperimentInfo.  # noqa: E501


        :return: The status_reason of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ResponseExperimentInfo.


        :param status_reason: The status_reason of this ResponseExperimentInfo.  # noqa: E501
        :type status_reason: str
        """
        if self.local_vars_configuration.client_side_validation and status_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501

        self._status_reason = status_reason

    @property
    def sweep(self):
        """Gets the sweep of this ResponseExperimentInfo.  # noqa: E501


        :return: The sweep of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseSweepInfo
        """
        return self._sweep

    @sweep.setter
    def sweep(self, sweep):
        """Sets the sweep of this ResponseExperimentInfo.


        :param sweep: The sweep of this ResponseExperimentInfo.  # noqa: E501
        :type sweep: ResponseSweepInfo
        """

        self._sweep = sweep

    @property
    def termination_protection(self):
        """Gets the termination_protection of this ResponseExperimentInfo.  # noqa: E501


        :return: The termination_protection of this ResponseExperimentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this ResponseExperimentInfo.


        :param termination_protection: The termination_protection of this ResponseExperimentInfo.  # noqa: E501
        :type termination_protection: bool
        """
        if self.local_vars_configuration.client_side_validation and termination_protection is None:  # noqa: E501
            raise ValueError("Invalid value for `termination_protection`, must not be `None`")  # noqa: E501

        self._termination_protection = termination_protection

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ResponseExperimentInfo.  # noqa: E501


        :return: The volume_mounts of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseVolumeMountInfos
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ResponseExperimentInfo.


        :param volume_mounts: The volume_mounts of this ResponseExperimentInfo.  # noqa: E501
        :type volume_mounts: ResponseVolumeMountInfos
        """
        if self.local_vars_configuration.client_side_validation and volume_mounts is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_mounts`, must not be `None`")  # noqa: E501

        self._volume_mounts = volume_mounts

    @property
    def volume_mounts_list(self):
        """Gets the volume_mounts_list of this ResponseExperimentInfo.  # noqa: E501


        :return: The volume_mounts_list of this ResponseExperimentInfo.  # noqa: E501
        :rtype: list[ResponseVolumeMountInfos]
        """
        return self._volume_mounts_list

    @volume_mounts_list.setter
    def volume_mounts_list(self, volume_mounts_list):
        """Sets the volume_mounts_list of this ResponseExperimentInfo.


        :param volume_mounts_list: The volume_mounts_list of this ResponseExperimentInfo.  # noqa: E501
        :type volume_mounts_list: list[ResponseVolumeMountInfos]
        """
        if self.local_vars_configuration.client_side_validation and volume_mounts_list is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_mounts_list`, must not be `None`")  # noqa: E501

        self._volume_mounts_list = volume_mounts_list

    @property
    def workload_id(self):
        """Gets the workload_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this ResponseExperimentInfo.


        :param workload_id: The workload_id of this ResponseExperimentInfo.  # noqa: E501
        :type workload_id: int
        """

        self._workload_id = workload_id

    @property
    def workload_status(self):
        """Gets the workload_status of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_status of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._workload_status

    @workload_status.setter
    def workload_status(self, workload_status):
        """Sets the workload_status of this ResponseExperimentInfo.


        :param workload_status: The workload_status of this ResponseExperimentInfo.  # noqa: E501
        :type workload_status: str
        """

        self._workload_status = workload_status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseExperimentInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseExperimentInfo):
            return True

        return self.to_dict() != other.to_dict()
