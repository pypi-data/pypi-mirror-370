# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1MountClaim(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cifs': 'V1CIFSMount',
        'csi': 'V1CSIMount',
        'dataset': 'V1DatasetMount',
        'driver_type': 'str',
        'gcs_fuse': 'V1GCSFuseMount',
        'googledisk': 'V1GoogleDiskMount',
        'hostpath': 'V1HostPathMount',
        'nfs': 'V1NFSMount'
    }

    attribute_map = {
        'cifs': 'cifs',
        'csi': 'csi',
        'dataset': 'dataset',
        'driver_type': 'driver_type',
        'gcs_fuse': 'gcs_fuse',
        'googledisk': 'googledisk',
        'hostpath': 'hostpath',
        'nfs': 'nfs'
    }

    def __init__(self, cifs=None, csi=None, dataset=None, driver_type=None, gcs_fuse=None, googledisk=None, hostpath=None, nfs=None, local_vars_configuration=None):  # noqa: E501
        """V1MountClaim - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cifs = None
        self._csi = None
        self._dataset = None
        self._driver_type = None
        self._gcs_fuse = None
        self._googledisk = None
        self._hostpath = None
        self._nfs = None
        self.discriminator = None

        if cifs is not None:
            self.cifs = cifs
        if csi is not None:
            self.csi = csi
        if dataset is not None:
            self.dataset = dataset
        self.driver_type = driver_type
        if gcs_fuse is not None:
            self.gcs_fuse = gcs_fuse
        if googledisk is not None:
            self.googledisk = googledisk
        if hostpath is not None:
            self.hostpath = hostpath
        if nfs is not None:
            self.nfs = nfs

    @property
    def cifs(self):
        """Gets the cifs of this V1MountClaim.  # noqa: E501


        :return: The cifs of this V1MountClaim.  # noqa: E501
        :rtype: V1CIFSMount
        """
        return self._cifs

    @cifs.setter
    def cifs(self, cifs):
        """Sets the cifs of this V1MountClaim.


        :param cifs: The cifs of this V1MountClaim.  # noqa: E501
        :type cifs: V1CIFSMount
        """

        self._cifs = cifs

    @property
    def csi(self):
        """Gets the csi of this V1MountClaim.  # noqa: E501


        :return: The csi of this V1MountClaim.  # noqa: E501
        :rtype: V1CSIMount
        """
        return self._csi

    @csi.setter
    def csi(self, csi):
        """Sets the csi of this V1MountClaim.


        :param csi: The csi of this V1MountClaim.  # noqa: E501
        :type csi: V1CSIMount
        """

        self._csi = csi

    @property
    def dataset(self):
        """Gets the dataset of this V1MountClaim.  # noqa: E501


        :return: The dataset of this V1MountClaim.  # noqa: E501
        :rtype: V1DatasetMount
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1MountClaim.


        :param dataset: The dataset of this V1MountClaim.  # noqa: E501
        :type dataset: V1DatasetMount
        """

        self._dataset = dataset

    @property
    def driver_type(self):
        """Gets the driver_type of this V1MountClaim.  # noqa: E501


        :return: The driver_type of this V1MountClaim.  # noqa: E501
        :rtype: str
        """
        return self._driver_type

    @driver_type.setter
    def driver_type(self, driver_type):
        """Sets the driver_type of this V1MountClaim.


        :param driver_type: The driver_type of this V1MountClaim.  # noqa: E501
        :type driver_type: str
        """
        if self.local_vars_configuration.client_side_validation and driver_type is None:  # noqa: E501
            raise ValueError("Invalid value for `driver_type`, must not be `None`")  # noqa: E501
        allowed_values = ["hostpath", "nfs", "cifs", "googledisk", "csi", "dataset", "gcs_fuse"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and driver_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `driver_type` ({0}), must be one of {1}"  # noqa: E501
                .format(driver_type, allowed_values)
            )

        self._driver_type = driver_type

    @property
    def gcs_fuse(self):
        """Gets the gcs_fuse of this V1MountClaim.  # noqa: E501


        :return: The gcs_fuse of this V1MountClaim.  # noqa: E501
        :rtype: V1GCSFuseMount
        """
        return self._gcs_fuse

    @gcs_fuse.setter
    def gcs_fuse(self, gcs_fuse):
        """Sets the gcs_fuse of this V1MountClaim.


        :param gcs_fuse: The gcs_fuse of this V1MountClaim.  # noqa: E501
        :type gcs_fuse: V1GCSFuseMount
        """

        self._gcs_fuse = gcs_fuse

    @property
    def googledisk(self):
        """Gets the googledisk of this V1MountClaim.  # noqa: E501


        :return: The googledisk of this V1MountClaim.  # noqa: E501
        :rtype: V1GoogleDiskMount
        """
        return self._googledisk

    @googledisk.setter
    def googledisk(self, googledisk):
        """Sets the googledisk of this V1MountClaim.


        :param googledisk: The googledisk of this V1MountClaim.  # noqa: E501
        :type googledisk: V1GoogleDiskMount
        """

        self._googledisk = googledisk

    @property
    def hostpath(self):
        """Gets the hostpath of this V1MountClaim.  # noqa: E501


        :return: The hostpath of this V1MountClaim.  # noqa: E501
        :rtype: V1HostPathMount
        """
        return self._hostpath

    @hostpath.setter
    def hostpath(self, hostpath):
        """Sets the hostpath of this V1MountClaim.


        :param hostpath: The hostpath of this V1MountClaim.  # noqa: E501
        :type hostpath: V1HostPathMount
        """

        self._hostpath = hostpath

    @property
    def nfs(self):
        """Gets the nfs of this V1MountClaim.  # noqa: E501


        :return: The nfs of this V1MountClaim.  # noqa: E501
        :rtype: V1NFSMount
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this V1MountClaim.


        :param nfs: The nfs of this V1MountClaim.  # noqa: E501
        :type nfs: V1NFSMount
        """

        self._nfs = nfs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1MountClaim):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1MountClaim):
            return True

        return self.to_dict() != other.to_dict()
