# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1Config(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_host_path_config': 'V1ClusterHostPathConfig',
        'cluster_nfs_config': 'V1ClusterNfsConfig',
        'gcs_config': 'V1GcsConfig',
        's3_config': 'V1S3Config'
    }

    attribute_map = {
        'cluster_host_path_config': 'cluster_host_path_config',
        'cluster_nfs_config': 'cluster_nfs_config',
        'gcs_config': 'gcs_config',
        's3_config': 's3_config'
    }

    def __init__(self, cluster_host_path_config=None, cluster_nfs_config=None, gcs_config=None, s3_config=None, local_vars_configuration=None):  # noqa: E501
        """V1Config - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_host_path_config = None
        self._cluster_nfs_config = None
        self._gcs_config = None
        self._s3_config = None
        self.discriminator = None

        if cluster_host_path_config is not None:
            self.cluster_host_path_config = cluster_host_path_config
        if cluster_nfs_config is not None:
            self.cluster_nfs_config = cluster_nfs_config
        if gcs_config is not None:
            self.gcs_config = gcs_config
        if s3_config is not None:
            self.s3_config = s3_config

    @property
    def cluster_host_path_config(self):
        """Gets the cluster_host_path_config of this V1Config.  # noqa: E501


        :return: The cluster_host_path_config of this V1Config.  # noqa: E501
        :rtype: V1ClusterHostPathConfig
        """
        return self._cluster_host_path_config

    @cluster_host_path_config.setter
    def cluster_host_path_config(self, cluster_host_path_config):
        """Sets the cluster_host_path_config of this V1Config.


        :param cluster_host_path_config: The cluster_host_path_config of this V1Config.  # noqa: E501
        :type cluster_host_path_config: V1ClusterHostPathConfig
        """

        self._cluster_host_path_config = cluster_host_path_config

    @property
    def cluster_nfs_config(self):
        """Gets the cluster_nfs_config of this V1Config.  # noqa: E501


        :return: The cluster_nfs_config of this V1Config.  # noqa: E501
        :rtype: V1ClusterNfsConfig
        """
        return self._cluster_nfs_config

    @cluster_nfs_config.setter
    def cluster_nfs_config(self, cluster_nfs_config):
        """Sets the cluster_nfs_config of this V1Config.


        :param cluster_nfs_config: The cluster_nfs_config of this V1Config.  # noqa: E501
        :type cluster_nfs_config: V1ClusterNfsConfig
        """

        self._cluster_nfs_config = cluster_nfs_config

    @property
    def gcs_config(self):
        """Gets the gcs_config of this V1Config.  # noqa: E501


        :return: The gcs_config of this V1Config.  # noqa: E501
        :rtype: V1GcsConfig
        """
        return self._gcs_config

    @gcs_config.setter
    def gcs_config(self, gcs_config):
        """Sets the gcs_config of this V1Config.


        :param gcs_config: The gcs_config of this V1Config.  # noqa: E501
        :type gcs_config: V1GcsConfig
        """

        self._gcs_config = gcs_config

    @property
    def s3_config(self):
        """Gets the s3_config of this V1Config.  # noqa: E501


        :return: The s3_config of this V1Config.  # noqa: E501
        :rtype: V1S3Config
        """
        return self._s3_config

    @s3_config.setter
    def s3_config(self, s3_config):
        """Sets the s3_config of this V1Config.


        :param s3_config: The s3_config of this V1Config.  # noqa: E501
        :type s3_config: V1S3Config
        """

        self._s3_config = s3_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Config):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1Config):
            return True

        return self.to_dict() != other.to_dict()
