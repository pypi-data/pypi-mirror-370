# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class LlmLLMWorkflowReadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_rollout': 'ProtoModelServiceRollout',
        'cluster': 'ProtoCluster',
        'default_resource_preset': 'ProtoResourcePreset',
        'existing_tags': 'list[ProtoTag]',
        'last_deployed_revision': 'ProtoLLMWorkflowRevision',
        'live_gateway': 'ProtoModelServiceGateway',
        'model_service': 'ProtoModelService',
        'workflow': 'ProtoLLMWorkflow'
    }

    attribute_map = {
        'active_rollout': 'ActiveRollout',
        'cluster': 'Cluster',
        'default_resource_preset': 'DefaultResourcePreset',
        'existing_tags': 'ExistingTags',
        'last_deployed_revision': 'LastDeployedRevision',
        'live_gateway': 'LiveGateway',
        'model_service': 'ModelService',
        'workflow': 'Workflow'
    }

    def __init__(self, active_rollout=None, cluster=None, default_resource_preset=None, existing_tags=None, last_deployed_revision=None, live_gateway=None, model_service=None, workflow=None, local_vars_configuration=None):  # noqa: E501
        """LlmLLMWorkflowReadResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._active_rollout = None
        self._cluster = None
        self._default_resource_preset = None
        self._existing_tags = None
        self._last_deployed_revision = None
        self._live_gateway = None
        self._model_service = None
        self._workflow = None
        self.discriminator = None

        if active_rollout is not None:
            self.active_rollout = active_rollout
        if cluster is not None:
            self.cluster = cluster
        if default_resource_preset is not None:
            self.default_resource_preset = default_resource_preset
        if existing_tags is not None:
            self.existing_tags = existing_tags
        if last_deployed_revision is not None:
            self.last_deployed_revision = last_deployed_revision
        if live_gateway is not None:
            self.live_gateway = live_gateway
        if model_service is not None:
            self.model_service = model_service
        if workflow is not None:
            self.workflow = workflow

    @property
    def active_rollout(self):
        """Gets the active_rollout of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The active_rollout of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoModelServiceRollout
        """
        return self._active_rollout

    @active_rollout.setter
    def active_rollout(self, active_rollout):
        """Sets the active_rollout of this LlmLLMWorkflowReadResponse.


        :param active_rollout: The active_rollout of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type active_rollout: ProtoModelServiceRollout
        """

        self._active_rollout = active_rollout

    @property
    def cluster(self):
        """Gets the cluster of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The cluster of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this LlmLLMWorkflowReadResponse.


        :param cluster: The cluster of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type cluster: ProtoCluster
        """

        self._cluster = cluster

    @property
    def default_resource_preset(self):
        """Gets the default_resource_preset of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The default_resource_preset of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoResourcePreset
        """
        return self._default_resource_preset

    @default_resource_preset.setter
    def default_resource_preset(self, default_resource_preset):
        """Sets the default_resource_preset of this LlmLLMWorkflowReadResponse.


        :param default_resource_preset: The default_resource_preset of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type default_resource_preset: ProtoResourcePreset
        """

        self._default_resource_preset = default_resource_preset

    @property
    def existing_tags(self):
        """Gets the existing_tags of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The existing_tags of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: list[ProtoTag]
        """
        return self._existing_tags

    @existing_tags.setter
    def existing_tags(self, existing_tags):
        """Sets the existing_tags of this LlmLLMWorkflowReadResponse.


        :param existing_tags: The existing_tags of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type existing_tags: list[ProtoTag]
        """

        self._existing_tags = existing_tags

    @property
    def last_deployed_revision(self):
        """Gets the last_deployed_revision of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The last_deployed_revision of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoLLMWorkflowRevision
        """
        return self._last_deployed_revision

    @last_deployed_revision.setter
    def last_deployed_revision(self, last_deployed_revision):
        """Sets the last_deployed_revision of this LlmLLMWorkflowReadResponse.


        :param last_deployed_revision: The last_deployed_revision of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type last_deployed_revision: ProtoLLMWorkflowRevision
        """

        self._last_deployed_revision = last_deployed_revision

    @property
    def live_gateway(self):
        """Gets the live_gateway of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The live_gateway of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoModelServiceGateway
        """
        return self._live_gateway

    @live_gateway.setter
    def live_gateway(self, live_gateway):
        """Sets the live_gateway of this LlmLLMWorkflowReadResponse.


        :param live_gateway: The live_gateway of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type live_gateway: ProtoModelServiceGateway
        """

        self._live_gateway = live_gateway

    @property
    def model_service(self):
        """Gets the model_service of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The model_service of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoModelService
        """
        return self._model_service

    @model_service.setter
    def model_service(self, model_service):
        """Sets the model_service of this LlmLLMWorkflowReadResponse.


        :param model_service: The model_service of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type model_service: ProtoModelService
        """

        self._model_service = model_service

    @property
    def workflow(self):
        """Gets the workflow of this LlmLLMWorkflowReadResponse.  # noqa: E501


        :return: The workflow of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :rtype: ProtoLLMWorkflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this LlmLLMWorkflowReadResponse.


        :param workflow: The workflow of this LlmLLMWorkflowReadResponse.  # noqa: E501
        :type workflow: ProtoLLMWorkflow
        """

        self._workflow = workflow

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LlmLLMWorkflowReadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LlmLLMWorkflowReadResponse):
            return True

        return self.to_dict() != other.to_dict()
