# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmPipelineSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'archived_dt': 'datetime',
        'created_dt': 'datetime',
        'edges': 'OrmPipelineSpecEdges',
        'hub_model_task_id': 'int',
        'id': 'int',
        'parameter_spec': 'dict[str, object]',
        'pipeline_id': 'int',
        'publish_message': 'str',
        'published': 'bool',
        'published_dt': 'datetime',
        'revision': 'int',
        'spec': 'dict[str, object]',
        'step_dependencies': 'dict[str, object]',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'archived_dt': 'archived_dt',
        'created_dt': 'created_dt',
        'edges': 'edges',
        'hub_model_task_id': 'hub_model_task_id',
        'id': 'id',
        'parameter_spec': 'parameter_spec',
        'pipeline_id': 'pipeline_id',
        'publish_message': 'publish_message',
        'published': 'published',
        'published_dt': 'published_dt',
        'revision': 'revision',
        'spec': 'spec',
        'step_dependencies': 'step_dependencies',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, archived_dt=None, created_dt=None, edges=None, hub_model_task_id=None, id=None, parameter_spec=None, pipeline_id=None, publish_message=None, published=None, published_dt=None, revision=None, spec=None, step_dependencies=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._archived_dt = None
        self._created_dt = None
        self._edges = None
        self._hub_model_task_id = None
        self._id = None
        self._parameter_spec = None
        self._pipeline_id = None
        self._publish_message = None
        self._published = None
        self._published_dt = None
        self._revision = None
        self._spec = None
        self._step_dependencies = None
        self._updated_dt = None
        self.discriminator = None

        self.archived_dt = archived_dt
        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        self.hub_model_task_id = hub_model_task_id
        if id is not None:
            self.id = id
        if parameter_spec is not None:
            self.parameter_spec = parameter_spec
        self.pipeline_id = pipeline_id
        self.publish_message = publish_message
        if published is not None:
            self.published = published
        self.published_dt = published_dt
        if revision is not None:
            self.revision = revision
        if spec is not None:
            self.spec = spec
        if step_dependencies is not None:
            self.step_dependencies = step_dependencies
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def archived_dt(self):
        """Gets the archived_dt of this OrmPipelineSpec.  # noqa: E501


        :return: The archived_dt of this OrmPipelineSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_dt

    @archived_dt.setter
    def archived_dt(self, archived_dt):
        """Sets the archived_dt of this OrmPipelineSpec.


        :param archived_dt: The archived_dt of this OrmPipelineSpec.  # noqa: E501
        :type archived_dt: datetime
        """

        self._archived_dt = archived_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmPipelineSpec.  # noqa: E501


        :return: The created_dt of this OrmPipelineSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmPipelineSpec.


        :param created_dt: The created_dt of this OrmPipelineSpec.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmPipelineSpec.  # noqa: E501


        :return: The edges of this OrmPipelineSpec.  # noqa: E501
        :rtype: OrmPipelineSpecEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmPipelineSpec.


        :param edges: The edges of this OrmPipelineSpec.  # noqa: E501
        :type edges: OrmPipelineSpecEdges
        """

        self._edges = edges

    @property
    def hub_model_task_id(self):
        """Gets the hub_model_task_id of this OrmPipelineSpec.  # noqa: E501


        :return: The hub_model_task_id of this OrmPipelineSpec.  # noqa: E501
        :rtype: int
        """
        return self._hub_model_task_id

    @hub_model_task_id.setter
    def hub_model_task_id(self, hub_model_task_id):
        """Sets the hub_model_task_id of this OrmPipelineSpec.


        :param hub_model_task_id: The hub_model_task_id of this OrmPipelineSpec.  # noqa: E501
        :type hub_model_task_id: int
        """

        self._hub_model_task_id = hub_model_task_id

    @property
    def id(self):
        """Gets the id of this OrmPipelineSpec.  # noqa: E501


        :return: The id of this OrmPipelineSpec.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmPipelineSpec.


        :param id: The id of this OrmPipelineSpec.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def parameter_spec(self):
        """Gets the parameter_spec of this OrmPipelineSpec.  # noqa: E501


        :return: The parameter_spec of this OrmPipelineSpec.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._parameter_spec

    @parameter_spec.setter
    def parameter_spec(self, parameter_spec):
        """Sets the parameter_spec of this OrmPipelineSpec.


        :param parameter_spec: The parameter_spec of this OrmPipelineSpec.  # noqa: E501
        :type parameter_spec: dict[str, object]
        """

        self._parameter_spec = parameter_spec

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this OrmPipelineSpec.  # noqa: E501


        :return: The pipeline_id of this OrmPipelineSpec.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this OrmPipelineSpec.


        :param pipeline_id: The pipeline_id of this OrmPipelineSpec.  # noqa: E501
        :type pipeline_id: int
        """

        self._pipeline_id = pipeline_id

    @property
    def publish_message(self):
        """Gets the publish_message of this OrmPipelineSpec.  # noqa: E501


        :return: The publish_message of this OrmPipelineSpec.  # noqa: E501
        :rtype: str
        """
        return self._publish_message

    @publish_message.setter
    def publish_message(self, publish_message):
        """Sets the publish_message of this OrmPipelineSpec.


        :param publish_message: The publish_message of this OrmPipelineSpec.  # noqa: E501
        :type publish_message: str
        """

        self._publish_message = publish_message

    @property
    def published(self):
        """Gets the published of this OrmPipelineSpec.  # noqa: E501


        :return: The published of this OrmPipelineSpec.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this OrmPipelineSpec.


        :param published: The published of this OrmPipelineSpec.  # noqa: E501
        :type published: bool
        """

        self._published = published

    @property
    def published_dt(self):
        """Gets the published_dt of this OrmPipelineSpec.  # noqa: E501


        :return: The published_dt of this OrmPipelineSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._published_dt

    @published_dt.setter
    def published_dt(self, published_dt):
        """Sets the published_dt of this OrmPipelineSpec.


        :param published_dt: The published_dt of this OrmPipelineSpec.  # noqa: E501
        :type published_dt: datetime
        """

        self._published_dt = published_dt

    @property
    def revision(self):
        """Gets the revision of this OrmPipelineSpec.  # noqa: E501


        :return: The revision of this OrmPipelineSpec.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this OrmPipelineSpec.


        :param revision: The revision of this OrmPipelineSpec.  # noqa: E501
        :type revision: int
        """

        self._revision = revision

    @property
    def spec(self):
        """Gets the spec of this OrmPipelineSpec.  # noqa: E501


        :return: The spec of this OrmPipelineSpec.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this OrmPipelineSpec.


        :param spec: The spec of this OrmPipelineSpec.  # noqa: E501
        :type spec: dict[str, object]
        """

        self._spec = spec

    @property
    def step_dependencies(self):
        """Gets the step_dependencies of this OrmPipelineSpec.  # noqa: E501


        :return: The step_dependencies of this OrmPipelineSpec.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._step_dependencies

    @step_dependencies.setter
    def step_dependencies(self, step_dependencies):
        """Sets the step_dependencies of this OrmPipelineSpec.


        :param step_dependencies: The step_dependencies of this OrmPipelineSpec.  # noqa: E501
        :type step_dependencies: dict[str, object]
        """

        self._step_dependencies = step_dependencies

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmPipelineSpec.  # noqa: E501


        :return: The updated_dt of this OrmPipelineSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmPipelineSpec.


        :param updated_dt: The updated_dt of this OrmPipelineSpec.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineSpec):
            return True

        return self.to_dict() != other.to_dict()
