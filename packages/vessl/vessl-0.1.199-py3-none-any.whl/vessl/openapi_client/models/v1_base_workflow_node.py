# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1BaseWorkflowNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'outputs': 'dict[str, V1SingleWorkflowNodeOutput]',
        'rendering_hints': 'V1RenderingHints',
        'title': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'outputs': 'outputs',
        'rendering_hints': 'rendering_hints',
        'title': 'title'
    }

    def __init__(self, kind=None, outputs=None, rendering_hints=None, title=None, local_vars_configuration=None):  # noqa: E501
        """V1BaseWorkflowNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._kind = None
        self._outputs = None
        self._rendering_hints = None
        self._title = None
        self.discriminator = None

        self.kind = kind
        if outputs is not None:
            self.outputs = outputs
        if rendering_hints is not None:
            self.rendering_hints = rendering_hints
        if title is not None:
            self.title = title

    @property
    def kind(self):
        """Gets the kind of this V1BaseWorkflowNode.  # noqa: E501


        :return: The kind of this V1BaseWorkflowNode.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1BaseWorkflowNode.


        :param kind: The kind of this V1BaseWorkflowNode.  # noqa: E501
        :type kind: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["workflowv1/InlineCode", "workflowv1/LLMQuery", "workflowv1/VectorSearch", "workflowv1/InvokeTool"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def outputs(self):
        """Gets the outputs of this V1BaseWorkflowNode.  # noqa: E501


        :return: The outputs of this V1BaseWorkflowNode.  # noqa: E501
        :rtype: dict[str, V1SingleWorkflowNodeOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this V1BaseWorkflowNode.


        :param outputs: The outputs of this V1BaseWorkflowNode.  # noqa: E501
        :type outputs: dict[str, V1SingleWorkflowNodeOutput]
        """

        self._outputs = outputs

    @property
    def rendering_hints(self):
        """Gets the rendering_hints of this V1BaseWorkflowNode.  # noqa: E501


        :return: The rendering_hints of this V1BaseWorkflowNode.  # noqa: E501
        :rtype: V1RenderingHints
        """
        return self._rendering_hints

    @rendering_hints.setter
    def rendering_hints(self, rendering_hints):
        """Sets the rendering_hints of this V1BaseWorkflowNode.


        :param rendering_hints: The rendering_hints of this V1BaseWorkflowNode.  # noqa: E501
        :type rendering_hints: V1RenderingHints
        """

        self._rendering_hints = rendering_hints

    @property
    def title(self):
        """Gets the title of this V1BaseWorkflowNode.  # noqa: E501


        :return: The title of this V1BaseWorkflowNode.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V1BaseWorkflowNode.


        :param title: The title of this V1BaseWorkflowNode.  # noqa: E501
        :type title: str
        """

        self._title = title

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BaseWorkflowNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1BaseWorkflowNode):
            return True

        return self.to_dict() != other.to_dict()
