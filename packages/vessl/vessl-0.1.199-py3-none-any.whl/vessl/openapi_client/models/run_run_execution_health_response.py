# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class RunRunExecutionHealthResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_status': 'str',
        'last_alive_updated': 'float',
        'refreshed_token': 'str',
        'registered_ssh_public_keys': 'list[str]'
    }

    attribute_map = {
        'current_status': 'current_status',
        'last_alive_updated': 'last_alive_updated',
        'refreshed_token': 'refreshed_token',
        'registered_ssh_public_keys': 'registered_ssh_public_keys'
    }

    def __init__(self, current_status=None, last_alive_updated=None, refreshed_token=None, registered_ssh_public_keys=None, local_vars_configuration=None):  # noqa: E501
        """RunRunExecutionHealthResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_status = None
        self._last_alive_updated = None
        self._refreshed_token = None
        self._registered_ssh_public_keys = None
        self.discriminator = None

        self.current_status = current_status
        self.last_alive_updated = last_alive_updated
        self.refreshed_token = refreshed_token
        self.registered_ssh_public_keys = registered_ssh_public_keys

    @property
    def current_status(self):
        """Gets the current_status of this RunRunExecutionHealthResponse.  # noqa: E501


        :return: The current_status of this RunRunExecutionHealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this RunRunExecutionHealthResponse.


        :param current_status: The current_status of this RunRunExecutionHealthResponse.  # noqa: E501
        :type current_status: str
        """
        if self.local_vars_configuration.client_side_validation and current_status is None:  # noqa: E501
            raise ValueError("Invalid value for `current_status`, must not be `None`")  # noqa: E501

        self._current_status = current_status

    @property
    def last_alive_updated(self):
        """Gets the last_alive_updated of this RunRunExecutionHealthResponse.  # noqa: E501


        :return: The last_alive_updated of this RunRunExecutionHealthResponse.  # noqa: E501
        :rtype: float
        """
        return self._last_alive_updated

    @last_alive_updated.setter
    def last_alive_updated(self, last_alive_updated):
        """Sets the last_alive_updated of this RunRunExecutionHealthResponse.


        :param last_alive_updated: The last_alive_updated of this RunRunExecutionHealthResponse.  # noqa: E501
        :type last_alive_updated: float
        """
        if self.local_vars_configuration.client_side_validation and last_alive_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `last_alive_updated`, must not be `None`")  # noqa: E501

        self._last_alive_updated = last_alive_updated

    @property
    def refreshed_token(self):
        """Gets the refreshed_token of this RunRunExecutionHealthResponse.  # noqa: E501


        :return: The refreshed_token of this RunRunExecutionHealthResponse.  # noqa: E501
        :rtype: str
        """
        return self._refreshed_token

    @refreshed_token.setter
    def refreshed_token(self, refreshed_token):
        """Sets the refreshed_token of this RunRunExecutionHealthResponse.


        :param refreshed_token: The refreshed_token of this RunRunExecutionHealthResponse.  # noqa: E501
        :type refreshed_token: str
        """

        self._refreshed_token = refreshed_token

    @property
    def registered_ssh_public_keys(self):
        """Gets the registered_ssh_public_keys of this RunRunExecutionHealthResponse.  # noqa: E501


        :return: The registered_ssh_public_keys of this RunRunExecutionHealthResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._registered_ssh_public_keys

    @registered_ssh_public_keys.setter
    def registered_ssh_public_keys(self, registered_ssh_public_keys):
        """Sets the registered_ssh_public_keys of this RunRunExecutionHealthResponse.


        :param registered_ssh_public_keys: The registered_ssh_public_keys of this RunRunExecutionHealthResponse.  # noqa: E501
        :type registered_ssh_public_keys: list[str]
        """
        if self.local_vars_configuration.client_side_validation and registered_ssh_public_keys is None:  # noqa: E501
            raise ValueError("Invalid value for `registered_ssh_public_keys`, must not be `None`")  # noqa: E501

        self._registered_ssh_public_keys = registered_ssh_public_keys

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunRunExecutionHealthResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunRunExecutionHealthResponse):
            return True

        return self.to_dict() != other.to_dict()
