# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ModelServiceRevisionCreateFromYAMLV2APIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'V1RunArgument',
        'node_port': 'int',
        'serverless': 'bool',
        'subdomain': 'str',
        'yaml_spec': 'str'
    }

    attribute_map = {
        'arguments': 'arguments',
        'node_port': 'node_port',
        'serverless': 'serverless',
        'subdomain': 'subdomain',
        'yaml_spec': 'yaml_spec'
    }

    def __init__(self, arguments=None, node_port=None, serverless=None, subdomain=None, yaml_spec=None, local_vars_configuration=None):  # noqa: E501
        """ModelServiceRevisionCreateFromYAMLV2APIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._node_port = None
        self._serverless = None
        self._subdomain = None
        self._yaml_spec = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        self.node_port = node_port
        if serverless is not None:
            self.serverless = serverless
        self.subdomain = subdomain
        self.yaml_spec = yaml_spec

    @property
    def arguments(self):
        """Gets the arguments of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501


        :return: The arguments of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :rtype: V1RunArgument
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ModelServiceRevisionCreateFromYAMLV2APIInput.


        :param arguments: The arguments of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :type arguments: V1RunArgument
        """

        self._arguments = arguments

    @property
    def node_port(self):
        """Gets the node_port of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501


        :return: The node_port of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this ModelServiceRevisionCreateFromYAMLV2APIInput.


        :param node_port: The node_port of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :type node_port: int
        """

        self._node_port = node_port

    @property
    def serverless(self):
        """Gets the serverless of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501


        :return: The serverless of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :rtype: bool
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this ModelServiceRevisionCreateFromYAMLV2APIInput.


        :param serverless: The serverless of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :type serverless: bool
        """

        self._serverless = serverless

    @property
    def subdomain(self):
        """Gets the subdomain of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501


        :return: The subdomain of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this ModelServiceRevisionCreateFromYAMLV2APIInput.


        :param subdomain: The subdomain of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :type subdomain: str
        """

        self._subdomain = subdomain

    @property
    def yaml_spec(self):
        """Gets the yaml_spec of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501


        :return: The yaml_spec of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :rtype: str
        """
        return self._yaml_spec

    @yaml_spec.setter
    def yaml_spec(self, yaml_spec):
        """Sets the yaml_spec of this ModelServiceRevisionCreateFromYAMLV2APIInput.


        :param yaml_spec: The yaml_spec of this ModelServiceRevisionCreateFromYAMLV2APIInput.  # noqa: E501
        :type yaml_spec: str
        """
        if self.local_vars_configuration.client_side_validation and yaml_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `yaml_spec`, must not be `None`")  # noqa: E501

        self._yaml_spec = yaml_spec

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelServiceRevisionCreateFromYAMLV2APIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelServiceRevisionCreateFromYAMLV2APIInput):
            return True

        return self.to_dict() != other.to_dict()
