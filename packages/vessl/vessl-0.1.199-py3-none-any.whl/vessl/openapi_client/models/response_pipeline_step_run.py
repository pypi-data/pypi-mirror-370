# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponsePipelineStepRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'form': 'V1RunSpecFormBodyInput',
        'produced_output_volume_v2s': 'list[str]',
        'produced_output_volumes': 'list[str]',
        'run_spec': 'ResponseRunSpec',
        'variable_injects': 'dict[str, V1VariableReference]',
        'volume_injects': 'dict[str, V1VolumeInject]'
    }

    attribute_map = {
        'form': 'form',
        'produced_output_volume_v2s': 'produced_output_volume_v2s',
        'produced_output_volumes': 'produced_output_volumes',
        'run_spec': 'run_spec',
        'variable_injects': 'variable_injects',
        'volume_injects': 'volume_injects'
    }

    def __init__(self, form=None, produced_output_volume_v2s=None, produced_output_volumes=None, run_spec=None, variable_injects=None, volume_injects=None, local_vars_configuration=None):  # noqa: E501
        """ResponsePipelineStepRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._form = None
        self._produced_output_volume_v2s = None
        self._produced_output_volumes = None
        self._run_spec = None
        self._variable_injects = None
        self._volume_injects = None
        self.discriminator = None

        if form is not None:
            self.form = form
        if produced_output_volume_v2s is not None:
            self.produced_output_volume_v2s = produced_output_volume_v2s
        if produced_output_volumes is not None:
            self.produced_output_volumes = produced_output_volumes
        if run_spec is not None:
            self.run_spec = run_spec
        if variable_injects is not None:
            self.variable_injects = variable_injects
        if volume_injects is not None:
            self.volume_injects = volume_injects

    @property
    def form(self):
        """Gets the form of this ResponsePipelineStepRun.  # noqa: E501


        :return: The form of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: V1RunSpecFormBodyInput
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this ResponsePipelineStepRun.


        :param form: The form of this ResponsePipelineStepRun.  # noqa: E501
        :type form: V1RunSpecFormBodyInput
        """

        self._form = form

    @property
    def produced_output_volume_v2s(self):
        """Gets the produced_output_volume_v2s of this ResponsePipelineStepRun.  # noqa: E501


        :return: The produced_output_volume_v2s of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: list[str]
        """
        return self._produced_output_volume_v2s

    @produced_output_volume_v2s.setter
    def produced_output_volume_v2s(self, produced_output_volume_v2s):
        """Sets the produced_output_volume_v2s of this ResponsePipelineStepRun.


        :param produced_output_volume_v2s: The produced_output_volume_v2s of this ResponsePipelineStepRun.  # noqa: E501
        :type produced_output_volume_v2s: list[str]
        """

        self._produced_output_volume_v2s = produced_output_volume_v2s

    @property
    def produced_output_volumes(self):
        """Gets the produced_output_volumes of this ResponsePipelineStepRun.  # noqa: E501


        :return: The produced_output_volumes of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: list[str]
        """
        return self._produced_output_volumes

    @produced_output_volumes.setter
    def produced_output_volumes(self, produced_output_volumes):
        """Sets the produced_output_volumes of this ResponsePipelineStepRun.


        :param produced_output_volumes: The produced_output_volumes of this ResponsePipelineStepRun.  # noqa: E501
        :type produced_output_volumes: list[str]
        """

        self._produced_output_volumes = produced_output_volumes

    @property
    def run_spec(self):
        """Gets the run_spec of this ResponsePipelineStepRun.  # noqa: E501


        :return: The run_spec of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: ResponseRunSpec
        """
        return self._run_spec

    @run_spec.setter
    def run_spec(self, run_spec):
        """Sets the run_spec of this ResponsePipelineStepRun.


        :param run_spec: The run_spec of this ResponsePipelineStepRun.  # noqa: E501
        :type run_spec: ResponseRunSpec
        """

        self._run_spec = run_spec

    @property
    def variable_injects(self):
        """Gets the variable_injects of this ResponsePipelineStepRun.  # noqa: E501


        :return: The variable_injects of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: dict[str, V1VariableReference]
        """
        return self._variable_injects

    @variable_injects.setter
    def variable_injects(self, variable_injects):
        """Sets the variable_injects of this ResponsePipelineStepRun.


        :param variable_injects: The variable_injects of this ResponsePipelineStepRun.  # noqa: E501
        :type variable_injects: dict[str, V1VariableReference]
        """

        self._variable_injects = variable_injects

    @property
    def volume_injects(self):
        """Gets the volume_injects of this ResponsePipelineStepRun.  # noqa: E501


        :return: The volume_injects of this ResponsePipelineStepRun.  # noqa: E501
        :rtype: dict[str, V1VolumeInject]
        """
        return self._volume_injects

    @volume_injects.setter
    def volume_injects(self, volume_injects):
        """Sets the volume_injects of this ResponsePipelineStepRun.


        :param volume_injects: The volume_injects of this ResponsePipelineStepRun.  # noqa: E501
        :type volume_injects: dict[str, V1VolumeInject]
        """

        self._volume_injects = volume_injects

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePipelineStepRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponsePipelineStepRun):
            return True

        return self.to_dict() != other.to_dict()
