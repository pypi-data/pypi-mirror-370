# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ProtoModelServiceGateway(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict[str, str]',
        'enabled': 'bool',
        'endpoint': 'str',
        'ingress_class': 'str',
        'ingress_host': 'str',
        'last_error': 'str',
        'model_service_id': 'int',
        'rules': 'list[V1TrafficSplitEntry]',
        'status': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'enabled': 'enabled',
        'endpoint': 'endpoint',
        'ingress_class': 'ingress_class',
        'ingress_host': 'ingress_host',
        'last_error': 'last_error',
        'model_service_id': 'model_service_id',
        'rules': 'rules',
        'status': 'status'
    }

    def __init__(self, annotations=None, enabled=None, endpoint=None, ingress_class=None, ingress_host=None, last_error=None, model_service_id=None, rules=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ProtoModelServiceGateway - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._enabled = None
        self._endpoint = None
        self._ingress_class = None
        self._ingress_host = None
        self._last_error = None
        self._model_service_id = None
        self._rules = None
        self._status = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if enabled is not None:
            self.enabled = enabled
        if endpoint is not None:
            self.endpoint = endpoint
        if ingress_class is not None:
            self.ingress_class = ingress_class
        if ingress_host is not None:
            self.ingress_host = ingress_host
        self.last_error = last_error
        self.model_service_id = model_service_id
        if rules is not None:
            self.rules = rules
        if status is not None:
            self.status = status

    @property
    def annotations(self):
        """Gets the annotations of this ProtoModelServiceGateway.  # noqa: E501


        :return: The annotations of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ProtoModelServiceGateway.


        :param annotations: The annotations of this ProtoModelServiceGateway.  # noqa: E501
        :type annotations: dict[str, str]
        """

        self._annotations = annotations

    @property
    def enabled(self):
        """Gets the enabled of this ProtoModelServiceGateway.  # noqa: E501


        :return: The enabled of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ProtoModelServiceGateway.


        :param enabled: The enabled of this ProtoModelServiceGateway.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def endpoint(self):
        """Gets the endpoint of this ProtoModelServiceGateway.  # noqa: E501


        :return: The endpoint of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ProtoModelServiceGateway.


        :param endpoint: The endpoint of this ProtoModelServiceGateway.  # noqa: E501
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def ingress_class(self):
        """Gets the ingress_class of this ProtoModelServiceGateway.  # noqa: E501


        :return: The ingress_class of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._ingress_class

    @ingress_class.setter
    def ingress_class(self, ingress_class):
        """Sets the ingress_class of this ProtoModelServiceGateway.


        :param ingress_class: The ingress_class of this ProtoModelServiceGateway.  # noqa: E501
        :type ingress_class: str
        """

        self._ingress_class = ingress_class

    @property
    def ingress_host(self):
        """Gets the ingress_host of this ProtoModelServiceGateway.  # noqa: E501


        :return: The ingress_host of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._ingress_host

    @ingress_host.setter
    def ingress_host(self, ingress_host):
        """Sets the ingress_host of this ProtoModelServiceGateway.


        :param ingress_host: The ingress_host of this ProtoModelServiceGateway.  # noqa: E501
        :type ingress_host: str
        """

        self._ingress_host = ingress_host

    @property
    def last_error(self):
        """Gets the last_error of this ProtoModelServiceGateway.  # noqa: E501


        :return: The last_error of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """Sets the last_error of this ProtoModelServiceGateway.


        :param last_error: The last_error of this ProtoModelServiceGateway.  # noqa: E501
        :type last_error: str
        """

        self._last_error = last_error

    @property
    def model_service_id(self):
        """Gets the model_service_id of this ProtoModelServiceGateway.  # noqa: E501


        :return: The model_service_id of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: int
        """
        return self._model_service_id

    @model_service_id.setter
    def model_service_id(self, model_service_id):
        """Sets the model_service_id of this ProtoModelServiceGateway.


        :param model_service_id: The model_service_id of this ProtoModelServiceGateway.  # noqa: E501
        :type model_service_id: int
        """
        if self.local_vars_configuration.client_side_validation and model_service_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_service_id`, must not be `None`")  # noqa: E501

        self._model_service_id = model_service_id

    @property
    def rules(self):
        """Gets the rules of this ProtoModelServiceGateway.  # noqa: E501


        :return: The rules of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: list[V1TrafficSplitEntry]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ProtoModelServiceGateway.


        :param rules: The rules of this ProtoModelServiceGateway.  # noqa: E501
        :type rules: list[V1TrafficSplitEntry]
        """

        self._rules = rules

    @property
    def status(self):
        """Gets the status of this ProtoModelServiceGateway.  # noqa: E501


        :return: The status of this ProtoModelServiceGateway.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProtoModelServiceGateway.


        :param status: The status of this ProtoModelServiceGateway.  # noqa: E501
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtoModelServiceGateway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtoModelServiceGateway):
            return True

        return self.to_dict() != other.to_dict()
