# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmOrganizationEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifacts': 'list[OrmArtifact]',
        'cluster_quotas': 'list[OrmClusterQuota]',
        'coupon_redemptions': 'list[OrmCouponRedemption]',
        'credit_earn_histories': 'list[OrmCreditEarnHistory]',
        'default_storage': 'OrmStorage',
        'default_volume': 'OrmVolume',
        'hub_model_tasks': 'list[OrmHubModelTask]',
        'hub_tags': 'list[OrmHubTag]',
        'kernel_clusters': 'list[OrmKernelCluster]',
        'llm_api_keys': 'list[OrmLLMApiKey]',
        'llm_documents': 'list[OrmLLMDocument]',
        'llm_knowledge': 'list[OrmLLMKnowledge]',
        'llm_model_connections': 'list[OrmLLMModelConnection]',
        'llm_user_groups': 'list[OrmLLMUserGroup]',
        'llm_vectordb_connections': 'list[OrmLLMVectorDBConnection]',
        'llm_workflows': 'list[OrmLLMWorkflow]',
        'model_services': 'list[OrmModelService]',
        'onboardings': 'list[OrmOnboarding]',
        'organization_credential_provider': 'list[OrmOrganizationCredentialProvider]',
        'organization_credentials': 'list[OrmOrganizationCredentials]',
        'organization_hub_model_tasks': 'list[OrmOrganizationHubModelTask]',
        'organization_kernel_clusters': 'list[OrmOrganizationKernelCluster]',
        'periodic_credit_events': 'list[OrmPeriodicCreditEvent]',
        'pipeline_step_types': 'list[OrmPipelineStepType]',
        'pipelines': 'list[OrmPipeline]',
        'price_overrides': 'list[OrmPriceOverride]',
        'pricing_plan': 'OrmPricingPlan',
        'primary_owner': 'OrmUser',
        'run_executions': 'list[OrmRunExecution]',
        'run_specs': 'list[OrmRunSpec]',
        'stripe_billing_history': 'list[OrmStripeBillingHistory]',
        'subscriptions': 'list[OrmOrganizationSubscription]',
        'unresolved_credits': 'list[OrmUnresolvedCredits]',
        'user_groups': 'list[OrmUserGroup]',
        'user_organization': 'list[OrmUserOrganization]',
        'users_with_this_as_default_organization': 'list[OrmUser]',
        'wallets': 'list[OrmWallet]',
        'withdraw_history_kernel_clusters': 'list[OrmWithdrawHistoryKernelCluster]',
        'withdraw_history_organizations': 'list[OrmWithdrawHistoryOrganization]',
        'workloads': 'list[OrmWorkload]',
        'workspaces': 'list[OrmWorkspace]'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'cluster_quotas': 'cluster_quotas',
        'coupon_redemptions': 'coupon_redemptions',
        'credit_earn_histories': 'credit_earn_histories',
        'default_storage': 'default_storage',
        'default_volume': 'default_volume',
        'hub_model_tasks': 'hub_model_tasks',
        'hub_tags': 'hub_tags',
        'kernel_clusters': 'kernel_clusters',
        'llm_api_keys': 'llm_api_keys',
        'llm_documents': 'llm_documents',
        'llm_knowledge': 'llm_knowledge',
        'llm_model_connections': 'llm_model_connections',
        'llm_user_groups': 'llm_user_groups',
        'llm_vectordb_connections': 'llm_vectordb_connections',
        'llm_workflows': 'llm_workflows',
        'model_services': 'model_services',
        'onboardings': 'onboardings',
        'organization_credential_provider': 'organization_credential_provider',
        'organization_credentials': 'organization_credentials',
        'organization_hub_model_tasks': 'organization_hub_model_tasks',
        'organization_kernel_clusters': 'organization_kernel_clusters',
        'periodic_credit_events': 'periodic_credit_events',
        'pipeline_step_types': 'pipeline_step_types',
        'pipelines': 'pipelines',
        'price_overrides': 'price_overrides',
        'pricing_plan': 'pricing_plan',
        'primary_owner': 'primary_owner',
        'run_executions': 'run_executions',
        'run_specs': 'run_specs',
        'stripe_billing_history': 'stripe_billing_history',
        'subscriptions': 'subscriptions',
        'unresolved_credits': 'unresolved_credits',
        'user_groups': 'user_groups',
        'user_organization': 'user_organization',
        'users_with_this_as_default_organization': 'users_with_this_as_default_organization',
        'wallets': 'wallets',
        'withdraw_history_kernel_clusters': 'withdraw_history_kernel_clusters',
        'withdraw_history_organizations': 'withdraw_history_organizations',
        'workloads': 'workloads',
        'workspaces': 'workspaces'
    }

    def __init__(self, artifacts=None, cluster_quotas=None, coupon_redemptions=None, credit_earn_histories=None, default_storage=None, default_volume=None, hub_model_tasks=None, hub_tags=None, kernel_clusters=None, llm_api_keys=None, llm_documents=None, llm_knowledge=None, llm_model_connections=None, llm_user_groups=None, llm_vectordb_connections=None, llm_workflows=None, model_services=None, onboardings=None, organization_credential_provider=None, organization_credentials=None, organization_hub_model_tasks=None, organization_kernel_clusters=None, periodic_credit_events=None, pipeline_step_types=None, pipelines=None, price_overrides=None, pricing_plan=None, primary_owner=None, run_executions=None, run_specs=None, stripe_billing_history=None, subscriptions=None, unresolved_credits=None, user_groups=None, user_organization=None, users_with_this_as_default_organization=None, wallets=None, withdraw_history_kernel_clusters=None, withdraw_history_organizations=None, workloads=None, workspaces=None, local_vars_configuration=None):  # noqa: E501
        """OrmOrganizationEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifacts = None
        self._cluster_quotas = None
        self._coupon_redemptions = None
        self._credit_earn_histories = None
        self._default_storage = None
        self._default_volume = None
        self._hub_model_tasks = None
        self._hub_tags = None
        self._kernel_clusters = None
        self._llm_api_keys = None
        self._llm_documents = None
        self._llm_knowledge = None
        self._llm_model_connections = None
        self._llm_user_groups = None
        self._llm_vectordb_connections = None
        self._llm_workflows = None
        self._model_services = None
        self._onboardings = None
        self._organization_credential_provider = None
        self._organization_credentials = None
        self._organization_hub_model_tasks = None
        self._organization_kernel_clusters = None
        self._periodic_credit_events = None
        self._pipeline_step_types = None
        self._pipelines = None
        self._price_overrides = None
        self._pricing_plan = None
        self._primary_owner = None
        self._run_executions = None
        self._run_specs = None
        self._stripe_billing_history = None
        self._subscriptions = None
        self._unresolved_credits = None
        self._user_groups = None
        self._user_organization = None
        self._users_with_this_as_default_organization = None
        self._wallets = None
        self._withdraw_history_kernel_clusters = None
        self._withdraw_history_organizations = None
        self._workloads = None
        self._workspaces = None
        self.discriminator = None

        if artifacts is not None:
            self.artifacts = artifacts
        if cluster_quotas is not None:
            self.cluster_quotas = cluster_quotas
        if coupon_redemptions is not None:
            self.coupon_redemptions = coupon_redemptions
        if credit_earn_histories is not None:
            self.credit_earn_histories = credit_earn_histories
        if default_storage is not None:
            self.default_storage = default_storage
        if default_volume is not None:
            self.default_volume = default_volume
        if hub_model_tasks is not None:
            self.hub_model_tasks = hub_model_tasks
        if hub_tags is not None:
            self.hub_tags = hub_tags
        if kernel_clusters is not None:
            self.kernel_clusters = kernel_clusters
        if llm_api_keys is not None:
            self.llm_api_keys = llm_api_keys
        if llm_documents is not None:
            self.llm_documents = llm_documents
        if llm_knowledge is not None:
            self.llm_knowledge = llm_knowledge
        if llm_model_connections is not None:
            self.llm_model_connections = llm_model_connections
        if llm_user_groups is not None:
            self.llm_user_groups = llm_user_groups
        if llm_vectordb_connections is not None:
            self.llm_vectordb_connections = llm_vectordb_connections
        if llm_workflows is not None:
            self.llm_workflows = llm_workflows
        if model_services is not None:
            self.model_services = model_services
        if onboardings is not None:
            self.onboardings = onboardings
        if organization_credential_provider is not None:
            self.organization_credential_provider = organization_credential_provider
        if organization_credentials is not None:
            self.organization_credentials = organization_credentials
        if organization_hub_model_tasks is not None:
            self.organization_hub_model_tasks = organization_hub_model_tasks
        if organization_kernel_clusters is not None:
            self.organization_kernel_clusters = organization_kernel_clusters
        if periodic_credit_events is not None:
            self.periodic_credit_events = periodic_credit_events
        if pipeline_step_types is not None:
            self.pipeline_step_types = pipeline_step_types
        if pipelines is not None:
            self.pipelines = pipelines
        if price_overrides is not None:
            self.price_overrides = price_overrides
        if pricing_plan is not None:
            self.pricing_plan = pricing_plan
        if primary_owner is not None:
            self.primary_owner = primary_owner
        if run_executions is not None:
            self.run_executions = run_executions
        if run_specs is not None:
            self.run_specs = run_specs
        if stripe_billing_history is not None:
            self.stripe_billing_history = stripe_billing_history
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if unresolved_credits is not None:
            self.unresolved_credits = unresolved_credits
        if user_groups is not None:
            self.user_groups = user_groups
        if user_organization is not None:
            self.user_organization = user_organization
        if users_with_this_as_default_organization is not None:
            self.users_with_this_as_default_organization = users_with_this_as_default_organization
        if wallets is not None:
            self.wallets = wallets
        if withdraw_history_kernel_clusters is not None:
            self.withdraw_history_kernel_clusters = withdraw_history_kernel_clusters
        if withdraw_history_organizations is not None:
            self.withdraw_history_organizations = withdraw_history_organizations
        if workloads is not None:
            self.workloads = workloads
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def artifacts(self):
        """Gets the artifacts of this OrmOrganizationEdges.  # noqa: E501


        :return: The artifacts of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this OrmOrganizationEdges.


        :param artifacts: The artifacts of this OrmOrganizationEdges.  # noqa: E501
        :type artifacts: list[OrmArtifact]
        """

        self._artifacts = artifacts

    @property
    def cluster_quotas(self):
        """Gets the cluster_quotas of this OrmOrganizationEdges.  # noqa: E501


        :return: The cluster_quotas of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmClusterQuota]
        """
        return self._cluster_quotas

    @cluster_quotas.setter
    def cluster_quotas(self, cluster_quotas):
        """Sets the cluster_quotas of this OrmOrganizationEdges.


        :param cluster_quotas: The cluster_quotas of this OrmOrganizationEdges.  # noqa: E501
        :type cluster_quotas: list[OrmClusterQuota]
        """

        self._cluster_quotas = cluster_quotas

    @property
    def coupon_redemptions(self):
        """Gets the coupon_redemptions of this OrmOrganizationEdges.  # noqa: E501


        :return: The coupon_redemptions of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmCouponRedemption]
        """
        return self._coupon_redemptions

    @coupon_redemptions.setter
    def coupon_redemptions(self, coupon_redemptions):
        """Sets the coupon_redemptions of this OrmOrganizationEdges.


        :param coupon_redemptions: The coupon_redemptions of this OrmOrganizationEdges.  # noqa: E501
        :type coupon_redemptions: list[OrmCouponRedemption]
        """

        self._coupon_redemptions = coupon_redemptions

    @property
    def credit_earn_histories(self):
        """Gets the credit_earn_histories of this OrmOrganizationEdges.  # noqa: E501


        :return: The credit_earn_histories of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmCreditEarnHistory]
        """
        return self._credit_earn_histories

    @credit_earn_histories.setter
    def credit_earn_histories(self, credit_earn_histories):
        """Sets the credit_earn_histories of this OrmOrganizationEdges.


        :param credit_earn_histories: The credit_earn_histories of this OrmOrganizationEdges.  # noqa: E501
        :type credit_earn_histories: list[OrmCreditEarnHistory]
        """

        self._credit_earn_histories = credit_earn_histories

    @property
    def default_storage(self):
        """Gets the default_storage of this OrmOrganizationEdges.  # noqa: E501


        :return: The default_storage of this OrmOrganizationEdges.  # noqa: E501
        :rtype: OrmStorage
        """
        return self._default_storage

    @default_storage.setter
    def default_storage(self, default_storage):
        """Sets the default_storage of this OrmOrganizationEdges.


        :param default_storage: The default_storage of this OrmOrganizationEdges.  # noqa: E501
        :type default_storage: OrmStorage
        """

        self._default_storage = default_storage

    @property
    def default_volume(self):
        """Gets the default_volume of this OrmOrganizationEdges.  # noqa: E501


        :return: The default_volume of this OrmOrganizationEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._default_volume

    @default_volume.setter
    def default_volume(self, default_volume):
        """Sets the default_volume of this OrmOrganizationEdges.


        :param default_volume: The default_volume of this OrmOrganizationEdges.  # noqa: E501
        :type default_volume: OrmVolume
        """

        self._default_volume = default_volume

    @property
    def hub_model_tasks(self):
        """Gets the hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501


        :return: The hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmHubModelTask]
        """
        return self._hub_model_tasks

    @hub_model_tasks.setter
    def hub_model_tasks(self, hub_model_tasks):
        """Sets the hub_model_tasks of this OrmOrganizationEdges.


        :param hub_model_tasks: The hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501
        :type hub_model_tasks: list[OrmHubModelTask]
        """

        self._hub_model_tasks = hub_model_tasks

    @property
    def hub_tags(self):
        """Gets the hub_tags of this OrmOrganizationEdges.  # noqa: E501


        :return: The hub_tags of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmHubTag]
        """
        return self._hub_tags

    @hub_tags.setter
    def hub_tags(self, hub_tags):
        """Sets the hub_tags of this OrmOrganizationEdges.


        :param hub_tags: The hub_tags of this OrmOrganizationEdges.  # noqa: E501
        :type hub_tags: list[OrmHubTag]
        """

        self._hub_tags = hub_tags

    @property
    def kernel_clusters(self):
        """Gets the kernel_clusters of this OrmOrganizationEdges.  # noqa: E501


        :return: The kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmKernelCluster]
        """
        return self._kernel_clusters

    @kernel_clusters.setter
    def kernel_clusters(self, kernel_clusters):
        """Sets the kernel_clusters of this OrmOrganizationEdges.


        :param kernel_clusters: The kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :type kernel_clusters: list[OrmKernelCluster]
        """

        self._kernel_clusters = kernel_clusters

    @property
    def llm_api_keys(self):
        """Gets the llm_api_keys of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_api_keys of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMApiKey]
        """
        return self._llm_api_keys

    @llm_api_keys.setter
    def llm_api_keys(self, llm_api_keys):
        """Sets the llm_api_keys of this OrmOrganizationEdges.


        :param llm_api_keys: The llm_api_keys of this OrmOrganizationEdges.  # noqa: E501
        :type llm_api_keys: list[OrmLLMApiKey]
        """

        self._llm_api_keys = llm_api_keys

    @property
    def llm_documents(self):
        """Gets the llm_documents of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_documents of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMDocument]
        """
        return self._llm_documents

    @llm_documents.setter
    def llm_documents(self, llm_documents):
        """Sets the llm_documents of this OrmOrganizationEdges.


        :param llm_documents: The llm_documents of this OrmOrganizationEdges.  # noqa: E501
        :type llm_documents: list[OrmLLMDocument]
        """

        self._llm_documents = llm_documents

    @property
    def llm_knowledge(self):
        """Gets the llm_knowledge of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_knowledge of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMKnowledge]
        """
        return self._llm_knowledge

    @llm_knowledge.setter
    def llm_knowledge(self, llm_knowledge):
        """Sets the llm_knowledge of this OrmOrganizationEdges.


        :param llm_knowledge: The llm_knowledge of this OrmOrganizationEdges.  # noqa: E501
        :type llm_knowledge: list[OrmLLMKnowledge]
        """

        self._llm_knowledge = llm_knowledge

    @property
    def llm_model_connections(self):
        """Gets the llm_model_connections of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_model_connections of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMModelConnection]
        """
        return self._llm_model_connections

    @llm_model_connections.setter
    def llm_model_connections(self, llm_model_connections):
        """Sets the llm_model_connections of this OrmOrganizationEdges.


        :param llm_model_connections: The llm_model_connections of this OrmOrganizationEdges.  # noqa: E501
        :type llm_model_connections: list[OrmLLMModelConnection]
        """

        self._llm_model_connections = llm_model_connections

    @property
    def llm_user_groups(self):
        """Gets the llm_user_groups of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_user_groups of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMUserGroup]
        """
        return self._llm_user_groups

    @llm_user_groups.setter
    def llm_user_groups(self, llm_user_groups):
        """Sets the llm_user_groups of this OrmOrganizationEdges.


        :param llm_user_groups: The llm_user_groups of this OrmOrganizationEdges.  # noqa: E501
        :type llm_user_groups: list[OrmLLMUserGroup]
        """

        self._llm_user_groups = llm_user_groups

    @property
    def llm_vectordb_connections(self):
        """Gets the llm_vectordb_connections of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_vectordb_connections of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMVectorDBConnection]
        """
        return self._llm_vectordb_connections

    @llm_vectordb_connections.setter
    def llm_vectordb_connections(self, llm_vectordb_connections):
        """Sets the llm_vectordb_connections of this OrmOrganizationEdges.


        :param llm_vectordb_connections: The llm_vectordb_connections of this OrmOrganizationEdges.  # noqa: E501
        :type llm_vectordb_connections: list[OrmLLMVectorDBConnection]
        """

        self._llm_vectordb_connections = llm_vectordb_connections

    @property
    def llm_workflows(self):
        """Gets the llm_workflows of this OrmOrganizationEdges.  # noqa: E501


        :return: The llm_workflows of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmLLMWorkflow]
        """
        return self._llm_workflows

    @llm_workflows.setter
    def llm_workflows(self, llm_workflows):
        """Sets the llm_workflows of this OrmOrganizationEdges.


        :param llm_workflows: The llm_workflows of this OrmOrganizationEdges.  # noqa: E501
        :type llm_workflows: list[OrmLLMWorkflow]
        """

        self._llm_workflows = llm_workflows

    @property
    def model_services(self):
        """Gets the model_services of this OrmOrganizationEdges.  # noqa: E501


        :return: The model_services of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmModelService]
        """
        return self._model_services

    @model_services.setter
    def model_services(self, model_services):
        """Sets the model_services of this OrmOrganizationEdges.


        :param model_services: The model_services of this OrmOrganizationEdges.  # noqa: E501
        :type model_services: list[OrmModelService]
        """

        self._model_services = model_services

    @property
    def onboardings(self):
        """Gets the onboardings of this OrmOrganizationEdges.  # noqa: E501


        :return: The onboardings of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOnboarding]
        """
        return self._onboardings

    @onboardings.setter
    def onboardings(self, onboardings):
        """Sets the onboardings of this OrmOrganizationEdges.


        :param onboardings: The onboardings of this OrmOrganizationEdges.  # noqa: E501
        :type onboardings: list[OrmOnboarding]
        """

        self._onboardings = onboardings

    @property
    def organization_credential_provider(self):
        """Gets the organization_credential_provider of this OrmOrganizationEdges.  # noqa: E501


        :return: The organization_credential_provider of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOrganizationCredentialProvider]
        """
        return self._organization_credential_provider

    @organization_credential_provider.setter
    def organization_credential_provider(self, organization_credential_provider):
        """Sets the organization_credential_provider of this OrmOrganizationEdges.


        :param organization_credential_provider: The organization_credential_provider of this OrmOrganizationEdges.  # noqa: E501
        :type organization_credential_provider: list[OrmOrganizationCredentialProvider]
        """

        self._organization_credential_provider = organization_credential_provider

    @property
    def organization_credentials(self):
        """Gets the organization_credentials of this OrmOrganizationEdges.  # noqa: E501


        :return: The organization_credentials of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOrganizationCredentials]
        """
        return self._organization_credentials

    @organization_credentials.setter
    def organization_credentials(self, organization_credentials):
        """Sets the organization_credentials of this OrmOrganizationEdges.


        :param organization_credentials: The organization_credentials of this OrmOrganizationEdges.  # noqa: E501
        :type organization_credentials: list[OrmOrganizationCredentials]
        """

        self._organization_credentials = organization_credentials

    @property
    def organization_hub_model_tasks(self):
        """Gets the organization_hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501


        :return: The organization_hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOrganizationHubModelTask]
        """
        return self._organization_hub_model_tasks

    @organization_hub_model_tasks.setter
    def organization_hub_model_tasks(self, organization_hub_model_tasks):
        """Sets the organization_hub_model_tasks of this OrmOrganizationEdges.


        :param organization_hub_model_tasks: The organization_hub_model_tasks of this OrmOrganizationEdges.  # noqa: E501
        :type organization_hub_model_tasks: list[OrmOrganizationHubModelTask]
        """

        self._organization_hub_model_tasks = organization_hub_model_tasks

    @property
    def organization_kernel_clusters(self):
        """Gets the organization_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501


        :return: The organization_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOrganizationKernelCluster]
        """
        return self._organization_kernel_clusters

    @organization_kernel_clusters.setter
    def organization_kernel_clusters(self, organization_kernel_clusters):
        """Sets the organization_kernel_clusters of this OrmOrganizationEdges.


        :param organization_kernel_clusters: The organization_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :type organization_kernel_clusters: list[OrmOrganizationKernelCluster]
        """

        self._organization_kernel_clusters = organization_kernel_clusters

    @property
    def periodic_credit_events(self):
        """Gets the periodic_credit_events of this OrmOrganizationEdges.  # noqa: E501


        :return: The periodic_credit_events of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmPeriodicCreditEvent]
        """
        return self._periodic_credit_events

    @periodic_credit_events.setter
    def periodic_credit_events(self, periodic_credit_events):
        """Sets the periodic_credit_events of this OrmOrganizationEdges.


        :param periodic_credit_events: The periodic_credit_events of this OrmOrganizationEdges.  # noqa: E501
        :type periodic_credit_events: list[OrmPeriodicCreditEvent]
        """

        self._periodic_credit_events = periodic_credit_events

    @property
    def pipeline_step_types(self):
        """Gets the pipeline_step_types of this OrmOrganizationEdges.  # noqa: E501


        :return: The pipeline_step_types of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmPipelineStepType]
        """
        return self._pipeline_step_types

    @pipeline_step_types.setter
    def pipeline_step_types(self, pipeline_step_types):
        """Sets the pipeline_step_types of this OrmOrganizationEdges.


        :param pipeline_step_types: The pipeline_step_types of this OrmOrganizationEdges.  # noqa: E501
        :type pipeline_step_types: list[OrmPipelineStepType]
        """

        self._pipeline_step_types = pipeline_step_types

    @property
    def pipelines(self):
        """Gets the pipelines of this OrmOrganizationEdges.  # noqa: E501


        :return: The pipelines of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this OrmOrganizationEdges.


        :param pipelines: The pipelines of this OrmOrganizationEdges.  # noqa: E501
        :type pipelines: list[OrmPipeline]
        """

        self._pipelines = pipelines

    @property
    def price_overrides(self):
        """Gets the price_overrides of this OrmOrganizationEdges.  # noqa: E501


        :return: The price_overrides of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmPriceOverride]
        """
        return self._price_overrides

    @price_overrides.setter
    def price_overrides(self, price_overrides):
        """Sets the price_overrides of this OrmOrganizationEdges.


        :param price_overrides: The price_overrides of this OrmOrganizationEdges.  # noqa: E501
        :type price_overrides: list[OrmPriceOverride]
        """

        self._price_overrides = price_overrides

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this OrmOrganizationEdges.  # noqa: E501


        :return: The pricing_plan of this OrmOrganizationEdges.  # noqa: E501
        :rtype: OrmPricingPlan
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this OrmOrganizationEdges.


        :param pricing_plan: The pricing_plan of this OrmOrganizationEdges.  # noqa: E501
        :type pricing_plan: OrmPricingPlan
        """

        self._pricing_plan = pricing_plan

    @property
    def primary_owner(self):
        """Gets the primary_owner of this OrmOrganizationEdges.  # noqa: E501


        :return: The primary_owner of this OrmOrganizationEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._primary_owner

    @primary_owner.setter
    def primary_owner(self, primary_owner):
        """Sets the primary_owner of this OrmOrganizationEdges.


        :param primary_owner: The primary_owner of this OrmOrganizationEdges.  # noqa: E501
        :type primary_owner: OrmUser
        """

        self._primary_owner = primary_owner

    @property
    def run_executions(self):
        """Gets the run_executions of this OrmOrganizationEdges.  # noqa: E501


        :return: The run_executions of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmRunExecution]
        """
        return self._run_executions

    @run_executions.setter
    def run_executions(self, run_executions):
        """Sets the run_executions of this OrmOrganizationEdges.


        :param run_executions: The run_executions of this OrmOrganizationEdges.  # noqa: E501
        :type run_executions: list[OrmRunExecution]
        """

        self._run_executions = run_executions

    @property
    def run_specs(self):
        """Gets the run_specs of this OrmOrganizationEdges.  # noqa: E501


        :return: The run_specs of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmRunSpec]
        """
        return self._run_specs

    @run_specs.setter
    def run_specs(self, run_specs):
        """Sets the run_specs of this OrmOrganizationEdges.


        :param run_specs: The run_specs of this OrmOrganizationEdges.  # noqa: E501
        :type run_specs: list[OrmRunSpec]
        """

        self._run_specs = run_specs

    @property
    def stripe_billing_history(self):
        """Gets the stripe_billing_history of this OrmOrganizationEdges.  # noqa: E501


        :return: The stripe_billing_history of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmStripeBillingHistory]
        """
        return self._stripe_billing_history

    @stripe_billing_history.setter
    def stripe_billing_history(self, stripe_billing_history):
        """Sets the stripe_billing_history of this OrmOrganizationEdges.


        :param stripe_billing_history: The stripe_billing_history of this OrmOrganizationEdges.  # noqa: E501
        :type stripe_billing_history: list[OrmStripeBillingHistory]
        """

        self._stripe_billing_history = stripe_billing_history

    @property
    def subscriptions(self):
        """Gets the subscriptions of this OrmOrganizationEdges.  # noqa: E501


        :return: The subscriptions of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmOrganizationSubscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this OrmOrganizationEdges.


        :param subscriptions: The subscriptions of this OrmOrganizationEdges.  # noqa: E501
        :type subscriptions: list[OrmOrganizationSubscription]
        """

        self._subscriptions = subscriptions

    @property
    def unresolved_credits(self):
        """Gets the unresolved_credits of this OrmOrganizationEdges.  # noqa: E501


        :return: The unresolved_credits of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmUnresolvedCredits]
        """
        return self._unresolved_credits

    @unresolved_credits.setter
    def unresolved_credits(self, unresolved_credits):
        """Sets the unresolved_credits of this OrmOrganizationEdges.


        :param unresolved_credits: The unresolved_credits of this OrmOrganizationEdges.  # noqa: E501
        :type unresolved_credits: list[OrmUnresolvedCredits]
        """

        self._unresolved_credits = unresolved_credits

    @property
    def user_groups(self):
        """Gets the user_groups of this OrmOrganizationEdges.  # noqa: E501


        :return: The user_groups of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmUserGroup]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this OrmOrganizationEdges.


        :param user_groups: The user_groups of this OrmOrganizationEdges.  # noqa: E501
        :type user_groups: list[OrmUserGroup]
        """

        self._user_groups = user_groups

    @property
    def user_organization(self):
        """Gets the user_organization of this OrmOrganizationEdges.  # noqa: E501


        :return: The user_organization of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmUserOrganization]
        """
        return self._user_organization

    @user_organization.setter
    def user_organization(self, user_organization):
        """Sets the user_organization of this OrmOrganizationEdges.


        :param user_organization: The user_organization of this OrmOrganizationEdges.  # noqa: E501
        :type user_organization: list[OrmUserOrganization]
        """

        self._user_organization = user_organization

    @property
    def users_with_this_as_default_organization(self):
        """Gets the users_with_this_as_default_organization of this OrmOrganizationEdges.  # noqa: E501


        :return: The users_with_this_as_default_organization of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmUser]
        """
        return self._users_with_this_as_default_organization

    @users_with_this_as_default_organization.setter
    def users_with_this_as_default_organization(self, users_with_this_as_default_organization):
        """Sets the users_with_this_as_default_organization of this OrmOrganizationEdges.


        :param users_with_this_as_default_organization: The users_with_this_as_default_organization of this OrmOrganizationEdges.  # noqa: E501
        :type users_with_this_as_default_organization: list[OrmUser]
        """

        self._users_with_this_as_default_organization = users_with_this_as_default_organization

    @property
    def wallets(self):
        """Gets the wallets of this OrmOrganizationEdges.  # noqa: E501


        :return: The wallets of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmWallet]
        """
        return self._wallets

    @wallets.setter
    def wallets(self, wallets):
        """Sets the wallets of this OrmOrganizationEdges.


        :param wallets: The wallets of this OrmOrganizationEdges.  # noqa: E501
        :type wallets: list[OrmWallet]
        """

        self._wallets = wallets

    @property
    def withdraw_history_kernel_clusters(self):
        """Gets the withdraw_history_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501


        :return: The withdraw_history_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmWithdrawHistoryKernelCluster]
        """
        return self._withdraw_history_kernel_clusters

    @withdraw_history_kernel_clusters.setter
    def withdraw_history_kernel_clusters(self, withdraw_history_kernel_clusters):
        """Sets the withdraw_history_kernel_clusters of this OrmOrganizationEdges.


        :param withdraw_history_kernel_clusters: The withdraw_history_kernel_clusters of this OrmOrganizationEdges.  # noqa: E501
        :type withdraw_history_kernel_clusters: list[OrmWithdrawHistoryKernelCluster]
        """

        self._withdraw_history_kernel_clusters = withdraw_history_kernel_clusters

    @property
    def withdraw_history_organizations(self):
        """Gets the withdraw_history_organizations of this OrmOrganizationEdges.  # noqa: E501


        :return: The withdraw_history_organizations of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmWithdrawHistoryOrganization]
        """
        return self._withdraw_history_organizations

    @withdraw_history_organizations.setter
    def withdraw_history_organizations(self, withdraw_history_organizations):
        """Sets the withdraw_history_organizations of this OrmOrganizationEdges.


        :param withdraw_history_organizations: The withdraw_history_organizations of this OrmOrganizationEdges.  # noqa: E501
        :type withdraw_history_organizations: list[OrmWithdrawHistoryOrganization]
        """

        self._withdraw_history_organizations = withdraw_history_organizations

    @property
    def workloads(self):
        """Gets the workloads of this OrmOrganizationEdges.  # noqa: E501


        :return: The workloads of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmWorkload]
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this OrmOrganizationEdges.


        :param workloads: The workloads of this OrmOrganizationEdges.  # noqa: E501
        :type workloads: list[OrmWorkload]
        """

        self._workloads = workloads

    @property
    def workspaces(self):
        """Gets the workspaces of this OrmOrganizationEdges.  # noqa: E501


        :return: The workspaces of this OrmOrganizationEdges.  # noqa: E501
        :rtype: list[OrmWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this OrmOrganizationEdges.


        :param workspaces: The workspaces of this OrmOrganizationEdges.  # noqa: E501
        :type workspaces: list[OrmWorkspace]
        """

        self._workspaces = workspaces

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmOrganizationEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmOrganizationEdges):
            return True

        return self.to_dict() != other.to_dict()
