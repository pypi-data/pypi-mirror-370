# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseActiveModelServiceRolloutSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_step': 'int',
        'current_step_description': 'str',
        'expected_final_revisions': 'list[OrmExpectedRevisionStatus]',
        'is_rollback': 'bool',
        'message': 'str',
        'total_steps': 'int'
    }

    attribute_map = {
        'current_step': 'current_step',
        'current_step_description': 'current_step_description',
        'expected_final_revisions': 'expected_final_revisions',
        'is_rollback': 'is_rollback',
        'message': 'message',
        'total_steps': 'total_steps'
    }

    def __init__(self, current_step=None, current_step_description=None, expected_final_revisions=None, is_rollback=None, message=None, total_steps=None, local_vars_configuration=None):  # noqa: E501
        """ResponseActiveModelServiceRolloutSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_step = None
        self._current_step_description = None
        self._expected_final_revisions = None
        self._is_rollback = None
        self._message = None
        self._total_steps = None
        self.discriminator = None

        self.current_step = current_step
        self.current_step_description = current_step_description
        self.expected_final_revisions = expected_final_revisions
        self.is_rollback = is_rollback
        self.message = message
        self.total_steps = total_steps

    @property
    def current_step(self):
        """Gets the current_step of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The current_step of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: int
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step):
        """Sets the current_step of this ResponseActiveModelServiceRolloutSummary.


        :param current_step: The current_step of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type current_step: int
        """
        if self.local_vars_configuration.client_side_validation and current_step is None:  # noqa: E501
            raise ValueError("Invalid value for `current_step`, must not be `None`")  # noqa: E501

        self._current_step = current_step

    @property
    def current_step_description(self):
        """Gets the current_step_description of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The current_step_description of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: str
        """
        return self._current_step_description

    @current_step_description.setter
    def current_step_description(self, current_step_description):
        """Sets the current_step_description of this ResponseActiveModelServiceRolloutSummary.


        :param current_step_description: The current_step_description of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type current_step_description: str
        """
        if self.local_vars_configuration.client_side_validation and current_step_description is None:  # noqa: E501
            raise ValueError("Invalid value for `current_step_description`, must not be `None`")  # noqa: E501

        self._current_step_description = current_step_description

    @property
    def expected_final_revisions(self):
        """Gets the expected_final_revisions of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The expected_final_revisions of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: list[OrmExpectedRevisionStatus]
        """
        return self._expected_final_revisions

    @expected_final_revisions.setter
    def expected_final_revisions(self, expected_final_revisions):
        """Sets the expected_final_revisions of this ResponseActiveModelServiceRolloutSummary.


        :param expected_final_revisions: The expected_final_revisions of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type expected_final_revisions: list[OrmExpectedRevisionStatus]
        """
        if self.local_vars_configuration.client_side_validation and expected_final_revisions is None:  # noqa: E501
            raise ValueError("Invalid value for `expected_final_revisions`, must not be `None`")  # noqa: E501

        self._expected_final_revisions = expected_final_revisions

    @property
    def is_rollback(self):
        """Gets the is_rollback of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The is_rollback of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_rollback

    @is_rollback.setter
    def is_rollback(self, is_rollback):
        """Sets the is_rollback of this ResponseActiveModelServiceRolloutSummary.


        :param is_rollback: The is_rollback of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type is_rollback: bool
        """
        if self.local_vars_configuration.client_side_validation and is_rollback is None:  # noqa: E501
            raise ValueError("Invalid value for `is_rollback`, must not be `None`")  # noqa: E501

        self._is_rollback = is_rollback

    @property
    def message(self):
        """Gets the message of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The message of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseActiveModelServiceRolloutSummary.


        :param message: The message of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def total_steps(self):
        """Gets the total_steps of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501


        :return: The total_steps of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this ResponseActiveModelServiceRolloutSummary.


        :param total_steps: The total_steps of this ResponseActiveModelServiceRolloutSummary.  # noqa: E501
        :type total_steps: int
        """
        if self.local_vars_configuration.client_side_validation and total_steps is None:  # noqa: E501
            raise ValueError("Invalid value for `total_steps`, must not be `None`")  # noqa: E501

        self._total_steps = total_steps

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseActiveModelServiceRolloutSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseActiveModelServiceRolloutSummary):
            return True

        return self.to_dict() != other.to_dict()
