# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'default_organization_id': 'int',
        'display_name': 'str',
        'edges': 'OrmUserEdges',
        'email': 'str',
        'encrypted_git_ssh_key': 'str',
        'extra_info': 'dict[str, object]',
        'first_time_credit_given': 'bool',
        'git_ssh_key_name': 'str',
        'id': 'int',
        'immutable_slug': 'str',
        'is_email_verified': 'bool',
        'is_locked': 'bool',
        'is_pending': 'bool',
        'is_sso': 'bool',
        'last_login': 'datetime',
        'last_password_changed_dt': 'datetime',
        'marketing_consent_dt': 'datetime',
        'notification_config': 'dict[str, bool]',
        'status': 'str',
        'updated_dt': 'datetime',
        'username': 'str'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'default_organization_id': 'default_organization_id',
        'display_name': 'display_name',
        'edges': 'edges',
        'email': 'email',
        'encrypted_git_ssh_key': 'encrypted_git_ssh_key',
        'extra_info': 'extra_info',
        'first_time_credit_given': 'first_time_credit_given',
        'git_ssh_key_name': 'git_ssh_key_name',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_email_verified': 'is_email_verified',
        'is_locked': 'is_locked',
        'is_pending': 'is_pending',
        'is_sso': 'is_sso',
        'last_login': 'last_login',
        'last_password_changed_dt': 'last_password_changed_dt',
        'marketing_consent_dt': 'marketing_consent_dt',
        'notification_config': 'notification_config',
        'status': 'status',
        'updated_dt': 'updated_dt',
        'username': 'username'
    }

    def __init__(self, created_dt=None, default_organization_id=None, display_name=None, edges=None, email=None, encrypted_git_ssh_key=None, extra_info=None, first_time_credit_given=None, git_ssh_key_name=None, id=None, immutable_slug=None, is_email_verified=None, is_locked=None, is_pending=None, is_sso=None, last_login=None, last_password_changed_dt=None, marketing_consent_dt=None, notification_config=None, status=None, updated_dt=None, username=None, local_vars_configuration=None):  # noqa: E501
        """OrmUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._default_organization_id = None
        self._display_name = None
        self._edges = None
        self._email = None
        self._encrypted_git_ssh_key = None
        self._extra_info = None
        self._first_time_credit_given = None
        self._git_ssh_key_name = None
        self._id = None
        self._immutable_slug = None
        self._is_email_verified = None
        self._is_locked = None
        self._is_pending = None
        self._is_sso = None
        self._last_login = None
        self._last_password_changed_dt = None
        self._marketing_consent_dt = None
        self._notification_config = None
        self._status = None
        self._updated_dt = None
        self._username = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        self.default_organization_id = default_organization_id
        if display_name is not None:
            self.display_name = display_name
        if edges is not None:
            self.edges = edges
        if email is not None:
            self.email = email
        self.encrypted_git_ssh_key = encrypted_git_ssh_key
        if extra_info is not None:
            self.extra_info = extra_info
        if first_time_credit_given is not None:
            self.first_time_credit_given = first_time_credit_given
        self.git_ssh_key_name = git_ssh_key_name
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_email_verified is not None:
            self.is_email_verified = is_email_verified
        if is_locked is not None:
            self.is_locked = is_locked
        if is_pending is not None:
            self.is_pending = is_pending
        if is_sso is not None:
            self.is_sso = is_sso
        self.last_login = last_login
        self.last_password_changed_dt = last_password_changed_dt
        self.marketing_consent_dt = marketing_consent_dt
        if notification_config is not None:
            self.notification_config = notification_config
        if status is not None:
            self.status = status
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if username is not None:
            self.username = username

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmUser.  # noqa: E501


        :return: The created_dt of this OrmUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmUser.


        :param created_dt: The created_dt of this OrmUser.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def default_organization_id(self):
        """Gets the default_organization_id of this OrmUser.  # noqa: E501


        :return: The default_organization_id of this OrmUser.  # noqa: E501
        :rtype: int
        """
        return self._default_organization_id

    @default_organization_id.setter
    def default_organization_id(self, default_organization_id):
        """Sets the default_organization_id of this OrmUser.


        :param default_organization_id: The default_organization_id of this OrmUser.  # noqa: E501
        :type default_organization_id: int
        """

        self._default_organization_id = default_organization_id

    @property
    def display_name(self):
        """Gets the display_name of this OrmUser.  # noqa: E501


        :return: The display_name of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrmUser.


        :param display_name: The display_name of this OrmUser.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def edges(self):
        """Gets the edges of this OrmUser.  # noqa: E501


        :return: The edges of this OrmUser.  # noqa: E501
        :rtype: OrmUserEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmUser.


        :param edges: The edges of this OrmUser.  # noqa: E501
        :type edges: OrmUserEdges
        """

        self._edges = edges

    @property
    def email(self):
        """Gets the email of this OrmUser.  # noqa: E501


        :return: The email of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrmUser.


        :param email: The email of this OrmUser.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def encrypted_git_ssh_key(self):
        """Gets the encrypted_git_ssh_key of this OrmUser.  # noqa: E501


        :return: The encrypted_git_ssh_key of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_git_ssh_key

    @encrypted_git_ssh_key.setter
    def encrypted_git_ssh_key(self, encrypted_git_ssh_key):
        """Sets the encrypted_git_ssh_key of this OrmUser.


        :param encrypted_git_ssh_key: The encrypted_git_ssh_key of this OrmUser.  # noqa: E501
        :type encrypted_git_ssh_key: str
        """

        self._encrypted_git_ssh_key = encrypted_git_ssh_key

    @property
    def extra_info(self):
        """Gets the extra_info of this OrmUser.  # noqa: E501


        :return: The extra_info of this OrmUser.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this OrmUser.


        :param extra_info: The extra_info of this OrmUser.  # noqa: E501
        :type extra_info: dict[str, object]
        """

        self._extra_info = extra_info

    @property
    def first_time_credit_given(self):
        """Gets the first_time_credit_given of this OrmUser.  # noqa: E501


        :return: The first_time_credit_given of this OrmUser.  # noqa: E501
        :rtype: bool
        """
        return self._first_time_credit_given

    @first_time_credit_given.setter
    def first_time_credit_given(self, first_time_credit_given):
        """Sets the first_time_credit_given of this OrmUser.


        :param first_time_credit_given: The first_time_credit_given of this OrmUser.  # noqa: E501
        :type first_time_credit_given: bool
        """

        self._first_time_credit_given = first_time_credit_given

    @property
    def git_ssh_key_name(self):
        """Gets the git_ssh_key_name of this OrmUser.  # noqa: E501


        :return: The git_ssh_key_name of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._git_ssh_key_name

    @git_ssh_key_name.setter
    def git_ssh_key_name(self, git_ssh_key_name):
        """Sets the git_ssh_key_name of this OrmUser.


        :param git_ssh_key_name: The git_ssh_key_name of this OrmUser.  # noqa: E501
        :type git_ssh_key_name: str
        """

        self._git_ssh_key_name = git_ssh_key_name

    @property
    def id(self):
        """Gets the id of this OrmUser.  # noqa: E501


        :return: The id of this OrmUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmUser.


        :param id: The id of this OrmUser.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmUser.  # noqa: E501


        :return: The immutable_slug of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmUser.


        :param immutable_slug: The immutable_slug of this OrmUser.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_email_verified(self):
        """Gets the is_email_verified of this OrmUser.  # noqa: E501


        :return: The is_email_verified of this OrmUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_verified

    @is_email_verified.setter
    def is_email_verified(self, is_email_verified):
        """Sets the is_email_verified of this OrmUser.


        :param is_email_verified: The is_email_verified of this OrmUser.  # noqa: E501
        :type is_email_verified: bool
        """

        self._is_email_verified = is_email_verified

    @property
    def is_locked(self):
        """Gets the is_locked of this OrmUser.  # noqa: E501


        :return: The is_locked of this OrmUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this OrmUser.


        :param is_locked: The is_locked of this OrmUser.  # noqa: E501
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_pending(self):
        """Gets the is_pending of this OrmUser.  # noqa: E501


        :return: The is_pending of this OrmUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_pending

    @is_pending.setter
    def is_pending(self, is_pending):
        """Sets the is_pending of this OrmUser.


        :param is_pending: The is_pending of this OrmUser.  # noqa: E501
        :type is_pending: bool
        """

        self._is_pending = is_pending

    @property
    def is_sso(self):
        """Gets the is_sso of this OrmUser.  # noqa: E501


        :return: The is_sso of this OrmUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_sso

    @is_sso.setter
    def is_sso(self, is_sso):
        """Sets the is_sso of this OrmUser.


        :param is_sso: The is_sso of this OrmUser.  # noqa: E501
        :type is_sso: bool
        """

        self._is_sso = is_sso

    @property
    def last_login(self):
        """Gets the last_login of this OrmUser.  # noqa: E501


        :return: The last_login of this OrmUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this OrmUser.


        :param last_login: The last_login of this OrmUser.  # noqa: E501
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def last_password_changed_dt(self):
        """Gets the last_password_changed_dt of this OrmUser.  # noqa: E501


        :return: The last_password_changed_dt of this OrmUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_password_changed_dt

    @last_password_changed_dt.setter
    def last_password_changed_dt(self, last_password_changed_dt):
        """Sets the last_password_changed_dt of this OrmUser.


        :param last_password_changed_dt: The last_password_changed_dt of this OrmUser.  # noqa: E501
        :type last_password_changed_dt: datetime
        """

        self._last_password_changed_dt = last_password_changed_dt

    @property
    def marketing_consent_dt(self):
        """Gets the marketing_consent_dt of this OrmUser.  # noqa: E501


        :return: The marketing_consent_dt of this OrmUser.  # noqa: E501
        :rtype: datetime
        """
        return self._marketing_consent_dt

    @marketing_consent_dt.setter
    def marketing_consent_dt(self, marketing_consent_dt):
        """Sets the marketing_consent_dt of this OrmUser.


        :param marketing_consent_dt: The marketing_consent_dt of this OrmUser.  # noqa: E501
        :type marketing_consent_dt: datetime
        """

        self._marketing_consent_dt = marketing_consent_dt

    @property
    def notification_config(self):
        """Gets the notification_config of this OrmUser.  # noqa: E501


        :return: The notification_config of this OrmUser.  # noqa: E501
        :rtype: dict[str, bool]
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this OrmUser.


        :param notification_config: The notification_config of this OrmUser.  # noqa: E501
        :type notification_config: dict[str, bool]
        """

        self._notification_config = notification_config

    @property
    def status(self):
        """Gets the status of this OrmUser.  # noqa: E501


        :return: The status of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmUser.


        :param status: The status of this OrmUser.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmUser.  # noqa: E501


        :return: The updated_dt of this OrmUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmUser.


        :param updated_dt: The updated_dt of this OrmUser.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def username(self):
        """Gets the username of this OrmUser.  # noqa: E501


        :return: The username of this OrmUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrmUser.


        :param username: The username of this OrmUser.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmUser):
            return True

        return self.to_dict() != other.to_dict()
