# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmVolumeV2Edges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by_user': 'OrmUser',
        'created_by_workload': 'OrmWorkload',
        'overview': 'OrmVolumeV2Overview',
        'storage': 'OrmStorageV2',
        'tags': 'list[OrmTag]'
    }

    attribute_map = {
        'created_by_user': 'created_by_user',
        'created_by_workload': 'created_by_workload',
        'overview': 'overview',
        'storage': 'storage',
        'tags': 'tags'
    }

    def __init__(self, created_by_user=None, created_by_workload=None, overview=None, storage=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """OrmVolumeV2Edges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by_user = None
        self._created_by_workload = None
        self._overview = None
        self._storage = None
        self._tags = None
        self.discriminator = None

        if created_by_user is not None:
            self.created_by_user = created_by_user
        if created_by_workload is not None:
            self.created_by_workload = created_by_workload
        if overview is not None:
            self.overview = overview
        if storage is not None:
            self.storage = storage
        if tags is not None:
            self.tags = tags

    @property
    def created_by_user(self):
        """Gets the created_by_user of this OrmVolumeV2Edges.  # noqa: E501


        :return: The created_by_user of this OrmVolumeV2Edges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this OrmVolumeV2Edges.


        :param created_by_user: The created_by_user of this OrmVolumeV2Edges.  # noqa: E501
        :type created_by_user: OrmUser
        """

        self._created_by_user = created_by_user

    @property
    def created_by_workload(self):
        """Gets the created_by_workload of this OrmVolumeV2Edges.  # noqa: E501


        :return: The created_by_workload of this OrmVolumeV2Edges.  # noqa: E501
        :rtype: OrmWorkload
        """
        return self._created_by_workload

    @created_by_workload.setter
    def created_by_workload(self, created_by_workload):
        """Sets the created_by_workload of this OrmVolumeV2Edges.


        :param created_by_workload: The created_by_workload of this OrmVolumeV2Edges.  # noqa: E501
        :type created_by_workload: OrmWorkload
        """

        self._created_by_workload = created_by_workload

    @property
    def overview(self):
        """Gets the overview of this OrmVolumeV2Edges.  # noqa: E501


        :return: The overview of this OrmVolumeV2Edges.  # noqa: E501
        :rtype: OrmVolumeV2Overview
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this OrmVolumeV2Edges.


        :param overview: The overview of this OrmVolumeV2Edges.  # noqa: E501
        :type overview: OrmVolumeV2Overview
        """

        self._overview = overview

    @property
    def storage(self):
        """Gets the storage of this OrmVolumeV2Edges.  # noqa: E501


        :return: The storage of this OrmVolumeV2Edges.  # noqa: E501
        :rtype: OrmStorageV2
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this OrmVolumeV2Edges.


        :param storage: The storage of this OrmVolumeV2Edges.  # noqa: E501
        :type storage: OrmStorageV2
        """

        self._storage = storage

    @property
    def tags(self):
        """Gets the tags of this OrmVolumeV2Edges.  # noqa: E501


        :return: The tags of this OrmVolumeV2Edges.  # noqa: E501
        :rtype: list[OrmTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrmVolumeV2Edges.


        :param tags: The tags of this OrmVolumeV2Edges.  # noqa: E501
        :type tags: list[OrmTag]
        """

        self._tags = tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmVolumeV2Edges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmVolumeV2Edges):
            return True

        return self.to_dict() != other.to_dict()
