# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class DashboardSectionUpdateAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clear_x_axis_max': 'bool',
        'clear_x_axis_min': 'bool',
        'column_count': 'int',
        'is_collapsed': 'bool',
        'name': 'str',
        'order_delta': 'int',
        'smoothing': 'float',
        'x_axis': 'str',
        'x_axis_max': 'float',
        'x_axis_min': 'float'
    }

    attribute_map = {
        'clear_x_axis_max': 'clear_x_axis_max',
        'clear_x_axis_min': 'clear_x_axis_min',
        'column_count': 'column_count',
        'is_collapsed': 'is_collapsed',
        'name': 'name',
        'order_delta': 'order_delta',
        'smoothing': 'smoothing',
        'x_axis': 'x_axis',
        'x_axis_max': 'x_axis_max',
        'x_axis_min': 'x_axis_min'
    }

    def __init__(self, clear_x_axis_max=None, clear_x_axis_min=None, column_count=None, is_collapsed=None, name=None, order_delta=None, smoothing=None, x_axis=None, x_axis_max=None, x_axis_min=None, local_vars_configuration=None):  # noqa: E501
        """DashboardSectionUpdateAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._clear_x_axis_max = None
        self._clear_x_axis_min = None
        self._column_count = None
        self._is_collapsed = None
        self._name = None
        self._order_delta = None
        self._smoothing = None
        self._x_axis = None
        self._x_axis_max = None
        self._x_axis_min = None
        self.discriminator = None

        if clear_x_axis_max is not None:
            self.clear_x_axis_max = clear_x_axis_max
        if clear_x_axis_min is not None:
            self.clear_x_axis_min = clear_x_axis_min
        self.column_count = column_count
        self.is_collapsed = is_collapsed
        self.name = name
        if order_delta is not None:
            self.order_delta = order_delta
        self.smoothing = smoothing
        self.x_axis = x_axis
        self.x_axis_max = x_axis_max
        self.x_axis_min = x_axis_min

    @property
    def clear_x_axis_max(self):
        """Gets the clear_x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The clear_x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: bool
        """
        return self._clear_x_axis_max

    @clear_x_axis_max.setter
    def clear_x_axis_max(self, clear_x_axis_max):
        """Sets the clear_x_axis_max of this DashboardSectionUpdateAPIInput.


        :param clear_x_axis_max: The clear_x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type clear_x_axis_max: bool
        """

        self._clear_x_axis_max = clear_x_axis_max

    @property
    def clear_x_axis_min(self):
        """Gets the clear_x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The clear_x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: bool
        """
        return self._clear_x_axis_min

    @clear_x_axis_min.setter
    def clear_x_axis_min(self, clear_x_axis_min):
        """Sets the clear_x_axis_min of this DashboardSectionUpdateAPIInput.


        :param clear_x_axis_min: The clear_x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type clear_x_axis_min: bool
        """

        self._clear_x_axis_min = clear_x_axis_min

    @property
    def column_count(self):
        """Gets the column_count of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The column_count of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._column_count

    @column_count.setter
    def column_count(self, column_count):
        """Sets the column_count of this DashboardSectionUpdateAPIInput.


        :param column_count: The column_count of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type column_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                column_count is not None and column_count > 3):  # noqa: E501
            raise ValueError("Invalid value for `column_count`, must be a value less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                column_count is not None and column_count < 1):  # noqa: E501
            raise ValueError("Invalid value for `column_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._column_count = column_count

    @property
    def is_collapsed(self):
        """Gets the is_collapsed of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The is_collapsed of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_collapsed

    @is_collapsed.setter
    def is_collapsed(self, is_collapsed):
        """Sets the is_collapsed of this DashboardSectionUpdateAPIInput.


        :param is_collapsed: The is_collapsed of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type is_collapsed: bool
        """

        self._is_collapsed = is_collapsed

    @property
    def name(self):
        """Gets the name of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The name of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardSectionUpdateAPIInput.


        :param name: The name of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def order_delta(self):
        """Gets the order_delta of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The order_delta of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._order_delta

    @order_delta.setter
    def order_delta(self, order_delta):
        """Sets the order_delta of this DashboardSectionUpdateAPIInput.


        :param order_delta: The order_delta of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type order_delta: int
        """

        self._order_delta = order_delta

    @property
    def smoothing(self):
        """Gets the smoothing of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The smoothing of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: float
        """
        return self._smoothing

    @smoothing.setter
    def smoothing(self, smoothing):
        """Sets the smoothing of this DashboardSectionUpdateAPIInput.


        :param smoothing: The smoothing of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type smoothing: float
        """

        self._smoothing = smoothing

    @property
    def x_axis(self):
        """Gets the x_axis of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The x_axis of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """Sets the x_axis of this DashboardSectionUpdateAPIInput.


        :param x_axis: The x_axis of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type x_axis: str
        """

        self._x_axis = x_axis

    @property
    def x_axis_max(self):
        """Gets the x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: float
        """
        return self._x_axis_max

    @x_axis_max.setter
    def x_axis_max(self, x_axis_max):
        """Sets the x_axis_max of this DashboardSectionUpdateAPIInput.


        :param x_axis_max: The x_axis_max of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type x_axis_max: float
        """

        self._x_axis_max = x_axis_max

    @property
    def x_axis_min(self):
        """Gets the x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501


        :return: The x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :rtype: float
        """
        return self._x_axis_min

    @x_axis_min.setter
    def x_axis_min(self, x_axis_min):
        """Sets the x_axis_min of this DashboardSectionUpdateAPIInput.


        :param x_axis_min: The x_axis_min of this DashboardSectionUpdateAPIInput.  # noqa: E501
        :type x_axis_min: float
        """

        self._x_axis_min = x_axis_min

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardSectionUpdateAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardSectionUpdateAPIInput):
            return True

        return self.to_dict() != other.to_dict()
