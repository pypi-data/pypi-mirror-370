# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'id': 'int',
        'is_read_only': 'bool',
        'on_premise_volume_config': 'OrmOnPremiseVolumeConfig',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'id': 'id',
        'is_read_only': 'is_read_only',
        'on_premise_volume_config': 'on_premise_volume_config',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, id=None, is_read_only=None, on_premise_volume_config=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._id = None
        self._is_read_only = None
        self._on_premise_volume_config = None
        self._updated_dt = None
        self.discriminator = None

        self.created_dt = created_dt
        self.id = id
        self.is_read_only = is_read_only
        if on_premise_volume_config is not None:
            self.on_premise_volume_config = on_premise_volume_config
        self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseVolume.  # noqa: E501


        :return: The created_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseVolume.


        :param created_dt: The created_dt of this ResponseVolume.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def id(self):
        """Gets the id of this ResponseVolume.  # noqa: E501


        :return: The id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseVolume.


        :param id: The id of this ResponseVolume.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ResponseVolume.  # noqa: E501


        :return: The is_read_only of this ResponseVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ResponseVolume.


        :param is_read_only: The is_read_only of this ResponseVolume.  # noqa: E501
        :type is_read_only: bool
        """
        if self.local_vars_configuration.client_side_validation and is_read_only is None:  # noqa: E501
            raise ValueError("Invalid value for `is_read_only`, must not be `None`")  # noqa: E501

        self._is_read_only = is_read_only

    @property
    def on_premise_volume_config(self):
        """Gets the on_premise_volume_config of this ResponseVolume.  # noqa: E501


        :return: The on_premise_volume_config of this ResponseVolume.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfig
        """
        return self._on_premise_volume_config

    @on_premise_volume_config.setter
    def on_premise_volume_config(self, on_premise_volume_config):
        """Sets the on_premise_volume_config of this ResponseVolume.


        :param on_premise_volume_config: The on_premise_volume_config of this ResponseVolume.  # noqa: E501
        :type on_premise_volume_config: OrmOnPremiseVolumeConfig
        """

        self._on_premise_volume_config = on_premise_volume_config

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseVolume.  # noqa: E501


        :return: The updated_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseVolume.


        :param updated_dt: The updated_dt of this ResponseVolume.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolume):
            return True

        return self.to_dict() != other.to_dict()
