# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrganizationOrganizationBillingConfigReadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_topup_amount': 'float',
        'auto_topup_enabled': 'bool',
        'auto_topup_threshold': 'float',
        'cancel_at_period_end': 'bool',
        'card_brand': 'str',
        'card_expiry': 'str',
        'card_last_digits': 'str',
        'card_registered': 'bool',
        'credit_balance': 'float',
        'current_plan': 'str',
        'next_renewal_date': 'str',
        'show_add_payment_method_button': 'bool',
        'show_renewal_date': 'bool'
    }

    attribute_map = {
        'auto_topup_amount': 'auto_topup_amount',
        'auto_topup_enabled': 'auto_topup_enabled',
        'auto_topup_threshold': 'auto_topup_threshold',
        'cancel_at_period_end': 'cancel_at_period_end',
        'card_brand': 'card_brand',
        'card_expiry': 'card_expiry',
        'card_last_digits': 'card_last_digits',
        'card_registered': 'card_registered',
        'credit_balance': 'credit_balance',
        'current_plan': 'current_plan',
        'next_renewal_date': 'next_renewal_date',
        'show_add_payment_method_button': 'show_add_payment_method_button',
        'show_renewal_date': 'show_renewal_date'
    }

    def __init__(self, auto_topup_amount=None, auto_topup_enabled=None, auto_topup_threshold=None, cancel_at_period_end=None, card_brand=None, card_expiry=None, card_last_digits=None, card_registered=None, credit_balance=None, current_plan=None, next_renewal_date=None, show_add_payment_method_button=None, show_renewal_date=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationOrganizationBillingConfigReadResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._auto_topup_amount = None
        self._auto_topup_enabled = None
        self._auto_topup_threshold = None
        self._cancel_at_period_end = None
        self._card_brand = None
        self._card_expiry = None
        self._card_last_digits = None
        self._card_registered = None
        self._credit_balance = None
        self._current_plan = None
        self._next_renewal_date = None
        self._show_add_payment_method_button = None
        self._show_renewal_date = None
        self.discriminator = None

        if auto_topup_amount is not None:
            self.auto_topup_amount = auto_topup_amount
        self.auto_topup_enabled = auto_topup_enabled
        if auto_topup_threshold is not None:
            self.auto_topup_threshold = auto_topup_threshold
        self.cancel_at_period_end = cancel_at_period_end
        if card_brand is not None:
            self.card_brand = card_brand
        if card_expiry is not None:
            self.card_expiry = card_expiry
        if card_last_digits is not None:
            self.card_last_digits = card_last_digits
        self.card_registered = card_registered
        self.credit_balance = credit_balance
        self.current_plan = current_plan
        if next_renewal_date is not None:
            self.next_renewal_date = next_renewal_date
        self.show_add_payment_method_button = show_add_payment_method_button
        self.show_renewal_date = show_renewal_date

    @property
    def auto_topup_amount(self):
        """Gets the auto_topup_amount of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The auto_topup_amount of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._auto_topup_amount

    @auto_topup_amount.setter
    def auto_topup_amount(self, auto_topup_amount):
        """Sets the auto_topup_amount of this OrganizationOrganizationBillingConfigReadResponse.


        :param auto_topup_amount: The auto_topup_amount of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type auto_topup_amount: float
        """

        self._auto_topup_amount = auto_topup_amount

    @property
    def auto_topup_enabled(self):
        """Gets the auto_topup_enabled of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The auto_topup_enabled of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._auto_topup_enabled

    @auto_topup_enabled.setter
    def auto_topup_enabled(self, auto_topup_enabled):
        """Sets the auto_topup_enabled of this OrganizationOrganizationBillingConfigReadResponse.


        :param auto_topup_enabled: The auto_topup_enabled of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type auto_topup_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and auto_topup_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `auto_topup_enabled`, must not be `None`")  # noqa: E501

        self._auto_topup_enabled = auto_topup_enabled

    @property
    def auto_topup_threshold(self):
        """Gets the auto_topup_threshold of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The auto_topup_threshold of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._auto_topup_threshold

    @auto_topup_threshold.setter
    def auto_topup_threshold(self, auto_topup_threshold):
        """Sets the auto_topup_threshold of this OrganizationOrganizationBillingConfigReadResponse.


        :param auto_topup_threshold: The auto_topup_threshold of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type auto_topup_threshold: float
        """

        self._auto_topup_threshold = auto_topup_threshold

    @property
    def cancel_at_period_end(self):
        """Gets the cancel_at_period_end of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The cancel_at_period_end of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_at_period_end

    @cancel_at_period_end.setter
    def cancel_at_period_end(self, cancel_at_period_end):
        """Sets the cancel_at_period_end of this OrganizationOrganizationBillingConfigReadResponse.


        :param cancel_at_period_end: The cancel_at_period_end of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type cancel_at_period_end: bool
        """
        if self.local_vars_configuration.client_side_validation and cancel_at_period_end is None:  # noqa: E501
            raise ValueError("Invalid value for `cancel_at_period_end`, must not be `None`")  # noqa: E501

        self._cancel_at_period_end = cancel_at_period_end

    @property
    def card_brand(self):
        """Gets the card_brand of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The card_brand of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this OrganizationOrganizationBillingConfigReadResponse.


        :param card_brand: The card_brand of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type card_brand: str
        """

        self._card_brand = card_brand

    @property
    def card_expiry(self):
        """Gets the card_expiry of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The card_expiry of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_expiry

    @card_expiry.setter
    def card_expiry(self, card_expiry):
        """Sets the card_expiry of this OrganizationOrganizationBillingConfigReadResponse.


        :param card_expiry: The card_expiry of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type card_expiry: str
        """

        self._card_expiry = card_expiry

    @property
    def card_last_digits(self):
        """Gets the card_last_digits of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The card_last_digits of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_last_digits

    @card_last_digits.setter
    def card_last_digits(self, card_last_digits):
        """Sets the card_last_digits of this OrganizationOrganizationBillingConfigReadResponse.


        :param card_last_digits: The card_last_digits of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type card_last_digits: str
        """

        self._card_last_digits = card_last_digits

    @property
    def card_registered(self):
        """Gets the card_registered of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The card_registered of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._card_registered

    @card_registered.setter
    def card_registered(self, card_registered):
        """Sets the card_registered of this OrganizationOrganizationBillingConfigReadResponse.


        :param card_registered: The card_registered of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type card_registered: bool
        """
        if self.local_vars_configuration.client_side_validation and card_registered is None:  # noqa: E501
            raise ValueError("Invalid value for `card_registered`, must not be `None`")  # noqa: E501

        self._card_registered = card_registered

    @property
    def credit_balance(self):
        """Gets the credit_balance of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The credit_balance of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: float
        """
        return self._credit_balance

    @credit_balance.setter
    def credit_balance(self, credit_balance):
        """Sets the credit_balance of this OrganizationOrganizationBillingConfigReadResponse.


        :param credit_balance: The credit_balance of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type credit_balance: float
        """
        if self.local_vars_configuration.client_side_validation and credit_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `credit_balance`, must not be `None`")  # noqa: E501

        self._credit_balance = credit_balance

    @property
    def current_plan(self):
        """Gets the current_plan of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The current_plan of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_plan

    @current_plan.setter
    def current_plan(self, current_plan):
        """Sets the current_plan of this OrganizationOrganizationBillingConfigReadResponse.


        :param current_plan: The current_plan of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type current_plan: str
        """
        if self.local_vars_configuration.client_side_validation and current_plan is None:  # noqa: E501
            raise ValueError("Invalid value for `current_plan`, must not be `None`")  # noqa: E501

        self._current_plan = current_plan

    @property
    def next_renewal_date(self):
        """Gets the next_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The next_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_renewal_date

    @next_renewal_date.setter
    def next_renewal_date(self, next_renewal_date):
        """Sets the next_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.


        :param next_renewal_date: The next_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type next_renewal_date: str
        """

        self._next_renewal_date = next_renewal_date

    @property
    def show_add_payment_method_button(self):
        """Gets the show_add_payment_method_button of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The show_add_payment_method_button of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_add_payment_method_button

    @show_add_payment_method_button.setter
    def show_add_payment_method_button(self, show_add_payment_method_button):
        """Sets the show_add_payment_method_button of this OrganizationOrganizationBillingConfigReadResponse.


        :param show_add_payment_method_button: The show_add_payment_method_button of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type show_add_payment_method_button: bool
        """
        if self.local_vars_configuration.client_side_validation and show_add_payment_method_button is None:  # noqa: E501
            raise ValueError("Invalid value for `show_add_payment_method_button`, must not be `None`")  # noqa: E501

        self._show_add_payment_method_button = show_add_payment_method_button

    @property
    def show_renewal_date(self):
        """Gets the show_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501


        :return: The show_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_renewal_date

    @show_renewal_date.setter
    def show_renewal_date(self, show_renewal_date):
        """Sets the show_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.


        :param show_renewal_date: The show_renewal_date of this OrganizationOrganizationBillingConfigReadResponse.  # noqa: E501
        :type show_renewal_date: bool
        """
        if self.local_vars_configuration.client_side_validation and show_renewal_date is None:  # noqa: E501
            raise ValueError("Invalid value for `show_renewal_date`, must not be `None`")  # noqa: E501

        self._show_renewal_date = show_renewal_date

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationOrganizationBillingConfigReadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationOrganizationBillingConfigReadResponse):
            return True

        return self.to_dict() != other.to_dict()
