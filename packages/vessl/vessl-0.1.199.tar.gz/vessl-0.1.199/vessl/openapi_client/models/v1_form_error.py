# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1FormError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'decode_errors': 'list[V1FormSingleError]',
        'not_injected_errors': 'list[V1NotInjectedError]',
        'validation_errors': 'list[V1FormSingleError]',
        'warnings': 'list[V1FormSingleError]'
    }

    attribute_map = {
        'decode_errors': 'DecodeErrors',
        'not_injected_errors': 'NotInjectedErrors',
        'validation_errors': 'ValidationErrors',
        'warnings': 'Warnings'
    }

    def __init__(self, decode_errors=None, not_injected_errors=None, validation_errors=None, warnings=None, local_vars_configuration=None):  # noqa: E501
        """V1FormError - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._decode_errors = None
        self._not_injected_errors = None
        self._validation_errors = None
        self._warnings = None
        self.discriminator = None

        if decode_errors is not None:
            self.decode_errors = decode_errors
        if not_injected_errors is not None:
            self.not_injected_errors = not_injected_errors
        if validation_errors is not None:
            self.validation_errors = validation_errors
        if warnings is not None:
            self.warnings = warnings

    @property
    def decode_errors(self):
        """Gets the decode_errors of this V1FormError.  # noqa: E501


        :return: The decode_errors of this V1FormError.  # noqa: E501
        :rtype: list[V1FormSingleError]
        """
        return self._decode_errors

    @decode_errors.setter
    def decode_errors(self, decode_errors):
        """Sets the decode_errors of this V1FormError.


        :param decode_errors: The decode_errors of this V1FormError.  # noqa: E501
        :type decode_errors: list[V1FormSingleError]
        """

        self._decode_errors = decode_errors

    @property
    def not_injected_errors(self):
        """Gets the not_injected_errors of this V1FormError.  # noqa: E501


        :return: The not_injected_errors of this V1FormError.  # noqa: E501
        :rtype: list[V1NotInjectedError]
        """
        return self._not_injected_errors

    @not_injected_errors.setter
    def not_injected_errors(self, not_injected_errors):
        """Sets the not_injected_errors of this V1FormError.


        :param not_injected_errors: The not_injected_errors of this V1FormError.  # noqa: E501
        :type not_injected_errors: list[V1NotInjectedError]
        """

        self._not_injected_errors = not_injected_errors

    @property
    def validation_errors(self):
        """Gets the validation_errors of this V1FormError.  # noqa: E501


        :return: The validation_errors of this V1FormError.  # noqa: E501
        :rtype: list[V1FormSingleError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this V1FormError.


        :param validation_errors: The validation_errors of this V1FormError.  # noqa: E501
        :type validation_errors: list[V1FormSingleError]
        """

        self._validation_errors = validation_errors

    @property
    def warnings(self):
        """Gets the warnings of this V1FormError.  # noqa: E501


        :return: The warnings of this V1FormError.  # noqa: E501
        :rtype: list[V1FormSingleError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this V1FormError.


        :param warnings: The warnings of this V1FormError.  # noqa: E501
        :type warnings: list[V1FormSingleError]
        """

        self._warnings = warnings

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FormError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1FormError):
            return True

        return self.to_dict() != other.to_dict()
