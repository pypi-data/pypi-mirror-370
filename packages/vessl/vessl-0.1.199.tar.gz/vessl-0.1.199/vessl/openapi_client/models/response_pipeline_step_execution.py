# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponsePipelineStepExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'context': 'V1Context',
        'created_dt': 'datetime',
        'description': 'str',
        'end_dt': 'datetime',
        'exposed_services': 'list[ResponseExposedService]',
        'external_service_result': 'ResponsePipelineStepExternalServiceResult',
        'fail_result': 'object',
        'id': 'int',
        'if_result': 'ResponsePipelineStepIfResult',
        'input_result': 'ResponsePipelineStepManualInputResult',
        'judgment_result': 'ResponsePipelineStepManualJudgmentResult',
        'logs': 'list[LogmanagerWorkloadLog]',
        'notification_result': 'ResponsePipelineStepNotificationResult',
        'run_result': 'ResponsePipelineStepRunResult',
        'status': 'str',
        'step_spec_id': 'int',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'context': 'context',
        'created_dt': 'created_dt',
        'description': 'description',
        'end_dt': 'end_dt',
        'exposed_services': 'exposed_services',
        'external_service_result': 'external_service_result',
        'fail_result': 'fail_result',
        'id': 'id',
        'if_result': 'if_result',
        'input_result': 'input_result',
        'judgment_result': 'judgment_result',
        'logs': 'logs',
        'notification_result': 'notification_result',
        'run_result': 'run_result',
        'status': 'status',
        'step_spec_id': 'step_spec_id',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, context=None, created_dt=None, description=None, end_dt=None, exposed_services=None, external_service_result=None, fail_result=None, id=None, if_result=None, input_result=None, judgment_result=None, logs=None, notification_result=None, run_result=None, status=None, step_spec_id=None, title=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ResponsePipelineStepExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._context = None
        self._created_dt = None
        self._description = None
        self._end_dt = None
        self._exposed_services = None
        self._external_service_result = None
        self._fail_result = None
        self._id = None
        self._if_result = None
        self._input_result = None
        self._judgment_result = None
        self._logs = None
        self._notification_result = None
        self._run_result = None
        self._status = None
        self._step_spec_id = None
        self._title = None
        self._type = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if created_dt is not None:
            self.created_dt = created_dt
        if description is not None:
            self.description = description
        self.end_dt = end_dt
        if exposed_services is not None:
            self.exposed_services = exposed_services
        if external_service_result is not None:
            self.external_service_result = external_service_result
        if fail_result is not None:
            self.fail_result = fail_result
        self.id = id
        if if_result is not None:
            self.if_result = if_result
        if input_result is not None:
            self.input_result = input_result
        if judgment_result is not None:
            self.judgment_result = judgment_result
        self.logs = logs
        if notification_result is not None:
            self.notification_result = notification_result
        if run_result is not None:
            self.run_result = run_result
        if status is not None:
            self.status = status
        self.step_spec_id = step_spec_id
        self.title = title
        self.type = type

    @property
    def context(self):
        """Gets the context of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The context of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: V1Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ResponsePipelineStepExecution.


        :param context: The context of this ResponsePipelineStepExecution.  # noqa: E501
        :type context: V1Context
        """

        self._context = context

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The created_dt of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponsePipelineStepExecution.


        :param created_dt: The created_dt of this ResponsePipelineStepExecution.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The description of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResponsePipelineStepExecution.


        :param description: The description of this ResponsePipelineStepExecution.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def end_dt(self):
        """Gets the end_dt of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The end_dt of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_dt

    @end_dt.setter
    def end_dt(self, end_dt):
        """Sets the end_dt of this ResponsePipelineStepExecution.


        :param end_dt: The end_dt of this ResponsePipelineStepExecution.  # noqa: E501
        :type end_dt: datetime
        """

        self._end_dt = end_dt

    @property
    def exposed_services(self):
        """Gets the exposed_services of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The exposed_services of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: list[ResponseExposedService]
        """
        return self._exposed_services

    @exposed_services.setter
    def exposed_services(self, exposed_services):
        """Sets the exposed_services of this ResponsePipelineStepExecution.


        :param exposed_services: The exposed_services of this ResponsePipelineStepExecution.  # noqa: E501
        :type exposed_services: list[ResponseExposedService]
        """

        self._exposed_services = exposed_services

    @property
    def external_service_result(self):
        """Gets the external_service_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The external_service_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepExternalServiceResult
        """
        return self._external_service_result

    @external_service_result.setter
    def external_service_result(self, external_service_result):
        """Sets the external_service_result of this ResponsePipelineStepExecution.


        :param external_service_result: The external_service_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type external_service_result: ResponsePipelineStepExternalServiceResult
        """

        self._external_service_result = external_service_result

    @property
    def fail_result(self):
        """Gets the fail_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The fail_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: object
        """
        return self._fail_result

    @fail_result.setter
    def fail_result(self, fail_result):
        """Sets the fail_result of this ResponsePipelineStepExecution.


        :param fail_result: The fail_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type fail_result: object
        """

        self._fail_result = fail_result

    @property
    def id(self):
        """Gets the id of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The id of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponsePipelineStepExecution.


        :param id: The id of this ResponsePipelineStepExecution.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def if_result(self):
        """Gets the if_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The if_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepIfResult
        """
        return self._if_result

    @if_result.setter
    def if_result(self, if_result):
        """Sets the if_result of this ResponsePipelineStepExecution.


        :param if_result: The if_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type if_result: ResponsePipelineStepIfResult
        """

        self._if_result = if_result

    @property
    def input_result(self):
        """Gets the input_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The input_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepManualInputResult
        """
        return self._input_result

    @input_result.setter
    def input_result(self, input_result):
        """Sets the input_result of this ResponsePipelineStepExecution.


        :param input_result: The input_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type input_result: ResponsePipelineStepManualInputResult
        """

        self._input_result = input_result

    @property
    def judgment_result(self):
        """Gets the judgment_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The judgment_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepManualJudgmentResult
        """
        return self._judgment_result

    @judgment_result.setter
    def judgment_result(self, judgment_result):
        """Sets the judgment_result of this ResponsePipelineStepExecution.


        :param judgment_result: The judgment_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type judgment_result: ResponsePipelineStepManualJudgmentResult
        """

        self._judgment_result = judgment_result

    @property
    def logs(self):
        """Gets the logs of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The logs of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: list[LogmanagerWorkloadLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ResponsePipelineStepExecution.


        :param logs: The logs of this ResponsePipelineStepExecution.  # noqa: E501
        :type logs: list[LogmanagerWorkloadLog]
        """
        if self.local_vars_configuration.client_side_validation and logs is None:  # noqa: E501
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def notification_result(self):
        """Gets the notification_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The notification_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepNotificationResult
        """
        return self._notification_result

    @notification_result.setter
    def notification_result(self, notification_result):
        """Sets the notification_result of this ResponsePipelineStepExecution.


        :param notification_result: The notification_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type notification_result: ResponsePipelineStepNotificationResult
        """

        self._notification_result = notification_result

    @property
    def run_result(self):
        """Gets the run_result of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The run_result of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: ResponsePipelineStepRunResult
        """
        return self._run_result

    @run_result.setter
    def run_result(self, run_result):
        """Sets the run_result of this ResponsePipelineStepExecution.


        :param run_result: The run_result of this ResponsePipelineStepExecution.  # noqa: E501
        :type run_result: ResponsePipelineStepRunResult
        """

        self._run_result = run_result

    @property
    def status(self):
        """Gets the status of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The status of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponsePipelineStepExecution.


        :param status: The status of this ResponsePipelineStepExecution.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def step_spec_id(self):
        """Gets the step_spec_id of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The step_spec_id of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: int
        """
        return self._step_spec_id

    @step_spec_id.setter
    def step_spec_id(self, step_spec_id):
        """Sets the step_spec_id of this ResponsePipelineStepExecution.


        :param step_spec_id: The step_spec_id of this ResponsePipelineStepExecution.  # noqa: E501
        :type step_spec_id: int
        """
        if self.local_vars_configuration.client_side_validation and step_spec_id is None:  # noqa: E501
            raise ValueError("Invalid value for `step_spec_id`, must not be `None`")  # noqa: E501

        self._step_spec_id = step_spec_id

    @property
    def title(self):
        """Gets the title of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The title of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResponsePipelineStepExecution.


        :param title: The title of this ResponsePipelineStepExecution.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this ResponsePipelineStepExecution.  # noqa: E501


        :return: The type of this ResponsePipelineStepExecution.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponsePipelineStepExecution.


        :param type: The type of this ResponsePipelineStepExecution.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePipelineStepExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponsePipelineStepExecution):
            return True

        return self.to_dict() != other.to_dict()
