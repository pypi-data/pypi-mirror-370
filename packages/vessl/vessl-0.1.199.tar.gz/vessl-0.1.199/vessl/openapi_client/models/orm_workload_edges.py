# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmWorkloadEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifacts': 'list[OrmArtifact]',
        'created_volume_v2s': 'list[OrmVolumeV2]',
        'experiment': 'OrmExperiment',
        'histories': 'list[OrmWorkloadHistory]',
        'kernel_cluster': 'OrmKernelCluster',
        'kernel_cluster_node': 'OrmKernelClusterNode',
        'kernel_image': 'OrmKernelImage',
        'kernel_resource_spec': 'OrmKernelResourceSpec',
        'model_service_revision': 'OrmModelServiceRevision',
        'organization': 'OrmOrganization',
        'run_exec': 'OrmRunExecution',
        'volumes': 'list[OrmVolume]',
        'withdraw_history_workloads': 'list[OrmWithdrawHistoryWorkload]',
        'workspace': 'OrmWorkspace'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'created_volume_v2s': 'createdVolumeV2s',
        'experiment': 'experiment',
        'histories': 'histories',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_image': 'kernel_image',
        'kernel_resource_spec': 'kernel_resource_spec',
        'model_service_revision': 'model_service_revision',
        'organization': 'organization',
        'run_exec': 'run_exec',
        'volumes': 'volumes',
        'withdraw_history_workloads': 'withdraw_history_workloads',
        'workspace': 'workspace'
    }

    def __init__(self, artifacts=None, created_volume_v2s=None, experiment=None, histories=None, kernel_cluster=None, kernel_cluster_node=None, kernel_image=None, kernel_resource_spec=None, model_service_revision=None, organization=None, run_exec=None, volumes=None, withdraw_history_workloads=None, workspace=None, local_vars_configuration=None):  # noqa: E501
        """OrmWorkloadEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifacts = None
        self._created_volume_v2s = None
        self._experiment = None
        self._histories = None
        self._kernel_cluster = None
        self._kernel_cluster_node = None
        self._kernel_image = None
        self._kernel_resource_spec = None
        self._model_service_revision = None
        self._organization = None
        self._run_exec = None
        self._volumes = None
        self._withdraw_history_workloads = None
        self._workspace = None
        self.discriminator = None

        if artifacts is not None:
            self.artifacts = artifacts
        if created_volume_v2s is not None:
            self.created_volume_v2s = created_volume_v2s
        if experiment is not None:
            self.experiment = experiment
        if histories is not None:
            self.histories = histories
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        if kernel_image is not None:
            self.kernel_image = kernel_image
        if kernel_resource_spec is not None:
            self.kernel_resource_spec = kernel_resource_spec
        if model_service_revision is not None:
            self.model_service_revision = model_service_revision
        if organization is not None:
            self.organization = organization
        if run_exec is not None:
            self.run_exec = run_exec
        if volumes is not None:
            self.volumes = volumes
        if withdraw_history_workloads is not None:
            self.withdraw_history_workloads = withdraw_history_workloads
        if workspace is not None:
            self.workspace = workspace

    @property
    def artifacts(self):
        """Gets the artifacts of this OrmWorkloadEdges.  # noqa: E501


        :return: The artifacts of this OrmWorkloadEdges.  # noqa: E501
        :rtype: list[OrmArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this OrmWorkloadEdges.


        :param artifacts: The artifacts of this OrmWorkloadEdges.  # noqa: E501
        :type artifacts: list[OrmArtifact]
        """

        self._artifacts = artifacts

    @property
    def created_volume_v2s(self):
        """Gets the created_volume_v2s of this OrmWorkloadEdges.  # noqa: E501


        :return: The created_volume_v2s of this OrmWorkloadEdges.  # noqa: E501
        :rtype: list[OrmVolumeV2]
        """
        return self._created_volume_v2s

    @created_volume_v2s.setter
    def created_volume_v2s(self, created_volume_v2s):
        """Sets the created_volume_v2s of this OrmWorkloadEdges.


        :param created_volume_v2s: The created_volume_v2s of this OrmWorkloadEdges.  # noqa: E501
        :type created_volume_v2s: list[OrmVolumeV2]
        """

        self._created_volume_v2s = created_volume_v2s

    @property
    def experiment(self):
        """Gets the experiment of this OrmWorkloadEdges.  # noqa: E501


        :return: The experiment of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmExperiment
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this OrmWorkloadEdges.


        :param experiment: The experiment of this OrmWorkloadEdges.  # noqa: E501
        :type experiment: OrmExperiment
        """

        self._experiment = experiment

    @property
    def histories(self):
        """Gets the histories of this OrmWorkloadEdges.  # noqa: E501


        :return: The histories of this OrmWorkloadEdges.  # noqa: E501
        :rtype: list[OrmWorkloadHistory]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this OrmWorkloadEdges.


        :param histories: The histories of this OrmWorkloadEdges.  # noqa: E501
        :type histories: list[OrmWorkloadHistory]
        """

        self._histories = histories

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this OrmWorkloadEdges.  # noqa: E501


        :return: The kernel_cluster of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this OrmWorkloadEdges.


        :param kernel_cluster: The kernel_cluster of this OrmWorkloadEdges.  # noqa: E501
        :type kernel_cluster: OrmKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this OrmWorkloadEdges.  # noqa: E501


        :return: The kernel_cluster_node of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this OrmWorkloadEdges.


        :param kernel_cluster_node: The kernel_cluster_node of this OrmWorkloadEdges.  # noqa: E501
        :type kernel_cluster_node: OrmKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_image(self):
        """Gets the kernel_image of this OrmWorkloadEdges.  # noqa: E501


        :return: The kernel_image of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this OrmWorkloadEdges.


        :param kernel_image: The kernel_image of this OrmWorkloadEdges.  # noqa: E501
        :type kernel_image: OrmKernelImage
        """

        self._kernel_image = kernel_image

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this OrmWorkloadEdges.  # noqa: E501


        :return: The kernel_resource_spec of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this OrmWorkloadEdges.


        :param kernel_resource_spec: The kernel_resource_spec of this OrmWorkloadEdges.  # noqa: E501
        :type kernel_resource_spec: OrmKernelResourceSpec
        """

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def model_service_revision(self):
        """Gets the model_service_revision of this OrmWorkloadEdges.  # noqa: E501


        :return: The model_service_revision of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmModelServiceRevision
        """
        return self._model_service_revision

    @model_service_revision.setter
    def model_service_revision(self, model_service_revision):
        """Sets the model_service_revision of this OrmWorkloadEdges.


        :param model_service_revision: The model_service_revision of this OrmWorkloadEdges.  # noqa: E501
        :type model_service_revision: OrmModelServiceRevision
        """

        self._model_service_revision = model_service_revision

    @property
    def organization(self):
        """Gets the organization of this OrmWorkloadEdges.  # noqa: E501


        :return: The organization of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmWorkloadEdges.


        :param organization: The organization of this OrmWorkloadEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def run_exec(self):
        """Gets the run_exec of this OrmWorkloadEdges.  # noqa: E501


        :return: The run_exec of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmRunExecution
        """
        return self._run_exec

    @run_exec.setter
    def run_exec(self, run_exec):
        """Sets the run_exec of this OrmWorkloadEdges.


        :param run_exec: The run_exec of this OrmWorkloadEdges.  # noqa: E501
        :type run_exec: OrmRunExecution
        """

        self._run_exec = run_exec

    @property
    def volumes(self):
        """Gets the volumes of this OrmWorkloadEdges.  # noqa: E501


        :return: The volumes of this OrmWorkloadEdges.  # noqa: E501
        :rtype: list[OrmVolume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this OrmWorkloadEdges.


        :param volumes: The volumes of this OrmWorkloadEdges.  # noqa: E501
        :type volumes: list[OrmVolume]
        """

        self._volumes = volumes

    @property
    def withdraw_history_workloads(self):
        """Gets the withdraw_history_workloads of this OrmWorkloadEdges.  # noqa: E501


        :return: The withdraw_history_workloads of this OrmWorkloadEdges.  # noqa: E501
        :rtype: list[OrmWithdrawHistoryWorkload]
        """
        return self._withdraw_history_workloads

    @withdraw_history_workloads.setter
    def withdraw_history_workloads(self, withdraw_history_workloads):
        """Sets the withdraw_history_workloads of this OrmWorkloadEdges.


        :param withdraw_history_workloads: The withdraw_history_workloads of this OrmWorkloadEdges.  # noqa: E501
        :type withdraw_history_workloads: list[OrmWithdrawHistoryWorkload]
        """

        self._withdraw_history_workloads = withdraw_history_workloads

    @property
    def workspace(self):
        """Gets the workspace of this OrmWorkloadEdges.  # noqa: E501


        :return: The workspace of this OrmWorkloadEdges.  # noqa: E501
        :rtype: OrmWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this OrmWorkloadEdges.


        :param workspace: The workspace of this OrmWorkloadEdges.  # noqa: E501
        :type workspace: OrmWorkspace
        """

        self._workspace = workspace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmWorkloadEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmWorkloadEdges):
            return True

        return self.to_dict() != other.to_dict()
