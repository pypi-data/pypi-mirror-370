# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseDatasetSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket_name': 'str',
        'config': 'V1Config',
        'is_public_bucket': 'bool',
        'is_vessl_managed': 'bool',
        'on_premise_volume_config': 'OrmOnPremiseVolumeConfig',
        'path': 'str',
        'provider': 'str',
        'type': 'str'
    }

    attribute_map = {
        'bucket_name': 'bucket_name',
        'config': 'config',
        'is_public_bucket': 'is_public_bucket',
        'is_vessl_managed': 'is_vessl_managed',
        'on_premise_volume_config': 'on_premise_volume_config',
        'path': 'path',
        'provider': 'provider',
        'type': 'type'
    }

    def __init__(self, bucket_name=None, config=None, is_public_bucket=None, is_vessl_managed=None, on_premise_volume_config=None, path=None, provider=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDatasetSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bucket_name = None
        self._config = None
        self._is_public_bucket = None
        self._is_vessl_managed = None
        self._on_premise_volume_config = None
        self._path = None
        self._provider = None
        self._type = None
        self.discriminator = None

        self.bucket_name = bucket_name
        if config is not None:
            self.config = config
        self.is_public_bucket = is_public_bucket
        self.is_vessl_managed = is_vessl_managed
        if on_premise_volume_config is not None:
            self.on_premise_volume_config = on_premise_volume_config
        self.path = path
        self.provider = provider
        self.type = type

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ResponseDatasetSource.  # noqa: E501


        :return: The bucket_name of this ResponseDatasetSource.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ResponseDatasetSource.


        :param bucket_name: The bucket_name of this ResponseDatasetSource.  # noqa: E501
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def config(self):
        """Gets the config of this ResponseDatasetSource.  # noqa: E501


        :return: The config of this ResponseDatasetSource.  # noqa: E501
        :rtype: V1Config
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ResponseDatasetSource.


        :param config: The config of this ResponseDatasetSource.  # noqa: E501
        :type config: V1Config
        """

        self._config = config

    @property
    def is_public_bucket(self):
        """Gets the is_public_bucket of this ResponseDatasetSource.  # noqa: E501


        :return: The is_public_bucket of this ResponseDatasetSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_public_bucket

    @is_public_bucket.setter
    def is_public_bucket(self, is_public_bucket):
        """Sets the is_public_bucket of this ResponseDatasetSource.


        :param is_public_bucket: The is_public_bucket of this ResponseDatasetSource.  # noqa: E501
        :type is_public_bucket: bool
        """
        if self.local_vars_configuration.client_side_validation and is_public_bucket is None:  # noqa: E501
            raise ValueError("Invalid value for `is_public_bucket`, must not be `None`")  # noqa: E501

        self._is_public_bucket = is_public_bucket

    @property
    def is_vessl_managed(self):
        """Gets the is_vessl_managed of this ResponseDatasetSource.  # noqa: E501


        :return: The is_vessl_managed of this ResponseDatasetSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_vessl_managed

    @is_vessl_managed.setter
    def is_vessl_managed(self, is_vessl_managed):
        """Sets the is_vessl_managed of this ResponseDatasetSource.


        :param is_vessl_managed: The is_vessl_managed of this ResponseDatasetSource.  # noqa: E501
        :type is_vessl_managed: bool
        """
        if self.local_vars_configuration.client_side_validation and is_vessl_managed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_vessl_managed`, must not be `None`")  # noqa: E501

        self._is_vessl_managed = is_vessl_managed

    @property
    def on_premise_volume_config(self):
        """Gets the on_premise_volume_config of this ResponseDatasetSource.  # noqa: E501


        :return: The on_premise_volume_config of this ResponseDatasetSource.  # noqa: E501
        :rtype: OrmOnPremiseVolumeConfig
        """
        return self._on_premise_volume_config

    @on_premise_volume_config.setter
    def on_premise_volume_config(self, on_premise_volume_config):
        """Sets the on_premise_volume_config of this ResponseDatasetSource.


        :param on_premise_volume_config: The on_premise_volume_config of this ResponseDatasetSource.  # noqa: E501
        :type on_premise_volume_config: OrmOnPremiseVolumeConfig
        """

        self._on_premise_volume_config = on_premise_volume_config

    @property
    def path(self):
        """Gets the path of this ResponseDatasetSource.  # noqa: E501


        :return: The path of this ResponseDatasetSource.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponseDatasetSource.


        :param path: The path of this ResponseDatasetSource.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def provider(self):
        """Gets the provider of this ResponseDatasetSource.  # noqa: E501


        :return: The provider of this ResponseDatasetSource.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ResponseDatasetSource.


        :param provider: The provider of this ResponseDatasetSource.  # noqa: E501
        :type provider: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def type(self):
        """Gets the type of this ResponseDatasetSource.  # noqa: E501


        :return: The type of this ResponseDatasetSource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseDatasetSource.


        :param type: The type of this ResponseDatasetSource.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["s3", "gcs", "cluster-nfs", "cluster-host-path"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDatasetSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDatasetSource):
            return True

        return self.to_dict() != other.to_dict()
