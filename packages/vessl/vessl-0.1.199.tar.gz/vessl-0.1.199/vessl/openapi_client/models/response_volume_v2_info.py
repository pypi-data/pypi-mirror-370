# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseVolumeV2Info(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by_username': 'str',
        'created_dt': 'datetime',
        'id': 'int',
        'is_auto_created': 'bool',
        'name': 'str',
        'read_only': 'bool',
        'sub_path': 'str',
        'tags': 'list[ResponseTagResponse]',
        'updated_dt': 'datetime',
        'workload_info': 'ResponseWorkloadInfo'
    }

    attribute_map = {
        'created_by_username': 'created_by_username',
        'created_dt': 'created_dt',
        'id': 'id',
        'is_auto_created': 'is_auto_created',
        'name': 'name',
        'read_only': 'read_only',
        'sub_path': 'sub_path',
        'tags': 'tags',
        'updated_dt': 'updated_dt',
        'workload_info': 'workload_info'
    }

    def __init__(self, created_by_username=None, created_dt=None, id=None, is_auto_created=None, name=None, read_only=None, sub_path=None, tags=None, updated_dt=None, workload_info=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolumeV2Info - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by_username = None
        self._created_dt = None
        self._id = None
        self._is_auto_created = None
        self._name = None
        self._read_only = None
        self._sub_path = None
        self._tags = None
        self._updated_dt = None
        self._workload_info = None
        self.discriminator = None

        self.created_by_username = created_by_username
        self.created_dt = created_dt
        self.id = id
        self.is_auto_created = is_auto_created
        self.name = name
        self.read_only = read_only
        self.sub_path = sub_path
        self.tags = tags
        self.updated_dt = updated_dt
        if workload_info is not None:
            self.workload_info = workload_info

    @property
    def created_by_username(self):
        """Gets the created_by_username of this ResponseVolumeV2Info.  # noqa: E501


        :return: The created_by_username of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: str
        """
        return self._created_by_username

    @created_by_username.setter
    def created_by_username(self, created_by_username):
        """Sets the created_by_username of this ResponseVolumeV2Info.


        :param created_by_username: The created_by_username of this ResponseVolumeV2Info.  # noqa: E501
        :type created_by_username: str
        """

        self._created_by_username = created_by_username

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseVolumeV2Info.  # noqa: E501


        :return: The created_dt of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseVolumeV2Info.


        :param created_dt: The created_dt of this ResponseVolumeV2Info.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def id(self):
        """Gets the id of this ResponseVolumeV2Info.  # noqa: E501


        :return: The id of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseVolumeV2Info.


        :param id: The id of this ResponseVolumeV2Info.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_auto_created(self):
        """Gets the is_auto_created of this ResponseVolumeV2Info.  # noqa: E501


        :return: The is_auto_created of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_created

    @is_auto_created.setter
    def is_auto_created(self, is_auto_created):
        """Sets the is_auto_created of this ResponseVolumeV2Info.


        :param is_auto_created: The is_auto_created of this ResponseVolumeV2Info.  # noqa: E501
        :type is_auto_created: bool
        """
        if self.local_vars_configuration.client_side_validation and is_auto_created is None:  # noqa: E501
            raise ValueError("Invalid value for `is_auto_created`, must not be `None`")  # noqa: E501

        self._is_auto_created = is_auto_created

    @property
    def name(self):
        """Gets the name of this ResponseVolumeV2Info.  # noqa: E501


        :return: The name of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseVolumeV2Info.


        :param name: The name of this ResponseVolumeV2Info.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this ResponseVolumeV2Info.  # noqa: E501


        :return: The read_only of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ResponseVolumeV2Info.


        :param read_only: The read_only of this ResponseVolumeV2Info.  # noqa: E501
        :type read_only: bool
        """
        if self.local_vars_configuration.client_side_validation and read_only is None:  # noqa: E501
            raise ValueError("Invalid value for `read_only`, must not be `None`")  # noqa: E501

        self._read_only = read_only

    @property
    def sub_path(self):
        """Gets the sub_path of this ResponseVolumeV2Info.  # noqa: E501


        :return: The sub_path of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this ResponseVolumeV2Info.


        :param sub_path: The sub_path of this ResponseVolumeV2Info.  # noqa: E501
        :type sub_path: str
        """
        if self.local_vars_configuration.client_side_validation and sub_path is None:  # noqa: E501
            raise ValueError("Invalid value for `sub_path`, must not be `None`")  # noqa: E501

        self._sub_path = sub_path

    @property
    def tags(self):
        """Gets the tags of this ResponseVolumeV2Info.  # noqa: E501


        :return: The tags of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: list[ResponseTagResponse]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResponseVolumeV2Info.


        :param tags: The tags of this ResponseVolumeV2Info.  # noqa: E501
        :type tags: list[ResponseTagResponse]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseVolumeV2Info.  # noqa: E501


        :return: The updated_dt of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseVolumeV2Info.


        :param updated_dt: The updated_dt of this ResponseVolumeV2Info.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def workload_info(self):
        """Gets the workload_info of this ResponseVolumeV2Info.  # noqa: E501


        :return: The workload_info of this ResponseVolumeV2Info.  # noqa: E501
        :rtype: ResponseWorkloadInfo
        """
        return self._workload_info

    @workload_info.setter
    def workload_info(self, workload_info):
        """Sets the workload_info of this ResponseVolumeV2Info.


        :param workload_info: The workload_info of this ResponseVolumeV2Info.  # noqa: E501
        :type workload_info: ResponseWorkloadInfo
        """

        self._workload_info = workload_info

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolumeV2Info):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolumeV2Info):
            return True

        return self.to_dict() != other.to_dict()
