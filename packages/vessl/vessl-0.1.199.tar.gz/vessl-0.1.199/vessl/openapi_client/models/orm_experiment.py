# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmExperiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'distributed_spec': 'dict[str, object]',
        'edges': 'OrmExperimentEdges',
        'estimated_end_dt': 'datetime',
        'exit_code': 'int',
        'experiment_created_by': 'int',
        'experiment_plot_volume': 'int',
        'experiment_project': 'int',
        'experiment_sweep': 'int',
        'hyperparameters': 'dict[str, object]',
        'id': 'int',
        'immutable_slug': 'str',
        'is_distributed': 'bool',
        'is_example': 'bool',
        'is_local': 'bool',
        'is_starred': 'bool',
        'last_alive': 'datetime',
        'local_execution_spec': 'dict[str, object]',
        'message': 'str',
        'metrics_summary': 'dict[str, object]',
        'number': 'int',
        'progress_percent': 'float',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'termination_protection': 'bool',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'distributed_spec': 'distributed_spec',
        'edges': 'edges',
        'estimated_end_dt': 'estimated_end_dt',
        'exit_code': 'exit_code',
        'experiment_created_by': 'experiment_created_by',
        'experiment_plot_volume': 'experiment_plot_volume',
        'experiment_project': 'experiment_project',
        'experiment_sweep': 'experiment_sweep',
        'hyperparameters': 'hyperparameters',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_distributed': 'is_distributed',
        'is_example': 'is_example',
        'is_local': 'is_local',
        'is_starred': 'is_starred',
        'last_alive': 'last_alive',
        'local_execution_spec': 'local_execution_spec',
        'message': 'message',
        'metrics_summary': 'metrics_summary',
        'number': 'number',
        'progress_percent': 'progress_percent',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'termination_protection': 'termination_protection',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, distributed_spec=None, edges=None, estimated_end_dt=None, exit_code=None, experiment_created_by=None, experiment_plot_volume=None, experiment_project=None, experiment_sweep=None, hyperparameters=None, id=None, immutable_slug=None, is_distributed=None, is_example=None, is_local=None, is_starred=None, last_alive=None, local_execution_spec=None, message=None, metrics_summary=None, number=None, progress_percent=None, status=None, status_last_updated=None, status_reason=None, termination_protection=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmExperiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._distributed_spec = None
        self._edges = None
        self._estimated_end_dt = None
        self._exit_code = None
        self._experiment_created_by = None
        self._experiment_plot_volume = None
        self._experiment_project = None
        self._experiment_sweep = None
        self._hyperparameters = None
        self._id = None
        self._immutable_slug = None
        self._is_distributed = None
        self._is_example = None
        self._is_local = None
        self._is_starred = None
        self._last_alive = None
        self._local_execution_spec = None
        self._message = None
        self._metrics_summary = None
        self._number = None
        self._progress_percent = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._termination_protection = None
        self._updated_dt = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if distributed_spec is not None:
            self.distributed_spec = distributed_spec
        if edges is not None:
            self.edges = edges
        self.estimated_end_dt = estimated_end_dt
        self.exit_code = exit_code
        if experiment_created_by is not None:
            self.experiment_created_by = experiment_created_by
        if experiment_plot_volume is not None:
            self.experiment_plot_volume = experiment_plot_volume
        if experiment_project is not None:
            self.experiment_project = experiment_project
        self.experiment_sweep = experiment_sweep
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_distributed is not None:
            self.is_distributed = is_distributed
        if is_example is not None:
            self.is_example = is_example
        if is_local is not None:
            self.is_local = is_local
        if is_starred is not None:
            self.is_starred = is_starred
        if last_alive is not None:
            self.last_alive = last_alive
        if local_execution_spec is not None:
            self.local_execution_spec = local_execution_spec
        if message is not None:
            self.message = message
        if metrics_summary is not None:
            self.metrics_summary = metrics_summary
        if number is not None:
            self.number = number
        self.progress_percent = progress_percent
        if status is not None:
            self.status = status
        if status_last_updated is not None:
            self.status_last_updated = status_last_updated
        if status_reason is not None:
            self.status_reason = status_reason
        if termination_protection is not None:
            self.termination_protection = termination_protection
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmExperiment.  # noqa: E501


        :return: The created_dt of this OrmExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmExperiment.


        :param created_dt: The created_dt of this OrmExperiment.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def distributed_spec(self):
        """Gets the distributed_spec of this OrmExperiment.  # noqa: E501


        :return: The distributed_spec of this OrmExperiment.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._distributed_spec

    @distributed_spec.setter
    def distributed_spec(self, distributed_spec):
        """Sets the distributed_spec of this OrmExperiment.


        :param distributed_spec: The distributed_spec of this OrmExperiment.  # noqa: E501
        :type distributed_spec: dict[str, object]
        """

        self._distributed_spec = distributed_spec

    @property
    def edges(self):
        """Gets the edges of this OrmExperiment.  # noqa: E501


        :return: The edges of this OrmExperiment.  # noqa: E501
        :rtype: OrmExperimentEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmExperiment.


        :param edges: The edges of this OrmExperiment.  # noqa: E501
        :type edges: OrmExperimentEdges
        """

        self._edges = edges

    @property
    def estimated_end_dt(self):
        """Gets the estimated_end_dt of this OrmExperiment.  # noqa: E501


        :return: The estimated_end_dt of this OrmExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_end_dt

    @estimated_end_dt.setter
    def estimated_end_dt(self, estimated_end_dt):
        """Sets the estimated_end_dt of this OrmExperiment.


        :param estimated_end_dt: The estimated_end_dt of this OrmExperiment.  # noqa: E501
        :type estimated_end_dt: datetime
        """

        self._estimated_end_dt = estimated_end_dt

    @property
    def exit_code(self):
        """Gets the exit_code of this OrmExperiment.  # noqa: E501


        :return: The exit_code of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this OrmExperiment.


        :param exit_code: The exit_code of this OrmExperiment.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_created_by(self):
        """Gets the experiment_created_by of this OrmExperiment.  # noqa: E501


        :return: The experiment_created_by of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_created_by

    @experiment_created_by.setter
    def experiment_created_by(self, experiment_created_by):
        """Sets the experiment_created_by of this OrmExperiment.


        :param experiment_created_by: The experiment_created_by of this OrmExperiment.  # noqa: E501
        :type experiment_created_by: int
        """

        self._experiment_created_by = experiment_created_by

    @property
    def experiment_plot_volume(self):
        """Gets the experiment_plot_volume of this OrmExperiment.  # noqa: E501


        :return: The experiment_plot_volume of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume

    @experiment_plot_volume.setter
    def experiment_plot_volume(self, experiment_plot_volume):
        """Sets the experiment_plot_volume of this OrmExperiment.


        :param experiment_plot_volume: The experiment_plot_volume of this OrmExperiment.  # noqa: E501
        :type experiment_plot_volume: int
        """

        self._experiment_plot_volume = experiment_plot_volume

    @property
    def experiment_project(self):
        """Gets the experiment_project of this OrmExperiment.  # noqa: E501


        :return: The experiment_project of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_project

    @experiment_project.setter
    def experiment_project(self, experiment_project):
        """Sets the experiment_project of this OrmExperiment.


        :param experiment_project: The experiment_project of this OrmExperiment.  # noqa: E501
        :type experiment_project: int
        """

        self._experiment_project = experiment_project

    @property
    def experiment_sweep(self):
        """Gets the experiment_sweep of this OrmExperiment.  # noqa: E501


        :return: The experiment_sweep of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_sweep

    @experiment_sweep.setter
    def experiment_sweep(self, experiment_sweep):
        """Sets the experiment_sweep of this OrmExperiment.


        :param experiment_sweep: The experiment_sweep of this OrmExperiment.  # noqa: E501
        :type experiment_sweep: int
        """

        self._experiment_sweep = experiment_sweep

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this OrmExperiment.  # noqa: E501


        :return: The hyperparameters of this OrmExperiment.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this OrmExperiment.


        :param hyperparameters: The hyperparameters of this OrmExperiment.  # noqa: E501
        :type hyperparameters: dict[str, object]
        """

        self._hyperparameters = hyperparameters

    @property
    def id(self):
        """Gets the id of this OrmExperiment.  # noqa: E501


        :return: The id of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmExperiment.


        :param id: The id of this OrmExperiment.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmExperiment.  # noqa: E501


        :return: The immutable_slug of this OrmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmExperiment.


        :param immutable_slug: The immutable_slug of this OrmExperiment.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_distributed(self):
        """Gets the is_distributed of this OrmExperiment.  # noqa: E501


        :return: The is_distributed of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._is_distributed

    @is_distributed.setter
    def is_distributed(self, is_distributed):
        """Sets the is_distributed of this OrmExperiment.


        :param is_distributed: The is_distributed of this OrmExperiment.  # noqa: E501
        :type is_distributed: bool
        """

        self._is_distributed = is_distributed

    @property
    def is_example(self):
        """Gets the is_example of this OrmExperiment.  # noqa: E501


        :return: The is_example of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._is_example

    @is_example.setter
    def is_example(self, is_example):
        """Sets the is_example of this OrmExperiment.


        :param is_example: The is_example of this OrmExperiment.  # noqa: E501
        :type is_example: bool
        """

        self._is_example = is_example

    @property
    def is_local(self):
        """Gets the is_local of this OrmExperiment.  # noqa: E501


        :return: The is_local of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this OrmExperiment.


        :param is_local: The is_local of this OrmExperiment.  # noqa: E501
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def is_starred(self):
        """Gets the is_starred of this OrmExperiment.  # noqa: E501


        :return: The is_starred of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this OrmExperiment.


        :param is_starred: The is_starred of this OrmExperiment.  # noqa: E501
        :type is_starred: bool
        """

        self._is_starred = is_starred

    @property
    def last_alive(self):
        """Gets the last_alive of this OrmExperiment.  # noqa: E501


        :return: The last_alive of this OrmExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_alive

    @last_alive.setter
    def last_alive(self, last_alive):
        """Sets the last_alive of this OrmExperiment.


        :param last_alive: The last_alive of this OrmExperiment.  # noqa: E501
        :type last_alive: datetime
        """

        self._last_alive = last_alive

    @property
    def local_execution_spec(self):
        """Gets the local_execution_spec of this OrmExperiment.  # noqa: E501


        :return: The local_execution_spec of this OrmExperiment.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._local_execution_spec

    @local_execution_spec.setter
    def local_execution_spec(self, local_execution_spec):
        """Sets the local_execution_spec of this OrmExperiment.


        :param local_execution_spec: The local_execution_spec of this OrmExperiment.  # noqa: E501
        :type local_execution_spec: dict[str, object]
        """

        self._local_execution_spec = local_execution_spec

    @property
    def message(self):
        """Gets the message of this OrmExperiment.  # noqa: E501


        :return: The message of this OrmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OrmExperiment.


        :param message: The message of this OrmExperiment.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this OrmExperiment.  # noqa: E501


        :return: The metrics_summary of this OrmExperiment.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this OrmExperiment.


        :param metrics_summary: The metrics_summary of this OrmExperiment.  # noqa: E501
        :type metrics_summary: dict[str, object]
        """

        self._metrics_summary = metrics_summary

    @property
    def number(self):
        """Gets the number of this OrmExperiment.  # noqa: E501


        :return: The number of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrmExperiment.


        :param number: The number of this OrmExperiment.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def progress_percent(self):
        """Gets the progress_percent of this OrmExperiment.  # noqa: E501


        :return: The progress_percent of this OrmExperiment.  # noqa: E501
        :rtype: float
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this OrmExperiment.


        :param progress_percent: The progress_percent of this OrmExperiment.  # noqa: E501
        :type progress_percent: float
        """

        self._progress_percent = progress_percent

    @property
    def status(self):
        """Gets the status of this OrmExperiment.  # noqa: E501


        :return: The status of this OrmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmExperiment.


        :param status: The status of this OrmExperiment.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this OrmExperiment.  # noqa: E501


        :return: The status_last_updated of this OrmExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this OrmExperiment.


        :param status_last_updated: The status_last_updated of this OrmExperiment.  # noqa: E501
        :type status_last_updated: datetime
        """

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this OrmExperiment.  # noqa: E501


        :return: The status_reason of this OrmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this OrmExperiment.


        :param status_reason: The status_reason of this OrmExperiment.  # noqa: E501
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def termination_protection(self):
        """Gets the termination_protection of this OrmExperiment.  # noqa: E501


        :return: The termination_protection of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this OrmExperiment.


        :param termination_protection: The termination_protection of this OrmExperiment.  # noqa: E501
        :type termination_protection: bool
        """

        self._termination_protection = termination_protection

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmExperiment.  # noqa: E501


        :return: The updated_dt of this OrmExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmExperiment.


        :param updated_dt: The updated_dt of this OrmExperiment.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmExperiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmExperiment):
            return True

        return self.to_dict() != other.to_dict()
