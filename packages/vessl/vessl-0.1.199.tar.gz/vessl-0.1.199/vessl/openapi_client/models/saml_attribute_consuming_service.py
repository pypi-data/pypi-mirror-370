# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class SamlAttributeConsumingService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'int',
        'is_default': 'bool',
        'requested_attributes': 'list[SamlRequestedAttribute]',
        'service_descriptions': 'list[SamlLocalizedName]',
        'service_names': 'list[SamlLocalizedName]'
    }

    attribute_map = {
        'index': 'Index',
        'is_default': 'IsDefault',
        'requested_attributes': 'RequestedAttributes',
        'service_descriptions': 'ServiceDescriptions',
        'service_names': 'ServiceNames'
    }

    def __init__(self, index=None, is_default=None, requested_attributes=None, service_descriptions=None, service_names=None, local_vars_configuration=None):  # noqa: E501
        """SamlAttributeConsumingService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._index = None
        self._is_default = None
        self._requested_attributes = None
        self._service_descriptions = None
        self._service_names = None
        self.discriminator = None

        if index is not None:
            self.index = index
        self.is_default = is_default
        if requested_attributes is not None:
            self.requested_attributes = requested_attributes
        if service_descriptions is not None:
            self.service_descriptions = service_descriptions
        if service_names is not None:
            self.service_names = service_names

    @property
    def index(self):
        """Gets the index of this SamlAttributeConsumingService.  # noqa: E501


        :return: The index of this SamlAttributeConsumingService.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SamlAttributeConsumingService.


        :param index: The index of this SamlAttributeConsumingService.  # noqa: E501
        :type index: int
        """

        self._index = index

    @property
    def is_default(self):
        """Gets the is_default of this SamlAttributeConsumingService.  # noqa: E501


        :return: The is_default of this SamlAttributeConsumingService.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SamlAttributeConsumingService.


        :param is_default: The is_default of this SamlAttributeConsumingService.  # noqa: E501
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def requested_attributes(self):
        """Gets the requested_attributes of this SamlAttributeConsumingService.  # noqa: E501


        :return: The requested_attributes of this SamlAttributeConsumingService.  # noqa: E501
        :rtype: list[SamlRequestedAttribute]
        """
        return self._requested_attributes

    @requested_attributes.setter
    def requested_attributes(self, requested_attributes):
        """Sets the requested_attributes of this SamlAttributeConsumingService.


        :param requested_attributes: The requested_attributes of this SamlAttributeConsumingService.  # noqa: E501
        :type requested_attributes: list[SamlRequestedAttribute]
        """

        self._requested_attributes = requested_attributes

    @property
    def service_descriptions(self):
        """Gets the service_descriptions of this SamlAttributeConsumingService.  # noqa: E501


        :return: The service_descriptions of this SamlAttributeConsumingService.  # noqa: E501
        :rtype: list[SamlLocalizedName]
        """
        return self._service_descriptions

    @service_descriptions.setter
    def service_descriptions(self, service_descriptions):
        """Sets the service_descriptions of this SamlAttributeConsumingService.


        :param service_descriptions: The service_descriptions of this SamlAttributeConsumingService.  # noqa: E501
        :type service_descriptions: list[SamlLocalizedName]
        """

        self._service_descriptions = service_descriptions

    @property
    def service_names(self):
        """Gets the service_names of this SamlAttributeConsumingService.  # noqa: E501


        :return: The service_names of this SamlAttributeConsumingService.  # noqa: E501
        :rtype: list[SamlLocalizedName]
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this SamlAttributeConsumingService.


        :param service_names: The service_names of this SamlAttributeConsumingService.  # noqa: E501
        :type service_names: list[SamlLocalizedName]
        """

        self._service_names = service_names

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlAttributeConsumingService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlAttributeConsumingService):
            return True

        return self.to_dict() != other.to_dict()
