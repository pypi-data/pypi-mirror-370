# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmOnPremiseVolumeConfigFlexVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credentials_id': 'int',
        'domain': 'str',
        'network_path': 'str',
        'options': 'list[OrmOnPremiseVolumeConfigFlexVolumeOptionsInner]',
        'password': 'str',
        'secret_name': 'str',
        'username': 'str'
    }

    attribute_map = {
        'credentials_id': 'credentials_id',
        'domain': 'domain',
        'network_path': 'network_path',
        'options': 'options',
        'password': 'password',
        'secret_name': 'secret_name',
        'username': 'username'
    }

    def __init__(self, credentials_id=None, domain=None, network_path=None, options=None, password=None, secret_name=None, username=None, local_vars_configuration=None):  # noqa: E501
        """OrmOnPremiseVolumeConfigFlexVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credentials_id = None
        self._domain = None
        self._network_path = None
        self._options = None
        self._password = None
        self._secret_name = None
        self._username = None
        self.discriminator = None

        if credentials_id is not None:
            self.credentials_id = credentials_id
        if domain is not None:
            self.domain = domain
        self.network_path = network_path
        if options is not None:
            self.options = options
        if password is not None:
            self.password = password
        if secret_name is not None:
            self.secret_name = secret_name
        if username is not None:
            self.username = username

    @property
    def credentials_id(self):
        """Gets the credentials_id of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The credentials_id of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: int
        """
        return self._credentials_id

    @credentials_id.setter
    def credentials_id(self, credentials_id):
        """Sets the credentials_id of this OrmOnPremiseVolumeConfigFlexVolume.


        :param credentials_id: The credentials_id of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type credentials_id: int
        """

        self._credentials_id = credentials_id

    @property
    def domain(self):
        """Gets the domain of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The domain of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this OrmOnPremiseVolumeConfigFlexVolume.


        :param domain: The domain of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type domain: str
        """

        self._domain = domain

    @property
    def network_path(self):
        """Gets the network_path of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The network_path of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: str
        """
        return self._network_path

    @network_path.setter
    def network_path(self, network_path):
        """Sets the network_path of this OrmOnPremiseVolumeConfigFlexVolume.


        :param network_path: The network_path of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type network_path: str
        """
        if self.local_vars_configuration.client_side_validation and network_path is None:  # noqa: E501
            raise ValueError("Invalid value for `network_path`, must not be `None`")  # noqa: E501

        self._network_path = network_path

    @property
    def options(self):
        """Gets the options of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The options of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: list[OrmOnPremiseVolumeConfigFlexVolumeOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OrmOnPremiseVolumeConfigFlexVolume.


        :param options: The options of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type options: list[OrmOnPremiseVolumeConfigFlexVolumeOptionsInner]
        """

        self._options = options

    @property
    def password(self):
        """Gets the password of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The password of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OrmOnPremiseVolumeConfigFlexVolume.


        :param password: The password of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def secret_name(self):
        """Gets the secret_name of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The secret_name of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this OrmOnPremiseVolumeConfigFlexVolume.


        :param secret_name: The secret_name of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def username(self):
        """Gets the username of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501


        :return: The username of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrmOnPremiseVolumeConfigFlexVolume.


        :param username: The username of this OrmOnPremiseVolumeConfigFlexVolume.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmOnPremiseVolumeConfigFlexVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmOnPremiseVolumeConfigFlexVolume):
            return True

        return self.to_dict() != other.to_dict()
