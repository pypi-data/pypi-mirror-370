# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmHubModelTaskHistory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'OrmHubModelTaskHistoryEdges',
        'hub_model_task_id': 'int',
        'id': 'int',
        'recorded_at': 'datetime',
        'updated_by': 'int',
        'updated_dt': 'datetime',
        'version': 'int',
        'yaml': 'str'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'hub_model_task_id': 'hub_model_task_id',
        'id': 'id',
        'recorded_at': 'recorded_at',
        'updated_by': 'updated_by',
        'updated_dt': 'updated_dt',
        'version': 'version',
        'yaml': 'yaml'
    }

    def __init__(self, created_dt=None, edges=None, hub_model_task_id=None, id=None, recorded_at=None, updated_by=None, updated_dt=None, version=None, yaml=None, local_vars_configuration=None):  # noqa: E501
        """OrmHubModelTaskHistory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._hub_model_task_id = None
        self._id = None
        self._recorded_at = None
        self._updated_by = None
        self._updated_dt = None
        self._version = None
        self._yaml = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if hub_model_task_id is not None:
            self.hub_model_task_id = hub_model_task_id
        if id is not None:
            self.id = id
        if recorded_at is not None:
            self.recorded_at = recorded_at
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if version is not None:
            self.version = version
        if yaml is not None:
            self.yaml = yaml

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The created_dt of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmHubModelTaskHistory.


        :param created_dt: The created_dt of this OrmHubModelTaskHistory.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The edges of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: OrmHubModelTaskHistoryEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmHubModelTaskHistory.


        :param edges: The edges of this OrmHubModelTaskHistory.  # noqa: E501
        :type edges: OrmHubModelTaskHistoryEdges
        """

        self._edges = edges

    @property
    def hub_model_task_id(self):
        """Gets the hub_model_task_id of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The hub_model_task_id of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: int
        """
        return self._hub_model_task_id

    @hub_model_task_id.setter
    def hub_model_task_id(self, hub_model_task_id):
        """Sets the hub_model_task_id of this OrmHubModelTaskHistory.


        :param hub_model_task_id: The hub_model_task_id of this OrmHubModelTaskHistory.  # noqa: E501
        :type hub_model_task_id: int
        """

        self._hub_model_task_id = hub_model_task_id

    @property
    def id(self):
        """Gets the id of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The id of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmHubModelTaskHistory.


        :param id: The id of this OrmHubModelTaskHistory.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def recorded_at(self):
        """Gets the recorded_at of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The recorded_at of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._recorded_at

    @recorded_at.setter
    def recorded_at(self, recorded_at):
        """Sets the recorded_at of this OrmHubModelTaskHistory.


        :param recorded_at: The recorded_at of this OrmHubModelTaskHistory.  # noqa: E501
        :type recorded_at: datetime
        """

        self._recorded_at = recorded_at

    @property
    def updated_by(self):
        """Gets the updated_by of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The updated_by of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this OrmHubModelTaskHistory.


        :param updated_by: The updated_by of this OrmHubModelTaskHistory.  # noqa: E501
        :type updated_by: int
        """

        self._updated_by = updated_by

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The updated_dt of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmHubModelTaskHistory.


        :param updated_dt: The updated_dt of this OrmHubModelTaskHistory.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def version(self):
        """Gets the version of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The version of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OrmHubModelTaskHistory.


        :param version: The version of this OrmHubModelTaskHistory.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def yaml(self):
        """Gets the yaml of this OrmHubModelTaskHistory.  # noqa: E501


        :return: The yaml of this OrmHubModelTaskHistory.  # noqa: E501
        :rtype: str
        """
        return self._yaml

    @yaml.setter
    def yaml(self, yaml):
        """Sets the yaml of this OrmHubModelTaskHistory.


        :param yaml: The yaml of this OrmHubModelTaskHistory.  # noqa: E501
        :type yaml: str
        """

        self._yaml = yaml

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmHubModelTaskHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmHubModelTaskHistory):
            return True

        return self.to_dict() != other.to_dict()
