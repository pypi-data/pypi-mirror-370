# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseVolumeMountInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'archive_file': 'OrmVolumeSourceArchiveFile',
        'code': 'OrmVolumeSourceCode',
        'dataset': 'ResponseVolumeSourceDataset',
        'dataset_version': 'ResponseVolumeSourceDatasetVersion',
        'is_dir': 'bool',
        'model_volume': 'OrmVolumeSourceModelVolume',
        'mount_type': 'str',
        'object_storage': 'OrmVolumeSourceObjectStorage',
        'path': 'str',
        'read_only': 'bool',
        'size': 'int',
        'source_type': 'str',
        'volume': 'ResponseVolumeSourceVolume'
    }

    attribute_map = {
        'archive_file': 'archive_file',
        'code': 'code',
        'dataset': 'dataset',
        'dataset_version': 'dataset_version',
        'is_dir': 'is_dir',
        'model_volume': 'model_volume',
        'mount_type': 'mount_type',
        'object_storage': 'object_storage',
        'path': 'path',
        'read_only': 'read_only',
        'size': 'size',
        'source_type': 'source_type',
        'volume': 'volume'
    }

    def __init__(self, archive_file=None, code=None, dataset=None, dataset_version=None, is_dir=None, model_volume=None, mount_type=None, object_storage=None, path=None, read_only=None, size=None, source_type=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolumeMountInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._archive_file = None
        self._code = None
        self._dataset = None
        self._dataset_version = None
        self._is_dir = None
        self._model_volume = None
        self._mount_type = None
        self._object_storage = None
        self._path = None
        self._read_only = None
        self._size = None
        self._source_type = None
        self._volume = None
        self.discriminator = None

        if archive_file is not None:
            self.archive_file = archive_file
        if code is not None:
            self.code = code
        if dataset is not None:
            self.dataset = dataset
        if dataset_version is not None:
            self.dataset_version = dataset_version
        self.is_dir = is_dir
        if model_volume is not None:
            self.model_volume = model_volume
        self.mount_type = mount_type
        if object_storage is not None:
            self.object_storage = object_storage
        self.path = path
        self.read_only = read_only
        self.size = size
        self.source_type = source_type
        if volume is not None:
            self.volume = volume

    @property
    def archive_file(self):
        """Gets the archive_file of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The archive_file of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: OrmVolumeSourceArchiveFile
        """
        return self._archive_file

    @archive_file.setter
    def archive_file(self, archive_file):
        """Sets the archive_file of this ResponseVolumeMountInfo.


        :param archive_file: The archive_file of this ResponseVolumeMountInfo.  # noqa: E501
        :type archive_file: OrmVolumeSourceArchiveFile
        """

        self._archive_file = archive_file

    @property
    def code(self):
        """Gets the code of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The code of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: OrmVolumeSourceCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResponseVolumeMountInfo.


        :param code: The code of this ResponseVolumeMountInfo.  # noqa: E501
        :type code: OrmVolumeSourceCode
        """

        self._code = code

    @property
    def dataset(self):
        """Gets the dataset of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The dataset of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: ResponseVolumeSourceDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ResponseVolumeMountInfo.


        :param dataset: The dataset of this ResponseVolumeMountInfo.  # noqa: E501
        :type dataset: ResponseVolumeSourceDataset
        """

        self._dataset = dataset

    @property
    def dataset_version(self):
        """Gets the dataset_version of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The dataset_version of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: ResponseVolumeSourceDatasetVersion
        """
        return self._dataset_version

    @dataset_version.setter
    def dataset_version(self, dataset_version):
        """Sets the dataset_version of this ResponseVolumeMountInfo.


        :param dataset_version: The dataset_version of this ResponseVolumeMountInfo.  # noqa: E501
        :type dataset_version: ResponseVolumeSourceDatasetVersion
        """

        self._dataset_version = dataset_version

    @property
    def is_dir(self):
        """Gets the is_dir of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The is_dir of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this ResponseVolumeMountInfo.


        :param is_dir: The is_dir of this ResponseVolumeMountInfo.  # noqa: E501
        :type is_dir: bool
        """
        if self.local_vars_configuration.client_side_validation and is_dir is None:  # noqa: E501
            raise ValueError("Invalid value for `is_dir`, must not be `None`")  # noqa: E501

        self._is_dir = is_dir

    @property
    def model_volume(self):
        """Gets the model_volume of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The model_volume of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: OrmVolumeSourceModelVolume
        """
        return self._model_volume

    @model_volume.setter
    def model_volume(self, model_volume):
        """Sets the model_volume of this ResponseVolumeMountInfo.


        :param model_volume: The model_volume of this ResponseVolumeMountInfo.  # noqa: E501
        :type model_volume: OrmVolumeSourceModelVolume
        """

        self._model_volume = model_volume

    @property
    def mount_type(self):
        """Gets the mount_type of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The mount_type of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: str
        """
        return self._mount_type

    @mount_type.setter
    def mount_type(self, mount_type):
        """Sets the mount_type of this ResponseVolumeMountInfo.


        :param mount_type: The mount_type of this ResponseVolumeMountInfo.  # noqa: E501
        :type mount_type: str
        """
        if self.local_vars_configuration.client_side_validation and mount_type is None:  # noqa: E501
            raise ValueError("Invalid value for `mount_type`, must not be `None`")  # noqa: E501

        self._mount_type = mount_type

    @property
    def object_storage(self):
        """Gets the object_storage of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The object_storage of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: OrmVolumeSourceObjectStorage
        """
        return self._object_storage

    @object_storage.setter
    def object_storage(self, object_storage):
        """Sets the object_storage of this ResponseVolumeMountInfo.


        :param object_storage: The object_storage of this ResponseVolumeMountInfo.  # noqa: E501
        :type object_storage: OrmVolumeSourceObjectStorage
        """

        self._object_storage = object_storage

    @property
    def path(self):
        """Gets the path of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The path of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponseVolumeMountInfo.


        :param path: The path of this ResponseVolumeMountInfo.  # noqa: E501
        :type path: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def read_only(self):
        """Gets the read_only of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The read_only of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ResponseVolumeMountInfo.


        :param read_only: The read_only of this ResponseVolumeMountInfo.  # noqa: E501
        :type read_only: bool
        """
        if self.local_vars_configuration.client_side_validation and read_only is None:  # noqa: E501
            raise ValueError("Invalid value for `read_only`, must not be `None`")  # noqa: E501

        self._read_only = read_only

    @property
    def size(self):
        """Gets the size of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The size of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseVolumeMountInfo.


        :param size: The size of this ResponseVolumeMountInfo.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def source_type(self):
        """Gets the source_type of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The source_type of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ResponseVolumeMountInfo.


        :param source_type: The source_type of this ResponseVolumeMountInfo.  # noqa: E501
        :type source_type: str
        """
        if self.local_vars_configuration.client_side_validation and source_type is None:  # noqa: E501
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def volume(self):
        """Gets the volume of this ResponseVolumeMountInfo.  # noqa: E501


        :return: The volume of this ResponseVolumeMountInfo.  # noqa: E501
        :rtype: ResponseVolumeSourceVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ResponseVolumeMountInfo.


        :param volume: The volume of this ResponseVolumeMountInfo.  # noqa: E501
        :type volume: ResponseVolumeSourceVolume
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolumeMountInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolumeMountInfo):
            return True

        return self.to_dict() != other.to_dict()
