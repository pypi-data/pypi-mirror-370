# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ProtoRevealedSecret(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws': 'V1AWSCredential',
        'kind': 'str',
        'openai': 'V1OpenAICredential'
    }

    attribute_map = {
        'aws': 'aws',
        'kind': 'kind',
        'openai': 'openai'
    }

    def __init__(self, aws=None, kind=None, openai=None, local_vars_configuration=None):  # noqa: E501
        """ProtoRevealedSecret - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._aws = None
        self._kind = None
        self._openai = None
        self.discriminator = None

        if aws is not None:
            self.aws = aws
        if kind is not None:
            self.kind = kind
        if openai is not None:
            self.openai = openai

    @property
    def aws(self):
        """Gets the aws of this ProtoRevealedSecret.  # noqa: E501


        :return: The aws of this ProtoRevealedSecret.  # noqa: E501
        :rtype: V1AWSCredential
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this ProtoRevealedSecret.


        :param aws: The aws of this ProtoRevealedSecret.  # noqa: E501
        :type aws: V1AWSCredential
        """

        self._aws = aws

    @property
    def kind(self):
        """Gets the kind of this ProtoRevealedSecret.  # noqa: E501


        :return: The kind of this ProtoRevealedSecret.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProtoRevealedSecret.


        :param kind: The kind of this ProtoRevealedSecret.  # noqa: E501
        :type kind: str
        """

        self._kind = kind

    @property
    def openai(self):
        """Gets the openai of this ProtoRevealedSecret.  # noqa: E501


        :return: The openai of this ProtoRevealedSecret.  # noqa: E501
        :rtype: V1OpenAICredential
        """
        return self._openai

    @openai.setter
    def openai(self, openai):
        """Sets the openai of this ProtoRevealedSecret.


        :param openai: The openai of this ProtoRevealedSecret.  # noqa: E501
        :type openai: V1OpenAICredential
        """

        self._openai = openai

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtoRevealedSecret):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtoRevealedSecret):
            return True

        return self.to_dict() != other.to_dict()
