# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ModelCreateAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment_id': 'int',
        'model_name': 'str',
        'paths': 'list[str]',
        'repository_description': 'str',
        'tags': 'list[ProtoTag]'
    }

    attribute_map = {
        'experiment_id': 'experiment_id',
        'model_name': 'model_name',
        'paths': 'paths',
        'repository_description': 'repository_description',
        'tags': 'tags'
    }

    def __init__(self, experiment_id=None, model_name=None, paths=None, repository_description=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """ModelCreateAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._experiment_id = None
        self._model_name = None
        self._paths = None
        self._repository_description = None
        self._tags = None
        self.discriminator = None

        self.experiment_id = experiment_id
        self.model_name = model_name
        if paths is not None:
            self.paths = paths
        self.repository_description = repository_description
        if tags is not None:
            self.tags = tags

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ModelCreateAPIInput.  # noqa: E501


        :return: The experiment_id of this ModelCreateAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ModelCreateAPIInput.


        :param experiment_id: The experiment_id of this ModelCreateAPIInput.  # noqa: E501
        :type experiment_id: int
        """

        self._experiment_id = experiment_id

    @property
    def model_name(self):
        """Gets the model_name of this ModelCreateAPIInput.  # noqa: E501


        :return: The model_name of this ModelCreateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ModelCreateAPIInput.


        :param model_name: The model_name of this ModelCreateAPIInput.  # noqa: E501
        :type model_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                model_name is not None and len(model_name) > 255):
            raise ValueError("Invalid value for `model_name`, length must be less than or equal to `255`")  # noqa: E501

        self._model_name = model_name

    @property
    def paths(self):
        """Gets the paths of this ModelCreateAPIInput.  # noqa: E501


        :return: The paths of this ModelCreateAPIInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ModelCreateAPIInput.


        :param paths: The paths of this ModelCreateAPIInput.  # noqa: E501
        :type paths: list[str]
        """

        self._paths = paths

    @property
    def repository_description(self):
        """Gets the repository_description of this ModelCreateAPIInput.  # noqa: E501


        :return: The repository_description of this ModelCreateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._repository_description

    @repository_description.setter
    def repository_description(self, repository_description):
        """Sets the repository_description of this ModelCreateAPIInput.


        :param repository_description: The repository_description of this ModelCreateAPIInput.  # noqa: E501
        :type repository_description: str
        """

        self._repository_description = repository_description

    @property
    def tags(self):
        """Gets the tags of this ModelCreateAPIInput.  # noqa: E501


        :return: The tags of this ModelCreateAPIInput.  # noqa: E501
        :rtype: list[ProtoTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ModelCreateAPIInput.


        :param tags: The tags of this ModelCreateAPIInput.  # noqa: E501
        :type tags: list[ProtoTag]
        """

        self._tags = tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelCreateAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelCreateAPIInput):
            return True

        return self.to_dict() != other.to_dict()
