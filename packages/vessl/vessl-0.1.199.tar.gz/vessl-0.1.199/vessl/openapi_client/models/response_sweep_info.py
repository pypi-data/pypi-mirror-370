# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseSweepInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'algorithm': 'str',
        'code_repositories': 'list[ResponseCodeRepository]',
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'early_stopping_spec': 'OrmEarlyStoppingSpec',
        'experiment_summary': 'ResponseSweepExperimentSummary',
        'histories': 'list[ResponseSweepHistoryInfo]',
        'hyperparameters': 'OrmHyperparameters',
        'id': 'int',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_image': 'ResponseKernelImage',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'max_experiment_count': 'int',
        'max_failed_experiment_count': 'int',
        'message': 'str',
        'name': 'str',
        'objective': 'OrmSweepObjective',
        'objective_step_median': 'OrmObjectiveStepMedian',
        'organization': 'ResponseOrganization',
        'parallel_experiment_count': 'int',
        'project': 'ResponseProject',
        'search_space': 'OrmSweepSearchSpace',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'suggestion_histories': 'OrmSuggestionHistories',
        'updated_dt': 'datetime',
        'volume_mounts': 'ResponseVolumeMountInfos'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'code_repositories': 'code_repositories',
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'early_stopping_spec': 'early_stopping_spec',
        'experiment_summary': 'experiment_summary',
        'histories': 'histories',
        'hyperparameters': 'hyperparameters',
        'id': 'id',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_image': 'kernel_image',
        'kernel_resource_spec': 'kernel_resource_spec',
        'max_experiment_count': 'max_experiment_count',
        'max_failed_experiment_count': 'max_failed_experiment_count',
        'message': 'message',
        'name': 'name',
        'objective': 'objective',
        'objective_step_median': 'objective_step_median',
        'organization': 'organization',
        'parallel_experiment_count': 'parallel_experiment_count',
        'project': 'project',
        'search_space': 'search_space',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'suggestion_histories': 'suggestion_histories',
        'updated_dt': 'updated_dt',
        'volume_mounts': 'volume_mounts'
    }

    def __init__(self, algorithm=None, code_repositories=None, created_by=None, created_dt=None, early_stopping_spec=None, experiment_summary=None, histories=None, hyperparameters=None, id=None, kernel_cluster=None, kernel_cluster_node=None, kernel_image=None, kernel_resource_spec=None, max_experiment_count=None, max_failed_experiment_count=None, message=None, name=None, objective=None, objective_step_median=None, organization=None, parallel_experiment_count=None, project=None, search_space=None, start_command=None, status=None, status_last_updated=None, status_reason=None, suggestion_histories=None, updated_dt=None, volume_mounts=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSweepInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._algorithm = None
        self._code_repositories = None
        self._created_by = None
        self._created_dt = None
        self._early_stopping_spec = None
        self._experiment_summary = None
        self._histories = None
        self._hyperparameters = None
        self._id = None
        self._kernel_cluster = None
        self._kernel_cluster_node = None
        self._kernel_image = None
        self._kernel_resource_spec = None
        self._max_experiment_count = None
        self._max_failed_experiment_count = None
        self._message = None
        self._name = None
        self._objective = None
        self._objective_step_median = None
        self._organization = None
        self._parallel_experiment_count = None
        self._project = None
        self._search_space = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._suggestion_histories = None
        self._updated_dt = None
        self._volume_mounts = None
        self.discriminator = None

        self.algorithm = algorithm
        self.code_repositories = code_repositories
        self.created_by = created_by
        self.created_dt = created_dt
        if early_stopping_spec is not None:
            self.early_stopping_spec = early_stopping_spec
        self.experiment_summary = experiment_summary
        self.histories = histories
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters
        self.id = id
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        self.kernel_image = kernel_image
        self.kernel_resource_spec = kernel_resource_spec
        self.max_experiment_count = max_experiment_count
        self.max_failed_experiment_count = max_failed_experiment_count
        self.message = message
        self.name = name
        if objective is not None:
            self.objective = objective
        if objective_step_median is not None:
            self.objective_step_median = objective_step_median
        self.organization = organization
        self.parallel_experiment_count = parallel_experiment_count
        self.project = project
        if search_space is not None:
            self.search_space = search_space
        self.start_command = start_command
        self.status = status
        self.status_last_updated = status_last_updated
        self.status_reason = status_reason
        if suggestion_histories is not None:
            self.suggestion_histories = suggestion_histories
        self.updated_dt = updated_dt
        self.volume_mounts = volume_mounts

    @property
    def algorithm(self):
        """Gets the algorithm of this ResponseSweepInfo.  # noqa: E501


        :return: The algorithm of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ResponseSweepInfo.


        :param algorithm: The algorithm of this ResponseSweepInfo.  # noqa: E501
        :type algorithm: str
        """
        if self.local_vars_configuration.client_side_validation and algorithm is None:  # noqa: E501
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def code_repositories(self):
        """Gets the code_repositories of this ResponseSweepInfo.  # noqa: E501


        :return: The code_repositories of this ResponseSweepInfo.  # noqa: E501
        :rtype: list[ResponseCodeRepository]
        """
        return self._code_repositories

    @code_repositories.setter
    def code_repositories(self, code_repositories):
        """Sets the code_repositories of this ResponseSweepInfo.


        :param code_repositories: The code_repositories of this ResponseSweepInfo.  # noqa: E501
        :type code_repositories: list[ResponseCodeRepository]
        """
        if self.local_vars_configuration.client_side_validation and code_repositories is None:  # noqa: E501
            raise ValueError("Invalid value for `code_repositories`, must not be `None`")  # noqa: E501

        self._code_repositories = code_repositories

    @property
    def created_by(self):
        """Gets the created_by of this ResponseSweepInfo.  # noqa: E501


        :return: The created_by of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseSweepInfo.


        :param created_by: The created_by of this ResponseSweepInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseSweepInfo.  # noqa: E501


        :return: The created_dt of this ResponseSweepInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseSweepInfo.


        :param created_dt: The created_dt of this ResponseSweepInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def early_stopping_spec(self):
        """Gets the early_stopping_spec of this ResponseSweepInfo.  # noqa: E501


        :return: The early_stopping_spec of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmEarlyStoppingSpec
        """
        return self._early_stopping_spec

    @early_stopping_spec.setter
    def early_stopping_spec(self, early_stopping_spec):
        """Sets the early_stopping_spec of this ResponseSweepInfo.


        :param early_stopping_spec: The early_stopping_spec of this ResponseSweepInfo.  # noqa: E501
        :type early_stopping_spec: OrmEarlyStoppingSpec
        """

        self._early_stopping_spec = early_stopping_spec

    @property
    def experiment_summary(self):
        """Gets the experiment_summary of this ResponseSweepInfo.  # noqa: E501


        :return: The experiment_summary of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseSweepExperimentSummary
        """
        return self._experiment_summary

    @experiment_summary.setter
    def experiment_summary(self, experiment_summary):
        """Sets the experiment_summary of this ResponseSweepInfo.


        :param experiment_summary: The experiment_summary of this ResponseSweepInfo.  # noqa: E501
        :type experiment_summary: ResponseSweepExperimentSummary
        """
        if self.local_vars_configuration.client_side_validation and experiment_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_summary`, must not be `None`")  # noqa: E501

        self._experiment_summary = experiment_summary

    @property
    def histories(self):
        """Gets the histories of this ResponseSweepInfo.  # noqa: E501


        :return: The histories of this ResponseSweepInfo.  # noqa: E501
        :rtype: list[ResponseSweepHistoryInfo]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this ResponseSweepInfo.


        :param histories: The histories of this ResponseSweepInfo.  # noqa: E501
        :type histories: list[ResponseSweepHistoryInfo]
        """
        if self.local_vars_configuration.client_side_validation and histories is None:  # noqa: E501
            raise ValueError("Invalid value for `histories`, must not be `None`")  # noqa: E501

        self._histories = histories

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this ResponseSweepInfo.  # noqa: E501


        :return: The hyperparameters of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmHyperparameters
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this ResponseSweepInfo.


        :param hyperparameters: The hyperparameters of this ResponseSweepInfo.  # noqa: E501
        :type hyperparameters: OrmHyperparameters
        """

        self._hyperparameters = hyperparameters

    @property
    def id(self):
        """Gets the id of this ResponseSweepInfo.  # noqa: E501


        :return: The id of this ResponseSweepInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSweepInfo.


        :param id: The id of this ResponseSweepInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseSweepInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseSweepInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseSweepInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ResponseSweepInfo.  # noqa: E501


        :return: The kernel_cluster_node of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ResponseSweepInfo.


        :param kernel_cluster_node: The kernel_cluster_node of this ResponseSweepInfo.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponseSweepInfo.  # noqa: E501


        :return: The kernel_image of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponseSweepInfo.


        :param kernel_image: The kernel_image of this ResponseSweepInfo.  # noqa: E501
        :type kernel_image: ResponseKernelImage
        """
        if self.local_vars_configuration.client_side_validation and kernel_image is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image`, must not be `None`")  # noqa: E501

        self._kernel_image = kernel_image

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ResponseSweepInfo.  # noqa: E501


        :return: The kernel_resource_spec of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ResponseSweepInfo.


        :param kernel_resource_spec: The kernel_resource_spec of this ResponseSweepInfo.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """
        if self.local_vars_configuration.client_side_validation and kernel_resource_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_resource_spec`, must not be `None`")  # noqa: E501

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def max_experiment_count(self):
        """Gets the max_experiment_count of this ResponseSweepInfo.  # noqa: E501


        :return: The max_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_experiment_count

    @max_experiment_count.setter
    def max_experiment_count(self, max_experiment_count):
        """Sets the max_experiment_count of this ResponseSweepInfo.


        :param max_experiment_count: The max_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :type max_experiment_count: int
        """
        if self.local_vars_configuration.client_side_validation and max_experiment_count is None:  # noqa: E501
            raise ValueError("Invalid value for `max_experiment_count`, must not be `None`")  # noqa: E501

        self._max_experiment_count = max_experiment_count

    @property
    def max_failed_experiment_count(self):
        """Gets the max_failed_experiment_count of this ResponseSweepInfo.  # noqa: E501


        :return: The max_failed_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_failed_experiment_count

    @max_failed_experiment_count.setter
    def max_failed_experiment_count(self, max_failed_experiment_count):
        """Sets the max_failed_experiment_count of this ResponseSweepInfo.


        :param max_failed_experiment_count: The max_failed_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :type max_failed_experiment_count: int
        """
        if self.local_vars_configuration.client_side_validation and max_failed_experiment_count is None:  # noqa: E501
            raise ValueError("Invalid value for `max_failed_experiment_count`, must not be `None`")  # noqa: E501

        self._max_failed_experiment_count = max_failed_experiment_count

    @property
    def message(self):
        """Gets the message of this ResponseSweepInfo.  # noqa: E501


        :return: The message of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseSweepInfo.


        :param message: The message of this ResponseSweepInfo.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def name(self):
        """Gets the name of this ResponseSweepInfo.  # noqa: E501


        :return: The name of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseSweepInfo.


        :param name: The name of this ResponseSweepInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def objective(self):
        """Gets the objective of this ResponseSweepInfo.  # noqa: E501


        :return: The objective of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmSweepObjective
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this ResponseSweepInfo.


        :param objective: The objective of this ResponseSweepInfo.  # noqa: E501
        :type objective: OrmSweepObjective
        """

        self._objective = objective

    @property
    def objective_step_median(self):
        """Gets the objective_step_median of this ResponseSweepInfo.  # noqa: E501


        :return: The objective_step_median of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmObjectiveStepMedian
        """
        return self._objective_step_median

    @objective_step_median.setter
    def objective_step_median(self, objective_step_median):
        """Sets the objective_step_median of this ResponseSweepInfo.


        :param objective_step_median: The objective_step_median of this ResponseSweepInfo.  # noqa: E501
        :type objective_step_median: OrmObjectiveStepMedian
        """

        self._objective_step_median = objective_step_median

    @property
    def organization(self):
        """Gets the organization of this ResponseSweepInfo.  # noqa: E501


        :return: The organization of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResponseSweepInfo.


        :param organization: The organization of this ResponseSweepInfo.  # noqa: E501
        :type organization: ResponseOrganization
        """
        if self.local_vars_configuration.client_side_validation and organization is None:  # noqa: E501
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def parallel_experiment_count(self):
        """Gets the parallel_experiment_count of this ResponseSweepInfo.  # noqa: E501


        :return: The parallel_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :rtype: int
        """
        return self._parallel_experiment_count

    @parallel_experiment_count.setter
    def parallel_experiment_count(self, parallel_experiment_count):
        """Sets the parallel_experiment_count of this ResponseSweepInfo.


        :param parallel_experiment_count: The parallel_experiment_count of this ResponseSweepInfo.  # noqa: E501
        :type parallel_experiment_count: int
        """
        if self.local_vars_configuration.client_side_validation and parallel_experiment_count is None:  # noqa: E501
            raise ValueError("Invalid value for `parallel_experiment_count`, must not be `None`")  # noqa: E501

        self._parallel_experiment_count = parallel_experiment_count

    @property
    def project(self):
        """Gets the project of this ResponseSweepInfo.  # noqa: E501


        :return: The project of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseSweepInfo.


        :param project: The project of this ResponseSweepInfo.  # noqa: E501
        :type project: ResponseProject
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def search_space(self):
        """Gets the search_space of this ResponseSweepInfo.  # noqa: E501


        :return: The search_space of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmSweepSearchSpace
        """
        return self._search_space

    @search_space.setter
    def search_space(self, search_space):
        """Sets the search_space of this ResponseSweepInfo.


        :param search_space: The search_space of this ResponseSweepInfo.  # noqa: E501
        :type search_space: OrmSweepSearchSpace
        """

        self._search_space = search_space

    @property
    def start_command(self):
        """Gets the start_command of this ResponseSweepInfo.  # noqa: E501


        :return: The start_command of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponseSweepInfo.


        :param start_command: The start_command of this ResponseSweepInfo.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ResponseSweepInfo.  # noqa: E501


        :return: The status of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseSweepInfo.


        :param status: The status of this ResponseSweepInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseSweepInfo.  # noqa: E501


        :return: The status_last_updated of this ResponseSweepInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseSweepInfo.


        :param status_last_updated: The status_last_updated of this ResponseSweepInfo.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this ResponseSweepInfo.  # noqa: E501


        :return: The status_reason of this ResponseSweepInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ResponseSweepInfo.


        :param status_reason: The status_reason of this ResponseSweepInfo.  # noqa: E501
        :type status_reason: str
        """
        if self.local_vars_configuration.client_side_validation and status_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501

        self._status_reason = status_reason

    @property
    def suggestion_histories(self):
        """Gets the suggestion_histories of this ResponseSweepInfo.  # noqa: E501


        :return: The suggestion_histories of this ResponseSweepInfo.  # noqa: E501
        :rtype: OrmSuggestionHistories
        """
        return self._suggestion_histories

    @suggestion_histories.setter
    def suggestion_histories(self, suggestion_histories):
        """Sets the suggestion_histories of this ResponseSweepInfo.


        :param suggestion_histories: The suggestion_histories of this ResponseSweepInfo.  # noqa: E501
        :type suggestion_histories: OrmSuggestionHistories
        """

        self._suggestion_histories = suggestion_histories

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseSweepInfo.  # noqa: E501


        :return: The updated_dt of this ResponseSweepInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseSweepInfo.


        :param updated_dt: The updated_dt of this ResponseSweepInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ResponseSweepInfo.  # noqa: E501


        :return: The volume_mounts of this ResponseSweepInfo.  # noqa: E501
        :rtype: ResponseVolumeMountInfos
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ResponseSweepInfo.


        :param volume_mounts: The volume_mounts of this ResponseSweepInfo.  # noqa: E501
        :type volume_mounts: ResponseVolumeMountInfos
        """
        if self.local_vars_configuration.client_side_validation and volume_mounts is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_mounts`, must not be `None`")  # noqa: E501

        self._volume_mounts = volume_mounts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSweepInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSweepInfo):
            return True

        return self.to_dict() != other.to_dict()
