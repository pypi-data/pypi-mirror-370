# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmExperimentEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'OrmAccessToken',
        'created_by': 'OrmUser',
        'hide_plots_dashboards': 'list[OrmProjectDashboard]',
        'model_generated_experiments': 'list[OrmModelGeneratedExperiment]',
        'models': 'list[OrmModel]',
        'plot_volume': 'OrmVolume',
        'project': 'OrmProject',
        'run_execution': 'OrmRunExecution',
        'sweep': 'OrmSweep',
        'tags': 'list[OrmTag]',
        'workloads': 'list[OrmWorkload]'
    }

    attribute_map = {
        'access_token': 'access_token',
        'created_by': 'created_by',
        'hide_plots_dashboards': 'hide_plots_dashboards',
        'model_generated_experiments': 'model_generated_experiments',
        'models': 'models',
        'plot_volume': 'plot_volume',
        'project': 'project',
        'run_execution': 'run_execution',
        'sweep': 'sweep',
        'tags': 'tags',
        'workloads': 'workloads'
    }

    def __init__(self, access_token=None, created_by=None, hide_plots_dashboards=None, model_generated_experiments=None, models=None, plot_volume=None, project=None, run_execution=None, sweep=None, tags=None, workloads=None, local_vars_configuration=None):  # noqa: E501
        """OrmExperimentEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._created_by = None
        self._hide_plots_dashboards = None
        self._model_generated_experiments = None
        self._models = None
        self._plot_volume = None
        self._project = None
        self._run_execution = None
        self._sweep = None
        self._tags = None
        self._workloads = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if created_by is not None:
            self.created_by = created_by
        if hide_plots_dashboards is not None:
            self.hide_plots_dashboards = hide_plots_dashboards
        if model_generated_experiments is not None:
            self.model_generated_experiments = model_generated_experiments
        if models is not None:
            self.models = models
        if plot_volume is not None:
            self.plot_volume = plot_volume
        if project is not None:
            self.project = project
        if run_execution is not None:
            self.run_execution = run_execution
        if sweep is not None:
            self.sweep = sweep
        if tags is not None:
            self.tags = tags
        if workloads is not None:
            self.workloads = workloads

    @property
    def access_token(self):
        """Gets the access_token of this OrmExperimentEdges.  # noqa: E501


        :return: The access_token of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmAccessToken
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OrmExperimentEdges.


        :param access_token: The access_token of this OrmExperimentEdges.  # noqa: E501
        :type access_token: OrmAccessToken
        """

        self._access_token = access_token

    @property
    def created_by(self):
        """Gets the created_by of this OrmExperimentEdges.  # noqa: E501


        :return: The created_by of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmExperimentEdges.


        :param created_by: The created_by of this OrmExperimentEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def hide_plots_dashboards(self):
        """Gets the hide_plots_dashboards of this OrmExperimentEdges.  # noqa: E501


        :return: The hide_plots_dashboards of this OrmExperimentEdges.  # noqa: E501
        :rtype: list[OrmProjectDashboard]
        """
        return self._hide_plots_dashboards

    @hide_plots_dashboards.setter
    def hide_plots_dashboards(self, hide_plots_dashboards):
        """Sets the hide_plots_dashboards of this OrmExperimentEdges.


        :param hide_plots_dashboards: The hide_plots_dashboards of this OrmExperimentEdges.  # noqa: E501
        :type hide_plots_dashboards: list[OrmProjectDashboard]
        """

        self._hide_plots_dashboards = hide_plots_dashboards

    @property
    def model_generated_experiments(self):
        """Gets the model_generated_experiments of this OrmExperimentEdges.  # noqa: E501


        :return: The model_generated_experiments of this OrmExperimentEdges.  # noqa: E501
        :rtype: list[OrmModelGeneratedExperiment]
        """
        return self._model_generated_experiments

    @model_generated_experiments.setter
    def model_generated_experiments(self, model_generated_experiments):
        """Sets the model_generated_experiments of this OrmExperimentEdges.


        :param model_generated_experiments: The model_generated_experiments of this OrmExperimentEdges.  # noqa: E501
        :type model_generated_experiments: list[OrmModelGeneratedExperiment]
        """

        self._model_generated_experiments = model_generated_experiments

    @property
    def models(self):
        """Gets the models of this OrmExperimentEdges.  # noqa: E501


        :return: The models of this OrmExperimentEdges.  # noqa: E501
        :rtype: list[OrmModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this OrmExperimentEdges.


        :param models: The models of this OrmExperimentEdges.  # noqa: E501
        :type models: list[OrmModel]
        """

        self._models = models

    @property
    def plot_volume(self):
        """Gets the plot_volume of this OrmExperimentEdges.  # noqa: E501


        :return: The plot_volume of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._plot_volume

    @plot_volume.setter
    def plot_volume(self, plot_volume):
        """Sets the plot_volume of this OrmExperimentEdges.


        :param plot_volume: The plot_volume of this OrmExperimentEdges.  # noqa: E501
        :type plot_volume: OrmVolume
        """

        self._plot_volume = plot_volume

    @property
    def project(self):
        """Gets the project of this OrmExperimentEdges.  # noqa: E501


        :return: The project of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OrmExperimentEdges.


        :param project: The project of this OrmExperimentEdges.  # noqa: E501
        :type project: OrmProject
        """

        self._project = project

    @property
    def run_execution(self):
        """Gets the run_execution of this OrmExperimentEdges.  # noqa: E501


        :return: The run_execution of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmRunExecution
        """
        return self._run_execution

    @run_execution.setter
    def run_execution(self, run_execution):
        """Sets the run_execution of this OrmExperimentEdges.


        :param run_execution: The run_execution of this OrmExperimentEdges.  # noqa: E501
        :type run_execution: OrmRunExecution
        """

        self._run_execution = run_execution

    @property
    def sweep(self):
        """Gets the sweep of this OrmExperimentEdges.  # noqa: E501


        :return: The sweep of this OrmExperimentEdges.  # noqa: E501
        :rtype: OrmSweep
        """
        return self._sweep

    @sweep.setter
    def sweep(self, sweep):
        """Sets the sweep of this OrmExperimentEdges.


        :param sweep: The sweep of this OrmExperimentEdges.  # noqa: E501
        :type sweep: OrmSweep
        """

        self._sweep = sweep

    @property
    def tags(self):
        """Gets the tags of this OrmExperimentEdges.  # noqa: E501


        :return: The tags of this OrmExperimentEdges.  # noqa: E501
        :rtype: list[OrmTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrmExperimentEdges.


        :param tags: The tags of this OrmExperimentEdges.  # noqa: E501
        :type tags: list[OrmTag]
        """

        self._tags = tags

    @property
    def workloads(self):
        """Gets the workloads of this OrmExperimentEdges.  # noqa: E501


        :return: The workloads of this OrmExperimentEdges.  # noqa: E501
        :rtype: list[OrmWorkload]
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this OrmExperimentEdges.


        :param workloads: The workloads of this OrmExperimentEdges.  # noqa: E501
        :type workloads: list[OrmWorkload]
        """

        self._workloads = workloads

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmExperimentEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmExperimentEdges):
            return True

        return self.to_dict() != other.to_dict()
