# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class SamlContactPerson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company': 'str',
        'contact_type': 'str',
        'email_addresses': 'list[str]',
        'given_name': 'str',
        'sur_name': 'str',
        'telephone_numbers': 'list[str]'
    }

    attribute_map = {
        'company': 'Company',
        'contact_type': 'ContactType',
        'email_addresses': 'EmailAddresses',
        'given_name': 'GivenName',
        'sur_name': 'SurName',
        'telephone_numbers': 'TelephoneNumbers'
    }

    def __init__(self, company=None, contact_type=None, email_addresses=None, given_name=None, sur_name=None, telephone_numbers=None, local_vars_configuration=None):  # noqa: E501
        """SamlContactPerson - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._company = None
        self._contact_type = None
        self._email_addresses = None
        self._given_name = None
        self._sur_name = None
        self._telephone_numbers = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if contact_type is not None:
            self.contact_type = contact_type
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if given_name is not None:
            self.given_name = given_name
        if sur_name is not None:
            self.sur_name = sur_name
        if telephone_numbers is not None:
            self.telephone_numbers = telephone_numbers

    @property
    def company(self):
        """Gets the company of this SamlContactPerson.  # noqa: E501


        :return: The company of this SamlContactPerson.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SamlContactPerson.


        :param company: The company of this SamlContactPerson.  # noqa: E501
        :type company: str
        """

        self._company = company

    @property
    def contact_type(self):
        """Gets the contact_type of this SamlContactPerson.  # noqa: E501


        :return: The contact_type of this SamlContactPerson.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this SamlContactPerson.


        :param contact_type: The contact_type of this SamlContactPerson.  # noqa: E501
        :type contact_type: str
        """

        self._contact_type = contact_type

    @property
    def email_addresses(self):
        """Gets the email_addresses of this SamlContactPerson.  # noqa: E501


        :return: The email_addresses of this SamlContactPerson.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this SamlContactPerson.


        :param email_addresses: The email_addresses of this SamlContactPerson.  # noqa: E501
        :type email_addresses: list[str]
        """

        self._email_addresses = email_addresses

    @property
    def given_name(self):
        """Gets the given_name of this SamlContactPerson.  # noqa: E501


        :return: The given_name of this SamlContactPerson.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SamlContactPerson.


        :param given_name: The given_name of this SamlContactPerson.  # noqa: E501
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def sur_name(self):
        """Gets the sur_name of this SamlContactPerson.  # noqa: E501


        :return: The sur_name of this SamlContactPerson.  # noqa: E501
        :rtype: str
        """
        return self._sur_name

    @sur_name.setter
    def sur_name(self, sur_name):
        """Sets the sur_name of this SamlContactPerson.


        :param sur_name: The sur_name of this SamlContactPerson.  # noqa: E501
        :type sur_name: str
        """

        self._sur_name = sur_name

    @property
    def telephone_numbers(self):
        """Gets the telephone_numbers of this SamlContactPerson.  # noqa: E501


        :return: The telephone_numbers of this SamlContactPerson.  # noqa: E501
        :rtype: list[str]
        """
        return self._telephone_numbers

    @telephone_numbers.setter
    def telephone_numbers(self, telephone_numbers):
        """Sets the telephone_numbers of this SamlContactPerson.


        :param telephone_numbers: The telephone_numbers of this SamlContactPerson.  # noqa: E501
        :type telephone_numbers: list[str]
        """

        self._telephone_numbers = telephone_numbers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlContactPerson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlContactPerson):
            return True

        return self.to_dict() != other.to_dict()
