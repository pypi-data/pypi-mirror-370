# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmRunSpecEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster': 'OrmKernelCluster',
        'image': 'OrmKernelImage',
        'organization': 'OrmOrganization',
        'pipeline_step_specs': 'list[OrmPipelineStepSpec]',
        'resource_spec_preset': 'OrmKernelResourceSpec',
        'run_executions': 'list[OrmRunExecution]'
    }

    attribute_map = {
        'cluster': 'cluster',
        'image': 'image',
        'organization': 'organization',
        'pipeline_step_specs': 'pipeline_step_specs',
        'resource_spec_preset': 'resource_spec_preset',
        'run_executions': 'run_executions'
    }

    def __init__(self, cluster=None, image=None, organization=None, pipeline_step_specs=None, resource_spec_preset=None, run_executions=None, local_vars_configuration=None):  # noqa: E501
        """OrmRunSpecEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster = None
        self._image = None
        self._organization = None
        self._pipeline_step_specs = None
        self._resource_spec_preset = None
        self._run_executions = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if image is not None:
            self.image = image
        if organization is not None:
            self.organization = organization
        if pipeline_step_specs is not None:
            self.pipeline_step_specs = pipeline_step_specs
        if resource_spec_preset is not None:
            self.resource_spec_preset = resource_spec_preset
        if run_executions is not None:
            self.run_executions = run_executions

    @property
    def cluster(self):
        """Gets the cluster of this OrmRunSpecEdges.  # noqa: E501


        :return: The cluster of this OrmRunSpecEdges.  # noqa: E501
        :rtype: OrmKernelCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this OrmRunSpecEdges.


        :param cluster: The cluster of this OrmRunSpecEdges.  # noqa: E501
        :type cluster: OrmKernelCluster
        """

        self._cluster = cluster

    @property
    def image(self):
        """Gets the image of this OrmRunSpecEdges.  # noqa: E501


        :return: The image of this OrmRunSpecEdges.  # noqa: E501
        :rtype: OrmKernelImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OrmRunSpecEdges.


        :param image: The image of this OrmRunSpecEdges.  # noqa: E501
        :type image: OrmKernelImage
        """

        self._image = image

    @property
    def organization(self):
        """Gets the organization of this OrmRunSpecEdges.  # noqa: E501


        :return: The organization of this OrmRunSpecEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmRunSpecEdges.


        :param organization: The organization of this OrmRunSpecEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def pipeline_step_specs(self):
        """Gets the pipeline_step_specs of this OrmRunSpecEdges.  # noqa: E501


        :return: The pipeline_step_specs of this OrmRunSpecEdges.  # noqa: E501
        :rtype: list[OrmPipelineStepSpec]
        """
        return self._pipeline_step_specs

    @pipeline_step_specs.setter
    def pipeline_step_specs(self, pipeline_step_specs):
        """Sets the pipeline_step_specs of this OrmRunSpecEdges.


        :param pipeline_step_specs: The pipeline_step_specs of this OrmRunSpecEdges.  # noqa: E501
        :type pipeline_step_specs: list[OrmPipelineStepSpec]
        """

        self._pipeline_step_specs = pipeline_step_specs

    @property
    def resource_spec_preset(self):
        """Gets the resource_spec_preset of this OrmRunSpecEdges.  # noqa: E501


        :return: The resource_spec_preset of this OrmRunSpecEdges.  # noqa: E501
        :rtype: OrmKernelResourceSpec
        """
        return self._resource_spec_preset

    @resource_spec_preset.setter
    def resource_spec_preset(self, resource_spec_preset):
        """Sets the resource_spec_preset of this OrmRunSpecEdges.


        :param resource_spec_preset: The resource_spec_preset of this OrmRunSpecEdges.  # noqa: E501
        :type resource_spec_preset: OrmKernelResourceSpec
        """

        self._resource_spec_preset = resource_spec_preset

    @property
    def run_executions(self):
        """Gets the run_executions of this OrmRunSpecEdges.  # noqa: E501


        :return: The run_executions of this OrmRunSpecEdges.  # noqa: E501
        :rtype: list[OrmRunExecution]
        """
        return self._run_executions

    @run_executions.setter
    def run_executions(self, run_executions):
        """Sets the run_executions of this OrmRunSpecEdges.


        :param run_executions: The run_executions of this OrmRunSpecEdges.  # noqa: E501
        :type run_executions: list[OrmRunExecution]
        """

        self._run_executions = run_executions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmRunSpecEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmRunSpecEdges):
            return True

        return self.to_dict() != other.to_dict()
