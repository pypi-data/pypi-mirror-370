# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmDatasetEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organization': 'OrmOrganization',
        'project_datasets': 'list[OrmProjectDataset]',
        'summaries': 'list[OrmDatasetSummary]',
        'version_volume': 'OrmVolume',
        'volume': 'OrmVolume'
    }

    attribute_map = {
        'organization': 'organization',
        'project_datasets': 'project_datasets',
        'summaries': 'summaries',
        'version_volume': 'version_volume',
        'volume': 'volume'
    }

    def __init__(self, organization=None, project_datasets=None, summaries=None, version_volume=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """OrmDatasetEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._organization = None
        self._project_datasets = None
        self._summaries = None
        self._version_volume = None
        self._volume = None
        self.discriminator = None

        if organization is not None:
            self.organization = organization
        if project_datasets is not None:
            self.project_datasets = project_datasets
        if summaries is not None:
            self.summaries = summaries
        if version_volume is not None:
            self.version_volume = version_volume
        if volume is not None:
            self.volume = volume

    @property
    def organization(self):
        """Gets the organization of this OrmDatasetEdges.  # noqa: E501


        :return: The organization of this OrmDatasetEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmDatasetEdges.


        :param organization: The organization of this OrmDatasetEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def project_datasets(self):
        """Gets the project_datasets of this OrmDatasetEdges.  # noqa: E501


        :return: The project_datasets of this OrmDatasetEdges.  # noqa: E501
        :rtype: list[OrmProjectDataset]
        """
        return self._project_datasets

    @project_datasets.setter
    def project_datasets(self, project_datasets):
        """Sets the project_datasets of this OrmDatasetEdges.


        :param project_datasets: The project_datasets of this OrmDatasetEdges.  # noqa: E501
        :type project_datasets: list[OrmProjectDataset]
        """

        self._project_datasets = project_datasets

    @property
    def summaries(self):
        """Gets the summaries of this OrmDatasetEdges.  # noqa: E501


        :return: The summaries of this OrmDatasetEdges.  # noqa: E501
        :rtype: list[OrmDatasetSummary]
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries):
        """Sets the summaries of this OrmDatasetEdges.


        :param summaries: The summaries of this OrmDatasetEdges.  # noqa: E501
        :type summaries: list[OrmDatasetSummary]
        """

        self._summaries = summaries

    @property
    def version_volume(self):
        """Gets the version_volume of this OrmDatasetEdges.  # noqa: E501


        :return: The version_volume of this OrmDatasetEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._version_volume

    @version_volume.setter
    def version_volume(self, version_volume):
        """Sets the version_volume of this OrmDatasetEdges.


        :param version_volume: The version_volume of this OrmDatasetEdges.  # noqa: E501
        :type version_volume: OrmVolume
        """

        self._version_volume = version_volume

    @property
    def volume(self):
        """Gets the volume of this OrmDatasetEdges.  # noqa: E501


        :return: The volume of this OrmDatasetEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OrmDatasetEdges.


        :param volume: The volume of this OrmDatasetEdges.  # noqa: E501
        :type volume: OrmVolume
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmDatasetEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmDatasetEdges):
            return True

        return self.to_dict() != other.to_dict()
