# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmPipelineEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'OrmUser',
        'executions': 'list[OrmPipelineExecution]',
        'organization': 'OrmOrganization',
        'specs': 'list[OrmPipelineSpec]',
        'triggers': 'list[OrmPipelineTrigger]',
        'volume': 'OrmVolume'
    }

    attribute_map = {
        'created_by': 'created_by',
        'executions': 'executions',
        'organization': 'organization',
        'specs': 'specs',
        'triggers': 'triggers',
        'volume': 'volume'
    }

    def __init__(self, created_by=None, executions=None, organization=None, specs=None, triggers=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._executions = None
        self._organization = None
        self._specs = None
        self._triggers = None
        self._volume = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if executions is not None:
            self.executions = executions
        if organization is not None:
            self.organization = organization
        if specs is not None:
            self.specs = specs
        if triggers is not None:
            self.triggers = triggers
        if volume is not None:
            self.volume = volume

    @property
    def created_by(self):
        """Gets the created_by of this OrmPipelineEdges.  # noqa: E501


        :return: The created_by of this OrmPipelineEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmPipelineEdges.


        :param created_by: The created_by of this OrmPipelineEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def executions(self):
        """Gets the executions of this OrmPipelineEdges.  # noqa: E501


        :return: The executions of this OrmPipelineEdges.  # noqa: E501
        :rtype: list[OrmPipelineExecution]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this OrmPipelineEdges.


        :param executions: The executions of this OrmPipelineEdges.  # noqa: E501
        :type executions: list[OrmPipelineExecution]
        """

        self._executions = executions

    @property
    def organization(self):
        """Gets the organization of this OrmPipelineEdges.  # noqa: E501


        :return: The organization of this OrmPipelineEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmPipelineEdges.


        :param organization: The organization of this OrmPipelineEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def specs(self):
        """Gets the specs of this OrmPipelineEdges.  # noqa: E501


        :return: The specs of this OrmPipelineEdges.  # noqa: E501
        :rtype: list[OrmPipelineSpec]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this OrmPipelineEdges.


        :param specs: The specs of this OrmPipelineEdges.  # noqa: E501
        :type specs: list[OrmPipelineSpec]
        """

        self._specs = specs

    @property
    def triggers(self):
        """Gets the triggers of this OrmPipelineEdges.  # noqa: E501


        :return: The triggers of this OrmPipelineEdges.  # noqa: E501
        :rtype: list[OrmPipelineTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this OrmPipelineEdges.


        :param triggers: The triggers of this OrmPipelineEdges.  # noqa: E501
        :type triggers: list[OrmPipelineTrigger]
        """

        self._triggers = triggers

    @property
    def volume(self):
        """Gets the volume of this OrmPipelineEdges.  # noqa: E501


        :return: The volume of this OrmPipelineEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OrmPipelineEdges.


        :param volume: The volume of this OrmPipelineEdges.  # noqa: E501
        :type volume: OrmVolume
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineEdges):
            return True

        return self.to_dict() != other.to_dict()
