# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ReplicaInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_service_id': 'int',
        'node_name': 'str',
        'pod_deleted': 'bool',
        'pod_ip': 'str',
        'pod_name': 'str',
        'ready': 'bool',
        'revision_number': 'int',
        'status': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'model_service_id': 'model_service_id',
        'node_name': 'node_name',
        'pod_deleted': 'pod_deleted',
        'pod_ip': 'pod_ip',
        'pod_name': 'pod_name',
        'ready': 'ready',
        'revision_number': 'revision_number',
        'status': 'status',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, model_service_id=None, node_name=None, pod_deleted=None, pod_ip=None, pod_name=None, ready=None, revision_number=None, status=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """V1ReplicaInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._model_service_id = None
        self._node_name = None
        self._pod_deleted = None
        self._pod_ip = None
        self._pod_name = None
        self._ready = None
        self._revision_number = None
        self._status = None
        self._updated_dt = None
        self.discriminator = None

        self.model_service_id = model_service_id
        if node_name is not None:
            self.node_name = node_name
        if pod_deleted is not None:
            self.pod_deleted = pod_deleted
        if pod_ip is not None:
            self.pod_ip = pod_ip
        self.pod_name = pod_name
        if ready is not None:
            self.ready = ready
        self.revision_number = revision_number
        self.status = status
        self.updated_dt = updated_dt

    @property
    def model_service_id(self):
        """Gets the model_service_id of this V1ReplicaInfo.  # noqa: E501


        :return: The model_service_id of this V1ReplicaInfo.  # noqa: E501
        :rtype: int
        """
        return self._model_service_id

    @model_service_id.setter
    def model_service_id(self, model_service_id):
        """Sets the model_service_id of this V1ReplicaInfo.


        :param model_service_id: The model_service_id of this V1ReplicaInfo.  # noqa: E501
        :type model_service_id: int
        """
        if self.local_vars_configuration.client_side_validation and model_service_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_service_id`, must not be `None`")  # noqa: E501

        self._model_service_id = model_service_id

    @property
    def node_name(self):
        """Gets the node_name of this V1ReplicaInfo.  # noqa: E501


        :return: The node_name of this V1ReplicaInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this V1ReplicaInfo.


        :param node_name: The node_name of this V1ReplicaInfo.  # noqa: E501
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def pod_deleted(self):
        """Gets the pod_deleted of this V1ReplicaInfo.  # noqa: E501


        :return: The pod_deleted of this V1ReplicaInfo.  # noqa: E501
        :rtype: bool
        """
        return self._pod_deleted

    @pod_deleted.setter
    def pod_deleted(self, pod_deleted):
        """Sets the pod_deleted of this V1ReplicaInfo.


        :param pod_deleted: The pod_deleted of this V1ReplicaInfo.  # noqa: E501
        :type pod_deleted: bool
        """

        self._pod_deleted = pod_deleted

    @property
    def pod_ip(self):
        """Gets the pod_ip of this V1ReplicaInfo.  # noqa: E501


        :return: The pod_ip of this V1ReplicaInfo.  # noqa: E501
        :rtype: str
        """
        return self._pod_ip

    @pod_ip.setter
    def pod_ip(self, pod_ip):
        """Sets the pod_ip of this V1ReplicaInfo.


        :param pod_ip: The pod_ip of this V1ReplicaInfo.  # noqa: E501
        :type pod_ip: str
        """

        self._pod_ip = pod_ip

    @property
    def pod_name(self):
        """Gets the pod_name of this V1ReplicaInfo.  # noqa: E501


        :return: The pod_name of this V1ReplicaInfo.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this V1ReplicaInfo.


        :param pod_name: The pod_name of this V1ReplicaInfo.  # noqa: E501
        :type pod_name: str
        """
        if self.local_vars_configuration.client_side_validation and pod_name is None:  # noqa: E501
            raise ValueError("Invalid value for `pod_name`, must not be `None`")  # noqa: E501

        self._pod_name = pod_name

    @property
    def ready(self):
        """Gets the ready of this V1ReplicaInfo.  # noqa: E501


        :return: The ready of this V1ReplicaInfo.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this V1ReplicaInfo.


        :param ready: The ready of this V1ReplicaInfo.  # noqa: E501
        :type ready: bool
        """

        self._ready = ready

    @property
    def revision_number(self):
        """Gets the revision_number of this V1ReplicaInfo.  # noqa: E501


        :return: The revision_number of this V1ReplicaInfo.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this V1ReplicaInfo.


        :param revision_number: The revision_number of this V1ReplicaInfo.  # noqa: E501
        :type revision_number: int
        """
        if self.local_vars_configuration.client_side_validation and revision_number is None:  # noqa: E501
            raise ValueError("Invalid value for `revision_number`, must not be `None`")  # noqa: E501

        self._revision_number = revision_number

    @property
    def status(self):
        """Gets the status of this V1ReplicaInfo.  # noqa: E501


        :return: The status of this V1ReplicaInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1ReplicaInfo.


        :param status: The status of this V1ReplicaInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "updating", "running", "terminating", "deleted"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this V1ReplicaInfo.  # noqa: E501


        :return: The updated_dt of this V1ReplicaInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this V1ReplicaInfo.


        :param updated_dt: The updated_dt of this V1ReplicaInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ReplicaInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ReplicaInfo):
            return True

        return self.to_dict() != other.to_dict()
