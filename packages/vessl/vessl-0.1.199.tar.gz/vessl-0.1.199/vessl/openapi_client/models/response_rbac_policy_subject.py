# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseRbacPolicySubject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject_type': 'str',
        'user_group_id': 'int',
        'user_group_name': 'str',
        'user_id': 'int',
        'user_name': 'str'
    }

    attribute_map = {
        'subject_type': 'subject_type',
        'user_group_id': 'user_group_id',
        'user_group_name': 'user_group_name',
        'user_id': 'user_id',
        'user_name': 'user_name'
    }

    def __init__(self, subject_type=None, user_group_id=None, user_group_name=None, user_id=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """ResponseRbacPolicySubject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._subject_type = None
        self._user_group_id = None
        self._user_group_name = None
        self._user_id = None
        self._user_name = None
        self.discriminator = None

        self.subject_type = subject_type
        self.user_group_id = user_group_id
        self.user_group_name = user_group_name
        self.user_id = user_id
        self.user_name = user_name

    @property
    def subject_type(self):
        """Gets the subject_type of this ResponseRbacPolicySubject.  # noqa: E501


        :return: The subject_type of this ResponseRbacPolicySubject.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this ResponseRbacPolicySubject.


        :param subject_type: The subject_type of this ResponseRbacPolicySubject.  # noqa: E501
        :type subject_type: str
        """
        if self.local_vars_configuration.client_side_validation and subject_type is None:  # noqa: E501
            raise ValueError("Invalid value for `subject_type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "ugroup"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and subject_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `subject_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subject_type, allowed_values)
            )

        self._subject_type = subject_type

    @property
    def user_group_id(self):
        """Gets the user_group_id of this ResponseRbacPolicySubject.  # noqa: E501


        :return: The user_group_id of this ResponseRbacPolicySubject.  # noqa: E501
        :rtype: int
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """Sets the user_group_id of this ResponseRbacPolicySubject.


        :param user_group_id: The user_group_id of this ResponseRbacPolicySubject.  # noqa: E501
        :type user_group_id: int
        """

        self._user_group_id = user_group_id

    @property
    def user_group_name(self):
        """Gets the user_group_name of this ResponseRbacPolicySubject.  # noqa: E501


        :return: The user_group_name of this ResponseRbacPolicySubject.  # noqa: E501
        :rtype: str
        """
        return self._user_group_name

    @user_group_name.setter
    def user_group_name(self, user_group_name):
        """Sets the user_group_name of this ResponseRbacPolicySubject.


        :param user_group_name: The user_group_name of this ResponseRbacPolicySubject.  # noqa: E501
        :type user_group_name: str
        """

        self._user_group_name = user_group_name

    @property
    def user_id(self):
        """Gets the user_id of this ResponseRbacPolicySubject.  # noqa: E501


        :return: The user_id of this ResponseRbacPolicySubject.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ResponseRbacPolicySubject.


        :param user_id: The user_id of this ResponseRbacPolicySubject.  # noqa: E501
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this ResponseRbacPolicySubject.  # noqa: E501


        :return: The user_name of this ResponseRbacPolicySubject.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ResponseRbacPolicySubject.


        :param user_name: The user_name of this ResponseRbacPolicySubject.  # noqa: E501
        :type user_name: str
        """

        self._user_name = user_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseRbacPolicySubject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseRbacPolicySubject):
            return True

        return self.to_dict() != other.to_dict()
