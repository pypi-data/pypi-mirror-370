# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class LLMDocumentUpdateAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chunking_method_params': 'dict[str, object]',
        'chunking_method_type': 'str',
        'download_url': 'str',
        'extension': 'str',
        'filename': 'str',
        'parser_type': 'str',
        'upload_successful': 'bool'
    }

    attribute_map = {
        'chunking_method_params': 'chunking_method_params',
        'chunking_method_type': 'chunking_method_type',
        'download_url': 'download_url',
        'extension': 'extension',
        'filename': 'filename',
        'parser_type': 'parser_type',
        'upload_successful': 'upload_successful'
    }

    def __init__(self, chunking_method_params=None, chunking_method_type=None, download_url=None, extension=None, filename=None, parser_type=None, upload_successful=None, local_vars_configuration=None):  # noqa: E501
        """LLMDocumentUpdateAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._chunking_method_params = None
        self._chunking_method_type = None
        self._download_url = None
        self._extension = None
        self._filename = None
        self._parser_type = None
        self._upload_successful = None
        self.discriminator = None

        if chunking_method_params is not None:
            self.chunking_method_params = chunking_method_params
        if chunking_method_type is not None:
            self.chunking_method_type = chunking_method_type
        if download_url is not None:
            self.download_url = download_url
        if extension is not None:
            self.extension = extension
        if filename is not None:
            self.filename = filename
        if parser_type is not None:
            self.parser_type = parser_type
        if upload_successful is not None:
            self.upload_successful = upload_successful

    @property
    def chunking_method_params(self):
        """Gets the chunking_method_params of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The chunking_method_params of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._chunking_method_params

    @chunking_method_params.setter
    def chunking_method_params(self, chunking_method_params):
        """Sets the chunking_method_params of this LLMDocumentUpdateAPIInput.


        :param chunking_method_params: The chunking_method_params of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type chunking_method_params: dict[str, object]
        """

        self._chunking_method_params = chunking_method_params

    @property
    def chunking_method_type(self):
        """Gets the chunking_method_type of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The chunking_method_type of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._chunking_method_type

    @chunking_method_type.setter
    def chunking_method_type(self, chunking_method_type):
        """Sets the chunking_method_type of this LLMDocumentUpdateAPIInput.


        :param chunking_method_type: The chunking_method_type of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type chunking_method_type: str
        """

        self._chunking_method_type = chunking_method_type

    @property
    def download_url(self):
        """Gets the download_url of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The download_url of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this LLMDocumentUpdateAPIInput.


        :param download_url: The download_url of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def extension(self):
        """Gets the extension of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The extension of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this LLMDocumentUpdateAPIInput.


        :param extension: The extension of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type extension: str
        """

        self._extension = extension

    @property
    def filename(self):
        """Gets the filename of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The filename of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this LLMDocumentUpdateAPIInput.


        :param filename: The filename of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type filename: str
        """

        self._filename = filename

    @property
    def parser_type(self):
        """Gets the parser_type of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The parser_type of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._parser_type

    @parser_type.setter
    def parser_type(self, parser_type):
        """Sets the parser_type of this LLMDocumentUpdateAPIInput.


        :param parser_type: The parser_type of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type parser_type: str
        """

        self._parser_type = parser_type

    @property
    def upload_successful(self):
        """Gets the upload_successful of this LLMDocumentUpdateAPIInput.  # noqa: E501


        :return: The upload_successful of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :rtype: bool
        """
        return self._upload_successful

    @upload_successful.setter
    def upload_successful(self, upload_successful):
        """Sets the upload_successful of this LLMDocumentUpdateAPIInput.


        :param upload_successful: The upload_successful of this LLMDocumentUpdateAPIInput.  # noqa: E501
        :type upload_successful: bool
        """

        self._upload_successful = upload_successful

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LLMDocumentUpdateAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LLMDocumentUpdateAPIInput):
            return True

        return self.to_dict() != other.to_dict()
