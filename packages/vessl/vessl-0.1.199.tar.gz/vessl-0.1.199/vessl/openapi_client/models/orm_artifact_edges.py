# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmArtifactEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'child_artifacts': 'list[OrmArtifact]',
        'created_by': 'OrmUser',
        'llm_documents': 'list[OrmLLMDocument]',
        'locator': 'list[OrmVolume]',
        'models': 'list[OrmModel]',
        'organization': 'OrmOrganization',
        'origin_volume': 'OrmVolume',
        'parent_artifact': 'OrmArtifact',
        'run_exec': 'OrmRunExecution',
        'workload': 'OrmWorkload'
    }

    attribute_map = {
        'child_artifacts': 'child_artifacts',
        'created_by': 'created_by',
        'llm_documents': 'llm_documents',
        'locator': 'locator',
        'models': 'models',
        'organization': 'organization',
        'origin_volume': 'origin_volume',
        'parent_artifact': 'parent_artifact',
        'run_exec': 'run_exec',
        'workload': 'workload'
    }

    def __init__(self, child_artifacts=None, created_by=None, llm_documents=None, locator=None, models=None, organization=None, origin_volume=None, parent_artifact=None, run_exec=None, workload=None, local_vars_configuration=None):  # noqa: E501
        """OrmArtifactEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._child_artifacts = None
        self._created_by = None
        self._llm_documents = None
        self._locator = None
        self._models = None
        self._organization = None
        self._origin_volume = None
        self._parent_artifact = None
        self._run_exec = None
        self._workload = None
        self.discriminator = None

        if child_artifacts is not None:
            self.child_artifacts = child_artifacts
        if created_by is not None:
            self.created_by = created_by
        if llm_documents is not None:
            self.llm_documents = llm_documents
        if locator is not None:
            self.locator = locator
        if models is not None:
            self.models = models
        if organization is not None:
            self.organization = organization
        if origin_volume is not None:
            self.origin_volume = origin_volume
        if parent_artifact is not None:
            self.parent_artifact = parent_artifact
        if run_exec is not None:
            self.run_exec = run_exec
        if workload is not None:
            self.workload = workload

    @property
    def child_artifacts(self):
        """Gets the child_artifacts of this OrmArtifactEdges.  # noqa: E501


        :return: The child_artifacts of this OrmArtifactEdges.  # noqa: E501
        :rtype: list[OrmArtifact]
        """
        return self._child_artifacts

    @child_artifacts.setter
    def child_artifacts(self, child_artifacts):
        """Sets the child_artifacts of this OrmArtifactEdges.


        :param child_artifacts: The child_artifacts of this OrmArtifactEdges.  # noqa: E501
        :type child_artifacts: list[OrmArtifact]
        """

        self._child_artifacts = child_artifacts

    @property
    def created_by(self):
        """Gets the created_by of this OrmArtifactEdges.  # noqa: E501


        :return: The created_by of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrmArtifactEdges.


        :param created_by: The created_by of this OrmArtifactEdges.  # noqa: E501
        :type created_by: OrmUser
        """

        self._created_by = created_by

    @property
    def llm_documents(self):
        """Gets the llm_documents of this OrmArtifactEdges.  # noqa: E501


        :return: The llm_documents of this OrmArtifactEdges.  # noqa: E501
        :rtype: list[OrmLLMDocument]
        """
        return self._llm_documents

    @llm_documents.setter
    def llm_documents(self, llm_documents):
        """Sets the llm_documents of this OrmArtifactEdges.


        :param llm_documents: The llm_documents of this OrmArtifactEdges.  # noqa: E501
        :type llm_documents: list[OrmLLMDocument]
        """

        self._llm_documents = llm_documents

    @property
    def locator(self):
        """Gets the locator of this OrmArtifactEdges.  # noqa: E501


        :return: The locator of this OrmArtifactEdges.  # noqa: E501
        :rtype: list[OrmVolume]
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """Sets the locator of this OrmArtifactEdges.


        :param locator: The locator of this OrmArtifactEdges.  # noqa: E501
        :type locator: list[OrmVolume]
        """

        self._locator = locator

    @property
    def models(self):
        """Gets the models of this OrmArtifactEdges.  # noqa: E501


        :return: The models of this OrmArtifactEdges.  # noqa: E501
        :rtype: list[OrmModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this OrmArtifactEdges.


        :param models: The models of this OrmArtifactEdges.  # noqa: E501
        :type models: list[OrmModel]
        """

        self._models = models

    @property
    def organization(self):
        """Gets the organization of this OrmArtifactEdges.  # noqa: E501


        :return: The organization of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrmArtifactEdges.


        :param organization: The organization of this OrmArtifactEdges.  # noqa: E501
        :type organization: OrmOrganization
        """

        self._organization = organization

    @property
    def origin_volume(self):
        """Gets the origin_volume of this OrmArtifactEdges.  # noqa: E501


        :return: The origin_volume of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmVolume
        """
        return self._origin_volume

    @origin_volume.setter
    def origin_volume(self, origin_volume):
        """Sets the origin_volume of this OrmArtifactEdges.


        :param origin_volume: The origin_volume of this OrmArtifactEdges.  # noqa: E501
        :type origin_volume: OrmVolume
        """

        self._origin_volume = origin_volume

    @property
    def parent_artifact(self):
        """Gets the parent_artifact of this OrmArtifactEdges.  # noqa: E501


        :return: The parent_artifact of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmArtifact
        """
        return self._parent_artifact

    @parent_artifact.setter
    def parent_artifact(self, parent_artifact):
        """Sets the parent_artifact of this OrmArtifactEdges.


        :param parent_artifact: The parent_artifact of this OrmArtifactEdges.  # noqa: E501
        :type parent_artifact: OrmArtifact
        """

        self._parent_artifact = parent_artifact

    @property
    def run_exec(self):
        """Gets the run_exec of this OrmArtifactEdges.  # noqa: E501


        :return: The run_exec of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmRunExecution
        """
        return self._run_exec

    @run_exec.setter
    def run_exec(self, run_exec):
        """Sets the run_exec of this OrmArtifactEdges.


        :param run_exec: The run_exec of this OrmArtifactEdges.  # noqa: E501
        :type run_exec: OrmRunExecution
        """

        self._run_exec = run_exec

    @property
    def workload(self):
        """Gets the workload of this OrmArtifactEdges.  # noqa: E501


        :return: The workload of this OrmArtifactEdges.  # noqa: E501
        :rtype: OrmWorkload
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """Sets the workload of this OrmArtifactEdges.


        :param workload: The workload of this OrmArtifactEdges.  # noqa: E501
        :type workload: OrmWorkload
        """

        self._workload = workload

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmArtifactEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmArtifactEdges):
            return True

        return self.to_dict() != other.to_dict()
