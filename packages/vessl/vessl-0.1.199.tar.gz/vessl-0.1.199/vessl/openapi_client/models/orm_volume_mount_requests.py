# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmVolumeMountRequests(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requests': 'list[OrmVolumeMountRequest]',
        'root_volume_auto_backup': 'bool',
        'root_volume_size': 'str',
        'working_dir': 'str'
    }

    attribute_map = {
        'requests': 'requests',
        'root_volume_auto_backup': 'root_volume_auto_backup',
        'root_volume_size': 'root_volume_size',
        'working_dir': 'working_dir'
    }

    def __init__(self, requests=None, root_volume_auto_backup=None, root_volume_size=None, working_dir=None, local_vars_configuration=None):  # noqa: E501
        """OrmVolumeMountRequests - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._requests = None
        self._root_volume_auto_backup = None
        self._root_volume_size = None
        self._working_dir = None
        self.discriminator = None

        if requests is not None:
            self.requests = requests
        if root_volume_auto_backup is not None:
            self.root_volume_auto_backup = root_volume_auto_backup
        if root_volume_size is not None:
            self.root_volume_size = root_volume_size
        if working_dir is not None:
            self.working_dir = working_dir

    @property
    def requests(self):
        """Gets the requests of this OrmVolumeMountRequests.  # noqa: E501


        :return: The requests of this OrmVolumeMountRequests.  # noqa: E501
        :rtype: list[OrmVolumeMountRequest]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this OrmVolumeMountRequests.


        :param requests: The requests of this OrmVolumeMountRequests.  # noqa: E501
        :type requests: list[OrmVolumeMountRequest]
        """

        self._requests = requests

    @property
    def root_volume_auto_backup(self):
        """Gets the root_volume_auto_backup of this OrmVolumeMountRequests.  # noqa: E501


        :return: The root_volume_auto_backup of this OrmVolumeMountRequests.  # noqa: E501
        :rtype: bool
        """
        return self._root_volume_auto_backup

    @root_volume_auto_backup.setter
    def root_volume_auto_backup(self, root_volume_auto_backup):
        """Sets the root_volume_auto_backup of this OrmVolumeMountRequests.


        :param root_volume_auto_backup: The root_volume_auto_backup of this OrmVolumeMountRequests.  # noqa: E501
        :type root_volume_auto_backup: bool
        """

        self._root_volume_auto_backup = root_volume_auto_backup

    @property
    def root_volume_size(self):
        """Gets the root_volume_size of this OrmVolumeMountRequests.  # noqa: E501


        :return: The root_volume_size of this OrmVolumeMountRequests.  # noqa: E501
        :rtype: str
        """
        return self._root_volume_size

    @root_volume_size.setter
    def root_volume_size(self, root_volume_size):
        """Sets the root_volume_size of this OrmVolumeMountRequests.


        :param root_volume_size: The root_volume_size of this OrmVolumeMountRequests.  # noqa: E501
        :type root_volume_size: str
        """

        self._root_volume_size = root_volume_size

    @property
    def working_dir(self):
        """Gets the working_dir of this OrmVolumeMountRequests.  # noqa: E501


        :return: The working_dir of this OrmVolumeMountRequests.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this OrmVolumeMountRequests.


        :param working_dir: The working_dir of this OrmVolumeMountRequests.  # noqa: E501
        :type working_dir: str
        """

        self._working_dir = working_dir

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmVolumeMountRequests):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmVolumeMountRequests):
            return True

        return self.to_dict() != other.to_dict()
