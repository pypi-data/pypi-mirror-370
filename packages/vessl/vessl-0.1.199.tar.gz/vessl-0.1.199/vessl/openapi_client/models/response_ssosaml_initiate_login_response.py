# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseSSOSAMLInitiateLoginResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'idp_single_sign_on_service': 'list[ResponseIdPSingleSignOnService]',
        'saml_request_id': 'str'
    }

    attribute_map = {
        'idp_single_sign_on_service': 'idp_single_sign_on_service',
        'saml_request_id': 'saml_request_id'
    }

    def __init__(self, idp_single_sign_on_service=None, saml_request_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSSOSAMLInitiateLoginResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._idp_single_sign_on_service = None
        self._saml_request_id = None
        self.discriminator = None

        self.idp_single_sign_on_service = idp_single_sign_on_service
        self.saml_request_id = saml_request_id

    @property
    def idp_single_sign_on_service(self):
        """Gets the idp_single_sign_on_service of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501


        :return: The idp_single_sign_on_service of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501
        :rtype: list[ResponseIdPSingleSignOnService]
        """
        return self._idp_single_sign_on_service

    @idp_single_sign_on_service.setter
    def idp_single_sign_on_service(self, idp_single_sign_on_service):
        """Sets the idp_single_sign_on_service of this ResponseSSOSAMLInitiateLoginResponse.


        :param idp_single_sign_on_service: The idp_single_sign_on_service of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501
        :type idp_single_sign_on_service: list[ResponseIdPSingleSignOnService]
        """
        if self.local_vars_configuration.client_side_validation and idp_single_sign_on_service is None:  # noqa: E501
            raise ValueError("Invalid value for `idp_single_sign_on_service`, must not be `None`")  # noqa: E501

        self._idp_single_sign_on_service = idp_single_sign_on_service

    @property
    def saml_request_id(self):
        """Gets the saml_request_id of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501


        :return: The saml_request_id of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._saml_request_id

    @saml_request_id.setter
    def saml_request_id(self, saml_request_id):
        """Sets the saml_request_id of this ResponseSSOSAMLInitiateLoginResponse.


        :param saml_request_id: The saml_request_id of this ResponseSSOSAMLInitiateLoginResponse.  # noqa: E501
        :type saml_request_id: str
        """

        self._saml_request_id = saml_request_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSSOSAMLInitiateLoginResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSSOSAMLInitiateLoginResponse):
            return True

        return self.to_dict() != other.to_dict()
