# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'edges': 'OrmModelEdges',
        'id': 'int',
        'immutable_slug': 'str',
        'model_artifact_volume': 'int',
        'model_created_by': 'int',
        'model_experiment': 'int',
        'model_model_repository': 'int',
        'model_original_artifact': 'int',
        'name': 'str',
        'number': 'int',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'edges': 'edges',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'model_artifact_volume': 'model_artifact_volume',
        'model_created_by': 'model_created_by',
        'model_experiment': 'model_experiment',
        'model_model_repository': 'model_model_repository',
        'model_original_artifact': 'model_original_artifact',
        'name': 'name',
        'number': 'number',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, edges=None, id=None, immutable_slug=None, model_artifact_volume=None, model_created_by=None, model_experiment=None, model_model_repository=None, model_original_artifact=None, name=None, number=None, status=None, status_last_updated=None, status_reason=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._edges = None
        self._id = None
        self._immutable_slug = None
        self._model_artifact_volume = None
        self._model_created_by = None
        self._model_experiment = None
        self._model_model_repository = None
        self._model_original_artifact = None
        self._name = None
        self._number = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._updated_dt = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if model_artifact_volume is not None:
            self.model_artifact_volume = model_artifact_volume
        if model_created_by is not None:
            self.model_created_by = model_created_by
        if model_experiment is not None:
            self.model_experiment = model_experiment
        if model_model_repository is not None:
            self.model_model_repository = model_model_repository
        if model_original_artifact is not None:
            self.model_original_artifact = model_original_artifact
        self.name = name
        if number is not None:
            self.number = number
        if status is not None:
            self.status = status
        if status_last_updated is not None:
            self.status_last_updated = status_last_updated
        if status_reason is not None:
            self.status_reason = status_reason
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmModel.  # noqa: E501


        :return: The created_dt of this OrmModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmModel.


        :param created_dt: The created_dt of this OrmModel.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmModel.  # noqa: E501


        :return: The edges of this OrmModel.  # noqa: E501
        :rtype: OrmModelEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmModel.


        :param edges: The edges of this OrmModel.  # noqa: E501
        :type edges: OrmModelEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmModel.  # noqa: E501


        :return: The id of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmModel.


        :param id: The id of this OrmModel.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmModel.  # noqa: E501


        :return: The immutable_slug of this OrmModel.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmModel.


        :param immutable_slug: The immutable_slug of this OrmModel.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def model_artifact_volume(self):
        """Gets the model_artifact_volume of this OrmModel.  # noqa: E501


        :return: The model_artifact_volume of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._model_artifact_volume

    @model_artifact_volume.setter
    def model_artifact_volume(self, model_artifact_volume):
        """Sets the model_artifact_volume of this OrmModel.


        :param model_artifact_volume: The model_artifact_volume of this OrmModel.  # noqa: E501
        :type model_artifact_volume: int
        """

        self._model_artifact_volume = model_artifact_volume

    @property
    def model_created_by(self):
        """Gets the model_created_by of this OrmModel.  # noqa: E501


        :return: The model_created_by of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._model_created_by

    @model_created_by.setter
    def model_created_by(self, model_created_by):
        """Sets the model_created_by of this OrmModel.


        :param model_created_by: The model_created_by of this OrmModel.  # noqa: E501
        :type model_created_by: int
        """

        self._model_created_by = model_created_by

    @property
    def model_experiment(self):
        """Gets the model_experiment of this OrmModel.  # noqa: E501


        :return: The model_experiment of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._model_experiment

    @model_experiment.setter
    def model_experiment(self, model_experiment):
        """Sets the model_experiment of this OrmModel.


        :param model_experiment: The model_experiment of this OrmModel.  # noqa: E501
        :type model_experiment: int
        """

        self._model_experiment = model_experiment

    @property
    def model_model_repository(self):
        """Gets the model_model_repository of this OrmModel.  # noqa: E501


        :return: The model_model_repository of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._model_model_repository

    @model_model_repository.setter
    def model_model_repository(self, model_model_repository):
        """Sets the model_model_repository of this OrmModel.


        :param model_model_repository: The model_model_repository of this OrmModel.  # noqa: E501
        :type model_model_repository: int
        """

        self._model_model_repository = model_model_repository

    @property
    def model_original_artifact(self):
        """Gets the model_original_artifact of this OrmModel.  # noqa: E501


        :return: The model_original_artifact of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._model_original_artifact

    @model_original_artifact.setter
    def model_original_artifact(self, model_original_artifact):
        """Sets the model_original_artifact of this OrmModel.


        :param model_original_artifact: The model_original_artifact of this OrmModel.  # noqa: E501
        :type model_original_artifact: int
        """

        self._model_original_artifact = model_original_artifact

    @property
    def name(self):
        """Gets the name of this OrmModel.  # noqa: E501


        :return: The name of this OrmModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrmModel.


        :param name: The name of this OrmModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this OrmModel.  # noqa: E501


        :return: The number of this OrmModel.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrmModel.


        :param number: The number of this OrmModel.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def status(self):
        """Gets the status of this OrmModel.  # noqa: E501


        :return: The status of this OrmModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrmModel.


        :param status: The status of this OrmModel.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this OrmModel.  # noqa: E501


        :return: The status_last_updated of this OrmModel.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this OrmModel.


        :param status_last_updated: The status_last_updated of this OrmModel.  # noqa: E501
        :type status_last_updated: datetime
        """

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this OrmModel.  # noqa: E501


        :return: The status_reason of this OrmModel.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this OrmModel.


        :param status_reason: The status_reason of this OrmModel.  # noqa: E501
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmModel.  # noqa: E501


        :return: The updated_dt of this OrmModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmModel.


        :param updated_dt: The updated_dt of this OrmModel.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmModel):
            return True

        return self.to_dict() != other.to_dict()
