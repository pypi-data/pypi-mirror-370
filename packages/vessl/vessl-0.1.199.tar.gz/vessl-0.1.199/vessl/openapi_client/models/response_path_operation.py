# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponsePathOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'export': 'ResponseVolumeOperation',
        '_import': 'ResponseVolumeOperation',
        'mount': 'ResponseVolumeOperation',
        'path': 'str'
    }

    attribute_map = {
        'export': 'export',
        '_import': 'import',
        'mount': 'mount',
        'path': 'path'
    }

    def __init__(self, export=None, _import=None, mount=None, path=None, local_vars_configuration=None):  # noqa: E501
        """ResponsePathOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._export = None
        self.__import = None
        self._mount = None
        self._path = None
        self.discriminator = None

        if export is not None:
            self.export = export
        if _import is not None:
            self._import = _import
        if mount is not None:
            self.mount = mount
        if path is not None:
            self.path = path

    @property
    def export(self):
        """Gets the export of this ResponsePathOperation.  # noqa: E501


        :return: The export of this ResponsePathOperation.  # noqa: E501
        :rtype: ResponseVolumeOperation
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this ResponsePathOperation.


        :param export: The export of this ResponsePathOperation.  # noqa: E501
        :type export: ResponseVolumeOperation
        """

        self._export = export

    @property
    def _import(self):
        """Gets the _import of this ResponsePathOperation.  # noqa: E501


        :return: The _import of this ResponsePathOperation.  # noqa: E501
        :rtype: ResponseVolumeOperation
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this ResponsePathOperation.


        :param _import: The _import of this ResponsePathOperation.  # noqa: E501
        :type _import: ResponseVolumeOperation
        """

        self.__import = _import

    @property
    def mount(self):
        """Gets the mount of this ResponsePathOperation.  # noqa: E501


        :return: The mount of this ResponsePathOperation.  # noqa: E501
        :rtype: ResponseVolumeOperation
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this ResponsePathOperation.


        :param mount: The mount of this ResponsePathOperation.  # noqa: E501
        :type mount: ResponseVolumeOperation
        """

        self._mount = mount

    @property
    def path(self):
        """Gets the path of this ResponsePathOperation.  # noqa: E501


        :return: The path of this ResponsePathOperation.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponsePathOperation.


        :param path: The path of this ResponsePathOperation.  # noqa: E501
        :type path: str
        """

        self._path = path

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePathOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponsePathOperation):
            return True

        return self.to_dict() != other.to_dict()
