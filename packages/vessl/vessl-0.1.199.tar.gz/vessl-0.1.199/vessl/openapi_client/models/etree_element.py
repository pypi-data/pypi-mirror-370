# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class EtreeElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attr': 'list[EtreeAttr]',
        'child': 'list[object]',
        'space': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'attr': 'Attr',
        'child': 'Child',
        'space': 'Space',
        'tag': 'Tag'
    }

    def __init__(self, attr=None, child=None, space=None, tag=None, local_vars_configuration=None):  # noqa: E501
        """EtreeElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._attr = None
        self._child = None
        self._space = None
        self._tag = None
        self.discriminator = None

        if attr is not None:
            self.attr = attr
        if child is not None:
            self.child = child
        if space is not None:
            self.space = space
        if tag is not None:
            self.tag = tag

    @property
    def attr(self):
        """Gets the attr of this EtreeElement.  # noqa: E501


        :return: The attr of this EtreeElement.  # noqa: E501
        :rtype: list[EtreeAttr]
        """
        return self._attr

    @attr.setter
    def attr(self, attr):
        """Sets the attr of this EtreeElement.


        :param attr: The attr of this EtreeElement.  # noqa: E501
        :type attr: list[EtreeAttr]
        """

        self._attr = attr

    @property
    def child(self):
        """Gets the child of this EtreeElement.  # noqa: E501


        :return: The child of this EtreeElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this EtreeElement.


        :param child: The child of this EtreeElement.  # noqa: E501
        :type child: list[object]
        """

        self._child = child

    @property
    def space(self):
        """Gets the space of this EtreeElement.  # noqa: E501


        :return: The space of this EtreeElement.  # noqa: E501
        :rtype: str
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this EtreeElement.


        :param space: The space of this EtreeElement.  # noqa: E501
        :type space: str
        """

        self._space = space

    @property
    def tag(self):
        """Gets the tag of this EtreeElement.  # noqa: E501


        :return: The tag of this EtreeElement.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EtreeElement.


        :param tag: The tag of this EtreeElement.  # noqa: E501
        :type tag: str
        """

        self._tag = tag

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtreeElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtreeElement):
            return True

        return self.to_dict() != other.to_dict()
