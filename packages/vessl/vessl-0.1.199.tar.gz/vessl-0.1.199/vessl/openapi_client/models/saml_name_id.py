# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class SamlNameID(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'format': 'str',
        'name_qualifier': 'str',
        'sp_name_qualifier': 'str',
        'sp_provided_id': 'str',
        'value': 'str'
    }

    attribute_map = {
        'format': 'Format',
        'name_qualifier': 'NameQualifier',
        'sp_name_qualifier': 'SPNameQualifier',
        'sp_provided_id': 'SPProvidedID',
        'value': 'Value'
    }

    def __init__(self, format=None, name_qualifier=None, sp_name_qualifier=None, sp_provided_id=None, value=None, local_vars_configuration=None):  # noqa: E501
        """SamlNameID - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._format = None
        self._name_qualifier = None
        self._sp_name_qualifier = None
        self._sp_provided_id = None
        self._value = None
        self.discriminator = None

        if format is not None:
            self.format = format
        if name_qualifier is not None:
            self.name_qualifier = name_qualifier
        if sp_name_qualifier is not None:
            self.sp_name_qualifier = sp_name_qualifier
        if sp_provided_id is not None:
            self.sp_provided_id = sp_provided_id
        if value is not None:
            self.value = value

    @property
    def format(self):
        """Gets the format of this SamlNameID.  # noqa: E501


        :return: The format of this SamlNameID.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SamlNameID.


        :param format: The format of this SamlNameID.  # noqa: E501
        :type format: str
        """

        self._format = format

    @property
    def name_qualifier(self):
        """Gets the name_qualifier of this SamlNameID.  # noqa: E501


        :return: The name_qualifier of this SamlNameID.  # noqa: E501
        :rtype: str
        """
        return self._name_qualifier

    @name_qualifier.setter
    def name_qualifier(self, name_qualifier):
        """Sets the name_qualifier of this SamlNameID.


        :param name_qualifier: The name_qualifier of this SamlNameID.  # noqa: E501
        :type name_qualifier: str
        """

        self._name_qualifier = name_qualifier

    @property
    def sp_name_qualifier(self):
        """Gets the sp_name_qualifier of this SamlNameID.  # noqa: E501


        :return: The sp_name_qualifier of this SamlNameID.  # noqa: E501
        :rtype: str
        """
        return self._sp_name_qualifier

    @sp_name_qualifier.setter
    def sp_name_qualifier(self, sp_name_qualifier):
        """Sets the sp_name_qualifier of this SamlNameID.


        :param sp_name_qualifier: The sp_name_qualifier of this SamlNameID.  # noqa: E501
        :type sp_name_qualifier: str
        """

        self._sp_name_qualifier = sp_name_qualifier

    @property
    def sp_provided_id(self):
        """Gets the sp_provided_id of this SamlNameID.  # noqa: E501


        :return: The sp_provided_id of this SamlNameID.  # noqa: E501
        :rtype: str
        """
        return self._sp_provided_id

    @sp_provided_id.setter
    def sp_provided_id(self, sp_provided_id):
        """Sets the sp_provided_id of this SamlNameID.


        :param sp_provided_id: The sp_provided_id of this SamlNameID.  # noqa: E501
        :type sp_provided_id: str
        """

        self._sp_provided_id = sp_provided_id

    @property
    def value(self):
        """Gets the value of this SamlNameID.  # noqa: E501


        :return: The value of this SamlNameID.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SamlNameID.


        :param value: The value of this SamlNameID.  # noqa: E501
        :type value: str
        """

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlNameID):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlNameID):
            return True

        return self.to_dict() != other.to_dict()
