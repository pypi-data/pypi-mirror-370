# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ReadinessProbe(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_exec': 'V1ReadinessProbeExec',
        'grpc': 'V1ReadinessProbeGRPC',
        'http_get': 'V1ReadinessProbeHTTPGet',
        'path': 'str',
        'port': 'str',
        'tcp_socket': 'V1ReadinessProbeTCPSocket',
        'type': 'str'
    }

    attribute_map = {
        '_exec': 'exec',
        'grpc': 'grpc',
        'http_get': 'http_get',
        'path': 'path',
        'port': 'port',
        'tcp_socket': 'tcp_socket',
        'type': 'type'
    }

    def __init__(self, _exec=None, grpc=None, http_get=None, path=None, port=None, tcp_socket=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V1ReadinessProbe - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self.__exec = None
        self._grpc = None
        self._http_get = None
        self._path = None
        self._port = None
        self._tcp_socket = None
        self._type = None
        self.discriminator = None

        if _exec is not None:
            self._exec = _exec
        if grpc is not None:
            self.grpc = grpc
        if http_get is not None:
            self.http_get = http_get
        self.path = path
        self.port = port
        if tcp_socket is not None:
            self.tcp_socket = tcp_socket
        if type is not None:
            self.type = type

    @property
    def _exec(self):
        """Gets the _exec of this V1ReadinessProbe.  # noqa: E501


        :return: The _exec of this V1ReadinessProbe.  # noqa: E501
        :rtype: V1ReadinessProbeExec
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this V1ReadinessProbe.


        :param _exec: The _exec of this V1ReadinessProbe.  # noqa: E501
        :type _exec: V1ReadinessProbeExec
        """

        self.__exec = _exec

    @property
    def grpc(self):
        """Gets the grpc of this V1ReadinessProbe.  # noqa: E501


        :return: The grpc of this V1ReadinessProbe.  # noqa: E501
        :rtype: V1ReadinessProbeGRPC
        """
        return self._grpc

    @grpc.setter
    def grpc(self, grpc):
        """Sets the grpc of this V1ReadinessProbe.


        :param grpc: The grpc of this V1ReadinessProbe.  # noqa: E501
        :type grpc: V1ReadinessProbeGRPC
        """

        self._grpc = grpc

    @property
    def http_get(self):
        """Gets the http_get of this V1ReadinessProbe.  # noqa: E501


        :return: The http_get of this V1ReadinessProbe.  # noqa: E501
        :rtype: V1ReadinessProbeHTTPGet
        """
        return self._http_get

    @http_get.setter
    def http_get(self, http_get):
        """Sets the http_get of this V1ReadinessProbe.


        :param http_get: The http_get of this V1ReadinessProbe.  # noqa: E501
        :type http_get: V1ReadinessProbeHTTPGet
        """

        self._http_get = http_get

    @property
    def path(self):
        """Gets the path of this V1ReadinessProbe.  # noqa: E501


        :return: The path of this V1ReadinessProbe.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1ReadinessProbe.


        :param path: The path of this V1ReadinessProbe.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this V1ReadinessProbe.  # noqa: E501


        :return: The port of this V1ReadinessProbe.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V1ReadinessProbe.


        :param port: The port of this V1ReadinessProbe.  # noqa: E501
        :type port: str
        """

        self._port = port

    @property
    def tcp_socket(self):
        """Gets the tcp_socket of this V1ReadinessProbe.  # noqa: E501


        :return: The tcp_socket of this V1ReadinessProbe.  # noqa: E501
        :rtype: V1ReadinessProbeTCPSocket
        """
        return self._tcp_socket

    @tcp_socket.setter
    def tcp_socket(self, tcp_socket):
        """Sets the tcp_socket of this V1ReadinessProbe.


        :param tcp_socket: The tcp_socket of this V1ReadinessProbe.  # noqa: E501
        :type tcp_socket: V1ReadinessProbeTCPSocket
        """

        self._tcp_socket = tcp_socket

    @property
    def type(self):
        """Gets the type of this V1ReadinessProbe.  # noqa: E501


        :return: The type of this V1ReadinessProbe.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1ReadinessProbe.


        :param type: The type of this V1ReadinessProbe.  # noqa: E501
        :type type: str
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ReadinessProbe):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ReadinessProbe):
            return True

        return self.to_dict() != other.to_dict()
