# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class V1ManualInputSpecInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assignee_email_addresses': 'list[str]',
        'judgment': 'V1BranchingCondition',
        'variable_specs': 'dict[str, V1SingleVariableSpec]'
    }

    attribute_map = {
        'assignee_email_addresses': 'assignee_email_addresses',
        'judgment': 'judgment',
        'variable_specs': 'variable_specs'
    }

    def __init__(self, assignee_email_addresses=None, judgment=None, variable_specs=None, local_vars_configuration=None):  # noqa: E501
        """V1ManualInputSpecInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._assignee_email_addresses = None
        self._judgment = None
        self._variable_specs = None
        self.discriminator = None

        if assignee_email_addresses is not None:
            self.assignee_email_addresses = assignee_email_addresses
        if judgment is not None:
            self.judgment = judgment
        if variable_specs is not None:
            self.variable_specs = variable_specs

    @property
    def assignee_email_addresses(self):
        """Gets the assignee_email_addresses of this V1ManualInputSpecInput.  # noqa: E501


        :return: The assignee_email_addresses of this V1ManualInputSpecInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignee_email_addresses

    @assignee_email_addresses.setter
    def assignee_email_addresses(self, assignee_email_addresses):
        """Sets the assignee_email_addresses of this V1ManualInputSpecInput.


        :param assignee_email_addresses: The assignee_email_addresses of this V1ManualInputSpecInput.  # noqa: E501
        :type assignee_email_addresses: list[str]
        """

        self._assignee_email_addresses = assignee_email_addresses

    @property
    def judgment(self):
        """Gets the judgment of this V1ManualInputSpecInput.  # noqa: E501


        :return: The judgment of this V1ManualInputSpecInput.  # noqa: E501
        :rtype: V1BranchingCondition
        """
        return self._judgment

    @judgment.setter
    def judgment(self, judgment):
        """Sets the judgment of this V1ManualInputSpecInput.


        :param judgment: The judgment of this V1ManualInputSpecInput.  # noqa: E501
        :type judgment: V1BranchingCondition
        """

        self._judgment = judgment

    @property
    def variable_specs(self):
        """Gets the variable_specs of this V1ManualInputSpecInput.  # noqa: E501


        :return: The variable_specs of this V1ManualInputSpecInput.  # noqa: E501
        :rtype: dict[str, V1SingleVariableSpec]
        """
        return self._variable_specs

    @variable_specs.setter
    def variable_specs(self, variable_specs):
        """Sets the variable_specs of this V1ManualInputSpecInput.


        :param variable_specs: The variable_specs of this V1ManualInputSpecInput.  # noqa: E501
        :type variable_specs: dict[str, V1SingleVariableSpec]
        """

        self._variable_specs = variable_specs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ManualInputSpecInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ManualInputSpecInput):
            return True

        return self.to_dict() != other.to_dict()
