# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmLocalExecutionSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_count': 'float',
        'gpu_count': 'int',
        'gpu_type': 'str',
        'hostname': 'str',
        'os': 'str',
        'output_volume_id': 'int',
        'python_executable': 'str',
        'python_version': 'str',
        'start_command': 'str',
        'vessl_version': 'str'
    }

    attribute_map = {
        'cpu_count': 'cpu_count',
        'gpu_count': 'gpu_count',
        'gpu_type': 'gpu_type',
        'hostname': 'hostname',
        'os': 'os',
        'output_volume_id': 'output_volume_id',
        'python_executable': 'python_executable',
        'python_version': 'python_version',
        'start_command': 'start_command',
        'vessl_version': 'vessl_version'
    }

    def __init__(self, cpu_count=None, gpu_count=None, gpu_type=None, hostname=None, os=None, output_volume_id=None, python_executable=None, python_version=None, start_command=None, vessl_version=None, local_vars_configuration=None):  # noqa: E501
        """OrmLocalExecutionSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_count = None
        self._gpu_count = None
        self._gpu_type = None
        self._hostname = None
        self._os = None
        self._output_volume_id = None
        self._python_executable = None
        self._python_version = None
        self._start_command = None
        self._vessl_version = None
        self.discriminator = None

        self.cpu_count = cpu_count
        self.gpu_count = gpu_count
        self.gpu_type = gpu_type
        self.hostname = hostname
        self.os = os
        self.output_volume_id = output_volume_id
        self.python_executable = python_executable
        self.python_version = python_version
        self.start_command = start_command
        self.vessl_version = vessl_version

    @property
    def cpu_count(self):
        """Gets the cpu_count of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The cpu_count of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: float
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this OrmLocalExecutionSpec.


        :param cpu_count: The cpu_count of this OrmLocalExecutionSpec.  # noqa: E501
        :type cpu_count: float
        """

        self._cpu_count = cpu_count

    @property
    def gpu_count(self):
        """Gets the gpu_count of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The gpu_count of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count):
        """Sets the gpu_count of this OrmLocalExecutionSpec.


        :param gpu_count: The gpu_count of this OrmLocalExecutionSpec.  # noqa: E501
        :type gpu_count: int
        """

        self._gpu_count = gpu_count

    @property
    def gpu_type(self):
        """Gets the gpu_type of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The gpu_type of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._gpu_type

    @gpu_type.setter
    def gpu_type(self, gpu_type):
        """Sets the gpu_type of this OrmLocalExecutionSpec.


        :param gpu_type: The gpu_type of this OrmLocalExecutionSpec.  # noqa: E501
        :type gpu_type: str
        """

        self._gpu_type = gpu_type

    @property
    def hostname(self):
        """Gets the hostname of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The hostname of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OrmLocalExecutionSpec.


        :param hostname: The hostname of this OrmLocalExecutionSpec.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def os(self):
        """Gets the os of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The os of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this OrmLocalExecutionSpec.


        :param os: The os of this OrmLocalExecutionSpec.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def output_volume_id(self):
        """Gets the output_volume_id of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The output_volume_id of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: int
        """
        return self._output_volume_id

    @output_volume_id.setter
    def output_volume_id(self, output_volume_id):
        """Sets the output_volume_id of this OrmLocalExecutionSpec.


        :param output_volume_id: The output_volume_id of this OrmLocalExecutionSpec.  # noqa: E501
        :type output_volume_id: int
        """
        if self.local_vars_configuration.client_side_validation and output_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `output_volume_id`, must not be `None`")  # noqa: E501

        self._output_volume_id = output_volume_id

    @property
    def python_executable(self):
        """Gets the python_executable of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The python_executable of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._python_executable

    @python_executable.setter
    def python_executable(self, python_executable):
        """Sets the python_executable of this OrmLocalExecutionSpec.


        :param python_executable: The python_executable of this OrmLocalExecutionSpec.  # noqa: E501
        :type python_executable: str
        """

        self._python_executable = python_executable

    @property
    def python_version(self):
        """Gets the python_version of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The python_version of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this OrmLocalExecutionSpec.


        :param python_version: The python_version of this OrmLocalExecutionSpec.  # noqa: E501
        :type python_version: str
        """

        self._python_version = python_version

    @property
    def start_command(self):
        """Gets the start_command of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The start_command of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this OrmLocalExecutionSpec.


        :param start_command: The start_command of this OrmLocalExecutionSpec.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def vessl_version(self):
        """Gets the vessl_version of this OrmLocalExecutionSpec.  # noqa: E501


        :return: The vessl_version of this OrmLocalExecutionSpec.  # noqa: E501
        :rtype: str
        """
        return self._vessl_version

    @vessl_version.setter
    def vessl_version(self, vessl_version):
        """Sets the vessl_version of this OrmLocalExecutionSpec.


        :param vessl_version: The vessl_version of this OrmLocalExecutionSpec.  # noqa: E501
        :type vessl_version: str
        """

        self._vessl_version = vessl_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmLocalExecutionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmLocalExecutionSpec):
            return True

        return self.to_dict() != other.to_dict()
