# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmKernelCluster(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'default_storage_id': 'int',
        'edges': 'OrmKernelClusterEdges',
        'id': 'int',
        'immutable_slug': 'str',
        'influx_bucket_name': 'str',
        'is_credit_charged': 'bool',
        'is_custom_endpoint_enabled': 'bool',
        'is_custom_resource_spec_allowed': 'bool',
        'is_public': 'bool',
        'is_vessl_managed': 'bool',
        'kubernetes_container_runtime': 'str',
        'metric_source': 'str',
        'name': 'str',
        'primary_owner_organization_id': 'int',
        'provider': 'str',
        'region_id': 'int',
        'suspended': 'bool',
        'updated_dt': 'datetime',
        'workload_service_type': 'str'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'default_storage_id': 'default_storage_id',
        'edges': 'edges',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'influx_bucket_name': 'influx_bucket_name',
        'is_credit_charged': 'is_credit_charged',
        'is_custom_endpoint_enabled': 'is_custom_endpoint_enabled',
        'is_custom_resource_spec_allowed': 'is_custom_resource_spec_allowed',
        'is_public': 'is_public',
        'is_vessl_managed': 'is_vessl_managed',
        'kubernetes_container_runtime': 'kubernetes_container_runtime',
        'metric_source': 'metric_source',
        'name': 'name',
        'primary_owner_organization_id': 'primary_owner_organization_id',
        'provider': 'provider',
        'region_id': 'region_id',
        'suspended': 'suspended',
        'updated_dt': 'updated_dt',
        'workload_service_type': 'workload_service_type'
    }

    def __init__(self, created_dt=None, default_storage_id=None, edges=None, id=None, immutable_slug=None, influx_bucket_name=None, is_credit_charged=None, is_custom_endpoint_enabled=None, is_custom_resource_spec_allowed=None, is_public=None, is_vessl_managed=None, kubernetes_container_runtime=None, metric_source=None, name=None, primary_owner_organization_id=None, provider=None, region_id=None, suspended=None, updated_dt=None, workload_service_type=None, local_vars_configuration=None):  # noqa: E501
        """OrmKernelCluster - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._default_storage_id = None
        self._edges = None
        self._id = None
        self._immutable_slug = None
        self._influx_bucket_name = None
        self._is_credit_charged = None
        self._is_custom_endpoint_enabled = None
        self._is_custom_resource_spec_allowed = None
        self._is_public = None
        self._is_vessl_managed = None
        self._kubernetes_container_runtime = None
        self._metric_source = None
        self._name = None
        self._primary_owner_organization_id = None
        self._provider = None
        self._region_id = None
        self._suspended = None
        self._updated_dt = None
        self._workload_service_type = None
        self.discriminator = None

        if created_dt is not None:
            self.created_dt = created_dt
        if default_storage_id is not None:
            self.default_storage_id = default_storage_id
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        self.influx_bucket_name = influx_bucket_name
        if is_credit_charged is not None:
            self.is_credit_charged = is_credit_charged
        if is_custom_endpoint_enabled is not None:
            self.is_custom_endpoint_enabled = is_custom_endpoint_enabled
        if is_custom_resource_spec_allowed is not None:
            self.is_custom_resource_spec_allowed = is_custom_resource_spec_allowed
        if is_public is not None:
            self.is_public = is_public
        if is_vessl_managed is not None:
            self.is_vessl_managed = is_vessl_managed
        if kubernetes_container_runtime is not None:
            self.kubernetes_container_runtime = kubernetes_container_runtime
        self.metric_source = metric_source
        if name is not None:
            self.name = name
        if primary_owner_organization_id is not None:
            self.primary_owner_organization_id = primary_owner_organization_id
        if provider is not None:
            self.provider = provider
        if region_id is not None:
            self.region_id = region_id
        if suspended is not None:
            self.suspended = suspended
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if workload_service_type is not None:
            self.workload_service_type = workload_service_type

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmKernelCluster.  # noqa: E501


        :return: The created_dt of this OrmKernelCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmKernelCluster.


        :param created_dt: The created_dt of this OrmKernelCluster.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def default_storage_id(self):
        """Gets the default_storage_id of this OrmKernelCluster.  # noqa: E501


        :return: The default_storage_id of this OrmKernelCluster.  # noqa: E501
        :rtype: int
        """
        return self._default_storage_id

    @default_storage_id.setter
    def default_storage_id(self, default_storage_id):
        """Sets the default_storage_id of this OrmKernelCluster.


        :param default_storage_id: The default_storage_id of this OrmKernelCluster.  # noqa: E501
        :type default_storage_id: int
        """

        self._default_storage_id = default_storage_id

    @property
    def edges(self):
        """Gets the edges of this OrmKernelCluster.  # noqa: E501


        :return: The edges of this OrmKernelCluster.  # noqa: E501
        :rtype: OrmKernelClusterEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmKernelCluster.


        :param edges: The edges of this OrmKernelCluster.  # noqa: E501
        :type edges: OrmKernelClusterEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmKernelCluster.  # noqa: E501


        :return: The id of this OrmKernelCluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmKernelCluster.


        :param id: The id of this OrmKernelCluster.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmKernelCluster.  # noqa: E501


        :return: The immutable_slug of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmKernelCluster.


        :param immutable_slug: The immutable_slug of this OrmKernelCluster.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def influx_bucket_name(self):
        """Gets the influx_bucket_name of this OrmKernelCluster.  # noqa: E501


        :return: The influx_bucket_name of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._influx_bucket_name

    @influx_bucket_name.setter
    def influx_bucket_name(self, influx_bucket_name):
        """Sets the influx_bucket_name of this OrmKernelCluster.


        :param influx_bucket_name: The influx_bucket_name of this OrmKernelCluster.  # noqa: E501
        :type influx_bucket_name: str
        """

        self._influx_bucket_name = influx_bucket_name

    @property
    def is_credit_charged(self):
        """Gets the is_credit_charged of this OrmKernelCluster.  # noqa: E501


        :return: The is_credit_charged of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_credit_charged

    @is_credit_charged.setter
    def is_credit_charged(self, is_credit_charged):
        """Sets the is_credit_charged of this OrmKernelCluster.


        :param is_credit_charged: The is_credit_charged of this OrmKernelCluster.  # noqa: E501
        :type is_credit_charged: bool
        """

        self._is_credit_charged = is_credit_charged

    @property
    def is_custom_endpoint_enabled(self):
        """Gets the is_custom_endpoint_enabled of this OrmKernelCluster.  # noqa: E501


        :return: The is_custom_endpoint_enabled of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom_endpoint_enabled

    @is_custom_endpoint_enabled.setter
    def is_custom_endpoint_enabled(self, is_custom_endpoint_enabled):
        """Sets the is_custom_endpoint_enabled of this OrmKernelCluster.


        :param is_custom_endpoint_enabled: The is_custom_endpoint_enabled of this OrmKernelCluster.  # noqa: E501
        :type is_custom_endpoint_enabled: bool
        """

        self._is_custom_endpoint_enabled = is_custom_endpoint_enabled

    @property
    def is_custom_resource_spec_allowed(self):
        """Gets the is_custom_resource_spec_allowed of this OrmKernelCluster.  # noqa: E501


        :return: The is_custom_resource_spec_allowed of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom_resource_spec_allowed

    @is_custom_resource_spec_allowed.setter
    def is_custom_resource_spec_allowed(self, is_custom_resource_spec_allowed):
        """Sets the is_custom_resource_spec_allowed of this OrmKernelCluster.


        :param is_custom_resource_spec_allowed: The is_custom_resource_spec_allowed of this OrmKernelCluster.  # noqa: E501
        :type is_custom_resource_spec_allowed: bool
        """

        self._is_custom_resource_spec_allowed = is_custom_resource_spec_allowed

    @property
    def is_public(self):
        """Gets the is_public of this OrmKernelCluster.  # noqa: E501


        :return: The is_public of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this OrmKernelCluster.


        :param is_public: The is_public of this OrmKernelCluster.  # noqa: E501
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def is_vessl_managed(self):
        """Gets the is_vessl_managed of this OrmKernelCluster.  # noqa: E501


        :return: The is_vessl_managed of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_vessl_managed

    @is_vessl_managed.setter
    def is_vessl_managed(self, is_vessl_managed):
        """Sets the is_vessl_managed of this OrmKernelCluster.


        :param is_vessl_managed: The is_vessl_managed of this OrmKernelCluster.  # noqa: E501
        :type is_vessl_managed: bool
        """

        self._is_vessl_managed = is_vessl_managed

    @property
    def kubernetes_container_runtime(self):
        """Gets the kubernetes_container_runtime of this OrmKernelCluster.  # noqa: E501


        :return: The kubernetes_container_runtime of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_container_runtime

    @kubernetes_container_runtime.setter
    def kubernetes_container_runtime(self, kubernetes_container_runtime):
        """Sets the kubernetes_container_runtime of this OrmKernelCluster.


        :param kubernetes_container_runtime: The kubernetes_container_runtime of this OrmKernelCluster.  # noqa: E501
        :type kubernetes_container_runtime: str
        """

        self._kubernetes_container_runtime = kubernetes_container_runtime

    @property
    def metric_source(self):
        """Gets the metric_source of this OrmKernelCluster.  # noqa: E501


        :return: The metric_source of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._metric_source

    @metric_source.setter
    def metric_source(self, metric_source):
        """Sets the metric_source of this OrmKernelCluster.


        :param metric_source: The metric_source of this OrmKernelCluster.  # noqa: E501
        :type metric_source: str
        """

        self._metric_source = metric_source

    @property
    def name(self):
        """Gets the name of this OrmKernelCluster.  # noqa: E501


        :return: The name of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrmKernelCluster.


        :param name: The name of this OrmKernelCluster.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def primary_owner_organization_id(self):
        """Gets the primary_owner_organization_id of this OrmKernelCluster.  # noqa: E501


        :return: The primary_owner_organization_id of this OrmKernelCluster.  # noqa: E501
        :rtype: int
        """
        return self._primary_owner_organization_id

    @primary_owner_organization_id.setter
    def primary_owner_organization_id(self, primary_owner_organization_id):
        """Sets the primary_owner_organization_id of this OrmKernelCluster.


        :param primary_owner_organization_id: The primary_owner_organization_id of this OrmKernelCluster.  # noqa: E501
        :type primary_owner_organization_id: int
        """

        self._primary_owner_organization_id = primary_owner_organization_id

    @property
    def provider(self):
        """Gets the provider of this OrmKernelCluster.  # noqa: E501


        :return: The provider of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this OrmKernelCluster.


        :param provider: The provider of this OrmKernelCluster.  # noqa: E501
        :type provider: str
        """

        self._provider = provider

    @property
    def region_id(self):
        """Gets the region_id of this OrmKernelCluster.  # noqa: E501


        :return: The region_id of this OrmKernelCluster.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this OrmKernelCluster.


        :param region_id: The region_id of this OrmKernelCluster.  # noqa: E501
        :type region_id: int
        """

        self._region_id = region_id

    @property
    def suspended(self):
        """Gets the suspended of this OrmKernelCluster.  # noqa: E501


        :return: The suspended of this OrmKernelCluster.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this OrmKernelCluster.


        :param suspended: The suspended of this OrmKernelCluster.  # noqa: E501
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmKernelCluster.  # noqa: E501


        :return: The updated_dt of this OrmKernelCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmKernelCluster.


        :param updated_dt: The updated_dt of this OrmKernelCluster.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def workload_service_type(self):
        """Gets the workload_service_type of this OrmKernelCluster.  # noqa: E501


        :return: The workload_service_type of this OrmKernelCluster.  # noqa: E501
        :rtype: str
        """
        return self._workload_service_type

    @workload_service_type.setter
    def workload_service_type(self, workload_service_type):
        """Sets the workload_service_type of this OrmKernelCluster.


        :param workload_service_type: The workload_service_type of this OrmKernelCluster.  # noqa: E501
        :type workload_service_type: str
        """

        self._workload_service_type = workload_service_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmKernelCluster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmKernelCluster):
            return True

        return self.to_dict() != other.to_dict()
