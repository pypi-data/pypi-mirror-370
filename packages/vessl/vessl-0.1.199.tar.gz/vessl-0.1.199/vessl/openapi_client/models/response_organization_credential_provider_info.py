# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseOrganizationCredentialProviderInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_url': 'str',
        'created_dt': 'datetime',
        'id': 'int',
        'identity': 'str',
        'is_vessl_managed': 'bool',
        'kind': 'str',
        'name': 'str'
    }

    attribute_map = {
        'base_url': 'base_url',
        'created_dt': 'created_dt',
        'id': 'id',
        'identity': 'identity',
        'is_vessl_managed': 'is_vessl_managed',
        'kind': 'kind',
        'name': 'name'
    }

    def __init__(self, base_url=None, created_dt=None, id=None, identity=None, is_vessl_managed=None, kind=None, name=None, local_vars_configuration=None):  # noqa: E501
        """ResponseOrganizationCredentialProviderInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base_url = None
        self._created_dt = None
        self._id = None
        self._identity = None
        self._is_vessl_managed = None
        self._kind = None
        self._name = None
        self.discriminator = None

        self.base_url = base_url
        self.created_dt = created_dt
        self.id = id
        self.identity = identity
        if is_vessl_managed is not None:
            self.is_vessl_managed = is_vessl_managed
        self.kind = kind
        self.name = name

    @property
    def base_url(self):
        """Gets the base_url of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The base_url of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ResponseOrganizationCredentialProviderInfo.


        :param base_url: The base_url of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type base_url: str
        """
        if self.local_vars_configuration.client_side_validation and base_url is None:  # noqa: E501
            raise ValueError("Invalid value for `base_url`, must not be `None`")  # noqa: E501

        self._base_url = base_url

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The created_dt of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseOrganizationCredentialProviderInfo.


        :param created_dt: The created_dt of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def id(self):
        """Gets the id of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The id of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseOrganizationCredentialProviderInfo.


        :param id: The id of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def identity(self):
        """Gets the identity of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The identity of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ResponseOrganizationCredentialProviderInfo.


        :param identity: The identity of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type identity: str
        """
        if self.local_vars_configuration.client_side_validation and identity is None:  # noqa: E501
            raise ValueError("Invalid value for `identity`, must not be `None`")  # noqa: E501

        self._identity = identity

    @property
    def is_vessl_managed(self):
        """Gets the is_vessl_managed of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The is_vessl_managed of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_vessl_managed

    @is_vessl_managed.setter
    def is_vessl_managed(self, is_vessl_managed):
        """Sets the is_vessl_managed of this ResponseOrganizationCredentialProviderInfo.


        :param is_vessl_managed: The is_vessl_managed of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type is_vessl_managed: bool
        """

        self._is_vessl_managed = is_vessl_managed

    @property
    def kind(self):
        """Gets the kind of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The kind of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResponseOrganizationCredentialProviderInfo.


        :param kind: The kind of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type kind: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501


        :return: The name of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseOrganizationCredentialProviderInfo.


        :param name: The name of this ResponseOrganizationCredentialProviderInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseOrganizationCredentialProviderInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseOrganizationCredentialProviderInfo):
            return True

        return self.to_dict() != other.to_dict()
