# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class OrmPipelineSpecEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'executions': 'list[OrmPipelineExecution]',
        'hub_model_task': 'OrmHubModelTask',
        'pipeline': 'OrmPipeline',
        'pipeline_step_specs': 'list[OrmPipelineStepSpec]'
    }

    attribute_map = {
        'executions': 'executions',
        'hub_model_task': 'hub_model_task',
        'pipeline': 'pipeline',
        'pipeline_step_specs': 'pipeline_step_specs'
    }

    def __init__(self, executions=None, hub_model_task=None, pipeline=None, pipeline_step_specs=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineSpecEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._executions = None
        self._hub_model_task = None
        self._pipeline = None
        self._pipeline_step_specs = None
        self.discriminator = None

        if executions is not None:
            self.executions = executions
        if hub_model_task is not None:
            self.hub_model_task = hub_model_task
        if pipeline is not None:
            self.pipeline = pipeline
        if pipeline_step_specs is not None:
            self.pipeline_step_specs = pipeline_step_specs

    @property
    def executions(self):
        """Gets the executions of this OrmPipelineSpecEdges.  # noqa: E501


        :return: The executions of this OrmPipelineSpecEdges.  # noqa: E501
        :rtype: list[OrmPipelineExecution]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this OrmPipelineSpecEdges.


        :param executions: The executions of this OrmPipelineSpecEdges.  # noqa: E501
        :type executions: list[OrmPipelineExecution]
        """

        self._executions = executions

    @property
    def hub_model_task(self):
        """Gets the hub_model_task of this OrmPipelineSpecEdges.  # noqa: E501


        :return: The hub_model_task of this OrmPipelineSpecEdges.  # noqa: E501
        :rtype: OrmHubModelTask
        """
        return self._hub_model_task

    @hub_model_task.setter
    def hub_model_task(self, hub_model_task):
        """Sets the hub_model_task of this OrmPipelineSpecEdges.


        :param hub_model_task: The hub_model_task of this OrmPipelineSpecEdges.  # noqa: E501
        :type hub_model_task: OrmHubModelTask
        """

        self._hub_model_task = hub_model_task

    @property
    def pipeline(self):
        """Gets the pipeline of this OrmPipelineSpecEdges.  # noqa: E501


        :return: The pipeline of this OrmPipelineSpecEdges.  # noqa: E501
        :rtype: OrmPipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this OrmPipelineSpecEdges.


        :param pipeline: The pipeline of this OrmPipelineSpecEdges.  # noqa: E501
        :type pipeline: OrmPipeline
        """

        self._pipeline = pipeline

    @property
    def pipeline_step_specs(self):
        """Gets the pipeline_step_specs of this OrmPipelineSpecEdges.  # noqa: E501


        :return: The pipeline_step_specs of this OrmPipelineSpecEdges.  # noqa: E501
        :rtype: list[OrmPipelineStepSpec]
        """
        return self._pipeline_step_specs

    @pipeline_step_specs.setter
    def pipeline_step_specs(self, pipeline_step_specs):
        """Sets the pipeline_step_specs of this OrmPipelineSpecEdges.


        :param pipeline_step_specs: The pipeline_step_specs of this OrmPipelineSpecEdges.  # noqa: E501
        :type pipeline_step_specs: list[OrmPipelineStepSpec]
        """

        self._pipeline_step_specs = pipeline_step_specs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineSpecEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineSpecEdges):
            return True

        return self.to_dict() != other.to_dict()
