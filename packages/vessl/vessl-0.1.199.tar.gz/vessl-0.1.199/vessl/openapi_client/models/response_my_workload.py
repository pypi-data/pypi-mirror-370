# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vessl.openapi_client.configuration import Configuration


class ResponseMyWorkload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiments': 'list[ResponseExperimentListResponse]',
        'model_service_revisions': 'list[ResponseModelServiceRevision]',
        'organization': 'ResponseOrganization',
        'workspaces': 'list[ResponseWorkspaceList]'
    }

    attribute_map = {
        'experiments': 'experiments',
        'model_service_revisions': 'model_service_revisions',
        'organization': 'organization',
        'workspaces': 'workspaces'
    }

    def __init__(self, experiments=None, model_service_revisions=None, organization=None, workspaces=None, local_vars_configuration=None):  # noqa: E501
        """ResponseMyWorkload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._experiments = None
        self._model_service_revisions = None
        self._organization = None
        self._workspaces = None
        self.discriminator = None

        if experiments is not None:
            self.experiments = experiments
        if model_service_revisions is not None:
            self.model_service_revisions = model_service_revisions
        if organization is not None:
            self.organization = organization
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def experiments(self):
        """Gets the experiments of this ResponseMyWorkload.  # noqa: E501


        :return: The experiments of this ResponseMyWorkload.  # noqa: E501
        :rtype: list[ResponseExperimentListResponse]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this ResponseMyWorkload.


        :param experiments: The experiments of this ResponseMyWorkload.  # noqa: E501
        :type experiments: list[ResponseExperimentListResponse]
        """

        self._experiments = experiments

    @property
    def model_service_revisions(self):
        """Gets the model_service_revisions of this ResponseMyWorkload.  # noqa: E501


        :return: The model_service_revisions of this ResponseMyWorkload.  # noqa: E501
        :rtype: list[ResponseModelServiceRevision]
        """
        return self._model_service_revisions

    @model_service_revisions.setter
    def model_service_revisions(self, model_service_revisions):
        """Sets the model_service_revisions of this ResponseMyWorkload.


        :param model_service_revisions: The model_service_revisions of this ResponseMyWorkload.  # noqa: E501
        :type model_service_revisions: list[ResponseModelServiceRevision]
        """

        self._model_service_revisions = model_service_revisions

    @property
    def organization(self):
        """Gets the organization of this ResponseMyWorkload.  # noqa: E501


        :return: The organization of this ResponseMyWorkload.  # noqa: E501
        :rtype: ResponseOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResponseMyWorkload.


        :param organization: The organization of this ResponseMyWorkload.  # noqa: E501
        :type organization: ResponseOrganization
        """

        self._organization = organization

    @property
    def workspaces(self):
        """Gets the workspaces of this ResponseMyWorkload.  # noqa: E501


        :return: The workspaces of this ResponseMyWorkload.  # noqa: E501
        :rtype: list[ResponseWorkspaceList]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this ResponseMyWorkload.


        :param workspaces: The workspaces of this ResponseMyWorkload.  # noqa: E501
        :type workspaces: list[ResponseWorkspaceList]
        """

        self._workspaces = workspaces

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseMyWorkload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseMyWorkload):
            return True

        return self.to_dict() != other.to_dict()
