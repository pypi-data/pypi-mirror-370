"""
    Copyright 2023 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import std
import files


entity Value:
    """
    A value present in a json file.  This is an abstract entity, it should be
    extended for each type of value that can be set in the desired state.
    The children entities should have one attribute: `value`, that should contain
    the value to enforce, whichever type it is.

    :attr path: A dict path expression pointing to an element in the json
        file.  The dict path operation should respect what is defined here
        https://github.com/inmanta/inmanta-core/blob/master/src/inmanta/util/dict_path.py
    :attr operation: The way the value should be enforced in the file.
    """
    string path
    files::operation_t operation = "replace"
end

index Value(json_file, path)


entity Object extends Value:
    """
    A json object value in a json file.

    :attr value: The dict value to set for this value.
    """
    dict value
end

implement Object using std::none


entity DiscoveredValue:
    """
    Define a (wild) path that should be used to discover all the values
    it points to.  The discovered values will be assigned to the values dict,
    each key being the path that points to the value it is mapped to.

    :param path: The wild path to use to discover values
    :param values: The discovered values, as a mapping of the path of the value
        to the value itself.
    """
    string path
    dict values
end

index DiscoveredValue(json_file, path)

implementation get_values for DiscoveredValue:
    """
    Get the discovered values from facts.
    """
    self.values = get_json_fact(self.json_file, self.path, soft_fail=true)
end

implement DiscoveredValue using get_values
