# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.payload import Payload
from ..core.request_options import RequestOptions
from ..types.evaluation import Evaluation
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.not_found_error import NotFoundError
from ..errors.gateway_timeout_error import GatewayTimeoutError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EvaluationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        payloads: typing.Sequence[Payload],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Evaluation:
        """
        Creates a new evaluation task for the specified payloads.

        Returns immediately with the created evaluation's initial state.

        Parameters
        ----------
        payloads : typing.Sequence[Payload]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Evaluation
            Evaluation successfully created. Returns the initial evaluation state.

        Examples
        --------
        from parlant.client import (
            GuidelineContent,
            GuidelinePayload,
            ParlantClient,
            Payload,
            ToolId,
        )

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.evaluations.create(
            payloads=[
                Payload(
                    guideline=GuidelinePayload(
                        content=GuidelineContent(
                            condition="when customer asks about pricing",
                        ),
                        tool_ids=[
                            ToolId(
                                service_name="email_service",
                                tool_name="send_email",
                            )
                        ],
                        operation="add",
                        action_proposition=True,
                    ),
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "evaluations",
            method="POST",
            json={
                "payloads": convert_and_respect_annotation_metadata(
                    object_=payloads,
                    annotation=typing.Sequence[Payload],
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Evaluation,
                    parse_obj_as(
                        type_=Evaluation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        evaluation_id: str,
        *,
        wait_for_completion: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Evaluation:
        """
        Retrieves the current state of an evaluation.

        * If wait_for_completion == 0, returns current state immediately.
        * If wait_for_completion > 0, waits for completion/failure or timeout. Defaults to 60.

        Notes:
        When wait_for_completion > 0:
        - Returns final state if evaluation completes within timeout
        - Raises 504 if timeout is reached before completion

        Parameters
        ----------
        evaluation_id : str
            Unique identifier of the evaluation to retrieve

        wait_for_completion : typing.Optional[int]
            Maximum time in seconds to wait for evaluation completion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Evaluation
            Evaluation details successfully retrieved.

        Examples
        --------
        from parlant.client import ParlantClient

        client = ParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )
        client.evaluations.retrieve(
            evaluation_id="eval_123xz",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluations/{jsonable_encoder(evaluation_id)}",
            method="GET",
            params={
                "wait_for_completion": wait_for_completion,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Evaluation,
                    parse_obj_as(
                        type_=Evaluation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEvaluationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        payloads: typing.Sequence[Payload],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Evaluation:
        """
        Creates a new evaluation task for the specified payloads.

        Returns immediately with the created evaluation's initial state.

        Parameters
        ----------
        payloads : typing.Sequence[Payload]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Evaluation
            Evaluation successfully created. Returns the initial evaluation state.

        Examples
        --------
        import asyncio

        from parlant.client import (
            AsyncParlantClient,
            GuidelineContent,
            GuidelinePayload,
            Payload,
            ToolId,
        )

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.evaluations.create(
                payloads=[
                    Payload(
                        guideline=GuidelinePayload(
                            content=GuidelineContent(
                                condition="when customer asks about pricing",
                            ),
                            tool_ids=[
                                ToolId(
                                    service_name="email_service",
                                    tool_name="send_email",
                                )
                            ],
                            operation="add",
                            action_proposition=True,
                        ),
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "evaluations",
            method="POST",
            json={
                "payloads": convert_and_respect_annotation_metadata(
                    object_=payloads,
                    annotation=typing.Sequence[Payload],
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Evaluation,
                    parse_obj_as(
                        type_=Evaluation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        evaluation_id: str,
        *,
        wait_for_completion: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Evaluation:
        """
        Retrieves the current state of an evaluation.

        * If wait_for_completion == 0, returns current state immediately.
        * If wait_for_completion > 0, waits for completion/failure or timeout. Defaults to 60.

        Notes:
        When wait_for_completion > 0:
        - Returns final state if evaluation completes within timeout
        - Raises 504 if timeout is reached before completion

        Parameters
        ----------
        evaluation_id : str
            Unique identifier of the evaluation to retrieve

        wait_for_completion : typing.Optional[int]
            Maximum time in seconds to wait for evaluation completion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Evaluation
            Evaluation details successfully retrieved.

        Examples
        --------
        import asyncio

        from parlant.client import AsyncParlantClient

        client = AsyncParlantClient(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.evaluations.retrieve(
                evaluation_id="eval_123xz",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluations/{jsonable_encoder(evaluation_id)}",
            method="GET",
            params={
                "wait_for_completion": wait_for_completion,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Evaluation,
                    parse_obj_as(
                        type_=Evaluation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 504:
                raise GatewayTimeoutError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
