# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Capability(UniversalBaseModel):
    """
    A capability represents a functional feature or skill of the agent.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the capability
    """

    title: str = pydantic.Field()
    """
    The title of the capability
    """

    description: str = pydantic.Field()
    """
    Detailed description of the capability's purpose
    """

    signals: typing.List[str] = pydantic.Field()
    """
    Example signals that this capability can handle
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of tag IDs associated with the capability
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
