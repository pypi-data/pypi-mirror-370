Metadata-Version: 2.4
Name: weather001
Version: 0.1.0
Summary: A weather application using MCP
Author-email: Your Name <your.email@example.com>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: fastmcp>=2.0.0

# Weather001 MCP Application

A simple weather application built with the Model Context Protocol (MCP).

## Installation

To install and run this application, you need Python 3.8 or later.

### Using uvx

```bash
uvx weather001
```

### Using pip

```bash
pip install weather001
```

## Local Development

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd weather001
   ```

2. Install in development mode:
   ```bash
   pip install -e .
   ```

3. Run the application:
   ```bash
   weather001
   ```

## Usage

This application provides a simple weather tool that can be used in MCP-compatible environments.

### Tools

- `get_weather`: Get weather information for a specific location
  - Arguments:
    - `location` (string, required): The location for which to get weather information

### Example

```json
{
  "tool": "get_weather",
  "arguments": {
    "location": "北京"
  }
}
```

## Publishing to PyPI

To publish this package to PyPI, follow these steps:

1. Create accounts on PyPI and TestPyPI:
   - [TestPyPI](https://test.pypi.org/account/register/)
   - [PyPI](https://pypi.org/account/register/)

2. Install build tools:
   ```bash
   pip install build twine
   ```

3. Build the package:
   ```bash
   python -m build
   ```

4. Upload to TestPyPI first (recommended):
   ```bash
   twine upload -r testpypi dist/*
   ```

5. If everything works, upload to PyPI:
   ```bash
   twine upload dist/*
   ```

## License

MIT

pypi-AgENdGVzdC5weXBpLm9yZwIkY2E3Y2I1MWItNTM4MC00MWIwLWE1ZGItMzc2YTBjYzhjNjE1AAIqWzMsIjNkYWQzYzZjLTkyMWQtNGIwZi1iMDRiLTNiODk3NjNlYWVhMCJdAAAGIOHmxf8M5nyh-eI1PrE7g2sacA37J2QgXNyVsRhh3OiE
