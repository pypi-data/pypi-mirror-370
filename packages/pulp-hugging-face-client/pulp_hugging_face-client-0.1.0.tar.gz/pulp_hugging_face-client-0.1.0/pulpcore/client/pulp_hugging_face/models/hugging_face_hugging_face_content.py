# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pulpcore.client.pulp_hugging_face.models.repo_type_enum import RepoTypeEnum
from typing import Optional, Set
from typing_extensions import Self


class OneOf:
    @staticmethod
    def from_dict(obj, *args, **kwargs):
        """Noop override to fix missing OneOf import/implementation."""
        return obj


class HuggingFaceHuggingFaceContent(BaseModel):
    """
    A Serializer for HuggingFaceContent.
    """ # noqa: E501
    repository: Optional[StrictStr] = Field(default=None, description="A URI of a repository the new content unit should be associated with.")
    pulp_labels: Optional[Dict[str, Optional[StrictStr]]] = Field(default=None, description="A dictionary of arbitrary key/value pairs used to describe a specific Content instance.")
    artifact: StrictStr = Field(description="Artifact file representing the physical content")
    relative_path: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The relative path within the repository")
    repo_id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The Hugging Face repository ID (e.g., 'microsoft/DialoGPT-medium')")
    repo_type: Optional[RepoTypeEnum] = Field(default=None, description="The type of Hugging Face repository  * `models` - Models * `datasets` - Datasets * `spaces` - Spaces")
    revision: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default='main', description="The git revision/branch/tag")
    size: Optional[StrictInt] = Field(default=None, description="File size in bytes")
    etag: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="ETag from Hugging Face")
    last_modified: Optional[datetime] = Field(default=None, description="Last modified timestamp")
    __properties: ClassVar[List[str]] = ["repository", "pulp_labels", "artifact", "relative_path", "repo_id", "repo_type", "revision", "size", "etag", "last_modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuggingFaceHuggingFaceContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['etag'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuggingFaceHuggingFaceContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "repository": obj.get("repository"),
            "pulp_labels": obj.get("pulp_labels"),
            "artifact": obj.get("artifact"),
            "relative_path": obj.get("relative_path"),
            "repo_id": obj.get("repo_id"),
            "repo_type": obj.get("repo_type"),
            "revision": obj.get("revision") if obj.get("revision") is not None else 'main',
            "size": obj.get("size"),
            "etag": obj.get("etag"),
            "last_modified": obj.get("last_modified")
        })
        return _obj


