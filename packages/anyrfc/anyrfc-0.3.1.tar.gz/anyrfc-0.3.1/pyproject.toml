[project]
name = "anyrfc"
version = "0.3.1"
description = "Complete, RFC-compliant protocol clients using AnyIO structured concurrency"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "Andrew M. Elgert", email = "andrew@elgert.org"}
]
maintainers = [
    {name = "Andrew M. Elgert", email = "andrew@elgert.org"}
]
keywords = [
    "anyio", "rfc", "websocket", "imap", "smtp", "async", "protocol", "client",
    "structured-concurrency", "rfc6455", "rfc9051", "rfc5321"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Communications",
    "Topic :: Communications :: Email",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Framework :: AnyIO",
    "Typing :: Typed",
]
dependencies = [
    "anyio>=4.5.1",
    "httpx>=0.25.0",
    "typing-extensions>=4.0.0",
    "exceptiongroup>=1.0.0; python_version<'3.11'",
]

[project.urls]
Homepage = "https://github.com/elgertam/anyrfc"
Documentation = "https://github.com/elgertam/anyrfc#readme"
Repository = "https://github.com/elgertam/anyrfc.git"
"Bug Tracker" = "https://github.com/elgertam/anyrfc/issues"
Changelog = "https://github.com/elgertam/anyrfc/blob/master/CHANGELOG.md"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
target-version = "py39"
exclude = [
    "src/anyrfc/_vendor/",  # Exclude vendorized code
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
mypy_path = "src"
exclude = [
    "src/anyrfc/_vendor/",
    "tests/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "anyio: marks tests as async tests using AnyIO",
    "integration: marks tests as integration tests",
    "interop: marks tests as interoperability tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
addopts = "--tb=short"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "coverage>=7.0.0",
    "autobahntestsuite>=0.8.2",
    "commitizen>=4.8.3",
    "twine>=6.1.0",
    "pre-commit>=4.3.0",
]
notebook = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
]
examples = [
    "python-dotenv>=1.1.1",
    "pypdf2>=3.0.1",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
version_files = [
    "src/anyrfc/__init__.py:__version__"
]
pre_bump_hooks = [
    "uv lock"
]
