# coding: utf-8

"""
    aind-tars-service

     ## aind-tars-service  Service to pull data from TARS.  

    The version of the OpenAPI document: 0.1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_tars_service_async_client.models.prep_lot_data import PrepLotData

class TestPrepLotData(unittest.TestCase):
    """PrepLotData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrepLotData:
        """Test PrepLotData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrepLotData`
        """
        model = PrepLotData()
        if include_optional:
            return PrepLotData(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                updated_by = '',
                id = '',
                lot = '',
                date_prepped = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                viral_prep = aind_tars_service_async_client.models.viral_prep.ViralPrep(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    updated_by = '', 
                    id = '', 
                    rr_id = '', 
                    viral_prep_type = aind_tars_service_async_client.models.viral_prep_type.ViralPrepType(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        name = '', ), 
                    virus = aind_tars_service_async_client.models.virus_data.VirusData(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        rr_id = '', 
                        aliases = [
                            aind_tars_service_async_client.models.alias.Alias(
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                created_by = '', 
                                updated_by = '', 
                                id = '', 
                                citation = null, 
                                is_preferred = True, 
                                name = '', )
                            ], 
                        capsid = {
                            'key' : null
                            }, 
                        citations = [
                            null
                            ], 
                        molecules = [
                            null
                            ], 
                        other_molecules = [
                            null
                            ], 
                        patents = [
                            null
                            ], ), 
                    citations = [
                        null
                        ], 
                    shipments = [
                        null
                        ], 
                    patents = [
                        null
                        ], 
                    material_transfer_agreements = [
                        null
                        ], 
                    qc_certification_files = [
                        null
                        ], 
                    serotypes = [
                        null
                        ], ),
                titers = [
                    aind_tars_service_async_client.models.titers.Titers(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        updated_by = '', 
                        id = '', 
                        notes = '', 
                        is_preferred = True, 
                        thawed_count = 56, 
                        result = 56, 
                        titer_type = null, )
                    ]
            )
        else:
            return PrepLotData(
        )
        """

    def testPrepLotData(self):
        """Test PrepLotData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
