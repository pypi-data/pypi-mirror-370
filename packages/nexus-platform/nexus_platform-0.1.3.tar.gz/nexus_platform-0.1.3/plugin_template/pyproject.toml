[tool.poetry]
name = "nexus-plugin-YOUR-PLUGIN-NAME"
version = "1.0.0"
description = "YOUR PLUGIN DESCRIPTION"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://your-plugin-website.com"
repository = "https://github.com/yourusername/nexus-plugin-YOUR-PLUGIN-NAME"
documentation = "https://docs.your-plugin.com"
keywords = [
    "nexus-plugin",
    # Add your plugin-specific keywords here
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{ include = "YOUR_PLUGIN_PACKAGE_NAME" }]
include = [
    "manifest.json",
    "README.md",
    "LICENSE",
    "static/**/*",
    "templates/**/*",
    "migrations/**/*",
]
exclude = ["tests/**/*", "*.pyc", "__pycache__", ".git", ".pytest_cache"]

[tool.poetry.dependencies]
python = "^3.11"

# IMPORTANT: The Nexus Framework is expected to be installed separately
# It should NOT be listed as a dependency here to avoid version conflicts
# Users will install it with: pip install nexus-platform-framework
# nexus-framework = "^0.1.0"  # DO NOT UNCOMMENT

# Add your plugin's required dependencies here
# Keep this list minimal - only what's absolutely necessary

# Example dependencies (remove/modify as needed):
# pydantic = "^2.5.3"  # Already provided by Nexus, don't duplicate

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Development dependencies
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
faker = "^22.0.0"
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

# ============================================================================
# OPTIONAL DEPENDENCY GROUPS
# Uncomment and modify the groups you need for your plugin
# ============================================================================

# [tool.poetry.group.database]
# optional = true
#
# [tool.poetry.group.database.dependencies]
# # Database drivers - users choose what they need
# asyncpg = { version = "^0.29.0", optional = true }  # PostgreSQL
# aiomysql = { version = "^0.2.0", optional = true }  # MySQL
# motor = { version = "^3.3.2", optional = true }     # MongoDB
# redis = { version = "^5.0.1", optional = true }     # Redis

# [tool.poetry.group.http]
# optional = true
#
# [tool.poetry.group.http.dependencies]
# httpx = "^0.26.0"
# aiohttp = "^3.9.1"

# [tool.poetry.group.data]
# optional = true
#
# [tool.poetry.group.data.dependencies]
# pandas = "^2.1.4"
# numpy = "^1.26.3"
# python-dateutil = "^2.8.2"

# [tool.poetry.group.messaging]
# optional = true
#
# [tool.poetry.group.messaging.dependencies]
# python-socketio = "^5.11.0"
# websockets = "^12.0"
# emails = "^0.6.1"

# [tool.poetry.group.tasks]
# optional = true
#
# [tool.poetry.group.tasks.dependencies]
# celery = "^5.3.6"
# apscheduler = "^3.10.4"
# croniter = "^2.0.1"

# [tool.poetry.group.files]
# optional = true
#
# [tool.poetry.group.files.dependencies]
# pillow = "^10.2.0"
# python-magic = "^0.4.27"
# openpyxl = "^3.1.2"
# PyPDF2 = "^3.0.1"

# [tool.poetry.group.ml]
# optional = true
#
# [tool.poetry.group.ml.dependencies]
# scikit-learn = "^1.4.0"
# tensorflow = "^2.15.0"
# torch = "^2.1.2"

# ============================================================================
# EXTRAS - Define combinations of optional dependencies
# ============================================================================

[tool.poetry.extras]
# Define your extras here for easier installation
# Example:
# postgresql = ["asyncpg"]
# mysql = ["aiomysql"]
# mongodb = ["motor"]
# redis = ["redis"]
# all-databases = ["asyncpg", "aiomysql", "motor", "redis"]
# full = ["asyncpg", "aiomysql", "motor", "redis", "httpx", "pandas", "celery"]

# ============================================================================
# SCRIPTS - Command-line scripts provided by your plugin
# ============================================================================

[tool.poetry.scripts]
# Add your plugin's CLI commands here
# Example:
# your-plugin-init = "your_plugin.scripts.init:main"
# your-plugin-migrate = "your_plugin.scripts.migrate:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | migrations
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/__pycache__/*"]

[tool.mypy]
python_version = "3.11"
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
show_column_numbers = true
strict = true
pretty = true
exclude = ["tests/", "migrations/", "build/", "dist/"]

# Add overrides for packages that don't have type hints
[[tool.mypy.overrides]]
module = [
    # Add third-party modules without type hints here
    # Example:
    # "some_package.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=YOUR_PLUGIN_PACKAGE_NAME",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_db: Tests that require database",
    "requires_redis: Tests that require Redis",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["YOUR_PLUGIN_PACKAGE_NAME"]
branch = true
omit = ["*/tests/*", "*/migrations/*", "*/__init__.py", "*/conftest.py"]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # imported but unused
"tests/*" = ["S101"]     # use of assert

# ============================================================================
# VERSION MANAGEMENT
# ============================================================================

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "YOUR_PLUGIN_PACKAGE_NAME/__init__.py:__version__",
]
update_changelog_on_bump = true

[tool.semantic_release]
version_variable = "YOUR_PLUGIN_PACKAGE_NAME/__init__.py:__version__"
version_toml = "pyproject.toml:tool.poetry.version"
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "poetry build"
dist_path = "dist/"
upload_to_repository = true
upload_to_release = true
commit_version_number = true
