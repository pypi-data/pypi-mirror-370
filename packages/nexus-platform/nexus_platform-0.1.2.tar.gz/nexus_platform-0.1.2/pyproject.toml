[tool.poetry]
name = "nexus-platform"
version = "0.1.2"
description = "The Ultimate Plugin-Based Application Platform - Build modular, scalable applications with ease"
authors = ["Nexus Team <team@nexus.dev>"]
maintainers = ["Nexus Team <team@nexus.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://nexus.dev"
repository = "https://github.com/dnviti/nexus-platform"
documentation = "https://docs.nexus.dev"
keywords = [
    "framework",
    "plugin-system",
    "modular",
    "fastapi",
    "async",
    "microservices",
    "api",
    "rest",
    "websocket",
    "cli",
    "application-platform",
    "enterprise",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
    "Environment :: Web Environment",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
packages = [{ include = "nexus" }]
include = [
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "docs/**/*",
    "config/example.yaml",
    "plugin_template/**/*",
]
exclude = [
    "*.pyc",
    "__pycache__",
    ".git",
    ".venv",
    ".env",
    "dist/**/*",
    "build/**/*",
    "*.egg-info",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    ".mypy_cache",
    ".DS_Store",
    "Thumbs.db",
]

[tool.poetry.dependencies]
python = "^3.11"

# Core Web Framework
fastapi = "^0.109.0"
uvicorn = "^0.27.0"
python-multipart = "^0.0.6"

# Data Validation
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
email-validator = "^2.1.0"

# Configuration
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
toml = "^0.10.2"

# Database Core (drivers are optional)
sqlalchemy = "^2.0.25"

# Basic Authentication
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
passlib = { extras = ["bcrypt"], version = "^1.7.4" }

# Async Support
aiofiles = "^23.2.1"

# Logging
python-json-logger = "^2.0.7"

# CLI
click = "^8.1.7"

# System monitoring
psutil = "^5.9.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.3"
pytest-xdist = "^3.5.0"
pytest-timeout = "^2.2.0"
pytest-benchmark = "^4.0.0"

# Test Data
factory-boy = "^3.3.0"
faker = "^22.0.0"

# HTTP Testing
httpx = "^0.26.0"
responses = "^0.24.1"
aioresponses = "^0.7.6"

# Code Quality
black = "^24.10.0"
isort = "^5.13.2"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.12.2"
pylint = "^3.0.3"
mypy = "^1.8.0"
coverage = "^7.4.0"

# Security
bandit = "^1.7.6"
safety = "^3.0.1"
pip-audit = "^2.6.3"

# Development Tools
ipython = "^8.19.0"
ipdb = "^0.13.13"
rich = "^13.7.0"
watchdog = "^3.0.0"
pre-commit = "^3.6.0"

# Additional testing tools
twine = "^5.0.0"
types-pyyaml = "^6.0.12.20250809"
types-psutil = "^7.0.0.20250801"
types-toml = "^0.10.8.20240310"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.3"
pytest-xdist = "^3.5.0"
pytest-timeout = "^2.2.0"
pytest-benchmark = "^4.0.0"
httpx = "^0.26.0"
factory-boy = "^3.3.0"
faker = "^22.0.0"
responses = "^0.24.1"
aioresponses = "^0.7.6"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.3"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }
mkdocs-autorefs = "^0.5.0"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.8"

[tool.poetry.group.production]
optional = true

[tool.poetry.group.production.dependencies]
gunicorn = "^21.2.0"
httptools = "^0.6.1"
orjson = "^3.9.10"
prometheus-client = "^0.19.0"
psutil = "^5.9.7"

# Database Drivers (optional extras) - Commented out to avoid conflicts
# [tool.poetry.extras]
# postgresql = ["asyncpg", "psycopg2-binary"]
# mysql = ["aiomysql", "pymysql"]
# mongodb = ["motor", "pymongo"]
# redis = ["redis", "aioredis"]
# all-databases = [
#     "asyncpg",
#     "psycopg2-binary",
#     "aiomysql",
#     "pymysql",
#     "motor",
#     "pymongo",
#     "redis",
#     "aioredis",
# ]

# Plugin Development Extras - Commented out to avoid conflicts
# task-scheduler = ["apscheduler", "croniter"]
# messaging = ["python-socketio", "websockets"]
# email = ["emails", "jinja2"]
# auth-advanced = ["pyotp", "qrcode", "pillow"]
# monitoring = ["sentry-sdk", "elastic-apm", "prometheus-client"]
# celery = ["celery", "flower"]
# testing = ["locust", "hypothesis"]

[tool.poetry.scripts]
nexus = "nexus.cli:main"
nexus-admin = "nexus.admin:main"

[tool.poetry.plugins."nexus.plugins"]
hello_world = "nexus.plugins.example.hello_world"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/dnviti/nexus-platform/issues"
"Discussions" = "https://github.com/dnviti/nexus-platform/discussions"
"Changelog" = "https://github.com/dnviti/nexus-platform/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/dnviti"
"Discord" = "https://discord.gg/nexus"
"Twitter" = "https://twitter.com/nexus_dev"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | migrations
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/__pycache__/*"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = ["tests/", "migrations/", "examples/", "docs/"]

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "redis.*",
    "motor.*",
    "pymongo.*",
    "celery.*",
    "apscheduler.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=nexus",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=20",
    "--asyncio-mode=auto",
    "--tb=short",
    "--maxfail=3",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_db: Tests that require database",
    "requires_redis: Tests that require Redis",
    "requires_network: Tests that require network access",
    "benchmark: Performance benchmark tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
timeout = 300
env = ["NEXUS_ENV = testing", "NEXUS_DEBUG = true"]

[tool.coverage.run]
source = ["nexus"]
branch = true
omit = ["*/tests/*", "*/migrations/*", "*/__init__.py", "*/conftest.py"]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.pylint.messages_control]
disable = [
    "C0111", # missing-docstring
    "C0103", # invalid-name
    "R0903", # too-few-public-methods
    "R0913", # too-many-arguments
    "W0212", # protected-access
    "W0622", # redefined-builtin
]

[tool.pylint.format]
max-line-length = 100

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]             # assert_used, shell_with_subprocess


[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = ["pyproject.toml:version", "nexus/__init__.py:__version__"]
update_changelog_on_bump = true

[tool.semantic_release]
version_variable = "src/app/nexus/__init__.py:__version__"
version_toml = "pyproject.toml:tool.poetry.version"
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "python -m build"
dist_path = "dist/"
upload_to_repository = true
upload_to_release = true
commit_version_number = true
major_on_zero = false
tag_format = "v{version}"
