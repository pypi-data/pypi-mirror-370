# Modernized release workflow with semantic-release auto-tagging
name: RELEASE

on:
  push:
    branches: [main]
    paths:
      - "aiagents4pharma/**"
      - "pyproject.toml"
      - "uv.lock"
  workflow_dispatch:

jobs:
  release:
    name: Release & Publish
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for VCS versioning

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Set up Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install semantic-release
        run: npm install

      - name: Install dependencies
        run: uv sync --frozen --extra dev

      - name: Run quality checks
        run: |
          uv run ruff check aiagents4pharma/
          uv run bandit -c pyproject.toml -r aiagents4pharma/

      - name: Clean up existing tags if needed
        run: |
          # Get the next version that semantic-release would create
          NEXT_VERSION=$(npx semantic-release --dry-run | grep "The next release version is" | sed 's/.*The next release version is //' || echo "")
          if [ ! -z "$NEXT_VERSION" ] && git tag | grep -q "v$NEXT_VERSION"; then
            echo "Tag v$NEXT_VERSION already exists, deleting it"
            git tag -d "v$NEXT_VERSION" || true
            git push origin ":refs/tags/v$NEXT_VERSION" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run semantic-release (creates tag automatically)
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release version from latest tag
        run: |
          RELEASE_VERSION=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "Release version: $RELEASE_VERSION"

      - name: Build package with uv
        run: |
          uv build

      - name: Verify package integrity
        run: |
          uv run twine check dist/*

      - name: Test package installation
        run: |
          # Test that the built package can be installed in a virtual environment
          uv venv test-env
          uv pip install --python test-env dist/*.whl --dry-run

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: true
          verbose: true
          skip-existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
