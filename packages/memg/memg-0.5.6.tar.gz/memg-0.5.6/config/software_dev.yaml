version: v1

id_policy:
  kind: uuid
  field: id

defaults:
  vector:
    metric: cosine
    normalize: true
  timestamps:
    auto_create: true
    auto_update: true

entities:
  - name: memo
    description: "Base memory unit"
    anchor: statement
    fields:
      id:          { type: string, required: true, system: true }
      user_id:     { type: string, required: true, system: true }
      project:     { type: string }  # Optional project namespace for filtering
      statement:   { type: string, required: true, max_length: 8000 }
      created_at:  { type: datetime, required: true, system: true }
      updated_at:  { type: datetime, system: true }
      vector:      { type: vector, derived_from: statement, system: true }
    relations:
      - name: memo_related
        description: "Generic relation between memos"
        directed: true
        predicates: [RELATED_TO]
        source: memo
        target: memo

  - name: document
    parent: memo
    description: "Document-like memo with extended content"
    anchor: statement
    fields:
      project: { type: string }  # Optional project namespace for filtering
      details: { type: string, required: true }
      url:     { type: string }  # Reference URL for external docs
    relations:
      - name: document_note
        description: "Document referenced by a note"
        directed: true
        predicates: [REFERENCED_BY]
        source: document
        target: note
      - name: task_document
        description: "Document providing details or requirements for a task"
        directed: true
        predicates: [SUPPORTS]
        source: document
        target: task

  - name: task
    parent: memo
    description: "Development task or work item"
    anchor: statement
    fields:
      project:     { type: string }  # Optional project namespace for filtering
      details:     { type: string }
      status:      { type: enum, choices: [backlog, todo, in_progress, in_review, done, cancelled] }
      priority:    { type: enum, choices: [low, medium, high, critical] }
      assignee:    { type: string }
      due_date:    { type: datetime }
      story_points: { type: string }  # Estimation (e.g., "3", "5", "8")
      epic:        { type: string }   # Epic or feature reference
    see_also:
      enabled: true
      threshold: 0.90
      limit: 3
      target_types: [bug, solution, note]
    relations:
      - name: task_note
        description: "Note associated with a task"
        directed: true
        predicates: [ANNOTATES]
        source: note
        target: task
      - name: task_blocks
        description: "Task blocking another task"
        directed: true
        predicates: [BLOCKS]
        source: task
        target: task

  - name: note
    parent: memo
    description: "General note or observation"
    anchor: statement
    fields:
      project: { type: string }  # Optional project namespace for filtering
      details: { type: string, required: true }
    relations:
      - name: note_document
        description: "Note providing context to a document"
        directed: true
        predicates: [ANNOTATES]
        source: note
        target: document

  - name: bug
    parent: memo
    description: "Bug report or issue"
    anchor: statement
    fields:
      project:      { type: string }  # Optional project namespace for filtering
      details:      { type: string, required: true }
      severity:     { type: enum, choices: [low, medium, high, critical] }
      status:       { type: enum, choices: [open, investigating, in_progress, resolved, closed, wont_fix] }
      reproduction: { type: string }  # Steps to reproduce
      environment:  { type: string }  # Environment details
      file_path:    { type: string }  # File where bug occurs
      line_number:  { type: string }  # Line number reference
    see_also:
      enabled: true
      threshold: 0.90
      limit: 2
      target_types: [solution, task]
    relations:
      - name: bug_task
        description: "Task created to fix a bug"
        directed: true
        predicates: [ADDRESSES]
        source: task
        target: bug

  - name: solution
    parent: memo
    description: "Solution, fix, or implementation approach"
    anchor: statement
    fields:
      project:      { type: string }  # Optional project namespace for filtering
      details:      { type: string, required: true }
      approach:     { type: enum, choices: [workaround, hotfix, proper_fix, refactor] }
      code_snippet: { type: string }  # Code example or snippet
      file_path:    { type: string }  # File being modified
      test_status:  { type: enum, choices: [untested, manual_test, unit_test, integration_test] }
    see_also:
      enabled: true
      threshold: 0.90
      limit: 3
      target_types: [bug, task, note]
    relations:
      - name: solution_bug
        description: "Solution addressing a bug"
        directed: true
        predicates: [FIXES]
        source: solution
        target: bug
      - name: solution_task
        description: "Solution implementing a task"
        directed: true
        predicates: [IMPLEMENTS]
        source: solution
        target: task

  # - name: code_review
  #   parent: memo
  #   description: "Code review feedback or observation"
  #   anchor: statement
  #   fields:
  #     details:     { type: string, required: true }
  #     review_type: { type: enum, choices: [suggestion, issue, praise, question] }
  #     file_path:   { type: string }
  #     line_range:  { type: string }  # e.g., "45-52"
  #     reviewer:    { type: string }
  #     status:      { type: enum, choices: [pending, addressed, dismissed] }
  #   relations:
  #     - name: review_solution
  #       description: "Code review leading to a solution"
  #       directed: true
  #       predicates: [SUGGESTS]
  #       source: code_review
  #       target: solution

  # - name: learning
  #   parent: memo
  #   description: "Learning note, insight, or knowledge gained"
  #   anchor: statement
  #   fields:
  #     details:    { type: string, required: true }
  #     category:   { type: enum, choices: [concept, pattern, tool, framework, best_practice, gotcha] }
  #     difficulty: { type: enum, choices: [beginner, intermediate, advanced] }
  #     source:     { type: string }  # Where learned (docs, tutorial, experience, etc.)
  #   relations:
  #     - name: learning_solution
  #       description: "Learning that influenced a solution"
  #       directed: true
  #       predicates: [INFLUENCES]
  #       source: learning
  #       target: solution
  #     - name: learning_related
  #       description: "Related learning topics"
  #       directed: true
  #       predicates: [RELATES_TO]
  #       source: learning
  #       target: learning
