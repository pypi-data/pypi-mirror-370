[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "memg"
dynamic = ["version"]
description = "True memory for AI - lightweight, generalist, AI-made, AI-focused"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "GenovoAI Team", email = "info@genovoai.com"}
]
keywords = ["ai", "memory", "agents", "search", "memg", "artificial-intelligence", "knowledge-management", "semantic-search"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    "memg-core>=0.5.2",
    "google-genai==1.30.0",
    "python-dotenv>=1.1.0",
    "pydantic>=2.11.0",
    "pandas>=2.3.1",
    "tabulate>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=0.23.8",
    "psutil>=5.9.8",
    "ruff>=0.12.0",
    "mypy>=1.17.0",
    "bandit[toml]>=1.8.0",
    "pre-commit>=4.0.0",
]
all = [
    "memg[dev]",
]

[project.urls]
Homepage = "https://github.com/genovo-ai/memg"
Repository = "https://github.com/genovo-ai/memg.git"
Issues = "https://github.com/genovo-ai/memg/issues"
Documentation = "https://github.com/genovo-ai/memg#readme"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
# Automatically generate version from git tags

# Tool configurations for future quality tools

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "TC",  # flake8-type-checking (updated from TCH)
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RET504", # unnecessary assignment before return
    "RET505", # unnecessary else after return
    "SIM108", # use ternary operator (can reduce readability)
    "TC003", # move standard library import into TYPE_CHECKING
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused/star imports in __init__.py
"test_*.py" = ["S101", "D", "PLR2004", "SLF001"]  # Allow asserts, missing docs, magic values, private access in tests
"tests/*.py" = ["S101", "D", "PLR2004", "SLF001"]
"conftest.py" = ["F401", "F403"]  # Allow imports for pytest fixtures

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
strict = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "memg_core.*",
    "google.genai.*",
    "google.*",
    "pandas.*",
    "tabulate.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601", "B603"]  # Skip assert_used, shell injection, subprocess without shell=True
severity = "medium"
confidence = "medium"

[tool.bandit.assert_used]
skips = ["*test*.py", "test_*", "*_test.py"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=memg",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
