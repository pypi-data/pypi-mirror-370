[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "rekordbox-bulk-edit"
version = "0.2.7"
description = "Tools for managing and modifying a RekordBox library en-masse"
authors = [{ name = "James Viall", email= "jamesviall@pm.me"}]
license = "MIT"
readme = "README.md"
requires-python = ">=3.9,<4.0"
keywords = ["rekordbox", "dj", "music", "database", "bulk", "edit", "convert"]
packages = [{include = "rekordbox_bulk_edit"}]
dependencies = [
    "pyrekordbox(>=0.4.3)",
    "ffmpeg-python(>=0.2.0)",
    "click(>=8.0.0,<=9.0.0)",
    "platformdirs (>=4.3.8,<5.0.0)"
]

[project.urls]
Homepage = "https://github.com/jviall/rekordbox-bulk-edit"
Repository = "https://github.com/jviall/rekordbox-bulk-edit"
Issues = "https://github.com/jviall/rekordbox-bulk-edit/issues"

[project.scripts]
rekordbox-bulk-edit = "rekordbox_bulk_edit.cli:main"

[tool.coverage.run]
branch = true
data_file = ".coverage/coverage.db"
[tool.coverage.html]
directory = ".coverage/html/"
[tool.coverage.xml]
output = ".coverage/coverage.xml"
[tool.coverage.json]
output = ".coverage/coverage.json"
[tool.coverage.lcov]
output = ".coverage/coverage.lcov"


[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
commitizen = "^4.8.3"
pre-commit = "^4.2.0"
ruff = "^0.12.8"
pytest-cov = "^6.2.1"
poethepoet = "^0.36.0"
pytest-mock = "^3.14.1"
callee = "^0.3.1"

[tool.poe.tasks]
test = "pytest tests"
coverage = "pytest tests --cov=rekordbox_bulk_edit --junitxml=.coverage/junit.xml --cov-report=term-missing --cov-report=html --cov-report=xml"
lint = "ruff check --fix"
format = "ruff format"
install-hooks = "pre-commit install --hook-type pre-commit --hook-type commit-msg"
run-hooks = "pre-commit run --all-files"

[tool.commitizen]
name = "cz_customize"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}"
example = "feat(convert): add new conversion feature"
schema = "<type>(<scope>): <body>"
schema_pattern = "^(BREAKING|feat|fix|perf|hotfix|refactor|ci|tests|docs|config)(\\(convert|read\\))?!?: .+"
bump_pattern = "^(BREAKING|feat|fix|perf|hotfix|refactor)"
bump_map = { "BREAKING" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH", "hotfix" = "PATCH", "refactor" = "PATCH" }

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    {value = "BREAKING", name = "BREAKING: introduces breaking changes"},
    {value = "feat", name = "feat: introduces new features"},
    {value = "fix", name = "fix: patches a bug"},
    {value = "perf", name = "perf: improves performance"},
    {value = "hotfix", name = "hotfix: urgent fix"},
    {value = "refactor", name = "refactor: code refactor"},
    {value = "ci", name = "ci: CI/CD changes"},
    {value = "tests", name = "test: adds or modifies tests"},
    {value = "docs", name = "docs: documentation changes"},
    {value = "config", name = "config: configuration changes"}
]
message = "Select the type of change you are committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (convert/read) (press [enter] to skip)"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Write a short and imperative summary of the code changes"
