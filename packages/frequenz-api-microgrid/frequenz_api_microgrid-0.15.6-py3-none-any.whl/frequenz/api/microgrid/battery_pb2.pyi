"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains definitions specific to batteries.

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.components_pb2
import frequenz.api.common.metrics.electrical_pb2
import frequenz.api.common.metrics_pb2
import frequenz.api.microgrid.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ComponentState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_STATE_UNSPECIFIED: _ComponentState.ValueType  # 0
    """Default value.
    This value is used only when the state information is not available.
    """
    COMPONENT_STATE_OFF: _ComponentState.ValueType  # 1
    """The battery is switched off."""
    COMPONENT_STATE_IDLE: _ComponentState.ValueType  # 2
    """The battery is idle."""
    COMPONENT_STATE_CHARGING: _ComponentState.ValueType  # 3
    """The battery is consuming electrical energy."""
    COMPONENT_STATE_DISCHARGING: _ComponentState.ValueType  # 4
    """The battery is generating electrical energy."""
    COMPONENT_STATE_ERROR: _ComponentState.ValueType  # 5
    """The battery is in a faulty state."""
    COMPONENT_STATE_LOCKED: _ComponentState.ValueType  # 6
    """The battery is online, but currently unavailable, possibly due to
    a pre-scheduled maintenance, or waiting for a resource to be loaded.
    """
    COMPONENT_STATE_SWITCHING_ON: _ComponentState.ValueType  # 7
    """The battery is starting up and needs some time to become fully operational."""
    COMPONENT_STATE_SWITCHING_OFF: _ComponentState.ValueType  # 8
    """The battery is switching off and needs some time to fully shut down."""
    COMPONENT_STATE_UNKNOWN: _ComponentState.ValueType  # 9
    """The state is provided by the device, but it can not be parsed as any of the
    above (known) states.
    """

class ComponentState(_ComponentState, metaclass=_ComponentStateEnumTypeWrapper): ...

COMPONENT_STATE_UNSPECIFIED: ComponentState.ValueType  # 0
"""Default value.
This value is used only when the state information is not available.
"""
COMPONENT_STATE_OFF: ComponentState.ValueType  # 1
"""The battery is switched off."""
COMPONENT_STATE_IDLE: ComponentState.ValueType  # 2
"""The battery is idle."""
COMPONENT_STATE_CHARGING: ComponentState.ValueType  # 3
"""The battery is consuming electrical energy."""
COMPONENT_STATE_DISCHARGING: ComponentState.ValueType  # 4
"""The battery is generating electrical energy."""
COMPONENT_STATE_ERROR: ComponentState.ValueType  # 5
"""The battery is in a faulty state."""
COMPONENT_STATE_LOCKED: ComponentState.ValueType  # 6
"""The battery is online, but currently unavailable, possibly due to
a pre-scheduled maintenance, or waiting for a resource to be loaded.
"""
COMPONENT_STATE_SWITCHING_ON: ComponentState.ValueType  # 7
"""The battery is starting up and needs some time to become fully operational."""
COMPONENT_STATE_SWITCHING_OFF: ComponentState.ValueType  # 8
"""The battery is switching off and needs some time to fully shut down."""
COMPONENT_STATE_UNKNOWN: ComponentState.ValueType  # 9
"""The state is provided by the device, but it can not be parsed as any of the
above (known) states.
"""
global___ComponentState = ComponentState

class _RelayState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RelayStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RelayState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RELAY_STATE_UNSPECIFIED: _RelayState.ValueType  # 0
    """Default value."""
    RELAY_STATE_OPENED: _RelayState.ValueType  # 1
    """The relays are open, and the DC power line to the inverter is
    disconnected.
    """
    RELAY_STATE_PRECHARGING: _RelayState.ValueType  # 2
    """The relays are closing, and the DC power line to the inverter is
    being connected.
    """
    RELAY_STATE_CLOSED: _RelayState.ValueType  # 3
    """The relays are closed, and the DC power line to the inverter is
    connected.
    """
    RELAY_STATE_ERROR: _RelayState.ValueType  # 4
    """The relays are in an error state."""
    RELAY_STATE_LOCKED: _RelayState.ValueType  # 5
    """The relays are locked, and should be available to accept commands
    shortly.
    """

class RelayState(_RelayState, metaclass=_RelayStateEnumTypeWrapper): ...

RELAY_STATE_UNSPECIFIED: RelayState.ValueType  # 0
"""Default value."""
RELAY_STATE_OPENED: RelayState.ValueType  # 1
"""The relays are open, and the DC power line to the inverter is
disconnected.
"""
RELAY_STATE_PRECHARGING: RelayState.ValueType  # 2
"""The relays are closing, and the DC power line to the inverter is
being connected.
"""
RELAY_STATE_CLOSED: RelayState.ValueType  # 3
"""The relays are closed, and the DC power line to the inverter is
connected.
"""
RELAY_STATE_ERROR: RelayState.ValueType  # 4
"""The relays are in an error state."""
RELAY_STATE_LOCKED: RelayState.ValueType  # 5
"""The relays are locked, and should be available to accept commands
shortly.
"""
global___RelayState = RelayState

class _ErrorCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ErrorCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ERROR_CODE_UNSPECIFIED: _ErrorCode.ValueType  # 0
    """Unspecified."""
    ERROR_CODE_HIGH_CURRENT_CHARGE: _ErrorCode.ValueType  # 1
    """Charge current is too high."""
    ERROR_CODE_HIGH_CURRENT_DISCHARGE: _ErrorCode.ValueType  # 2
    """Discharge current is too high."""
    ERROR_CODE_HIGH_VOLTAGE: _ErrorCode.ValueType  # 3
    """Voltage is too high."""
    ERROR_CODE_LOW_VOLTAGE: _ErrorCode.ValueType  # 4
    """Voltage is too low."""
    ERROR_CODE_HIGH_TEMPERATURE: _ErrorCode.ValueType  # 5
    """Temperature is too high."""
    ERROR_CODE_LOW_TEMPERATURE: _ErrorCode.ValueType  # 6
    """Temperature is too low."""
    ERROR_CODE_HIGH_HUMIDITY: _ErrorCode.ValueType  # 7
    """Humidity is too high."""
    ERROR_CODE_EXCEEDED_SOP_CHARGE: _ErrorCode.ValueType  # 8
    """Charge current has exceeded component bounds."""
    ERROR_CODE_EXCEEDED_SOP_DISCHARGE: _ErrorCode.ValueType  # 9
    """Discharge current has exceeded component bounds."""
    ERROR_CODE_SYSTEM_IMBALANCE: _ErrorCode.ValueType  # 10
    """The battery blocks are not balanced with respect to each other."""
    ERROR_CODE_LOW_SOH: _ErrorCode.ValueType  # 11
    """The State of health is low."""
    ERROR_CODE_BLOCK_ERROR: _ErrorCode.ValueType  # 12
    """One or more battery blocks have failed."""
    ERROR_CODE_CONTROLLER_ERROR: _ErrorCode.ValueType  # 13
    """The battery controller has failed."""
    ERROR_CODE_RELAY_ERROR: _ErrorCode.ValueType  # 14
    """The battery's DC relays have failed."""
    ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED: _ErrorCode.ValueType  # 15
    """The battery's DC relays have been cycled for the maximum number of times
    mentioned in their lifetime specifications.
    """
    ERROR_CODE_FUSE_ERROR: _ErrorCode.ValueType  # 16
    """The battery's fuse has failed."""
    ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR: _ErrorCode.ValueType  # 17
    """The eternal power switch has failed."""
    ERROR_CODE_PRECHARGE_ERROR: _ErrorCode.ValueType  # 18
    """The precharge operation has failed."""
    ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR: _ErrorCode.ValueType  # 19
    """System plausibility checks have failed."""
    ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN: _ErrorCode.ValueType  # 20
    """System shut down due to extremely low voltage."""
    ERROR_CODE_CALIBRATION_NEEDED: _ErrorCode.ValueType  # 21
    """The battery requires a calibration to reset its measurements."""

class ErrorCode(_ErrorCode, metaclass=_ErrorCodeEnumTypeWrapper):
    """Enumerated Battery/BMS error codes."""

ERROR_CODE_UNSPECIFIED: ErrorCode.ValueType  # 0
"""Unspecified."""
ERROR_CODE_HIGH_CURRENT_CHARGE: ErrorCode.ValueType  # 1
"""Charge current is too high."""
ERROR_CODE_HIGH_CURRENT_DISCHARGE: ErrorCode.ValueType  # 2
"""Discharge current is too high."""
ERROR_CODE_HIGH_VOLTAGE: ErrorCode.ValueType  # 3
"""Voltage is too high."""
ERROR_CODE_LOW_VOLTAGE: ErrorCode.ValueType  # 4
"""Voltage is too low."""
ERROR_CODE_HIGH_TEMPERATURE: ErrorCode.ValueType  # 5
"""Temperature is too high."""
ERROR_CODE_LOW_TEMPERATURE: ErrorCode.ValueType  # 6
"""Temperature is too low."""
ERROR_CODE_HIGH_HUMIDITY: ErrorCode.ValueType  # 7
"""Humidity is too high."""
ERROR_CODE_EXCEEDED_SOP_CHARGE: ErrorCode.ValueType  # 8
"""Charge current has exceeded component bounds."""
ERROR_CODE_EXCEEDED_SOP_DISCHARGE: ErrorCode.ValueType  # 9
"""Discharge current has exceeded component bounds."""
ERROR_CODE_SYSTEM_IMBALANCE: ErrorCode.ValueType  # 10
"""The battery blocks are not balanced with respect to each other."""
ERROR_CODE_LOW_SOH: ErrorCode.ValueType  # 11
"""The State of health is low."""
ERROR_CODE_BLOCK_ERROR: ErrorCode.ValueType  # 12
"""One or more battery blocks have failed."""
ERROR_CODE_CONTROLLER_ERROR: ErrorCode.ValueType  # 13
"""The battery controller has failed."""
ERROR_CODE_RELAY_ERROR: ErrorCode.ValueType  # 14
"""The battery's DC relays have failed."""
ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED: ErrorCode.ValueType  # 15
"""The battery's DC relays have been cycled for the maximum number of times
mentioned in their lifetime specifications.
"""
ERROR_CODE_FUSE_ERROR: ErrorCode.ValueType  # 16
"""The battery's fuse has failed."""
ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR: ErrorCode.ValueType  # 17
"""The eternal power switch has failed."""
ERROR_CODE_PRECHARGE_ERROR: ErrorCode.ValueType  # 18
"""The precharge operation has failed."""
ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR: ErrorCode.ValueType  # 19
"""System plausibility checks have failed."""
ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN: ErrorCode.ValueType  # 20
"""System shut down due to extremely low voltage."""
ERROR_CODE_CALIBRATION_NEEDED: ErrorCode.ValueType  # 21
"""The battery requires a calibration to reset its measurements."""
global___ErrorCode = ErrorCode

@typing.final
class Metadata(google.protobuf.message.Message):
    """The battery metadata."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: frequenz.api.common.components_pb2.BatteryType.ValueType
    """The battery type."""
    def __init__(
        self,
        *,
        type: frequenz.api.common.components_pb2.BatteryType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Metadata = Metadata

@typing.final
class State(google.protobuf.message.Message):
    """State message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_STATE_FIELD_NUMBER: builtins.int
    RELAY_STATE_FIELD_NUMBER: builtins.int
    component_state: global___ComponentState.ValueType
    """The state of the overall component."""
    relay_state: global___RelayState.ValueType
    """The state of the DC relays."""
    def __init__(
        self,
        *,
        component_state: global___ComponentState.ValueType = ...,
        relay_state: global___RelayState.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_state", b"component_state", "relay_state", b"relay_state"]) -> None: ...

global___State = State

@typing.final
class Error(google.protobuf.message.Message):
    """Error message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    code: global___ErrorCode.ValueType
    """The error code."""
    level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType
    """The error severity level."""
    msg: builtins.str
    """The error message."""
    def __init__(
        self,
        *,
        code: global___ErrorCode.ValueType = ...,
        level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType = ...,
        msg: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "level", b"level", "msg", b"msg"]) -> None: ...

global___Error = Error

@typing.final
class Data(google.protobuf.message.Message):
    """Battery data."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DC_FIELD_NUMBER: builtins.int
    SOC_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    HUMIDITY_FIELD_NUMBER: builtins.int
    @property
    def dc(self) -> frequenz.api.common.metrics.electrical_pb2.DC:
        """DC electricity metrics."""

    @property
    def soc(self) -> frequenz.api.common.metrics_pb2.MetricAggregation:
        """Battery's overall SoC.
        In percent (%).
        """

    @property
    def temperature(self) -> frequenz.api.common.metrics_pb2.MetricAggregation:
        """The aggregated values of all the temperature measurements of a battery.
        In degree Celsius (°C).
        """

    @property
    def humidity(self) -> frequenz.api.common.metrics_pb2.MetricAggregation:
        """The aggregated values of all the humidity measurements of a battery.
        In percent (%).
        """

    def __init__(
        self,
        *,
        dc: frequenz.api.common.metrics.electrical_pb2.DC | None = ...,
        soc: frequenz.api.common.metrics_pb2.MetricAggregation | None = ...,
        temperature: frequenz.api.common.metrics_pb2.MetricAggregation | None = ...,
        humidity: frequenz.api.common.metrics_pb2.MetricAggregation | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["dc", b"dc", "humidity", b"humidity", "soc", b"soc", "temperature", b"temperature"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dc", b"dc", "humidity", b"humidity", "soc", b"soc", "temperature", b"temperature"]) -> None: ...

global___Data = Data

@typing.final
class Properties(google.protobuf.message.Message):
    """Battery properties."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIRMWARE_VER_FIELD_NUMBER: builtins.int
    CAPACITY_FIELD_NUMBER: builtins.int
    firmware_ver: builtins.str
    """The firmware version of the battery."""
    capacity: builtins.float
    """The capacity of the battery.
    In Watt-hour (Wh).
    """
    def __init__(
        self,
        *,
        firmware_ver: builtins.str = ...,
        capacity: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["capacity", b"capacity", "firmware_ver", b"firmware_ver"]) -> None: ...

global___Properties = Properties

@typing.final
class Battery(google.protobuf.message.Message):
    """Battery/BMS details"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROPERTIES_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def properties(self) -> global___Properties:
        """The component properties"""

    @property
    def state(self) -> global___State:
        """The battery state."""

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Error]:
        """A list of errors encountered the component. An empty list implies no error."""

    @property
    def data(self) -> global___Data:
        """A Battery data object."""

    def __init__(
        self,
        *,
        properties: global___Properties | None = ...,
        state: global___State | None = ...,
        errors: collections.abc.Iterable[global___Error] | None = ...,
        data: global___Data | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "properties", b"properties", "state", b"state"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "errors", b"errors", "properties", b"properties", "state", b"state"]) -> None: ...

global___Battery = Battery
