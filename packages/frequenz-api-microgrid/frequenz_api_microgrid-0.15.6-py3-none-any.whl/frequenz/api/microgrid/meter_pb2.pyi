"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains definitions specific to meters.

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.metrics.electrical_pb2
import frequenz.api.microgrid.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Type:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    TYPE_UNSPECIFIED: _Type.ValueType  # 0
    TYPE_PRODUCTION: _Type.ValueType  # 1
    """AC production power meter / inverter production AC power (fallback)"""
    TYPE_CONSUMPTION: _Type.ValueType  # 2
    """Consumption meter"""
    TYPE_FEED_IN: _Type.ValueType  # 3
    """Exported to grid meter"""
    TYPE_PURCHASED: _Type.ValueType  # 4
    """Imported power from grid meter"""

class Type(_Type, metaclass=_TypeEnumTypeWrapper):
    """Enumerated meter types."""

TYPE_UNSPECIFIED: Type.ValueType  # 0
TYPE_PRODUCTION: Type.ValueType  # 1
"""AC production power meter / inverter production AC power (fallback)"""
TYPE_CONSUMPTION: Type.ValueType  # 2
"""Consumption meter"""
TYPE_FEED_IN: Type.ValueType  # 3
"""Exported to grid meter"""
TYPE_PURCHASED: Type.ValueType  # 4
"""Imported power from grid meter"""
global___Type = Type

class _ComponentState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_STATE_UNSPECIFIED: _ComponentState.ValueType  # 0
    """Unspecified state."""
    COMPONENT_STATE_OK: _ComponentState.ValueType  # 1
    """The meter is behaving as expected."""
    COMPONENT_STATE_ERROR: _ComponentState.ValueType  # 2
    """The meter is in an error state."""

class ComponentState(_ComponentState, metaclass=_ComponentStateEnumTypeWrapper):
    """Enumerated meter states."""

COMPONENT_STATE_UNSPECIFIED: ComponentState.ValueType  # 0
"""Unspecified state."""
COMPONENT_STATE_OK: ComponentState.ValueType  # 1
"""The meter is behaving as expected."""
COMPONENT_STATE_ERROR: ComponentState.ValueType  # 2
"""The meter is in an error state."""
global___ComponentState = ComponentState

class _ErrorCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ErrorCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ERROR_CODE_UNSPECIFIED: _ErrorCode.ValueType  # 0
    """Unspecified."""

class ErrorCode(_ErrorCode, metaclass=_ErrorCodeEnumTypeWrapper):
    """Enumerated meter error codes."""

ERROR_CODE_UNSPECIFIED: ErrorCode.ValueType  # 0
"""Unspecified."""
global___ErrorCode = ErrorCode

@typing.final
class Metadata(google.protobuf.message.Message):
    """The meter metadata."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: global___Type.ValueType
    """The meter type."""
    def __init__(
        self,
        *,
        type: global___Type.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Metadata = Metadata

@typing.final
class State(google.protobuf.message.Message):
    """State message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_STATE_FIELD_NUMBER: builtins.int
    component_state: global___ComponentState.ValueType
    """The state of the overall component."""
    def __init__(
        self,
        *,
        component_state: global___ComponentState.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_state", b"component_state"]) -> None: ...

global___State = State

@typing.final
class Error(google.protobuf.message.Message):
    """Error message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    code: global___ErrorCode.ValueType
    """The error code."""
    level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType
    """The error severity level."""
    msg: builtins.str
    """The error message."""
    def __init__(
        self,
        *,
        code: global___ErrorCode.ValueType = ...,
        level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType = ...,
        msg: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "level", b"level", "msg", b"msg"]) -> None: ...

global___Error = Error

@typing.final
class Data(google.protobuf.message.Message):
    """Meter data."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AC_FIELD_NUMBER: builtins.int
    @property
    def ac(self) -> frequenz.api.common.metrics.electrical_pb2.AC:
        """AC metrics of the inverter."""

    def __init__(
        self,
        *,
        ac: frequenz.api.common.metrics.electrical_pb2.AC | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ac", b"ac"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ac", b"ac"]) -> None: ...

global___Data = Data

@typing.final
class Properties(google.protobuf.message.Message):
    """Meter properties."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIRMWARE_VER_FIELD_NUMBER: builtins.int
    firmware_ver: builtins.str
    """The firmware version of the component."""
    def __init__(
        self,
        *,
        firmware_ver: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["firmware_ver", b"firmware_ver"]) -> None: ...

global___Properties = Properties

@typing.final
class Meter(google.protobuf.message.Message):
    """Meter details"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROPERTIES_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def properties(self) -> global___Properties:
        """The component properties"""

    @property
    def state(self) -> global___State:
        """The meter's state."""

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Error]:
        """A list of errors encountered the component. An empty list implies no error."""

    @property
    def data(self) -> global___Data:
        """A meter data object."""

    def __init__(
        self,
        *,
        properties: global___Properties | None = ...,
        state: global___State | None = ...,
        errors: collections.abc.Iterable[global___Error] | None = ...,
        data: global___Data | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "properties", b"properties", "state", b"state"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "errors", b"errors", "properties", b"properties", "state", b"state"]) -> None: ...

global___Meter = Meter
