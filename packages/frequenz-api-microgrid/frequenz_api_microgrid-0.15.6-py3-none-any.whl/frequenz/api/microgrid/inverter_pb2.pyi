"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains definitions specific to inverters.

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import builtins
import collections.abc
import frequenz.api.common.components_pb2
import frequenz.api.common.metrics.electrical_pb2
import frequenz.api.common.metrics_pb2
import frequenz.api.microgrid.common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Type:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Type.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    TYPE_UNSPECIFIED: _Type.ValueType  # 0
    TYPE_BATTERY: _Type.ValueType  # 1
    TYPE_SOLAR: _Type.ValueType  # 2
    TYPE_HYBRID: _Type.ValueType  # 3

class Type(_Type, metaclass=_TypeEnumTypeWrapper):
    """Enumerated inverter types."""

TYPE_UNSPECIFIED: Type.ValueType  # 0
TYPE_BATTERY: Type.ValueType  # 1
TYPE_SOLAR: Type.ValueType  # 2
TYPE_HYBRID: Type.ValueType  # 3
global___Type = Type

class _ComponentState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ComponentStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ComponentState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    COMPONENT_STATE_UNSPECIFIED: _ComponentState.ValueType  # 0
    """Default value."""
    COMPONENT_STATE_OFF: _ComponentState.ValueType  # 1
    """Inverter is switched off."""
    COMPONENT_STATE_SWITCHING_ON: _ComponentState.ValueType  # 2
    """The inverter is starting up and needs some time to become fully
    operational.
    """
    COMPONENT_STATE_SWITCHING_OFF: _ComponentState.ValueType  # 3
    """The inverter is switching off and needs some time to fully shut down."""
    COMPONENT_STATE_STANDBY: _ComponentState.ValueType  # 4
    """The inverter is in a standby state, and is disconnected from the grid.
    When connected to the grid, it run a few tests, and move to the `IDLE`
    state.
    """
    COMPONENT_STATE_IDLE: _ComponentState.ValueType  # 5
    """The inverter is idle."""
    COMPONENT_STATE_CHARGING: _ComponentState.ValueType  # 10
    """The inverter is consuming electrical energy to charge batteries.
    Applicable to `BATTERY` and `HYBRID` inverters only.
    """
    COMPONENT_STATE_DISCHARGING: _ComponentState.ValueType  # 11
    """The inverter is generating electrical energy."""
    COMPONENT_STATE_ERROR: _ComponentState.ValueType  # 14
    """The inverter is in a faulty state."""
    COMPONENT_STATE_UNAVAILABLE: _ComponentState.ValueType  # 15
    """The inverter is online, but currently unavailable, possibly due to
    a pre-scheduled maintenance.
    """
    COMPONENT_STATE_UNKNOWN: _ComponentState.ValueType  # 16
    """The state is provided by the device, but it can not be parsed as any of the
    above (known) states.
    """

class ComponentState(_ComponentState, metaclass=_ComponentStateEnumTypeWrapper):
    """Enumerated inverter states."""

COMPONENT_STATE_UNSPECIFIED: ComponentState.ValueType  # 0
"""Default value."""
COMPONENT_STATE_OFF: ComponentState.ValueType  # 1
"""Inverter is switched off."""
COMPONENT_STATE_SWITCHING_ON: ComponentState.ValueType  # 2
"""The inverter is starting up and needs some time to become fully
operational.
"""
COMPONENT_STATE_SWITCHING_OFF: ComponentState.ValueType  # 3
"""The inverter is switching off and needs some time to fully shut down."""
COMPONENT_STATE_STANDBY: ComponentState.ValueType  # 4
"""The inverter is in a standby state, and is disconnected from the grid.
When connected to the grid, it run a few tests, and move to the `IDLE`
state.
"""
COMPONENT_STATE_IDLE: ComponentState.ValueType  # 5
"""The inverter is idle."""
COMPONENT_STATE_CHARGING: ComponentState.ValueType  # 10
"""The inverter is consuming electrical energy to charge batteries.
Applicable to `BATTERY` and `HYBRID` inverters only.
"""
COMPONENT_STATE_DISCHARGING: ComponentState.ValueType  # 11
"""The inverter is generating electrical energy."""
COMPONENT_STATE_ERROR: ComponentState.ValueType  # 14
"""The inverter is in a faulty state."""
COMPONENT_STATE_UNAVAILABLE: ComponentState.ValueType  # 15
"""The inverter is online, but currently unavailable, possibly due to
a pre-scheduled maintenance.
"""
COMPONENT_STATE_UNKNOWN: ComponentState.ValueType  # 16
"""The state is provided by the device, but it can not be parsed as any of the
above (known) states.
"""
global___ComponentState = ComponentState

class _ErrorCode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ErrorCodeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ErrorCode.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ERROR_CODE_UNSPECIFIED: _ErrorCode.ValueType  # 0
    """Unspecified."""

class ErrorCode(_ErrorCode, metaclass=_ErrorCodeEnumTypeWrapper):
    """Enumerated inverter error codes."""

ERROR_CODE_UNSPECIFIED: ErrorCode.ValueType  # 0
"""Unspecified."""
global___ErrorCode = ErrorCode

@typing.final
class Metadata(google.protobuf.message.Message):
    """The inverter metadata."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    type: frequenz.api.common.components_pb2.InverterType.ValueType
    """The inverter type."""
    def __init__(
        self,
        *,
        type: frequenz.api.common.components_pb2.InverterType.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["type", b"type"]) -> None: ...

global___Metadata = Metadata

@typing.final
class State(google.protobuf.message.Message):
    """State message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_STATE_FIELD_NUMBER: builtins.int
    component_state: global___ComponentState.ValueType
    """The state of the overall component."""
    def __init__(
        self,
        *,
        component_state: global___ComponentState.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["component_state", b"component_state"]) -> None: ...

global___State = State

@typing.final
class Error(google.protobuf.message.Message):
    """Error message."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    code: global___ErrorCode.ValueType
    """The error code."""
    level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType
    """The error severity level."""
    msg: builtins.str
    """The error message."""
    def __init__(
        self,
        *,
        code: global___ErrorCode.ValueType = ...,
        level: frequenz.api.microgrid.common_pb2.ErrorLevel.ValueType = ...,
        msg: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "level", b"level", "msg", b"msg"]) -> None: ...

global___Error = Error

@typing.final
class Data(google.protobuf.message.Message):
    """Inverter data."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DC_BATTERY_FIELD_NUMBER: builtins.int
    DC_SOLAR_FIELD_NUMBER: builtins.int
    AC_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    @property
    def dc_battery(self) -> frequenz.api.common.metrics.electrical_pb2.DC:
        """DC metrics for the inverter-battery linkage.
        This is applicable to `BATTERY` and `HYBRID` inverters only.
        """

    @property
    def dc_solar(self) -> frequenz.api.common.metrics.electrical_pb2.DC:
        """DC metrics for the inverter-PV linkage.
        This is applicable to `SOLAR` and `HYBRID` inverters only.
        """

    @property
    def ac(self) -> frequenz.api.common.metrics.electrical_pb2.AC:
        """AC metrics of the inverter."""

    @property
    def temperature(self) -> frequenz.api.common.metrics_pb2.Metric:
        """The verall temperature of the inverter.
        In degree Celsius (Â°C).
        """

    def __init__(
        self,
        *,
        dc_battery: frequenz.api.common.metrics.electrical_pb2.DC | None = ...,
        dc_solar: frequenz.api.common.metrics.electrical_pb2.DC | None = ...,
        ac: frequenz.api.common.metrics.electrical_pb2.AC | None = ...,
        temperature: frequenz.api.common.metrics_pb2.Metric | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ac", b"ac", "dc_battery", b"dc_battery", "dc_solar", b"dc_solar", "temperature", b"temperature"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ac", b"ac", "dc_battery", b"dc_battery", "dc_solar", b"dc_solar", "temperature", b"temperature"]) -> None: ...

global___Data = Data

@typing.final
class Properties(google.protobuf.message.Message):
    """Inverter properties."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIRMWARE_VER_FIELD_NUMBER: builtins.int
    firmware_ver: builtins.str
    """The firmware version of the component."""
    def __init__(
        self,
        *,
        firmware_ver: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["firmware_ver", b"firmware_ver"]) -> None: ...

global___Properties = Properties

@typing.final
class Inverter(google.protobuf.message.Message):
    """Inverter message definition."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROPERTIES_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def properties(self) -> global___Properties:
        """The component properties"""

    @property
    def state(self) -> global___State:
        """The inverter's state."""

    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Error]:
        """A list of errors encountered the component. An empty list implies no error."""

    @property
    def data(self) -> global___Data:
        """An inverter data object."""

    def __init__(
        self,
        *,
        properties: global___Properties | None = ...,
        state: global___State | None = ...,
        errors: collections.abc.Iterable[global___Error] | None = ...,
        data: global___Data | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "properties", b"properties", "state", b"state"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "errors", b"errors", "properties", b"properties", "state", b"state"]) -> None: ...

global___Inverter = Inverter
