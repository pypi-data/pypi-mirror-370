[project]
name = "open-pyscaf"
version = "1.5.0"
description = "A python scaffolder with quarto and other utilities out-of-the-box"
authors = [
    {name = "guilhem.heinrich",email = "guilhem.heinrich@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10,<4.0"
dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "questionary>=2.0.0",
    "pydantic>=2.0.0",
    "jinja2>=3.0.0",
    "tomli (>=2.2.1,<3.0.0)",
    "tomli-w (>=1.2.0,<2.0.0)",
    "poetry (>=2.1.3,<3.0.0)",
    "tomlkit (>=0.13.3,<0.14.0)",
]

[project.scripts]
pyscaf = "pyscaf.cli:main"

[tool.poetry]
packages = [
    {include = "pyscaf", from = "src"}
]

[tool.poetry.scripts]
pyscaf = "pyscaf.cli:main"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
python-semantic-release = "^9.21.1"
ruff = "^0.11.11"
PyYAML = "^6.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--cov=pyscaf",
    "--cov-report=term-missing"
]
markers = [
    "cli: tests for CLI functionality",
    "actions: tests for action classes",
    "manager: tests for action manager",
    "interactive: tests for interactive mode",
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.semantic_release]
version_toml = [
  "pyproject.toml:project.version"
]
version_variables = ["src/pyscaf/__init__.py:__version__"]
branch = "main"
upload_to_pypi = true
upload_to_release = true
upload_to_repository = true
# repository_url = "https://test.pypi.org/legacy/" # Handled in the CI
assets = []
build_command_env = []
build_command = "pip install poetry && poetry build"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
changelog_sections = ["feature", "fix", "breaking"]
commit_parser = "conventional"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.ruff]
src = ["src", "tests"]
# Exclude template files in actions from linting
exclude = [
    "src/pyscaf/actions/*/template*"
]
select = [
    "B",  # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4", # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "E",  # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",  # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "N",  # pep8-naming - https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "W",  # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",  # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP", # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
]
line-length = 120

