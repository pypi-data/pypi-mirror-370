"""
Tests the Command Line Interface (CLI) for the ingenious.chunk module.

This test module validates the core document ingestion and chunking CLI, which is a
foundational step in the Insight Ingenious RAG pipeline. These tests ensure that the
CLI entrypoint is stable, handles arguments correctly, and produces validly formatted
output for downstream consumers, such as vector storage and indexing agents.

Key Algorithms / Design Choices:
    Tests are implemented as integration tests that invoke the full CLI application
    using `typer.testing.CliRunner`. This provides high-fidelity validation of the
    entrypoint and argument parsing. The `pytest` fixture `tmp_path` is used to
    create an isolated, temporary file system for each test run, which guarantees
    test independence and a clean state. Output validation is performed using the
    `jsonlines` library, which is the standard output format of the chunker.
"""

from collections import Counter
from pathlib import Path

import jsonlines
from typer.testing import CliRunner

from ingenious.chunk.cli import cli


def test_cli_ids_globally_unique(tmp_path: Path):
    """Verifies that chunk IDs generated by the CLI are globally unique.

    Rationale:
        This test is critical for data integrity in the ingestion pipeline.
        Downstream systems, particularly vector databases and retrieval indexes,
        depend on a unique identifier for each chunk. If duplicates were
        generated (e.g., from identical content in different files), it could
        lead to data overwrites, incorrect retrieval, or indexing failures.
        This test simulates a worst-case scenario where pure content-based
        hashing would fail, thus ensuring the ID generation logic correctly
        incorporates file-level metadata.

    Args:
        tmp_path (Path): A pytest fixture providing a temporary directory path
            object, used to create an isolated testing environment.

    Returns:
        None

    Raises:
        AssertionError: This test will fail via a `pytest` `AssertionError` if
            the CLI command exits with a non-zero code or if duplicate chunk
            IDs are found in the output file.

    Implementation Notes:
        The test sets up a challenging scenario by creating two separate files
        with identical content ("repeat me"). This forces a validation that the
        chunker's ID generation is not naive (e.g., based only on content hash)
        but correctly incorporates source-specific information like filename or
        path to guarantee global uniqueness.
    """
    # two files with identical content
    for n in (1, 2):
        (tmp_path / f"{n}.txt").write_text("repeat me", encoding="utf-8")

    out_file = tmp_path / "out.jsonl"
    res = CliRunner().invoke(
        cli,
        [
            "run",
            str(tmp_path),
            "--chunk-size",
            "32",
            "--chunk-overlap",
            "8",
            "--output",
            str(out_file),
        ],
        catch_exceptions=False,
    )
    assert res.exit_code == 0, res.output

    with jsonlines.open(out_file) as rdr:
        ids = [rec["id"] for rec in rdr]

    duplicates = [c for c, v in Counter(ids).items() if v > 1]
    assert not duplicates, f"duplicate IDs found: {duplicates}"
