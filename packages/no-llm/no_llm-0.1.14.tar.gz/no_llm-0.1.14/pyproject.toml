[build-system]
requires = ["hatchling>=1.18.0", "packaging>=23.2"]
build-backend = "hatchling.build"

[project]
name = "no_llm"
version = "0.1.14"
description = 'Standard Interface for Large Language Models'
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = []
authors = [{ name = "pedro", email = "pedro@noxus.ai" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pydantic>=2.0.0",
  "typing-extensions>=4.0.0",
  "PyYAML>=6.0.0",
  "loguru>=0.7.0",
  "pydantic-ai>=0.2.0",
]

[project.optional-dependencies]
pydantic-ai = ["pydantic-ai>=0.2.0"]

[project.urls]
Documentation = "https://github.com/Noxus-AI/no-llm#readme"
Issues = "https://github.com/Noxus-AI/no-llm/issues"
Source = "https://github.com/Noxus-AI/no-llm"


# ========================
# DEV
# ========================
[tool.ruff]
line-length = 120
target-version = "py310"
include = ["no_llm/**/*.py"]

[tool.ruff.lint]
ignore = [
  "DTZ001", # use of tzinfo in datetime
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "TCH001", # Move application import into a type-checking block
  "TCH003", # Move standard library import into a type-checking block
  "FBT001", # Boolean-typed positional argument in function definition
  "FBT002", # Boolean default positional argument in function definition
  "RET505", # Buggy
]

[tool.mypy]
ignore_missing_imports = true

[tool.hatch.envs.types]
dependencies = ["mypy>=1.15.0", "types-PyYAML"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:no_llm}"

# =========================
# TEST
# =========================
[tool.coverage.run]
source_pkgs = ["no_llm"]
branch = true
parallel = true

[tool.coverage.paths]
no_llm = ["no_llm", "*/no_llm/no_llm"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
fail_under = 90

[tool.pytest.ini_options]
addopts = "-ra -q --doctest-modules --doctest-glob='*.md'"
testpaths = ["tests", "examples"]
python_files = ["*.py"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material[imaging]",
  "mkdocstrings[python]",
  "mkdocs-glightbox",
]
[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve -a localhost:3111"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --config-file mkdocs.yml --force"


[tool.hatch.envs.hatch-test]
dependencies = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-asyncio>=0.21.0",
  "anyio>=4.9.0",
  "vcrpy>=4.3.1",
  "pydantic-ai>=0.2.0",
  "openai>=1.0.0",
  "langchain>=0.3.23",
  "pytest-vcr>=1.0.2",
  "brotli>=1.1.0",
  "pytest-subtests==0.13.1",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=no_llm --cov-report=term-missing {args:tests}"
