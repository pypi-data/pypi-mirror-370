[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pdf-requirement-extractor"
version = "2.0.0"
authors = [
    {name = "S M Asiful Islam Saky", email = "saky.aiu22@gmail.com"},
]
description = "Extract structured brand requirements from PDF documents"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
    "Topic :: Office/Business",
    "Topic :: Multimedia :: Graphics",
]
keywords = [
    "pdf", "extraction", "brand", "requirements", "guidelines", 
    "parsing", "text-processing", "document-analysis", "openai", "gpt"
]
dependencies = [
    "pymupdf>=1.23.0",
    "regex>=2023.10.3",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
gpt = ["openai>=1.3.0"]
ocr = ["pytesseract>=0.3.10", "Pillow>=10.0.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]
all = [
    "openai>=1.3.0",
    "pytesseract>=0.3.10",
    "Pillow>=10.0.0",
]

[project.urls]
"Homepage" = "https://pypi.org/project/pdf-requirement-extractor/"
"Documentation" = "https://pypi.org/project/pdf-requirement-extractor/"
"Source Code" = "https://pypi.org/project/pdf-requirement-extractor/"
"Download" = "https://pypi.org/project/pdf-requirement-extractor/#files"

[project.scripts]
pdf-extract-requirements = "pdf_requirements_extractor.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pdf_requirements_extractor*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
pdf_requirements_extractor = ["*.txt", "*.md"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fitz",
    "fitz.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["pdf_requirements_extractor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
