[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=7.0"]
build-backend = "setuptools.build_meta"

[project]
name = "puffinflow"
dynamic = ["version"]
description = "A powerful Python workflow orchestration framework with advanced resource management and observability"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Mohamed Ahmed", email = "mohamed.ahmed.4894@gmail.com" },
]
maintainers = [
    { name = "Mohamed Ahmed", email = "mohamed.ahmed.4894@gmail.com" },
]
keywords = [
    "workflow",
    "orchestration",
    "async",
    "state-management",
    "resource-allocation",
    "task-execution",
    "distributed-systems",
    "monitoring",
    "observability",
    "tracing",
    "metrics",
    "coordination",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "structlog>=23.1.0",
    "typing-extensions>=4.8.0;python_version<'3.11'",
    "aiohttp>=3.9.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "types-psutil>=5.9.0",
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
    "coverage[toml]>=7.3.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "sphinxcontrib-asyncio>=0.3.0",
]

# CLI dependencies
cli = [
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.0",
]

# Complete monitoring and observability suite
observability = [
    # Core observability
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    # OpenTelemetry core (allow compatible versions for instrumentation)
    "opentelemetry-api>=1.23.0,<2.0.0",
    "opentelemetry-sdk>=1.23.0,<2.0.0",
    # OpenTelemetry exporters (use stable versions)
    "opentelemetry-exporter-otlp-proto-grpc>=1.23.0,<2.0.0",
    "opentelemetry-exporter-jaeger-thrift>=1.21.0,<2.0.0",
    # OpenTelemetry instrumentation (allow compatible versions)
    "opentelemetry-instrumentation-asyncio>=0.44b0,<1.0.0",
    "opentelemetry-instrumentation-logging>=0.44b0,<1.0.0",
    # HTTP client for webhooks and external integrations
    "aiohttp>=3.9.0",
    "httpx>=0.26.0",
    # Email support for alerting
    "aiosmtplib>=3.0.0",
    "deprecated>=1.2.6",
]

# Legacy monitoring alias (kept for backwards compatibility)
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.23.0,<2.0.0",
    "opentelemetry-sdk>=1.23.0,<2.0.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.23.0,<2.0.0",
    "opentelemetry-instrumentation-asyncio>=0.44b0,<1.0.0",
]

# Integration dependencies
integrations = [
    "fastapi>=0.108.0",
    "celery>=5.3.0",
    "kubernetes>=28.0.0",
    "redis>=5.0.0",
    "httpx>=0.26.0",
    "psutil>=5.9.0",
]

# Performance and benchmarking
performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
]

# Security and static analysis
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
]

# All optional dependencies combined
all = [
    # CLI
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.0",
    # Observability (complete suite - consistent with observability section)
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "opentelemetry-api>=1.23.0,<2.0.0",
    "opentelemetry-sdk>=1.23.0,<2.0.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.23.0,<2.0.0",
    "opentelemetry-exporter-jaeger-thrift>=1.21.0,<2.0.0",
    "opentelemetry-instrumentation-asyncio>=0.44b0,<1.0.0",
    "opentelemetry-instrumentation-logging>=0.44b0,<1.0.0",
    "aiohttp>=3.9.0",
    "httpx>=0.26.0",
    "aiosmtplib>=3.0.0",
    # Integrations
    "fastapi>=0.108.0",
    "celery>=5.3.0",
    "kubernetes>=28.0.0",
    "redis>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/m-ahmed-elbeskeri/puffinflow-main"
Documentation = "https://puffinflow.readthedocs.io"
Repository = "https://github.com/m-ahmed-elbeskeri/puffinflow-main.git"
"Bug Tracker" = "https://github.com/m-ahmed-elbeskeri/puffinflow-main/issues"
Changelog = "https://github.com/m-ahmed-elbeskeri/puffinflow-main/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/m-ahmed-elbeskeri"

[project.scripts]
puffinflow = "puffinflow.cli.main:app"
puffinflow-benchmark = "benchmarks.run_all_benchmarks:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["puffinflow*"]

[tool.setuptools_scm]
write_to = "src/puffinflow/version.py"
local_scheme = "no-local-version"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["E501", "B018", "S101", "SIM117", "E402"]
"docs/**/*" = ["E501"]
"src/puffinflow/core/observability/**/*" = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["puffinflow"]
force-single-line = false
split-on-trailing-comma = true

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | src/puffinflow/version\.py
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
files = ["src/puffinflow"]
exclude = [
    "tests/",
    "debug_integration_failure.py",
    "examples/",
    "puffinflow/",
    "venv/",
    "htmlcov/",
    "docs/",
    "benchmarks/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "prometheus_client.*",
    "opentelemetry.*",
    "aiohttp.*",
    "aiosmtplib.*",
    "pytest.*",
    "pydantic_settings.*",
    "puffinflow.core.monitoring.*",
    "advanced_workflows.*",
    "basic_agent.*",
    "coordination_examples.*",
    "observability_demo.*",
    "reliability_patterns.*",
    "resource_management.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src/puffinflow",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
    "asyncio: marks tests as requiring asyncio",
    "observability: marks tests as observability-related",
    "tracing: marks tests as tracing-related",
    "metrics: marks tests as metrics-related",
    "alerting: marks tests as alerting-related",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::ResourceWarning",
    "ignore:.*experimental.*:UserWarning:opentelemetry.*",
    "ignore:.*deprecated.*:DeprecationWarning:opentelemetry.*",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "src/puffinflow/version.py",
    "tests/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@.*abstractmethod",
    "TYPE_CHECKING",
    "except ImportError:",
    "print.*",
]
show_missing = true
precision = 2
fail_under = 85

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]
