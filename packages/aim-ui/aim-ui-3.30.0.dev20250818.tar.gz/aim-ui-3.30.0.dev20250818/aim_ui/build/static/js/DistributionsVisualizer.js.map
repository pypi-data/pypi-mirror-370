{"version":3,"sources":["pages/RunDetail/DistributionsVisualizer/temp/Histogram/Histogram.jsx","pages/RunDetail/DistributionsVisualizer/temp/Heatmap/Heatmap.js","pages/RunDetail/DistributionsVisualizer/temp/Wrapper.jsx","pages/RunDetail/DistributionsVisualizer/DistributionVisualizer.tsx","pages/RunDetail/DistributionsVisualizer/index.ts"],"names":["Histogram","props","series","type","data","color","tooltip","pointFormat","line","push","headerFormat","marker","enabled","radius","fillColor","lineWidth","lineColor","symbol","state","options","chart","marginTop","marginBottom","spacing","height","xAxis","labels","align","yAxis","title","tickWidth","text","subtitle","credits","legend","plotOptions","states","inactive","opacity","chartRef","React","createRef","histogram","Highcharts","prevProps","this","current","update","highcharts","ref","Component","defaultProps","Heatmap","serializeData","map","item","max","serializeY","y","Math","round","serializeX","x","getPlotLines","v","width","value","zIndex","tooltipFormatter","maxValue","self","iters","marginRight","boost","useGPUTranslations","categories","showLastLabel","plotLines","cursor","reversed","layout","padding","margin","itemMarginTop","itemMarginBottom","verticalAlign","symbolHeight","colorAxis","stops","min","name","pointFormatter","events","click","dataLabels","addHeatmap","Object","assign","ExperimentDistributionCharts","computeHeatmap","length","setState","histogramLine","heatmapX","heatmapY","heatmapValMax","heatmapData","xMin","xMax","forEach","el","heatmapDataMap","binSize","i","iter","iterIndex","elIndex","yIndex","parseFloat","itemKey","undefined","k","floor","cellVal","reduce","a","b","empty","key","computeHistogram","elem","index","handleClick","e","point","trackEvent","ANALYTICS_EVENT_KEYS","runDetails","tabs","distributions","onClickHeatMapCell","random","className","style","DistributionsVisualizer","ErrorBoundary","BusyLoaderWrapper","isLoading","processedValues","Wrapper","displayName","memo"],"mappings":"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","file":"static/js/DistributionsVisualizer.js?version=bc3992e24c194cb9d7f9","sourcesContent":["// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport histogram from 'highcharts/modules/histogram-bellcurve';\n\nclass Histogram extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let series = [\n      {\n        type: 'histogram',\n        data: this.props.data,\n        color: '#3E72E7',\n        tooltip: {\n          pointFormat:\n            'Bin: <b>{point.x}</b> <br /> Frequency:  <b>{point.y}</b>',\n        },\n      },\n    ];\n\n    if (this.props.line) {\n      series.push({\n        type: 'line',\n        data: this.props.line,\n        color: 'rgb(28, 40, 82)',\n        tooltip: {\n          headerFormat: '',\n          pointFormat: 'Frequency: <b>{point.y}</b>',\n        },\n        marker: {\n          enabled: true,\n          radius: 2,\n          fillColor: '#3b5896',\n          lineWidth: 1,\n          lineColor: 'rgb(28, 40, 82)',\n          symbol: 'circle',\n        },\n      });\n    }\n\n    this.state = {\n      options: {\n        chart: {\n          marginTop: 70,\n          marginBottom: 50,\n          spacing: [10, 20, 10, 10],\n          height: 250,\n        },\n\n        xAxis: {\n          labels: {\n            align: 'center',\n          },\n        },\n\n        yAxis: {\n          title: {\n            enabled: false,\n          },\n          tickWidth: 1,\n        },\n\n        title: {\n          text: null,\n        },\n\n        subtitle: {\n          text: this.props.subtitle,\n        },\n\n        credits: {\n          enabled: false,\n        },\n\n        legend: {\n          enabled: false,\n        },\n        series: series,\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                opacity: 1,\n              },\n            },\n          },\n        },\n      },\n    };\n\n    this.chartRef = React.createRef();\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    histogram(Highcharts);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.chartRef.current.chart.update({\n        series: [\n          {\n            data: this.props.data.data,\n          },\n          {\n            line: this.props.data.line,\n          },\n        ],\n      });\n    }\n  }\n\n  render() {\n    return (\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={this.state.options}\n        ref={this.chartRef}\n      />\n    );\n  }\n}\n\nHistogram.defaultProps = {\n  subtitle: '',\n};\n\nHistogram.propTypes = {\n  data: PropTypes.array,\n  line: PropTypes.array,\n  subtitle: PropTypes.string,\n};\n\nexport default Histogram;\n","import { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport addHeatmap from 'highcharts/modules/heatmap';\n\nclass Heatmap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        chart: {\n          type: 'heatmap',\n          marginTop: 10,\n          marginRight: 80,\n          height: 180,\n          spacing: [10, 20, 10, 10],\n        },\n\n        credits: {\n          enabled: false,\n        },\n\n        boost: {\n          useGPUTranslations: true,\n        },\n\n        title: {\n          text: null,\n        },\n\n        subtitle: {\n          text: null,\n        },\n\n        xAxis: {\n          categories: this.serializeX(),\n          labels: {\n            align: 'center',\n          },\n          showLastLabel: true,\n          plotLines: this.getPlotLines(this.props.cursor),\n        },\n\n        yAxis: {\n          categories: this.serializeY(),\n          title: {\n            enabled: false,\n          },\n          showLastLabel: false,\n          reversed: true,\n        },\n\n        legend: {\n          align: 'right',\n          layout: 'vertical',\n          padding: 0,\n          margin: 10,\n          itemMarginTop: 0,\n          itemMarginBottom: 0,\n          verticalAlign: 'center',\n          symbolHeight: 150,\n        },\n\n        colorAxis: {\n          stops: [\n            [0, '#ffffff'],\n            [0.25, '#abcaf6'],\n            [0.5, '#77a8ef'],\n            [0.75, '#3578e6'],\n            [1, '#225ae0'],\n          ],\n          min: 0,\n          max: 1,\n        },\n        series: [\n          {\n            name: this.props.name,\n            tooltip: {\n              pointFormatter: this.tooltipFormatter(),\n            },\n            data: this.serializeData(this.props.data),\n            events: {\n              click: this.props.click,\n            },\n            dataLabels: {\n              enabled: false,\n            },\n          },\n        ],\n      },\n    };\n\n    this.chartRef = createRef();\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillMount() {\n    addHeatmap(Highcharts);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.x !== this.props.x) {\n      this.chartRef.current.chart.update({\n        xAxis: {\n          categories: this.serializeX(),\n        },\n      });\n    }\n\n    if (prevProps.y !== this.props.y) {\n      this.chartRef.current.chart.update({\n        yAxis: {\n          categories: this.serializeY(),\n        },\n      });\n    }\n\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.max !== this.props.max\n    ) {\n      this.chartRef.current.chart.series[0].update({\n        data: this.serializeData(this.props.data),\n        tooltip: {\n          pointFormatter: this.tooltipFormatter(),\n        },\n      });\n    }\n\n    if (prevProps.cursor !== this.props.cursor) {\n      let xAxis = Object.assign({}, this.state.xAxis);\n      xAxis.plotLines = this.getPlotLines(this.props.cursor);\n\n      this.chartRef.current.chart.update({\n        xAxis,\n      });\n    }\n  }\n\n  serializeData = (data) => {\n    return data.map((item) => {\n      if (this.props.max !== 0) {\n        return [item[0], item[1], item[2] / this.props.max];\n      } else {\n        return [item[0], item[1], 0];\n      }\n    });\n  };\n\n  serializeY = () => {\n    return this.props.y.map((item) => {\n      return '' + Math.round(item * 10000) / 10000;\n    });\n  };\n\n  serializeX = () => {\n    return this.props.x.map((item) => {\n      return `${item}`;\n    });\n  };\n\n  getPlotLines = (v) => {\n    return [\n      {\n        color: '#243969',\n        width: 2,\n        value: v,\n        zIndex: 5,\n      },\n    ];\n  };\n\n  tooltipFormatter = () => {\n    const maxValue = this.props.max;\n    const self = this;\n    return function (tooltip, x = this.x, value = this.value) {\n      return `Step ${self.props.iters[this.x]}: <b>${Math.round(\n        value * maxValue,\n      )}</b>`;\n    };\n  };\n\n  render() {\n    return (\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={this.state.options}\n        ref={this.chartRef}\n      />\n    );\n  }\n}\n\nHeatmap.defaultProps = {\n  name: 'Series',\n  min: 0,\n};\n\nHeatmap.propTypes = {\n  data: PropTypes.array,\n  x: PropTypes.array,\n  y: PropTypes.array,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  click: PropTypes.func,\n  cursor: PropTypes.number,\n  name: PropTypes.string,\n  iters: PropTypes.array,\n};\n\nexport default Heatmap;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport { trackEvent } from 'services/analytics';\n\nimport Histogram from './Histogram/Histogram';\nimport Heatmap from './Heatmap/Heatmap';\n\n//@ TODO change this component to current style\nclass ExperimentDistributionCharts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      empty: true,\n      key: Math.random(),\n    };\n  }\n\n  componentDidMount() {\n    this.computeHeatmap();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.computeHeatmap();\n    }\n\n    if (prevProps.name !== this.props.name) {\n      this.computeHeatmap();\n    }\n  }\n\n  computeHeatmap = () => {\n    if (!this.props.data.length) {\n      this.setState({\n        empty: true,\n      });\n      return;\n    }\n\n    this.setState(\n      {\n        histogram: [],\n        histogramLine: [],\n        heatmapX: [],\n        heatmapY: [],\n        heatmapValMax: null,\n        heatmapData: [],\n        cursor: -1,\n      },\n      () => {\n        const data = this.props.data;\n        const bins = 20;\n\n        let xMin = null;\n        let xMax = null;\n        let heatmapValMax = null;\n\n        data.forEach((el) => {\n          const y = el[1];\n\n          if (xMin == null || y[0] < xMin) {\n            xMin = y[0];\n          }\n\n          if (xMax == null || y[y.length - 1] > xMax) {\n            xMax = y[y.length - 1];\n          }\n        });\n\n        let heatmapDataMap = {};\n        let heatmapData = [];\n        let heatmapX = [];\n        let heatmapY = [];\n\n        const xLen = xMax - xMin;\n        const binSize = xLen / bins;\n\n        for (let i = 0; i < this.props.data.length; i++) {\n          heatmapX.push(`${this.props.iters[i]}`);\n        }\n        for (let i = xMin; i <= xMax; i += binSize) {\n          heatmapY.push(`${i}`);\n        }\n\n        data.forEach((iter, iterIndex) => {\n          iter[0].forEach((el, elIndex) => {\n            let yIndex = 0;\n            for (let i = 1; i < heatmapY.length; i++) {\n              yIndex = i;\n              if (parseFloat(heatmapY[i]) > iter[1][elIndex]) {\n                yIndex--;\n                break;\n              }\n            }\n\n            let itemKey = heatmapX.length * yIndex + iterIndex;\n\n            if (heatmapDataMap[itemKey] === undefined) {\n              heatmapDataMap[itemKey] = [];\n            }\n            heatmapDataMap[itemKey].push(el);\n          });\n        });\n\n        for (let i = 0; i < heatmapX.length * heatmapY.length; i++) {\n          if (heatmapDataMap[i] === undefined) {\n            heatmapDataMap[i] = [0];\n          }\n        }\n\n        for (let k in heatmapDataMap) {\n          let x = Math.floor(k / heatmapX.length);\n          let y = k % heatmapX.length;\n\n          const cellVal = heatmapDataMap[k].reduce((a, b) => a + b);\n          if (heatmapValMax == null || cellVal > heatmapValMax) {\n            heatmapValMax = cellVal;\n          }\n\n          heatmapData.push([y, x, cellVal]);\n        }\n\n        this.setState({\n          heatmapY,\n          heatmapX,\n          heatmapValMax,\n          heatmapData,\n          empty: false,\n          key: this.props.name,\n        });\n\n        this.computeHistogram(0);\n      },\n    );\n  };\n\n  computeHistogram = (i) => {\n    const data = this.props.data;\n\n    if (i >= data.length || this.state.cursor === i) {\n      return;\n    }\n\n    const histogram = data[i][0].map(function (elem, index) {\n      return [data[i][1][index], elem];\n    });\n\n    const histogramLine = data[i][0].map(function (elem, index) {\n      return [(data[i][1][index] + data[i][1][index + 1]) / 2, elem];\n    });\n\n    this.setState({\n      histogram,\n      histogramLine,\n      cursor: i,\n    });\n  };\n\n  handleClick = (e) => {\n    this.computeHistogram(e.point.x);\n    trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.distributions.onClickHeatMapCell,\n    );\n  };\n\n  render() {\n    return (\n      !this.state.empty && (\n        <div\n          key={this.state.key}\n          className='Charts'\n          style={{\n            width: '100%',\n          }}\n        >\n          <Histogram\n            key={this.state.cursor}\n            data={this.state.histogram}\n            line={this.state.histogramLine}\n            subtitle={`Step ${this.props.iters[this.state.cursor]}`}\n          />\n          <Heatmap\n            x={this.state.heatmapX}\n            y={this.state.heatmapY}\n            max={this.state.heatmapValMax}\n            data={this.state.heatmapData}\n            cursor={this.state.cursor}\n            name={'Frequency'}\n            click={(e) => this.handleClick(e)}\n            iters={this.props.iters}\n          />\n        </div>\n      )\n    );\n  }\n}\n\nExperimentDistributionCharts.propTypes = {\n  data: PropTypes.array,\n  name: PropTypes.string,\n  iters: PropTypes.array,\n};\n\nexport default ExperimentDistributionCharts;\n","import React, { memo } from 'react';\n\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IDistributionVisualizerProps } from '../types';\n\nimport Wrapper from './temp/Wrapper';\n\nimport './DistributionsVisualizer.scss';\n\nfunction DistributionsVisualizer(\n  props: IDistributionVisualizerProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        className='VisualizationLoader'\n        isLoading={!!props.isLoading}\n      >\n        <div className='DistributionsVisualizer'>\n          {props.data?.processedValues && (\n            <Wrapper\n              data={props.data?.processedValues}\n              className='Visualizer'\n              iters={props.data.iters}\n            />\n          )}\n        </div>\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nDistributionsVisualizer.displayName = 'DistributionsVisualizer';\n\nexport default memo<IDistributionVisualizerProps>(DistributionsVisualizer);\n","import DistributionsVisualizer from './DistributionVisualizer';\n\nexport default DistributionsVisualizer;\n"],"sourceRoot":""}