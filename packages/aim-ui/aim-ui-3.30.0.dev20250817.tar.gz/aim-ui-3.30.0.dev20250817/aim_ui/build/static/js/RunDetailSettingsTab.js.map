{"version":3,"sources":["components/NameAndDescriptionCard/NameAndDescriptionCard.tsx","components/NameAndDescriptionCard/index.ts","pages/RunDetail/RunDetailSettingsTab/RunDetailSettingsTab.tsx","components/ConfirmModal/ConfirmModal.tsx"],"names":["NameAndDescriptionCard","title","defaultName","defaultDescription","onSave","formik","useFormik","initialValues","name","description","onSubmit","_","noop","validationSchema","yup","required","values","errors","touched","setFieldValue","setFieldTouched","onChange","e","fieldName","target","value","then","ErrorBoundary","className","component","weight","size","tint","Button","onClick","disabled","isEmpty","variant","color","TextField","error","helperText","label","multiline","type","memo","RunDetailSettingsTab","runHash","isArchived","history","useHistory","React","useState","openDeleteModal","setOpenDeleteModal","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","settings","tabView","runDetailAppModel","editRunNameAndDescription","btnTooltip","btnText","onAction","archiveRun","btnProps","classNames","RunDetailSettingsTab__actionCardsCnt__btn__archive","RunDetailSettingsTab__actionCardsCnt__btn__unarchive","open","onCancel","deleteRun","push","text","icon","statusType","confirmBtnText","ConfirmModal","props","onClose","aria-labelledby","aria-describedby","PaperProps","elevation","withOnlyIcon","id","children","cancelBtnText","autoFocus","defaultProps","displayName"],"mappings":"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","file":"static/js/RunDetailSettingsTab.js?version=d1c356a5d7077b5b5b59","sourcesContent":["import React, { memo } from 'react';\nimport * as yup from 'yup';\nimport _ from 'lodash-es';\nimport { useFormik } from 'formik';\n\nimport { Button, TextField } from '@material-ui/core';\n\nimport { Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { INameAndDescriptionCardProps } from '.';\n\nimport './NameAndDescriptionCard.scss';\n\nfunction NameAndDescriptionCard({\n  title = 'Run Properties',\n  defaultName,\n  defaultDescription,\n  onSave,\n}: INameAndDescriptionCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const formik = useFormik({\n    initialValues: {\n      name: defaultName ?? '',\n      description: defaultDescription ?? '',\n    },\n    onSubmit: _.noop,\n    validationSchema: yup.object({\n      name: yup.string().required('Name is a required field'),\n    }),\n  });\n\n  const { values, errors, touched, setFieldValue, setFieldTouched } = formik;\n\n  function onChange(e: React.ChangeEvent<any>, fieldName: string) {\n    setFieldValue(fieldName, e?.target?.value, true).then(() => {\n      setFieldTouched(fieldName, true);\n    });\n  }\n\n  function saveHandler() {\n    onSave(values.name, values.description);\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='NameAndDescriptionCard'>\n        <div className='NameAndDescriptionCard__header'>\n          <Text component='h4' weight={600} size={14} tint={100}>\n            {title}\n          </Text>\n          <Button\n            onClick={saveHandler}\n            disabled={\n              !_.isEmpty(errors) ||\n              (values.name === defaultName &&\n                values.description === defaultDescription)\n            }\n            variant='contained'\n            color='primary'\n            className='NameAndDescriptionCard__saveBtn'\n          >\n            Save\n          </Button>\n        </div>\n        <div className='NameAndDescriptionCard__content'>\n          <div className='NameAndDescriptionCard__content__nameBox'>\n            <TextField\n              variant='outlined'\n              className='TextField__OutLined__Medium NameAndDescriptionCard__content__nameBox__nameInput'\n              value={values.name}\n              onChange={(e) => onChange(e, 'name')}\n              error={!!(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n              label='Name'\n            />\n          </div>\n          <div className='NameAndDescriptionCard__content__descriptionBox'>\n            <TextField\n              variant='outlined'\n              multiline\n              label='Description'\n              type='textarea'\n              className='NameAndDescriptionCard__content__descriptionBox__descriptionInput'\n              value={values.description}\n              onChange={(e) => onChange(e, 'description')}\n              error={!!(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </div>\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(NameAndDescriptionCard);\n","import NameAndDescriptionCard from './NameAndDescriptionCard';\n\nexport * from './NameAndDescriptionCard.d';\n\nexport default NameAndDescriptionCard;\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport { ActionCard, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport NameAndDescriptionCard from 'components/NameAndDescriptionCard';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport { IRunDetailSettingsTabProps } from './types';\n\nimport './RunDetailSettingsTab.scss';\n\nfunction RunDetailSettingsTab({\n  runHash,\n  isArchived,\n  defaultName,\n  defaultDescription,\n}: IRunDetailSettingsTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const history = useHistory();\n  const [openDeleteModal, setOpenDeleteModal] = React.useState<boolean>(false);\n\n  function onRunArchive() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.archiveRun,\n    );\n    runDetailAppModel.archiveRun(runHash, !isArchived);\n  }\n\n  function onRunDelete() {\n    analytics.trackEvent(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.deleteRun,\n    );\n    runDetailAppModel.deleteRun(runHash, () => {\n      history.push('/runs');\n    });\n  }\n\n  function handleDeleteModalOpen() {\n    setOpenDeleteModal(true);\n  }\n\n  function handleDeleteModalClose() {\n    setOpenDeleteModal(false);\n  }\n\n  React.useEffect(() => {\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.settings.tabView);\n  }, []);\n\n  function onSave(name: string, description: string) {\n    runDetailAppModel.editRunNameAndDescription(\n      runHash,\n      name,\n      description,\n      isArchived,\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className='RunDetailSettingsTab'>\n        <div className='RunDetailSettingsTab__actionCardsCnt'>\n          <NameAndDescriptionCard\n            defaultName={defaultName ?? ''}\n            defaultDescription={defaultDescription ?? ''}\n            onSave={onSave}\n          />\n          <ActionCard\n            title={isArchived ? 'Unarchive Run' : 'Archive Run'}\n            description={\n              isArchived\n                ? 'Unarchive runs will appear in search both on Dashboard and Explore.'\n                : 'Archived runs will not appear in search both on Dashboard and Explore.'\n            }\n            btnTooltip={isArchived ? 'Unarchive' : 'Archive'}\n            btnText={isArchived ? 'Unarchive' : 'Archive'}\n            onAction={onRunArchive}\n            btnProps={{\n              variant: 'outlined',\n              className: classNames({\n                RunDetailSettingsTab__actionCardsCnt__btn__archive: !isArchived,\n                RunDetailSettingsTab__actionCardsCnt__btn__unarchive:\n                  isArchived,\n              }),\n            }}\n          />\n\n          <ActionCard\n            title='Delete Run'\n            description='Once you delete a run, there is no going back. Please be certain.'\n            btnTooltip='Delete Run'\n            btnText='Delete'\n            onAction={handleDeleteModalOpen}\n            btnProps={{\n              variant: 'contained',\n              className: 'RunDetailSettingsTab__actionCardsCnt__btn__delete',\n            }}\n          />\n        </div>\n        <ConfirmModal\n          open={openDeleteModal}\n          onCancel={handleDeleteModalClose}\n          onSubmit={onRunDelete}\n          text='Are you sure you want to delete this run?'\n          icon={<Icon name='delete' />}\n          title='Delete run'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunDetailSettingsTab);\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.description && (\n              <Text\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.description}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__text'\n                  weight={400}\n                  component='p'\n                  size={14}\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n"],"sourceRoot":""}