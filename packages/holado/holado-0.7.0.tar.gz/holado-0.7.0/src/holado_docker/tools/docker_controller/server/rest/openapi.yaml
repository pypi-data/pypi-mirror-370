openapi: "3.0.0"
info:
  version: "1"
  title: "Docker Controller API"
  description: |
    API to process some docker actions from anywhere on the network.
    In a microservice architecture, the docker controller can be run in a docker with special privileges,
    whereas all other microservices have user privileges.
    For example, it is usefull for a testing solution needing to restart a microservice of the SUT (System Under Test),
    but the testing solution docker image has not the privileges to do it.
paths:
  /container:
    get:
      description: "List containers and their status"
      parameters:
        - in: "query"
          name: "all"
          description: "if set to 'true', list all containers, not only running ones"
          schema:
            type: "boolean"
            default: false
      responses:
        200:
          description: "List of container names with their status"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
  /container/{name}:
    get:
      description: "Display all information of a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
        - in: "query"
          name: "all"
          description: "if set to 'true', search container in all containers, not only running ones"
          schema:
            type: "boolean"
            default: false
      responses:
        200:
          description: "Container information"
          content:
            application/json:
              schema:
                type: "string"
  /container/{name}/restart:
    put:
      description: "Restart a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /container/{name}/start:
    put:
      description: "Start a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /container/{name}/stop:
    put:
      description: "Stop a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /container/{name}/wait:
    put:
      description: "Wait until a container is stopped"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
components:
  securitySchemes: {}
  schemas:
    DockerControler:
      properties: {}

