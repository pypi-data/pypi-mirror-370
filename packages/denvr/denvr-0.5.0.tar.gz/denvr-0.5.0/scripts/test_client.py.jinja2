import pytest

from typing import Any, Dict

from unittest.mock import Mock
from pytest_httpserver import HTTPServer
from pytest_httpserver.httpserver import UNDEFINED

from denvr.config import Config
from denvr.session import Session
from denvr.{{ module }} import Client
from denvr.validate import validate_kwargs

{% for method in methods %}
def test_{{ method.name }}():
    """
    Unit test default input/output behaviour when mocking the internal Session object.
    """
    config = Config(defaults={}, auth=None)

    session = Mock()
    session.config = config
    client = Client(session)

    {% if method.required %}
    # Check that missing required arguments without a default should through a TypeError
    if any(getattr(config, k, None) is None for k in [ {% if method.required %}"{{ method.required | join('", "') | safe }}"{% endif %} ]):
        with pytest.raises(TypeError, match=r"^Required"):
            client.{{ method.name }}()
    else:
        client.{{ method.name }}()
    {% else %}
    client.{{ method.name }}()
    {% endif %}

    client_kwargs : Dict[str, Any] = {
        {%- if method.params -%}
        {%- for entry in method.params -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
        {%- if method.json -%}
        {%- for entry in method.json -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
    }

    request_kwargs = validate_kwargs(
        '{{ method.method }}',
        '{{ method.path }}',
        {
            {%- if method.params -%}
            'params': {
                {%- for entry in method.params -%}
                {%- if entry.param in method.example %}
                '{{ entry.param }}': {{ method.example[entry.param] | quotify | safe }},
                {%- endif -%}
                {%- endfor -%}
            },
            {%- endif -%}
            {%- if method.json -%}
            'json': {
            {%- for entry in method.json -%}
            {%- if entry.param in method.example -%}
            '{{ entry.param }}': {{ method.example[entry.param] | quotify | safe }},
            {%- endif -%}
            {%- endfor -%}
            },
            {%- endif -%}
        },
        { {% if method.required %}"{{ method.required | join('", "') | safe }}"{% endif %} },
    )

    client.{{ method.name }}(**client_kwargs)

    session.request.assert_called_with(
        '{{ method.method }}',
        '{{ method.path }}',
        **request_kwargs,
    )

def test_{{ method.name }}_httpserver(httpserver: HTTPServer):
    """
    Test we're producing valid session HTTP requests
    """
    config = Config(
        defaults={"server": httpserver.url_for("/")},
        auth=None,
    )

    session = Session(config)
    client = Client(session)

    client_kwargs : Dict[str, Any] = {
        {%- if method.params -%}
        {%- for entry in method.params -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
        {%- if method.json -%}
        {%- for entry in method.json -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
    }

    request_kwargs = validate_kwargs(
        '{{ method.method }}',
        '{{ method.path }}',
        {
            {%- if method.params -%}
            'params': {
                {%- for entry in method.params -%}
                {%- if entry.param in method.example %}
                '{{ entry.param }}': {{ method.example[entry.param] | quotify | safe }},
                {%- endif -%}
                {%- endfor -%}
            },
            {%- endif -%}
            {%- if method.json -%}
            'json': {
            {%- for entry in method.json -%}
            {%- if entry.param in method.example -%}
            '{{ entry.param }}': {{ method.example[entry.param] | quotify | safe }},
            {%- endif -%}
            {%- endfor -%}
            },
            {%- endif -%}
        },
        { {% if method.required %}"{{ method.required | join('", "') | safe }}"{% endif %} },
    )

    # TODO: The request_kwargs response may break if we add schema validation on results.
    httpserver.expect_request(
        '{{ method.path }}',
        method='{{ method.method }}',
        query_string=request_kwargs.get("params", None),
        json=request_kwargs.get("json", UNDEFINED),
    ).respond_with_json(request_kwargs)
    assert client.{{ method.name }}(**client_kwargs) == request_kwargs


@pytest.mark.integration
def test_{{ method.name }}_mockserver(mock_config):
    """
    Test our requests/responses match the open api spec with mockserver.
    """
    session = Session(mock_config)
    client = Client(session)

    client_kwargs : Dict[str, Any] = {
        {%- if method.params -%}
        {%- for entry in method.params -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
        {%- if method.json -%}
        {%- for entry in method.json -%}
        {%- if entry.param in method.example -%}
        '{{ entry.kwarg }}': {{ method.example[entry.param] | quotify | safe }},
        {%- endif -%}
        {%- endfor -%}
        {%- endif -%}
    }

    client.{{ method.name }}(**client_kwargs)
    # TODO: Test return type once we add support for that in our genapi script.

{% endfor %}
