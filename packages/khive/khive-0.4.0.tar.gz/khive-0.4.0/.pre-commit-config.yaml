# .pre-commit-config.yaml

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

ci:
  autofix_commit_msg: "style: [pre-commit.ci] auto fixes [...]"
  autoupdate_commit_msg: "chore: [pre-commit.ci] pre-commit autoupdate"

repos:
  # General file formatting and checks (Essential and not covered by Ruff)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0 # Or the latest stable version
    hooks:
      - id: trailing-whitespace
      - id: mixed-line-ending
        name: "Enforce LF newlines on most files"
        args: ["--fix=lf"]
      - id: end-of-file-fixer
      - id: fix-byte-order-marker
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-case-conflict
      # - id: check-docstring-first # Consider if Ruff's D rules (if enabled in ruff.toml) cover this
      - id: pretty-format-json
        args: ["--autofix", "--indent=2", "--no-sort-keys", "--no-ensure-ascii"]
      - id: check-toml
      - id: check-xml
      - id: check-yaml

  # Markdown formatting (Keep this for *.md files)
  - repo: https://github.com/nozaq/pre-commit-deno
    rev: 0.1.0 # Check for newer versions if desired
    hooks:
      - id: deno-fmt
        name: deno-fmt-md
        files: \.(md|markdown)$
        # types_or: [markdown] # Alternative way to specify files

  # Python linting and formatting with Ruff
  # Ruff's configuration should be in ruff.toml or pyproject.toml [tool.ruff]
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.5.0 # Or your preferred/latest stable Ruff version
    hooks:
      - id: ruff
        name: ruff-lint
        args: [
          --fix,
          --exit-non-zero-on-fix,
        ] # --preview can be set in ruff.toml globally
      # files: \.py$ # Usually not needed, Ruff targets Python files by default
      # types_or: [python, pyi]
      - id: ruff-format
        name: ruff-format
        # args: [--preview] # Only if preview is NOT set globally in ruff.toml and you want it for format specifically
        # files: \.(py|pyi|ipynb)$ # Explicitly include ipynb if you want ruff to format notebooks
        # types_or: [python, pyi, jupyter]

  # Optional: If you still prefer Black for Jupyter notebooks and find ruff-format
  # not yet suitable for your .ipynb files. Test ruff-format on notebooks first.
  - repo: https://github.com/psf/black
    rev: 24.4.2 # Or the version matching your dev dependencies (if any)
    hooks:
      - id: black-jupyter # Or just `id: black` if only for notebooks
        name: black-format-ipynb
        files: \.ipynb$
        # additional_dependencies: ["black[jupyter]"] # if not in global env
