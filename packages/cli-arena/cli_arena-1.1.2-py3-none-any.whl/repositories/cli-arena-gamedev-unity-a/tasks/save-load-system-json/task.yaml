id: save-load-system-json
title: Unity JSON Save/Load System
description: "Implement a comprehensive save/load system for Unity using JSON serialization.\nThe system should handle complex\
  \ game state including player inventory, position, \nstats, and other game data with proper file I/O and error handling.\n\
  \n**Requirements:**\n1. Create GameData class with serializable fields for game state\n2. Implement SaveManager with save/load\
  \ functionality using JSON\n3. Use Unity's JsonUtility for serialization/deserialization\n4. Handle file operations with\
  \ proper error handling\n5. Support CLI commands for save/load operations\n6. Comprehensive unit tests for all functionality\n"
difficulty: hard
estimated_time: 120
framework: Unity/C#
files_to_implement:
- src/SaveLoad/GameData.cs (serializable data structure)
- src/SaveLoad/SaveManager.cs (save/load logic with JSON)
- tests/TestSaveLoad.cs (comprehensive unit tests)
dependencies:
- Unity 2022.3+ (JsonUtility, Application.persistentDataPath)
- System.IO namespace for file operations
- NUnit.Framework for testing
success_criteria:
- GameData class properly serializable with required fields
- SaveManager saves game state to JSON file in persistent storage
- LoadGame handles missing files and returns parsed data
- JSON serialization preserves all data types correctly
- Error handling for file I/O operations
- Unit tests cover all functionality with assertions
- CLI support for manual save/load testing
environment:
  os: ubuntu-24.04
  os_name: Ubuntu 24.04 LTS
  architecture: x86_64
  container: docker
  runtimes:
    python: 3.12.3
    node: 20.x
    go: 1.21.5
    terraform: 1.5.7
  tools:
  - git
  - curl
  - wget
  - sqlite3
  - build-essential
  - tmux
  - asciinema
  - unzip
  note: Tasks run in isolated Docker containers based on Ubuntu 24.04
