id: task-002-ml-predict
title: Implement ML Prediction API
description: "Implement a machine learning prediction API endpoint that can make predictions\nusing a trained model. The system\
  \ should handle model loading, input validation,\nand return structured prediction results.\n\n**Requirements:**\n1. Create\
  \ /predict POST endpoint that accepts 5-feature input arrays\n2. Implement MLPredictor class with model loading/training\
  \ capability  \n3. Add input validation for exactly 5 numerical features\n4. Return prediction result with confidence score\n\
  5. Handle errors for invalid inputs and model failures\n6. Add comprehensive tests for prediction functionality\n"
difficulty: medium
framework: python
estimated_time: 75
files_to_implement:
- src/app/ml_model.py (MLPredictor class and prediction logic)
- src/app/models.py (PredictRequest and PredictResponse models)
- src/app/main.py (FastAPI /predict endpoint)
- tests/test_predict.py (prediction API tests)
dependencies:
- scikit-learn==1.3.0
- numpy==1.24.3
- pandas==2.0.3
success_criteria:
- /predict endpoint accepts POST requests with 5-feature arrays
- MLPredictor loads or trains a classification model
- Input validation rejects requests with wrong feature count
- Responses include prediction result and confidence score
- Error handling for invalid inputs and prediction failures
- Model persistence and loading functionality works
- All tests pass with various input scenarios
environment:
  os: ubuntu-24.04
  os_name: Ubuntu 24.04 LTS
  architecture: x86_64
  container: docker
  runtimes:
    python: 3.12.3
    node: 20.x
    go: 1.21.5
    terraform: 1.5.7
  tools:
  - git
  - curl
  - wget
  - sqlite3
  - build-essential
  - tmux
  - asciinema
  - unzip
  note: Tasks run in isolated Docker containers based on Ubuntu 24.04
