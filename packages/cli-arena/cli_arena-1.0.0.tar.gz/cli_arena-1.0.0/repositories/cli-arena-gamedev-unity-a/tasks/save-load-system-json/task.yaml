id: save-load-system-json
title: Unity JSON Save/Load System
description: |
  Implement a comprehensive save/load system for Unity using JSON serialization.
  The system should handle complex game state including player inventory, position, 
  stats, and other game data with proper file I/O and error handling.
  
  **Requirements:**
  1. Create GameData class with serializable fields for game state
  2. Implement SaveManager with save/load functionality using JSON
  3. Use Unity's JsonUtility for serialization/deserialization
  4. Handle file operations with proper error handling
  5. Support CLI commands for save/load operations
  6. Comprehensive unit tests for all functionality

difficulty: hard
estimated_time: 120
framework: Unity/C#

files_to_implement:
  - src/SaveLoad/GameData.cs (serializable data structure)
  - src/SaveLoad/SaveManager.cs (save/load logic with JSON)
  - tests/TestSaveLoad.cs (comprehensive unit tests)

dependencies:
  - Unity 2022.3+ (JsonUtility, Application.persistentDataPath)
  - System.IO namespace for file operations
  - NUnit.Framework for testing

success_criteria:
  - GameData class properly serializable with required fields
  - SaveManager saves game state to JSON file in persistent storage
  - LoadGame handles missing files and returns parsed data
  - JSON serialization preserves all data types correctly
  - Error handling for file I/O operations
  - Unit tests cover all functionality with assertions
  - CLI support for manual save/load testing
