id: chaos-engineering-k8s
title: "Kubernetes Chaos Engineering CLI"
description: |
  Build a CLI tool to simulate chaos engineering experiments on Kubernetes resources using a local SQLAlchemy database. The tool should:
  - Ingest and manage simulated Kubernetes cluster state (nodes, pods, deployments, services)
  - Allow users to define and run chaos experiments (pod kill, network partition, CPU/memory stress, etc.)
  - Track experiment results, affected resources, and recovery times
  - Provide analytics: most vulnerable services, mean time to recovery, experiment success rates
  - Support rollback and audit logging of all changes
  - All interaction must be via CLI (no web server)
  - Database schema must be non-trivial and analytics-ready
  - Include robust error handling and input validation
  - Use SQLAlchemy ORM for all data storage and queries

author_email: saturn@example.com
difficulty: hard
estimated_time: 180
tags: [kubernetes, chaos-engineering, sqlalchemy, cli, analytics]
prerequisites: []
dependencies:
  python:
    - sqlalchemy>=1.4
    - click>=8.0
    - pandas>=1.3
    - python-dotenv>=0.19
    - rich>=12.0
files_to_modify:
  - src/chaos_engineering_k8s/cli.py
  - src/chaos_engineering_k8s/models.py
  - tasks/chaos-engineering-k8s/tests/test_chaos_engineering_k8s.py
success_criteria:
  - CLI can define, run, and audit chaos experiments
  - Analytics commands work on realistic simulated data
  - All tests pass (5-6 tough cases: e.g., multi-resource chaos, rollback, analytics, error handling)
  - Code coverage >90%
