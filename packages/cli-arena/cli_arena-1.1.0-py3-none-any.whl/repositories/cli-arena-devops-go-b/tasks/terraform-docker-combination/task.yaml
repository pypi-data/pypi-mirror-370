id: terraform-docker-combination
title: Terraform Docker Infrastructure Orchestration
description: 'Build a CLI tool in Go to orchestrate Docker-based infrastructure using Terraform. The tool should:

  - Parse and validate Terraform and Docker Compose files

  - Synchronize Terraform state with running Docker containers

  - Orchestrate multi-environment deployments (dev, staging, prod)

  - Support automated rollback and disaster recovery

  - Provide resource dependency mapping and visualization

  - Perform cost analysis and optimization for infrastructure

  - Integrate with Docker and Terraform CLIs/SDKs

  - All interaction must be via CLI (no web server)

  - Include robust error handling and input validation

  - Output results in both human-readable and machine-readable (JSON) formats

  '
author_email: saturn@example.com
difficulty: hard
estimated_time: 120
tags:
- go
- terraform
- docker
- infrastructure
- automation
- cli
prerequisites: []
files_to_modify:
- src/terraform_docker_combination/main.go
- src/terraform_docker_combination/terraform.go
- src/terraform_docker_combination/docker.go
- src/terraform_docker_combination/orchestrator.go
- src/terraform_docker_combination/cli.go
- tasks/terraform-docker-combination/tests/test_terraform_docker_combination.go
success_criteria:
- CLI can orchestrate Docker infra using Terraform
- Detects and resolves state/config drift
- Supports rollback and cost analysis
- All tests pass (6-7 complex cases: drift, rollback, multi-env, cost, dependency)
- Code coverage >90%
environment:
  os: ubuntu-24.04
  os_name: Ubuntu 24.04 LTS
  architecture: x86_64
  container: docker
  runtimes:
    python: 3.12.3
    node: 20.x
    go: 1.21.5
    terraform: 1.5.7
  tools:
  - git
  - curl
  - wget
  - sqlite3
  - build-essential
  - tmux
  - asciinema
  - unzip
  note: Tasks run in isolated Docker containers based on Ubuntu 24.04
