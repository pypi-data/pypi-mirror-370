Metadata-Version: 2.4
Name: ApiLogicServer
Version: 15.1.3
Author-email: Val Huber <apilogicserver@gmail.com>
License-Expression: BSD-3-Clause
Project-URL: Homepage, https://www.genai-logic.com
Project-URL: Docs, https://apilogicserver.github.io/Docs/Doc-Home/
Project-URL: Source, https://github.com/ApiLogicServer/ApiLogicServer-src
Project-URL: Issues, https://github.com/ApiLogicServer/ApiLogicServer-src/issues
Keywords: Flask,SQLAlchemy,Rules,WebApp,Microservice,ReactAdmin,Angular
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyJWT==2.6.0
Requires-Dist: python-dateutil==2.8.2
Requires-Dist: SQLAlchemy-Utils==0.38.2
Requires-Dist: logicbankutils==0.6.0
Requires-Dist: inflect==5.0.2
Requires-Dist: inflection==0.5.1
Requires-Dist: Flask==2.3.2
Requires-Dist: Flask-Cors==3.0.10
Requires-Dist: Flask-RESTful>=0.3.9
Requires-Dist: flask-restful-swagger-2>=0.35
Requires-Dist: Flask-SQLAlchemy==3.0.3
Requires-Dist: flask-swagger-ui>=4.11.1
Requires-Dist: flask_bcrypt==1.0.1
Requires-Dist: itsdangerous==2.1.2
Requires-Dist: Jinja2==3.1.5
Requires-Dist: MarkupSafe==2.1.3
Requires-Dist: six==1.16.0
Requires-Dist: SQLAlchemy>=2.0.39
Requires-Dist: Werkzeug==2.3.3
Requires-Dist: safrs>=3.1.7
Requires-Dist: Flask-Admin==1.5.7
Requires-Dist: Flask-JWT-Extended==4.4.4
Requires-Dist: Flask-Login==0.6.2
Requires-Dist: Flask-OpenID==1.3.0
Requires-Dist: python-dotenv==0.15.0
Requires-Dist: email-validator==1.1.1
Requires-Dist: LogicBank>=1.30.00
Requires-Dist: cryptography==36.0.1
Requires-Dist: rsa
Requires-Dist: PyMySQL==1.0.3
Requires-Dist: oracledb==2.1.2
Requires-Dist: requests==2.31.0
Requires-Dist: gunicorn==20.1.0
Requires-Dist: psycopg2-binary>=2.9.5; python_version < "3.13"
Requires-Dist: psycopg[binary]>=3.1.0; python_version >= "3.13"
Requires-Dist: dotmap==1.3.25
Requires-Dist: WTForms==2.3.3
Requires-Dist: behave==1.2.6
Requires-Dist: alembic==1.7.7
Requires-Dist: python-ulid==2.7.0
Requires-Dist: psutil==6.0.0
Requires-Dist: pandas==2.2.2
Requires-Dist: openpyxl==3.1.5
Requires-Dist: GeoAlchemy2==0.12.5
Requires-Dist: confluent-kafka==2.6.0
Requires-Dist: translate==3.6.1
Requires-Dist: libretranslatepy==2.1.1
Requires-Dist: reportlab==4.2.0
Requires-Dist: xlsxwriter==3.2.0
Requires-Dist: natsort==8.4.0
Requires-Dist: astor==0.8.1
Requires-Dist: colorama==0.4.6
Requires-Dist: openai==1.55.3
Dynamic: license-file

[![Downloads](https://pepy.tech/badge/apilogicserver)](https://pepy.tech/project/apilogicserver)
[![Latest Version](https://img.shields.io/pypi/v/apilogicserver.svg)](https://pypi.python.org/pypi/apilogicserver/)
[![Supported Python versions](https://img.shields.io/pypi/pyversions/apilogicserver.svg)](https://pypi.python.org/pypi/apilogicserver/)

&nbsp;

# TL;DR

Create an executable project (MCP-enabled API and Admin App) from a database or natural language prompt with 1 command; customize with declarative rules and Python in your IDE, containerize and deploy.

&nbsp;

<details markdown>

<summary>Video Overview (4 min)</summary>

&nbsp;

See how **Microservice Automation** creates and runs a microservice - a multi-page app, and an API. 

* Here is a microservice -- api and admin app -- **created / running in 5 seconds**

    * It would be similar for your own databases

* Then, customize in your IDE with Python and **Logic Automation:** spreadsheet-like rules

[![GenAI Automation](https://raw.githubusercontent.com/ApiLogicServer/Docs/main/docs/images/sample-ai/copilot/genai-automation-video.png)](https://www.youtube.com/watch?v=7I33Fa9Ulos "Microservice Automation")

</details>

&nbsp;

# Quickstart

If you have a supported Python (version 3.10 - 3.12), install is standard, typically:

```bash title="Install API Logic Server in a Virtual Environment"
python3 -m venv venv                 # windows: python -m venv venv
source venv/bin/activate             # windows: venv\Scripts\activate
python -m pip install ApiLogicServer
```

<br>Now, verify it's working - open the Project Manager for instructions (readme), and run the demo:

```bash title="Start Manager"
ApiLogicServer start
```

Find the [user documentation here](https://apilogicserver.github.io/Docs/).  Use this for normal installation, to create and customize API Logic Projects.

To install the ***dev*** version, [see here](https://apilogicserver.github.io/Docs/Architecture-Internals).  This installs the source of API Logic Server, so you can explore or extend it.

&nbsp;

# Welcome to API Logic Server

For Developers and their organizations seeking to **increase business agility,**

API Logic Server provides ***Microservice Automation:*** create executable projects with 1 command:

1. ***MCP-enabled API Automation:*** crud for each table, with pagination, optimistic locking, filtering and sorting, and

2. ***App Automation:*** a multi-page, multi-table Admin App.  <br>

**Customize in your IDE:** use standard tools (Python, Flask, SQLAlchemy, GitHub and Docker), plus<br>

3. ***Logic Automation:*** unique **rules - 40X** more concise multi-table derivations and constraints.

Unlike frameworks, weeks-to-months of complex development is no longer necessary.  <br>
API Logic Server provides unique automation **for instant integrations and app backends**.


&nbsp;

For more information, including install procedures, [please see the docs](https://apilogicserver.github.io/Docs/).

&nbsp;

### Making Contributions

This is an open source project.  We are open to suggestions.  Some of our ideas include:

| Component           | Provides         | Consider Adding                                                                |
|:---------------------------|:-----------------|:-------------------------------------------------------------------------------|
| 1. JSON:**API** and Swagger | API Execution    | Serverless, Kubernetes        | 
| 2. Transactional **Logic**   | Rule Enforcement | Recompute Derivations        |
| 3. This project | API Logic Project Creation | General support - see issues |
| 3. GenAI | Web version | Create projects with logic |

&nbsp; 
