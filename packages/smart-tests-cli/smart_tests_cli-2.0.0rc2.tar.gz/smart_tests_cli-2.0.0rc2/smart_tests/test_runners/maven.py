import glob
import os
from typing import Annotated, Dict, List

import typer

from smart_tests.utils import glob as uglob
from smart_tests.utils.java import junit5_nested_class_path_builder

from . import smart_tests

# Surefire has the default inclusion pattern
# https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#includes
# and the default exclusion pattern
# https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#excludes
# these variables emulates those effects.
# TODO: inclusion/exclusion are user configurable patterns, so it should be user configurable
# beyond that and to fully generalize this, there's internal discussion of
# this at https://launchableinc.atlassian.net/l/c/TXDJnn09
includes = [uglob.compile(x) for x in [
    # HACK: we check extensions outside the glob. We seem to allow both source
    # file enumeration and class file enumeration
    '**/Test*.*',
    '**/*Test.*',
    '**/*Spec.*',
    '**/*Tests.*',
    '**/*TestCase.*'
]]
excludes = [uglob.compile(x) for x in [
    '**/*$*'
]]

# Test if a given path name is a test that Surefire recognizes


def is_file(f: str) -> bool:
    if not (f.endswith('.java') or f.endswith(".scala") or f.endswith(".kt") or f.endswith(".class") or f.endswith(".groovy")):
        return False
    for p in excludes:
        if p.fullmatch(f):
            return False
    for p in includes:
        if p.fullmatch(f):
            return True
    return False


@smart_tests.subset
def subset(
    client,
    source_roots: Annotated[List[str] | None, typer.Argument(
        help="Source root directories to scan for tests"
    )] = None,
    test_compile_created_file: Annotated[List[str] | None, typer.Option(
        "--test-compile-created-file",
        help="Please run `mvn test-compile` command to create input file for this option"
    )] = None,
    is_scan_test_compile_lst: Annotated[bool, typer.Option(
        "--scan-test-compile-lst",
        help="Scan testCompile/default-testCompile/createdFiles.lst for *.lst files generated by `mvn compile` and "
             "use them as test inputs."
    )] = False,
):

    def file2class_test_path(f: str) -> List[Dict[str, str]]:
        # remove extension
        f, _ = os.path.splitext(f)

        # directory -> package name conversion
        cls_name = f.replace(os.path.sep, '.')
        return [{"type": "class", "name": cls_name}]

    def file2test(f: str) -> List | None:
        if is_file(f):
            return file2class_test_path(f)
        else:
            return None

    # Handle None values
    if test_compile_created_file is None:
        test_compile_created_file = []
    if source_roots is None:
        source_roots = []

    files_to_read = list(test_compile_created_file)
    if is_scan_test_compile_lst:
        if len(test_compile_created_file) > 0:
            typer.secho(
                "Warning: --test-compile-created-file is overridden by --scan-test-compile-lst",
                fg=typer.colors.YELLOW, err=True)

        pattern = os.path.join('**', 'createdFiles.lst')
        files_to_read = glob.glob(pattern, recursive=True)

        if not files_to_read:
            typer.secho(
                "Warning: No .lst files. Please run after executing `mvn test-compile`",
                fg=typer.colors.YELLOW,
                err=True)
            return

    if files_to_read:
        for file in files_to_read:
            with open(file, 'r') as f:
                lines = f.readlines()
                if len(lines) == 0:
                    typer.secho(
                        f"Warning: --test-compile-created-file {file} is empty",
                        fg=typer.colors.YELLOW,
                        err=True)

                for line in lines:
                    # trim trailing newline
                    line = line.strip()

                    path = file2test(line)
                    if path:
                        client.test_paths.append(path)
    else:
        for root in source_roots:
            client.scan(root, '**/*', file2test)

    client.run()


# TestNG produces surefire-reports/testng-results.xml in TestNG's native format.
# Surefire produces TEST-*.xml in JUnit format (see Surefire's StatelessXmlReporter.getReportFile)
# In addition, TestNG also produces surefire-reports/junitreports/TEST-*.xml
# (see TestNG's JUnitReportReporter.getFileName)
# And there are more test reports in play.
#
# So to collectly find tests without duplications, we need to find surefire-reports/TEST-*.xml
# not surefire-reports/**/TEST-*.xml nor surefire-reports/*.xml
@smart_tests.record.tests
def record_tests(
    client,
    reports: Annotated[List[str], typer.Argument(
        help="Test report files to process"
    )],
):
    client.path_builder = junit5_nested_class_path_builder(client.path_builder)
    smart_tests.CommonRecordTestImpls.load_report_files(client=client, source_roots=reports)
