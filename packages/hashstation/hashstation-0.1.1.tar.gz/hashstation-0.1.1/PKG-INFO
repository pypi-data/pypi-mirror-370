Metadata-Version: 2.4
Name: hashstation
Version: 0.1.1
Summary: Crack the Hash
Project-URL: Homepage, https://github.com/hadespwnme/kertash
Author-email: hades <hadespwn0@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Hades
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Requires-Dist: requests
Description-Content-Type: text/markdown

# pycrackhash

[![PyPI version](https://img.shields.io/pypi/v/pycrackhash.svg)](https://pypi.org/project/pycrackhash/)
[![Python version](https://img.shields.io/pypi/pyversions/pycrackhash.svg)](https://pypi.org/project/pycrackhash/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**pycrackhash** is a simple Python module for analyzing and cracking hashes using Indonesian wordlists as well as the famous `rockyou.txt`.
It supports cracking a single hash, cracking multiple hashes from a file, and detecting hash types.

---

## Installation

```bash
pip install pycrackhash
```

---

## Features

- Crack a single hash with a specific mode.
- Crack multiple hashes from a file (`all` mode will try all available algorithms).
- Analyze the type of a single hash or all hashes in a file.

---

## Usage Examples

```python
from pycrackhash import crack, crack_file, analyze, analyze_file

# Crack a single hash
status, result = crack("md5", "5d41402abc4b2a76b9719d911017c592")
print(status, result)  # True hello (mode: MD5 (0))

# Crack hashes from a file with all algorithms
for hash_value, status, result in crack_file("hashes.txt", "all"):
    print(hash_value, status, result)

# Analyze a single hash
candidates = analyze("5d41402abc4b2a76b9719d911017c592")
print(candidates)

# Analyze hashes from a file
for hash_value, candidates in analyze_file("hashes.txt"):
    print(hash_value, candidates)
```

---

## Function Parameters

### `crack(mode: str, hash_string: str) -> tuple`
- **mode** (`str`):  
  The hash mode to use. Example: `"md5"` for MD5, `"100"` for SHA1, etc.
- **hash_string** (`str`):  
  The hash value to crack.

**Returns:**
```python
(status: bool, result: str)
```

---

### `crack_file(file_path: str, mode: str) -> generator`
- **file_path** (`str`): Path to the file containing hashes (one hash per line).
- **mode** (`str`): The hash mode to use. Example: `"md5"` for MD5, `"100"` for SHA1, or `"all"` to try every supported mode.

**Yields:**
```python
(hash_value: str, status: bool, result: str)
```

---

### `analyze(hash_string: str) -> dict`
- **hash_string** (`str`): The hash value to analyze.

**Returns:**  
A dictionary with the detected hash type and its description.

---

### `analyze_file(file_path: str) -> generator`
- **file_path** (`str`): Path to the file containing hashes.

**Yields:**  
```python
(hash_value: str, candidates: list)
```

---

## License

MIT License Â© 2025 - Hades