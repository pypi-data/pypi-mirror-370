Metadata-Version: 2.4
Name: x3cflux
Version: 3.0.0a0
Summary: Python interface for 13CFLUX
Keywords: 13C-MFA,MFA,mass-spectrometry,HPC
Author-Email: Anton Stratmann <info@13cflux.net>, Martin Beyss <info@13cflux.net>, Katharina Noeh <info@13cflux.net>
License-Expression: AGPL-3.0-only
License-File: LICENSE
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: POSIX :: Linux
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Project-URL: documentation, https://x3cflux.readthedocs.io
Project-URL: homepage, https://13cflux.net
Project-URL: repository, https://jugit.fz-juelich.de/IBG-1/ModSim/Fluxomics/13CFLUX
Requires-Python: >=3.9
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: joblib
Requires-Dist: cvxpy
Requires-Dist: cyipopt
Requires-Dist: hopsy>=1.6.1
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Description-Content-Type: text/markdown

<img src="https://jugit.fz-juelich.de/IBG-1/ModSim/Fluxomics/13CFLUX/-/raw/develop/docs/source/images/banner.png" width=350>

[![pipeline status](https://jugit.fz-juelich.de/fluxomics/x3cflux/badges/develop/pipeline.svg)](https://jugit.fz-juelich.de/fluxomics/x3cflux/-/commits/develop)
[![coverage report](https://jugit.fz-juelich.de/fluxomics/x3cflux/badges/develop/coverage.svg)](https://jugit.fz-juelich.de/fluxomics/x3cflux/-/commits/develop)

is a high-performance simulator for isotopically stationary and non-stationary simulation of isotope labeling
experiments.

## Installation

### Python Package Index (PyPI)

The recommended way for practitioners to install *13CFLUX* is via *pip* from the Python Package Index. It is the most
careless and easy, but will be slightly slower than a source build. Just run

```shell
pip install x3cflux
```

It is recommended to do this in a Python environment.

### Source build

#### Requirements

The following requirements have to be met to install *13CFLUX*:

- C++17 capable compiler (currently supported: *gcc*, *clang*)
- *CMake* (>= 3.0)
- *Boost*: log, date time, unit test framework (>= 1.65)
- *FluxML* (compiled with --enable-pic to build the python wrapper)
- *OpenMP* (>= 3.0, optional)

#### PyProject build

The most easy way to install from source is to run

```shell
pip install .
```

in the root directory of the project. This will compile the project.

#### CMake build

Change into the project root directory and open a terminal. Then enter

```shell script
mkdir build && cd build
```

In the build directory run

```shell script
cmake ..
```

to configure *CMake*. You can supply this call with `-DBUILD_TESTS=ON` to enable testing or `-DBUILD_NATIVE=ON` to
optimize the binary to the compilation machine. After that you can build *13CFLUX* with

```shell script
cmake --build .
```

Open a terminal in the build directory and enter

```shell script
sudo make install
```

## Development

The development of *13CFLUX* primarily takes place on
[JuGit](https://jugit.fz-juelich.de/IBG-1/ModSim/Fluxomics/13CFLUX), where we have access to powerful continuous
integration and a Docker registry. The GitHub repository is only a mirror, so please report issues and make pull
requests on JuGit.

## Citing