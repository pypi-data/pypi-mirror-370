<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="false">

  <extensions>
    <add assembly="Mozart.NLog" />
  </extensions>

  <variable name="working-dir" value="${mz:working-dir}" />

  <variable name="abs-dir" value="${when:when=contains('${mz:#log-dir}',':'):inner=${mz:#log-dir}}" />
  <variable name="log-dir" value="${whenEmpty:whenEmpty=${working-dir}\Logs\${mz:#log-dir}:inner=${abs-dir}}" />

  <!--<variable name="log-dir" value="${working-dir}\Logs\${mz:#log-dir}" />-->
  <!--<variable name="log-dir" value="${whenEmpty:whenEmpty=${working-dir}\Logs:inner=${mz:#log-dir}}" />-->

  <targets async="true">
    	<default-wrapper xsi:type="AsyncWrapper">  
          <wrapper xsi:type="RetryingWrapper" retryCount="10" retryDelayMilliseconds="5000"/>  
    </default-wrapper> 
    <target xsi:type="File"
            name="system"
            layout="Timestamp: ${longdate}${newline}Message: ${message}${onexception:${newline}EXCEPTION\: ${exception:format=ToString}}${newline}Severity: ${level:uppercase:true}${newline}--------------------------------------------------------------------"
            fileName="${working-dir}\Logs\System\app.${date:format=yyyyMMdd}.legacy.log"
            encoding="UTF-8"
            keepFileOpen="false"
            archiveFileName="${working-dir}\Logs\System\app.{#}.log"
            archiveNumbering="Date"
            archiveEvery="Day"
            archiveDateFormat="yyyyMMdd-000000"
            maxArchiveFiles="60"
            />

    <target xsi:type="File"
            name="web"
            layout="Timestamp: ${longdate}${newline}Message: ${message}${onexception:${newline}EXCEPTION\: ${exception:format=ToString}}${newline}Severity: ${level:uppercase:true}${newline}--------------------------------------------------------------------"
            fileName="${working-dir}\Logs\System\WebService\app.${date:format=yyyyMMdd}.legacy.log"
			encoding="UTF-8"
            keepFileOpen="false"
            archiveFileName="${working-dir}\Logs\System\WebService\web.{#}.log"
            archiveNumbering="Date"
            archiveEvery="Day"
            archiveDateFormat="yyyyMMdd-000000"
            maxArchiveFiles="60"
            />

    <target xsi:type="File"
            name="serviceHost"
            layout="Timestamp: ${longdate}${newline}Message: ${message}${onexception:${newline}EXCEPTION\: ${exception:format=ToString}}${newline}Severity: ${level:uppercase:true}${newline}--------------------------------------------------------------------"
            fileName="${working-dir}\Logs\ServiceHost\app.${date:format=yyyyMMdd}.legacy.log"
			encoding="UTF-8"
            keepFileOpen="false"
            archiveFileName="${working-dir}\Logs\ServiceHost\app.{#}.log"
            archiveNumbering="Date"
            archiveEvery="Day"
            archiveDateFormat="yyyyMMdd-000000"
            maxArchiveFiles="60"
            />

    <target xsi:type="File"
            name="model"
            layout="${message}"
            fileName="${log-dir}\${logger}-${mz:log-key}-${mz:#log-time}.log"
			encoding="UTF-8"
            keepFileOpen="false"
            />

    <target name="asyncWrapper" xsi:type="AsyncWrapper" queueLimit="1">
      <target xsi:type="File"
              name="simple"
              layout="${message}"
              fileName="${log-dir}\${logger}-${mz:log-key}-${mz:#log-time}.log"
			  encoding="UTF-8"
              keepFileOpen="false"
            />
    </target>

    <target xsi:type="Database"
            name="execDB"
            keepConnection="false"
            useTransactions="false"
            dbProvider="System.Data.SQLite.SQLiteConnection, System.Data.SQLite"
            connectionString="Data Source=SchedulerLogging.db"
            commandType="Text"
            commandText="
            CREATE TABLE IF NOT EXISTS ${mz:@TABLE_NAME} (
              [TRIGGER_NAME] VARCHAR(50), 
              [SCHEDULED_TIME] DATETIME, 
              [START_TIME] DATETIME, 
              [END_TIME] DATETIME, 
              [RESULT] VARCHAR(10), 
              [ERROR_TIME] DATETIME, 
              [ERROR_MESSAGE] TEXT, 
              [PERFORMANCE_PROFILING] BOOLEAN, 
              CONSTRAINT [] PRIMARY KEY ([TRIGGER_NAME], [SCHEDULED_TIME]));
            INSERT OR REPLACE INTO ${mz:@TABLE_NAME}
            (
              TRIGGER_NAME, 
              SCHEDULED_TIME,
              START_TIME,
              END_TIME,
              RESULT,
              ERROR_TIME,
              ERROR_MESSAGE,
              PERFORMANCE_PROFILING
            ) 
            VALUES 
            (
              @TRIGGER_NAME,
              datetime(@SCHEDULED_TIME),
              COALESCE((SELECT START_TIME FROM ${mz:@TABLE_NAME} WHERE TRIGGER_NAME = @TRIGGER_NAME AND SCHEDULED_TIME = datetime(@SCHEDULED_TIME)), datetime(@START_TIME)),
              datetime(@END_TIME),
              @RESULT,
              datetime(@ERROR_TIME),
			        ( SELECT  CASE WHEN  ERROR_MESSAGE = '' OR ERROR_MESSAGE ISNULL THEN @ERROR_MESSAGE ELSE ERROR_MESSAGE END	MESSAGE
              FROM ${mz:@TABLE_NAME}  WHERE TRIGGER_NAME =@TRIGGER_NAME AND SCHEDULED_TIME = datetime(@SCHEDULED_TIME)),
              COALESCE((SELECT PERFORMANCE_PROFILING FROM ${mz:@TABLE_NAME} WHERE TRIGGER_NAME = @TRIGGER_NAME AND SCHEDULED_TIME = datetime(@SCHEDULED_TIME)), @PERFORMANCE_PROFILING)
            )">
      <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
      <parameter name="@SCHEDULED_TIME" layout="${mz:@SCHEDULED_TIME}" />
      <parameter name="@START_TIME" layout="${mz:@START_TIME}" />
      <parameter name="@END_TIME" layout="${mz:@END_TIME}" />
      <parameter name="@RESULT" layout="${mz:@RESULT}" />
      <parameter name="@ERROR_TIME" layout="${mz:@ERROR_TIME}" />
      <parameter name="@ERROR_MESSAGE" layout="${mz:@ERROR_MESSAGE}" />
      <parameter name="@PERFORMANCE_PROFILING" layout="${mz:@PERFORMANCE_PROFILING}" />
    </target>

    <target xsi:type="Database"
        name="runTimeDB"
        keepConnection="false"
        useTransactions="false"
        dbProvider="System.Data.SQLite.SQLiteConnection, System.Data.SQLite"
        connectionString="Data Source=SchedulerLogging.db"
        commandType="Text"
        commandText="
            CREATE TABLE IF NOT EXISTS ${mz:@TABLE_NAME} (
              [TRIGGER_NAME] VARCHAR(50), 
              [RUN_TIME] DATETIME, 
              [ACTION_ID] VARCHAR(10), 
              [START_TIME] DATETIME, 
              [END_TIME] DATETIME, 
              [UPDATE_TIME] DATETIME,
              PRIMARY KEY(TRIGGER_NAME, RUN_TIME, ACTION_ID));
            INSERT OR REPLACE INTO ${mz:@TABLE_NAME} 
            (
              TRIGGER_NAME, 
              RUN_TIME,
              ACTION_ID,
              START_TIME,
              END_TIME,
              UPDATE_TIME
            ) 
            VALUES 
            (
              @TRIGGER_NAME,
              datetime(@RUN_TIME),
              @ACTION_ID,
              COALESCE((SELECT START_TIME FROM ${mz:@TABLE_NAME} WHERE TRIGGER_NAME = @TRIGGER_NAME AND RUN_TIME = datetime(@RUN_TIME) AND ACTION_ID = @ACTION_ID), datetime(@START_TIME)),
              datetime(@END_TIME),
              datetime(@UPDATE_TIME)
            )">
      <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
      <parameter name="@RUN_TIME" layout="${mz:@RUN_TIME}" />
      <parameter name="@ACTION_ID" layout="${mz:@ACTION_ID}" />
      <parameter name="@START_TIME" layout="${mz:@START_TIME}" />
      <parameter name="@END_TIME" layout="${mz:@END_TIME}" />
      <parameter name="@UPDATE_TIME" layout="${mz:@UPDATE_TIME}" />
    </target>

    <target xsi:type="Database"
            name="interruptDB"
            keepConnection="false"
            useTransactions="false"
            dbProvider="System.Data.SQLite.SQLiteConnection, System.Data.SQLite"
            connectionString="Data Source=DeployLogging.db"
            commandType="Text"
            commandText="
            UPDATE
	            ${mz:@TABLE_NAME}
            SET 
	            END_TIME = datetime(@END_TIME),
	            RESULT = @RESULT
            WHERE 
	          (
	            (TRIGGER_NAME = @TRIGGER_NAME) AND 
	            (SCHEDULED_TIME = datetime(@SCHEDULED_TIME))
            )">

      <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
      <parameter name="@SCHEDULED_TIME" layout="${mz:@SCHEDULED_TIME}" />
      <parameter name="@END_TIME" layout="${mz:@END_TIME}" />
      <parameter name="@RESULT" layout="${mz:@RESULT}" />
    </target>

	  <target xsi:type="Database"
		name="execDB_PostgreSQL"
		keepConnection="false"
		useTransactions="false"
		dbProvider="Npgsql.NpgsqlConnection, Npgsql"
		connectionString="User ID=sa;Password=mozart;Host=localhost;Port=5432;Database=mozart;"
		commandType="Text"
		commandText="CREATE TABLE IF NOT EXISTS &quot;${mz:@TABLE_NAME}&quot; (&quot;TRIGGER_NAME&quot; VARCHAR(100), &quot;SCHEDULED_TIME&quot; TIMESTAMP, &quot;START_TIME&quot; TIMESTAMP, &quot;END_TIME&quot; TIMESTAMP, &quot;RESULT&quot; VARCHAR(30), &quot;ERROR_TIME&quot; TIMESTAMP, &quot;ERROR_MESSAGE&quot; TEXT, &quot;PERFORMANCE_PROFILING&quot; INT, PRIMARY KEY (&quot;TRIGGER_NAME&quot;, &quot;SCHEDULED_TIME&quot;)); INSERT INTO &quot;${mz:@TABLE_NAME}&quot; (&quot;TRIGGER_NAME&quot;, &quot;SCHEDULED_TIME&quot;, &quot;START_TIME&quot;, &quot;PERFORMANCE_PROFILING&quot;) VALUES (@TRIGGER_NAME, @SCHEDULED_TIME::TIMESTAMP, @START_TIME::TIMESTAMP, @PERFORMANCE_PROFILING::INTEGER) ON CONFLICT (&quot;TRIGGER_NAME&quot;, &quot;SCHEDULED_TIME&quot;) DO UPDATE SET &quot;END_TIME&quot; = @END_TIME::TIMESTAMP, &quot;RESULT&quot; = @RESULT, &quot;ERROR_TIME&quot; = (SELECT CASE WHEN EXTRACT('YEAR' FROM @ERROR_TIME::TIMESTAMP) = 1 THEN NULL ELSE @ERROR_TIME::TIMESTAMP END), &quot;ERROR_MESSAGE&quot; = NULLIF(@ERROR_MESSAGE, '')">
		  <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
		  <parameter name="@SCHEDULED_TIME" layout="${mz:@SCHEDULED_TIME}" />
		  <parameter name="@START_TIME" layout="${mz:@START_TIME}" />
		  <parameter name="@END_TIME" layout="${mz:@END_TIME}" />
		  <parameter name="@RESULT" layout="${mz:@RESULT}" />
		  <parameter name="@ERROR_TIME" layout="${mz:@ERROR_TIME:whenEmpty=${literal:text=0001-01-01T12\:00\:00}}" />
		  <parameter name="@ERROR_MESSAGE" layout="${mz:@ERROR_MESSAGE}" />
		  <parameter name="@PERFORMANCE_PROFILING" layout="${mz:@PERFORMANCE_PROFILING}" />
	  </target>

	  <target xsi:type="Database"
		  name="runTimeDB_PostgreSQL"
		  keepConnection="false"
		  useTransactions="false"
		  dbProvider="Npgsql.NpgsqlConnection, Npgsql"
		  connectionString="User ID=sa;Password=mozart;Host=localhost;Port=5432;Database=mozart;"
		  commandType="Text"
		  commandText="CREATE TABLE IF NOT EXISTS &quot;${mz:@TABLE_NAME}&quot; (&quot;TRIGGER_NAME&quot; VARCHAR(100), &quot;RUN_TIME&quot; TIMESTAMP, &quot;ACTION_ID&quot; VARCHAR(30), &quot;START_TIME&quot; TIMESTAMP, &quot;END_TIME&quot; TIMESTAMP, &quot;UPDATE_TIME&quot; TIMESTAMP, PRIMARY KEY(&quot;TRIGGER_NAME&quot;, &quot;RUN_TIME&quot;, &quot;ACTION_ID&quot;)); INSERT INTO &quot;${mz:@TABLE_NAME}&quot; (&quot;TRIGGER_NAME&quot;, &quot;RUN_TIME&quot;, &quot;ACTION_ID&quot;, &quot;START_TIME&quot;, &quot;UPDATE_TIME&quot;) VALUES (@TRIGGER_NAME, @RUN_TIME::TIMESTAMP, @ACTION_ID, @START_TIME::TIMESTAMP, @UPDATE_TIME::TIMESTAMP) ON CONFLICT (&quot;TRIGGER_NAME&quot;, &quot;RUN_TIME&quot;, &quot;ACTION_ID&quot;) DO UPDATE SET &quot;END_TIME&quot; = @END_TIME::TIMESTAMP, &quot;UPDATE_TIME&quot; = @UPDATE_TIME::TIMESTAMP">
		  <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
		  <parameter name="@RUN_TIME" layout="${mz:@RUN_TIME}" />
		  <parameter name="@ACTION_ID" layout="${mz:@ACTION_ID}" />
		  <parameter name="@START_TIME" layout="${mz:@START_TIME:whenEmpty=${longdate}}" />
		  <parameter name="@END_TIME" layout="${mz:@END_TIME:whenEmpty=${longdate}}" />
		  <parameter name="@UPDATE_TIME" layout="${mz:@UPDATE_TIME}" />
	  </target>

	  <target xsi:type="Database"
			  name="interruptDB_PostgreSQL"
			  keepConnection="false"
			  useTransactions="false"
			  dbProvider="Npgsql.NpgsqlConnection, Npgsql"
			  connectionString="User ID=sa;Password=mozart;Host=localhost;Port=5432;Database=mozart;"
			  commandType="Text"
			  commandText="
            UPDATE
	            &quot;${mz:@TABLE_NAME}&quot;
            SET 
	            END_TIME = @END_TIME::TIMESTAMP,
	            RESULT = @RESULT
            WHERE 
	          (
	            (TRIGGER_NAME = @TRIGGER_NAME) AND 
	            (SCHEDULED_TIME = @SCHEDULED_TIME::TIMESTAMP)
            )">

		  <parameter name="@TRIGGER_NAME" layout="${mz:@TRIGGER_NAME}" />
		  <parameter name="@SCHEDULED_TIME" layout="${mz:@SCHEDULED_TIME}" />
		  <parameter name="@END_TIME" layout="${mz:@END_TIME}" />
		  <parameter name="@RESULT" layout="${mz:@RESULT}" />
	  </target>

  </targets>
  <rules>
    <logger name="General" writeTo="system" minlevel="info" final="true" />
    <logger name="serviceHost" writeTo="serviceHost" minlevel="info" final="true" />
    <logger name="webService" writeTo="web" minlevel="info" final="true" />
    <logger name="task" writeTo="model" minlevel="info" final="true" />
    <logger name="persists" writeTo="model" minlevel="info" final="true" />
    <logger name="execution" writeTo="model" minlevel="info" final="true" />
    <logger name="execDB" writeTo="execDB" minlevel="info" final="true"/>
    <logger name="runTimeDB" writeTo="runTimeDB" minlevel="info" final="true"/>
    <logger name="interruptDB" writeTo="interruptDB" minlevel="info" final="true"/>
    <logger name="*" writeTo="simple" minlevel="info" />
  </rules>
</nlog>
