"""
Copyright (C) Cross The Road Electronics.Â  All rights reserved.
License information can be found in CTRE_LICENSE.txt
For support and suggestions contact support@ctr-electronics.com or file
an issue tracker at https://github.com/CrossTheRoadElec/Phoenix-Releases
"""

from phoenix6.status_code import StatusCode
from phoenix6.phoenix_native import Native
import ctypes
from phoenix6.units import *
from phoenix6.sim.chassis_reference import ChassisReference
from phoenix6.sim.device_type import DeviceType

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from phoenix6.hardware.core.core_talon_fxs import CoreTalonFXS

class TalonFXSSimState:
    """
    Creates an object to control the state of a simulated TalonFXS.

    Note the recommended method of accessing simulation features is
    to use TalonFXS.sim_state.

    :param device: Device to which this simulation state is attached
    :type device: CoreTalonFXS
    :param motor_orientation: Orientation of the motor (and commutation sensor)
                              relative to the robot chassis
    :type motor_rientation: ChassisReference
    :param ext_sensor_orientation: Orientation of the external sensor
                                   relative to the robot chassis
    :type ext_sensor_orientation: ChassisReference
    """

    __device_type = DeviceType.P6_TalonFXSType

    def __init__(
        self,
        device: 'CoreTalonFXS',
        motor_orientation: ChassisReference = ChassisReference.CounterClockwise_Positive,
        ext_sensor_orientation: ChassisReference = ChassisReference.CounterClockwise_Positive
    ):
        self._id = device.device_id

        self.motor_orientation = motor_orientation
        """
        The orientation of the motor attached to the TalonFXS relative
		to the robot chassis. This include the Commutation sensor source.

        This value should not be changed based on the TalonFXS invert.
        Rather, this value should be changed when the mechanical linkage
        between the motor and the robot changes.
        """
        self.ext_sensor_orientation = ext_sensor_orientation
        """
	    The orientation of an external sensor attached to the TalonFXS
	    relative to the robot chassis. This does NOT include the Commutation
	    sensor source.

	    This value should not be changed based on the TalonFXS invert.
	    Rather, this value should be changed when the mechanical linkage
	    between the external sensor and the robot changes.
        """
        self.quadrature_edges_per_rotation: int = 4096
        """
        The number of quadrature edges per sensor rotation for an external
        quadrature sensor attached to the TalonFXS.
        """

    @property
    def last_status_code(self) -> StatusCode:
        """
        Gets the last status code generated by a simulation function.

        Not all functions return a status code but can potentially report errors.
        This function can be used to retrieve those status codes.

        :returns: Last status code generated by a simulation function
        :rtype: StatusCode
        """
        return StatusCode(Native.instance().c_ctre_phoenix6_platform_sim_get_last_error(self.__device_type.value, self._id))

    @property
    def motor_voltage(self) -> volt:
        """
        Gets the simulated output voltage of the motor.
        
        :returns: Voltage applied to the motor in Volts
        :rtype: volt
        """
        value = ctypes.c_double()
        Native.instance().c_ctre_phoenix6_platform_sim_get_physics_value(self.__device_type.value, self._id, ctypes.c_char_p(b"MotorVoltage"), ctypes.byref(value))
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            value.value = -value.value
        return value.value

    @property
    def torque_current(self) -> ampere:
        """
        Gets the simulated output torque current of the motor.

        Phoenix 6 simulation automatically calculates current.
        
        :returns: Torque current applied to the motor in Amperes
        :rtype: ampere
        """
        value = ctypes.c_double()
        Native.instance().c_ctre_phoenix6_platform_sim_get_physics_value(self.__device_type.value, self._id, ctypes.c_char_p(b"TorqueCurrent"), ctypes.byref(value))
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            value.value = -value.value
        return value.value

    @property
    def supply_current(self) -> ampere:
        """
        Gets the simulated supply current of the TalonFXS.

        Phoenix 6 simulation automatically calculates current.
        
        :returns: Supply current of the TalonFXS in Amperes
        :rtype: ampere
        """
        value = ctypes.c_double()
        Native.instance().c_ctre_phoenix6_platform_sim_get_physics_value(self.__device_type.value, self._id, ctypes.c_char_p(b"SupplyCurrent"), ctypes.byref(value))
        return value.value
    
    @property
    def analog_voltage(self) -> volt:
        """
        Gets the simulated analog voltage of the TalonFXS.
        
        :returns: Voltage of the simulated analog input pin on the TalonFXS.
        :rtype: volt
        """
        value = ctypes.c_double()
        Native.instance().c_ctre_phoenix6_platform_sim_get_physics_value(self.__device_type.value, self._id, ctypes.c_char_p(b"AnalogVoltage"), ctypes.byref(value))
        return value.value

    def set_supply_voltage(self, volts: volt) -> StatusCode:
        """
        Sets the simulated supply voltage of the TalonFXS.

        The minimum allowed supply voltage is 4 V - values below this
        will be promoted to 4 V.

        :param volts: The supply voltage in Volts
        :type volts: volt
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"SupplyVoltage"), volts)
        )

    def set_forward_limit(self, closed: bool) -> StatusCode:
        """
        Sets the simulated forward limit switch of the TalonFXS.

        :param closed: Whether the limit switch is closed
        :type closed: bool
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"ForwardLimit"), 1.0 if closed else 0.0)
        )

    def set_reverse_limit(self, closed: bool) -> StatusCode:
        """
        Sets the simulated reverse limit switch of the TalonFXS.

        :param closed: Whether the limit switch is closed
        :type closed: bool
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"ReverseLimit"), 1.0 if closed else 0.0)
        )

    def set_raw_rotor_position(self, rotations: rotation) -> StatusCode:
        """
        Sets the simulated raw rotor position of the TalonFXS. This is the position
	    of the rotor (before gear ratio) used for the Commutation feedback source.

        Inputs to this function over time should be continuous, as user calls of
        TalonFXS.set_position will be accounted for in the callee.

        The TalonFXS integrates this to calculate the true reported rotor position.

        When using the WPI Sim GUI, you will notice a readonly position and settable rawPositionInput.
        The readonly signal is the emulated position which will match self-test in Tuner and the hardware API.
        Changes to rawPositionInput will be integrated into the emulated position.
        This way a simulator can modify the position without overriding hardware API calls for home-ing the sensor.

        :param rotations: The raw position in rotations
        :type rotations: rotation
        :returns: Status code
        :rtype: StatusCode
        """
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            rotations = -rotations
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"RawRotorPosition"), rotations)
        )

    def add_rotor_position(self, drotations: rotation) -> StatusCode:
        """
        Adds to the simulated rotor position of the TalonFXS. This adds to the position
	    of the rotor (before gear ratio) used for the Commutation feedback source.

        :param drotations: The change in position in rotations
        :type drotations: rotation
        :returns: Status code
        :rtype: StatusCode
        """
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            drotations = -drotations
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"AddRotorPosition"), drotations)
        )

    def set_rotor_velocity(self, rps: rotations_per_second) -> StatusCode:
        """
        Sets the simulated rotor velocity of the TalonFXS. This is the velocity
	    of the rotor (before gear ratio) used for the Commutation feedback source.

        :param rps: The new velocity in rotations per second
        :type rps: rotations_per_second
        :returns: Status code
        :rtype: StatusCode
        """
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            rps = -rps
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"RotorVelocity"), rps)
        )

    def set_rotor_acceleration(self, rpss: rotations_per_second_squared) -> StatusCode:
        """
        Sets the simulated rotor acceleration of the TalonFXS. This is the acceleration
	    of the rotor (before gear ratio) used for the Commutation feedback source.

        :param rpss: The new acceleration in rotations per secondÂ²
        :type rpss: rotations_per_second_squared
        :returns: Status code
        :rtype: StatusCode
        """
        if self.motor_orientation == ChassisReference.Clockwise_Positive:
            rpss = -rpss
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"RotorAcceleration"), rpss)
        )

    def set_raw_quadrature_position(self, rotations: rotation) -> StatusCode:
        """
        Sets the simulated raw quadrature position of the TalonFXS. This is the position
	    of an external quadrature encoder after any gear ratio between the rotor and the sensor.

        Inputs to this function over time should be continuous, as user calls of
        TalonFXS.set_position will be accounted for in the callee.

        The TalonFXS integrates this to calculate the true reported quadrature position.

        When using the WPI Sim GUI, you will notice a readonly position and settable rawPositionInput.
        The readonly signal is the emulated position which will match self-test in Tuner and the hardware API.
        Changes to rawPositionInput will be integrated into the emulated position.
        This way a simulator can modify the position without overriding hardware API calls for home-ing the sensor.

        :param rotations: The raw position in rotations
        :type rotations: rotation
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            rotations = -rotations
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(
                self.__device_type.value, self._id, ctypes.c_char_p(b"RawQuadraturePosition"), rotations * self.quadrature_edges_per_rotation
            )
        )

    def add_quadrature_position(self, drotations: rotation) -> StatusCode:
        """
        Adds to the simulated quadrature position of the TalonFXS. This adds to the position
	    of an external quadrature encoder after any gear ratio between the rotor and the sensor.

        :param drotations: The change in position in rotations
        :type drotations: rotation
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            drotations = -drotations
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(
                self.__device_type.value, self._id, ctypes.c_char_p(b"AddQuadraturePosition"), drotations * self.quadrature_edges_per_rotation
            )
        )

    def set_quadrature_velocity(self, rps: rotations_per_second) -> StatusCode:
        """
        Sets the simulated quadrature velocity of the TalonFXS. This is the velocity
	    of an external quadrature encoder after any gear ratio between the rotor and the sensor.

        :param rps: The new velocity in rotations per second
        :type rps: rotations_per_second
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            rps = -rps
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(
                self.__device_type.value, self._id, ctypes.c_char_p(b"QuadratureVelocity"), rps * self.quadrature_edges_per_rotation
            )
        )

    def set_quadrature_acceleration(self, rpss: rotations_per_second_squared) -> StatusCode:
        """
        Sets the simulated quadrature acceleration of the TalonFXS. This is the acceleration
	    of an external quadrature encoder after any gear ratio between the rotor and the sensor.

        :param rpss: The new acceleration in rotations per secondÂ²
        :type rpss: rotations_per_second_squared
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            rpss = -rpss
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(
                self.__device_type.value, self._id, ctypes.c_char_p(b"QuadratureAcceleration"), rpss * self.quadrature_edges_per_rotation
            )
        )

    def set_pulse_width_position(self, rotations: rotation) -> StatusCode:
        """
        Sets the simulated pulse width position of the TalonFXS. This is the position
	    of an external PWM encoder after any gear ratio between the rotor and the sensor.

        :param rotations: The new position in rotations
        :type rotations: rotation
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            rotations = -rotations
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"PulseWidthPosition"), rotations)
        )

    def set_pulse_width_velocity(self, rps: rotations_per_second) -> StatusCode:
        """
        Sets the simulated pulse width velocity of the TalonFXS. This is the position
	    of an external PWM encoder after any gear ratio between the rotor and the sensor.

        :param rps: The new velocity in rotations per second
        :type rps: rotations_per_second
        :returns: Status code
        :rtype: StatusCode
        """
        if self.ext_sensor_orientation == ChassisReference.Clockwise_Positive:
            rps = -rps
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"PulseWidthVelocity"), rps)
        )

    def set_analog_voltage(self, volts: volt) -> StatusCode:
        """
        Sets the simulated voltage of the analog input pin on the TalonFXS data port.

        :param volts: Voltage of the pin
        :type volts: volt
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"AnalogVoltage"), volts)
        )