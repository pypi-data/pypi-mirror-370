"""
Copyright (C) Cross The Road Electronics.  All rights reserved.
License information can be found in CTRE_LICENSE.txt
For support and suggestions contact support@ctr-electronics.com or file
an issue tracker at https://github.com/CrossTheRoadElec/Phoenix-Releases
"""

from phoenix6.status_code import StatusCode
from phoenix6.phoenix_native import Native
import ctypes
from phoenix6.units import *
from phoenix6.sim.device_type import DeviceType

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from phoenix6.hardware.core.core_candle import CoreCANdle

class CANdleSimState:
    """
    Creates an object to control the state of a simulated CANdle.

    Note the recommended method of accessing simulation features is
    to use CANdle.sim_state.

    :param device: Device to which this simulation state is attached
    :type device: CoreCANdle
    """

    __device_type = DeviceType.P6_CANdleType

    def __init__(self, device: 'CoreCANdle'):
        self._id = device.device_id

    @property
    def last_status_code(self) -> StatusCode:
        """
        Gets the last status code generated by a simulation function.

        Not all functions return a status code but can potentially report errors.
        This function can be used to retrieve those status codes.

        :returns: Last status code generated by a simulation function
        :rtype: StatusCode
        """
        return StatusCode(Native.instance().c_ctre_phoenix6_platform_sim_get_last_error(self.__device_type.value, self._id))

    @property
    def v_bat_modulation(self) -> float:
        """
        Gets the simulated VBat modulated output of the CANdle.
        
        :returns: VBat modulation duty cycle
        :rtype: float
        """
        value = ctypes.c_double()
        Native.instance().c_ctre_phoenix6_platform_sim_get_physics_value(self.__device_type.value, self._id, ctypes.c_char_p(b"VBatModulation"), ctypes.byref(value))
        return value.value

    def set_supply_voltage(self, volts: volt) -> StatusCode:
        """
        Sets the simulated supply voltage of the CANdle.

        The minimum allowed supply voltage is 4 V - values below this
        will be promoted to 4 V.

        :param volts: The supply voltage in Volts
        :type volts: volt
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"SupplyVoltage"), volts)
        )

    def set_five_v_rail_voltage(self, volts: volt) -> StatusCode:
        """
        Sets the simulated 5V rail voltage of the CANdle.

        :param volts: The 5V rail voltage in Volts
        :type volts: volt
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"FiveVRail"), volts)
        )

    def set_output_current(self, amps: ampere) -> StatusCode:
        """
        Sets the simulated output current of the CANdle.

        :param amps: The output current in Amps
        :type amps: ampere
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"OutputCurrent"), amps)
        )

    def set_device_temp(self, temperature: celsius) -> StatusCode:
        """
        Sets the simulated temperature of the CANdle.

        :param temperature: The device temperature in ℃
        :type temperature: celsius
        :returns: Status code
        :rtype: StatusCode
        """
        return StatusCode(
            Native.instance().c_ctre_phoenix6_platform_sim_set_physics_input(self.__device_type.value, self._id, ctypes.c_char_p(b"Temperature"), temperature)
        )
