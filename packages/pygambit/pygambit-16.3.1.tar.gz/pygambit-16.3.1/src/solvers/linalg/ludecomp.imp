//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/liblinear/ludecomp.imp
// Implementation of LU decomposition
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "gambit.h"
#include "ludecomp.h"
#include "tableau.h"

namespace Gambit::linalg {

template <class T>
LUDecomposition<T>::LUDecomposition(const LUDecomposition<T> &a, Tableau<T> &t)
  : tab(t), basis(t.GetBasis()), refactor_number(a.refactor_number), iterations(a.iterations),
    total_operations(a.total_operations), parent(&a), copycount(0)

{
  parent->copycount++;
}

template <class T>
LUDecomposition<T>::LUDecomposition(Tableau<T> &t, int rfac /* = 0 */)
  : tab(t), basis(t.GetBasis()), refactor_number(rfac), iterations(0), parent(nullptr),
    copycount(0)
{
  auto m = basis.Last() - basis.First() + 1;
  total_operations = (m - 1) * m * (2 * m - 1) / 6;
}

template <class T> LUDecomposition<T>::~LUDecomposition()
{
  if (parent != nullptr) {
    parent->copycount--;
  }
}

// -------------------------
//  Public Members
// -------------------------

template <class T> void LUDecomposition<T>::Copy(const LUDecomposition<T> &orig, Tableau<T> &t)
{
  if (this != &orig) {
    if (parent != nullptr) {
      parent->copycount--;
    }

    tab = t;
    basis = t.GetBasis();

    L.clear();
    E.clear();
    U.clear();

    refactor_number = orig.refactor_number;
    iterations = orig.iterations;
    total_operations = orig.total_operations;
    parent = &orig;
    copycount = 0;
    parent->copycount++;
  }
}

template <class T> void LUDecomposition<T>::update(int col, int matcol)
{
  if (copycount != 0) {
    throw BadCount();
  }
  int m = basis.Last() - basis.First() + 1;

  iterations++;
  if ((refactor_number > 0 && iterations >= refactor_number) ||
      (refactor_number == 0 && RefactorCheck())) {
    refactor();
  }
  else {
    Vector<T> scratch(basis.First(), basis.Last());
    tab.GetColumn(matcol, scratch);
    solve(scratch, scratch);
    if (scratch[col] == static_cast<T>(0)) {
      throw BadPivot();
    }
    E.push_back({col, scratch});

    total_operations += iterations * m + 2 * m * m;
  }
}

template <class T> void LUDecomposition<T>::refactor()
{
  L.clear();
  U.clear();
  E.clear();

  if (!basis.IsIdent()) {
    FactorBasis();
  }

  iterations = 0;
  int m = basis.Last() - basis.First() + 1;
  total_operations = (m - 1) * m * (2 * m - 1) / 6;
  if (parent != nullptr) {
    parent->copycount--;
    parent = nullptr;
  }
}

template <class T> void LUDecomposition<T>::solveT(const Vector<T> &c, Vector<T> &y) const
{
  if (c.first_index() != y.first_index() || c.last_index() != y.last_index()) {
    throw DimensionException();
  }
  if (c.first_index() != basis.First() || c.last_index() != basis.Last()) {
    throw DimensionException();
  }

  y = c;
  if (!basis.IsIdent()) {
    BTransE(y);
    if (parent != nullptr) {
      parent->solveT(y, y);
    }
    else {
      FTransU(y);
      yLP_Trans(y);
    }
  }
}

template <class T> void LUDecomposition<T>::solve(const Vector<T> &a, Vector<T> &d) const
{
  if (a.first_index() != d.first_index() || a.last_index() != d.last_index()) {
    throw DimensionException();
  }
  if (a.first_index() != basis.First() || a.last_index() != basis.Last()) {
    throw DimensionException();
  }

  d = a;
  if (!basis.IsIdent()) {
    if (parent != nullptr) {
      parent->solve(a, d);
    }
    else {
      LPd_Trans(d);
      BTransU(d);
    }
    FTransE(d);
  }
}

// -----------------
//  Private Members
// -----------------

template <class T> void LUDecomposition<T>::FactorBasis()
{
  Matrix<T> B(basis.First(), basis.Last(), basis.First(), basis.Last());

  Vector<T> scratch(basis.First(), basis.Last());
  for (int i = basis.First(); i <= basis.Last(); i++) {
    tab.GetColumn(basis.Label(i), scratch);
    basis.CheckBasis();
    B.SetColumn(i, scratch);
  }

  for (int i = B.MinRow(); i <= B.MaxRow(); i++) {
    T pivVal = Gambit::abs(B(i, i));
    int piv = i;
    for (int j = i + 1; j <= B.MaxRow(); j++) {
      if (B(j, i) * B(j, i) > pivVal * pivVal) {
        piv = j;
        pivVal = B(j, i);
      }
    }
    B.SwitchRows(i, piv);

    scratch = static_cast<T>(0);
    scratch[i] = static_cast<T>(1) / B(i, i);
    for (int j = i + 1; j <= B.MaxRow(); j++) {
      scratch[j] = -B(j, i) / B(i, i);
    }
    L.push_back({piv, {i, scratch}});
    GaussElem(B, i, i);
  }
  for (int j = B.MinCol(); j <= B.MaxCol(); j++) {
    B.GetColumn(j, scratch);
    U.push_back({j, scratch});
  }
}

template <class T> void LUDecomposition<T>::GaussElem(Matrix<T> &B, int row, int col)
{
  if (B(row, col) == static_cast<T>(0)) {
    throw BadPivot();
  }

  for (int j = col + 1; j <= B.MaxCol(); j++) {
    B(row, j) = B(row, j) / B(row, col);
  }

  for (int i = row + 1; i <= B.MaxRow(); i++) {
    for (int j = col + 1; j <= B.MaxCol(); j++) {
      B(i, j) = B(i, j) - (B(i, col) * B(row, j));
    }
  }

  for (int i = row + 1; i <= B.MaxRow(); i++) {
    B(i, col) = static_cast<T>(0);
  }

  B(row, col) = static_cast<T>(1);
}

template <class T> void LUDecomposition<T>::BTransE(Vector<T> &y) const
{
  std::for_each(E.rbegin(), E.rend(), [&](const EtaMatrix &m) { VectorEtaSolve(m, y); });
}

template <class T> void LUDecomposition<T>::FTransU(Vector<T> &y) const
{
  for (const auto &eta : U) {
    VectorEtaSolve(eta, y);
  }
}

template <class T>
void LUDecomposition<T>::VectorEtaSolve(const EtaMatrix &eta, Vector<T> &y) const
{
  Vector<T> v = y;
  for (int i = v.first_index(); i <= v.last_index(); i++) {
    if (i == eta.col) {
      for (int j = v.first_index(); j <= v.last_index(); j++) {
        if (j != eta.col) {
          y[i] -= v[j] * eta.etadata[j];
        }
      }
      y[i] /= eta.etadata[i];
    }
  }
}

template <class T> void LUDecomposition<T>::FTransE(Vector<T> &y) const
{
  for (const auto &eta : E) {
    EtaVectorSolve(eta, y);
  }
}

template <class T> void LUDecomposition<T>::BTransU(Vector<T> &y) const
{
  std::for_each(U.rbegin(), U.rend(), [&](const EtaMatrix &m) { EtaVectorSolve(m, y); });
}

template <class T>
void LUDecomposition<T>::EtaVectorSolve(const EtaMatrix &eta, Vector<T> &d) const
{
  if (eta.etadata[eta.col] == static_cast<T>(0)) {
    throw BadPivot(); // or we would have a singular matrix
  }
  Vector<T> v = d;
  T temp = v[eta.col] / eta.etadata[eta.col];

  for (int i = v.first_index(); i <= v.last_index(); i++) {
    if (i == eta.col) {
      d[i] = temp;
    }
    else {
      d[i] = v[i] - temp * eta.etadata[i];
    }
  }
}

template <class T> void LUDecomposition<T>::yLP_Trans(Vector<T> &y) const
{
  Vector<T> scratch(basis.First(), basis.Last());
  for (int j = L.size() - 1; j >= 0; j--) {
    yLP_mult(y, j, scratch);
    y = scratch;
  }
}

template <class T>
void LUDecomposition<T>::yLP_mult(const Vector<T> &y, int j, Vector<T> &ans) const
{
  int ell = j + y.first_index();

  for (int i = y.first_index(); i <= y.last_index(); i++) {
    if (i != L[j].second.col) {
      ans[i] = y[i];
    }
    else {
      T temp = static_cast<T>(0);
      for (int k = ans.first_index(); k <= ans.last_index(); k++) {
        temp += y[k] * L[j].second.etadata[k];
      }
      ans[i] = temp;
    }
  }
  std::swap(ans[ell], ans[L[j].first]);
}

template <class T> void LUDecomposition<T>::LPd_Trans(Vector<T> &d) const
{
  Vector<T> scratch(basis.First(), basis.Last());
  for (size_t j = 0; j < L.size(); j++) {
    LPd_mult(d, j, scratch);
    d = scratch;
  }
}

template <class T> void LUDecomposition<T>::LPd_mult(Vector<T> &d, int j, Vector<T> &ans) const
{
  int k = j + d.first_index();
  std::swap(d[k], d[L[j].first]);
  for (int i = d.first_index(); i <= d.last_index(); i++) {
    if (i == L[j].second.col) {
      ans[i] = d[i] * L[j].second.etadata[i];
    }
    else {
      ans[i] = d[i] + d[L[j].second.col] * L[j].second.etadata[i];
    }
  }
  std::swap(d[L[j].first], d[k]);
}

template <class T> bool LUDecomposition<T>::RefactorCheck()
{
  int m = basis.Last() - basis.First() + 1;
  int i = iterations * (iterations * m + 2 * m * m);
  int k = total_operations + iterations * m + 2 * m * m;
  return i > k;
}

} // end namespace Gambit::linalg
