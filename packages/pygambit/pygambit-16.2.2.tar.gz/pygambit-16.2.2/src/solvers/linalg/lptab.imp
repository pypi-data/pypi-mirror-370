//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/liblinear/lptab.imp
// Implementation of LP tableaus
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "lptab.h"

namespace Gambit {

namespace linalg {

// ---------------------------------------------------------------------------
//                   LPTableau member definitions
// ---------------------------------------------------------------------------

template <class T>
LPTableau<T>::LPTableau(const Matrix<T> &A, const Vector<T> &b)
  : Tableau<T>(A, b), dual(A.MinRow(), A.MaxRow()), unitcost(A.MinRow(), A.MaxRow()),
    cost(A.MinCol(), A.MaxCol())
{
}

template <class T>
LPTableau<T>::LPTableau(const Matrix<T> &A, const Array<int> &art, const Vector<T> &b)
  : Tableau<T>(A, art, b), dual(A.MinRow(), A.MaxRow()), unitcost(A.MinRow(), A.MaxRow()),
    cost(A.MinCol(), A.MaxCol() + art.Length())
{
}

template <class T>
LPTableau<T>::LPTableau(const LPTableau<T> &orig)
  : Tableau<T>(orig), dual(orig.dual), unitcost(orig.unitcost), cost(orig.cost)
{
}

template <class T> LPTableau<T> &LPTableau<T>::operator=(const LPTableau<T> &orig)
{
  Tableau<T>::operator=(orig);
  if (this != &orig) {
    dual = orig.dual;
    unitcost = orig.unitcost;
    cost = orig.cost;
  }
  return *this;
}

// cost-based functions

template <> void LPTableau<Rational>::SetCost(const Vector<Rational> &c)
{
  int i;
  if (cost.First() == c.First() && cost.Last() == c.Last()) {
    for (i = cost.First(); i <= cost.Last(); i++) {
      cost[i] = c[i] * (Rational)Tableau<Rational>::TotDenom();
    }
    for (i = unitcost.First(); i <= unitcost.Last(); i++) {
      unitcost[i] = (Rational)0;
    }
    Refactor();
    SolveDual();
    return;
  }
  if (c.First() != cost.First()) {
    throw DimensionException();
  }
  if (c.Last() != (cost.Last() + unitcost.Length())) {
    throw DimensionException();
  }
  for (i = c.First(); i <= cost.Last(); i++) {
    cost[i] = c[i] * (Rational)Tableau<Rational>::TotDenom();
  }
  for (i = unitcost.First(); i <= unitcost.Last(); i++) {
    unitcost[i] = c[cost.Length() + i - unitcost.First() + 1];
  }
  // gout << "\nc: " << c.First() << " " << c.Last() << " " << c;
  // gout << "\ncost: " << cost.First() << " " << cost.Last() << " " << cost;
  // gout << "\nunit: " << unitcost.First() << " " << unitcost.Last() << " " << unitcost;
  //** added for Rational
  Refactor();
  SolveDual();
}

template <> void LPTableau<double>::SetCost(const Vector<double> &c)
{
  int i;
  if (cost.First() == c.First() && cost.Last() == c.Last()) {
    for (i = cost.First(); i <= cost.Last(); i++) {
      cost[i] = c[i];
    }
    for (i = unitcost.First(); i <= unitcost.Last(); i++) {
      unitcost[i] = (double)0;
    }
    Refactor();
    SolveDual();
    return;
  }
  if (c.First() != cost.First()) {
    throw DimensionException();
  }
  if (c.Last() != (cost.Last() + unitcost.Length())) {
    throw DimensionException();
  }
  for (i = c.First(); i <= cost.Last(); i++) {
    cost[i] = c[i];
  }
  for (i = unitcost.First(); i <= unitcost.Last(); i++) {
    unitcost[i] = c[cost.Length() + i - unitcost.First() + 1];
  }
  // gout << "\nc: " << c.First() << " " << c.Last() << " " << c;
  // gout << "\ncost: " << cost.First() << " " << cost.Last() << " " << cost;
  // gout << "\nunit: " << unitcost.First() << " " << unitcost.Last() << " " << unitcost;
  //** added for Rational
  Refactor();
  SolveDual();
}

template <class T> void LPTableau<T>::SetCost(const Vector<T> &uc, const Vector<T> &c)
{
  if (cost.First() != c.First() || cost.Last() != c.Last()) {
    throw DimensionException();
  }
  if (unitcost.First() != uc.First() || unitcost.Last() != uc.Last()) {
    throw DimensionException();
  }
  int i;
  for (i = cost.First(); i <= cost.Last(); i++) {
    cost[i] = c[i];
  }
  for (i = unitcost.First(); i <= unitcost.Last(); i++) {
    unitcost[i] = uc[i];
  }
  SolveDual();
}

template <class T> Vector<T> LPTableau<T>::GetCost() const
{
  Vector<T> x(cost.First(), cost.Last());
  for (int i = x.First(); i <= x.Last(); i++) {
    x[i] = cost[i];
  }
  return x;
  //  return cost;
}

template <class T> Vector<T> LPTableau<T>::GetUnitCost() const
{
  Vector<T> x(unitcost.First(), unitcost.Last());
  for (int i = x.First(); i <= x.Last(); i++) {
    x[i] = unitcost[i];
  }
  return x;
}

template <> double LPTableau<double>::TotalCost()
{
  Vector<double> tmpcol(MinRow(), MaxRow());
  BasisSelect(unitcost, cost, tmpcol);
  return tmpcol * solution;
}

template <> Rational LPTableau<Rational>::TotalCost()
{
  Vector<Rational> tmpcol(MinRow(), MaxRow());
  Vector<Rational> sol(MinRow(), MaxRow());
  BasisSelect(unitcost, cost, tmpcol);
  BasisVector(sol);
  for (int i = tmpcol.First(); i <= tmpcol.Last(); i++) {
    if (Label(i) > 0) {
      tmpcol[i] /= (Rational)Tableau<Rational>::TotDenom();
    }
  }

  return tmpcol * sol;
}

template <> void LPTableau<double>::DualVector(Vector<double> &L) const { L = dual; }

template <> void LPTableau<Rational>::DualVector(Vector<Rational> &out) const
{
  out = dual;
  //  for(int i=out.First();i<=out.Last();i++)
  //  if(Label(i)>=0) out[i]*=TotDenom();
}

template <class T> T LPTableau<T>::RelativeCost(int col) const
{
  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  if (col < 0) {
    return unitcost[-col] - dual[-col];
  }
  else {
    this->GetColumn(col, (Vector<T> &)tmpcol);
    return cost[col] - dual * tmpcol;
  }
}

/*

template <class T>
void LPTableau<T>::RelativeCostVector(Vector<T> &relunitcost,
                                      Vector<T> &relcost) const
{

  if(!A->CheckColumn(relunitcost)) throw DimensionException();
  if(!A->CheckRow(relcost)) throw DimensionException();

  relunitcost= unitcost - dual;
  relcost= cost - dual*A;  // pre multiplication not defined?
}
*/

template <class T> void LPTableau<T>::SolveDual()
{
  Vector<T> tmpcol1(this->MinRow(), this->MaxRow());
  BasisSelect(unitcost, cost, tmpcol1);
  this->SolveT(tmpcol1, dual);
}

// Redefined functions

template <class T> void LPTableau<T>::Refactor()
{
  // gout << "\nIn LPTableau<T>::Refactor()";
  Tableau<T>::Refactor();
  SolveDual();
}

template <class T> void LPTableau<T>::Pivot(int outrow, int col)
{
  // gout << "\nIn LPTableau<T>::Pivot() ";
  // gout << "outrow: " << outrow << " col: " << col;
  // BigDump(gout);
  Tableau<T>::Pivot(outrow, col);
  SolveDual();
}

template <class T> void LPTableau<T>::ReversePivots(List<Array<int>> &PivotList)
{
  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  // gout << "\nIn LPTableau<T>::ReversePivots";
  bool flag;
  int i, j, k, enter;
  T ratio, a_ij, a_ik, b_i, b_k, c_j, c_k, c_jo, x;
  List<int> BestSet;
  Array<int> pivot(2);
  Vector<T> tmpdual(this->MinRow(), this->MaxRow());

  Vector<T> solution(tmpcol);  //$$
  this->BasisVector(solution); //$$

  // BigDump(gout);
  // gout << "\ncost: " << GetCost();
  // gout << "\nunitcost: " << GetUnitCost() << "\n";
  // for(i=MinCol();i<=MaxCol();i++) gout << " " << RelativeCost(i);
  // for(i=MinRow();i<=MaxRow();i++) gout << " " << RelativeCost(-i);

  for (j = -this->MaxRow(); j <= this->MaxCol(); j++) {
    if (j && !this->Member(j) && !this->IsBlocked(j)) {
      this->SolveColumn(j, tmpcol);
      // gout << "\nColumn " << j;
      // gout << "\nPivCol = " << tmpcol;
      // gout << "\ncurrentSolCol = " << solution;

      // find all i where prior tableau is primal feasible

      BestSet = List<int>();
      for (i = this->MinRow(); i <= this->MaxRow(); i++) {
        if (this->GtZero(tmpcol[i])) {
          BestSet.push_back(i);
        }
      }
      if (BestSet.Length() > 0) {
        ratio = solution[BestSet[1]] / tmpcol[BestSet[1]];
        // find max ratio
        for (i = 2; i <= BestSet.Length(); i++) {
          x = solution[BestSet[i]] / tmpcol[BestSet[i]];
          if (this->GtZero(x - ratio)) {
            ratio = x;
          }
        }
        // eliminate nonmaximizers
        for (i = BestSet.Length(); i >= 1; i--) {
          x = solution[BestSet[i]] / tmpcol[BestSet[i]];
          if (this->LtZero(x - ratio)) {
            BestSet.Remove(i);
          }
        }

        // check that j would be the row to exit in prior tableau

        // first check that prior pivot entry > 0
        for (i = BestSet.Length(); i >= 1; i--) {
          a_ij = (T)1 / tmpcol[BestSet[i]];
          if (this->LeZero(a_ij)) {
            // gout << "\nj not row to exit in prior tableau: a_ij <= 0";
            BestSet.Remove(i);
          }
          else {
            // next check that prior pivot entry attains max ratio
            b_i = solution[BestSet[i]] / tmpcol[BestSet[i]];
            ratio = b_i / a_ij;

            flag = false;
            for (k = tmpcol.First(); k <= tmpcol.Last() && !flag; k++) {
              if (k != BestSet[i]) {
                a_ik = -a_ij * tmpcol[k];
                b_k = solution[k] - b_i * tmpcol[k];
                if (this->GtZero(a_ik) && this->GtZero(b_k / a_ik - ratio)) {
                  // gout << "\nj not row to exit in prior tableau: ";
                  // gout << "higher ratio at row= " << k;
                  BestSet.Remove(i);
                  flag = true;
                }
                else if (this->GtZero(a_ik) && this->EqZero(b_k / a_ik - ratio) &&
                         this->Label(k) < j) {
                  // gout << "\nj not row to exit in prior tableau: ";
                  // gout << "same ratio,lower lex at k= " << k;
                  BestSet.Remove(i);
                  flag = true;
                }
              }
            }
          }
        }
      }
      // gout << "\nafter checking rows, BestSet = ";
      // BestSet.Dump(gout);

      // check that i would be the column to enter in prior tableau

      for (i = BestSet.Length(); i >= 1; i--) {
        enter = this->Label(BestSet[i]);
        // gout << "\nenter = " << enter;

        tmpcol = (T)0;
        tmpcol[BestSet[i]] = (T)1;
        // gout << "\ntmpcol, loc 1: " << tmpcol;
        this->SolveT(tmpcol, tmpdual);
        // gout << "\ntmpcol, loc 2: " << tmpcol;
        // gout << "\ntmpdual, loc 1: " << tmpdual;

        /*      if( j<0 )
                { tmpcol=(T)0; tmpcol[-j]=(T)1; }
              else
                A->GetColumn(j,tmpcol);
        */
        this->GetColumn(j, tmpcol);
        // gout << "\ncol " << j << ": " << tmpcol;
        a_ij = tmpdual * tmpcol;
        c_j = RelativeCost(j);
        if (this->EqZero(a_ij)) {
          // gout << "\ni not col to enter in prior tableau: ";
          // gout << "a_ij=0";
          BestSet.Remove(i);
        }
        else {
          ratio = c_j / a_ij;
          // gout << " ratio: " << ratio;
          if (enter < 0) {
            a_ik = tmpdual[-enter];
          }
          else {
            this->GetColumn(enter, tmpcol);
            //	  A->GetColumn(enter,tmpcol);
            a_ik = tmpdual * tmpcol;
          }
          c_k = RelativeCost(enter);
          c_jo = c_k - a_ik * ratio;
          // gout << "\ntmpdual = " << tmpdual << "\n";
          // gout << " c_j:" << c_j;
          // gout << " c_k:" << c_k;
          // gout << " c_jo:" << c_jo;
          // gout << " a_ij:" << a_ij;
          // gout << " a_ik:" << a_ik;
          if (this->GeZero(c_jo)) {
            // gout << "\ni not col to enter in prior tableau: ";
            // gout << "c_jo<0";
            BestSet.Remove(i);
          }
          else {
            flag = false;
            for (k = -this->b->Last(); k < enter && !flag; k++) {
              if (k != 0) {
                if (k < 0) {
                  a_ik = tmpdual[-k];
                }
                else {
                  //	      A->GetColumn(k,tmpcol);
                  this->GetColumn(k, tmpcol);
                  a_ik = tmpdual * tmpcol;
                }
                c_k = RelativeCost(k);
                c_jo = c_k - a_ik * ratio;

                if (this->LtZero(c_jo)) {
                  // gout << "\ni not col to enter in prior tableau: ";
                  // gout << "c_jo < 0 for k = " << k;
                  BestSet.Remove(i);
                  flag = true;
                }
              }
            }
          }
        }
      }
      // gout << "\nafter checking cols, BestSet = ";
      // BestSet.Dump(gout);

      if (!BestSet.empty()) {
        for (i = 1; i <= BestSet.Length(); i++) {
          pivot[1] = BestSet[i];
          pivot[2] = j;
          PivotList.push_back(pivot);
        }
      }
    }
  }
}

template <class T> bool LPTableau<T>::IsReversePivot(int i, int j)
{
  Vector<T> tmpcol(this->MinRow(), this->MaxRow());

  // first check that pivot preserves primal feasibility

  // gout << "\nin IsReversePivot, i= " << i << " j = "<< j;
  this->SolveColumn(j, tmpcol);
  Vector<T> solution(tmpcol);  //$$
  this->BasisVector(solution); //$$
  // gout << "\ncurrentPivCol = " << tmpcol;
  // gout << "\ncurrentSolCol = " << solution;
  if (this->LeZero(tmpcol[i])) {
    // gout << "\nPrior tableau not primal feasible: currentPivCol[i] <= 0";
    return false;
  }
  int k;
  T ratio = solution[i] / tmpcol[i];
  // gout << "\nratio = " << ratio;

  for (k = tmpcol.First(); k <= tmpcol.Last(); k++) {
    if (this->GtZero(tmpcol[k]) && this->GtZero(solution[k] / tmpcol[k] - ratio)) {
      // gout << "\nPrior tableau not primal feasible: i not min ratio";
      return false;
    }
  }
  // check that j would be the row to exit in prior tableau

  T a_ij, a_ik, b_i, b_k, c_j, c_k, c_jo;

  a_ij = (T)1 / tmpcol[i];
  if (this->LeZero(a_ij)) {
    // gout << "\nj not row to exit in prior tableau: a_ij <= 0";
    return false;
  }
  b_i = solution[i] / tmpcol[i];
  ratio = b_i / a_ij;

  for (k = tmpcol.First(); k <= tmpcol.Last(); k++) {
    if (k != i) {
      a_ik = -a_ij * tmpcol[k];
      b_k = solution[k] - b_i * tmpcol[k];
      if (this->GtZero(a_ik) && this->GtZero(b_k / a_ik - ratio)) {
        // gout << "\nj not row to exit in prior tableau: ";
        // gout << "higher ratio at row= " << k;
        return false;
      }
      if (this->GtZero(a_ik) && this->EqZero(b_k / a_ik - ratio) && this->Label(k) < j) {
        // gout << "\nj not row to exit in prior tableau: ";
        // gout << "same ratio,lower lex at k= " << k;
        return false;
      }
    }
  }

  // check that i would be the column to enter in prior tableau

  int enter = this->Label(i);
  // gout << "\nenter = " << enter;

  Vector<T> tmpdual(this->MinRow(), this->MaxRow());
  tmpcol = (T)0;
  tmpcol[i] = (T)1;
  this->SolveT(tmpcol, tmpdual);

  /*
    if( j<0 )
      { tmpcol=(T)0; tmpcol[-j]=(T)1; }
    else
      A->GetColumn(j,tmpcol);
  */
  this->GetColumn(j, tmpcol);

  // gout << "\ncol j = " << tmpcol;
  a_ij = tmpdual * tmpcol;
  c_j = RelativeCost(j);
  if (this->EqZero(a_ij)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "a_ij=0";
    return false;
  }
  ratio = c_j / a_ij;

  if (enter < 0) {
    a_ik = tmpdual[-enter];
  }
  else {
    //    A->GetColumn(enter,tmpcol);
    this->GetColumn(enter, tmpcol);
    a_ik = tmpdual * tmpcol;
  }
  c_k = RelativeCost(enter);
  c_jo = c_k - a_ik * ratio;
  if (this->GeZero(c_jo)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "c_jo<0";
    return false;
  }

  for (k = -this->b->Last(); k < enter; k++) {
    if (k != 0) {
      if (k < 0) {
        a_ik = tmpdual[-k];
      }
      else {
        //      A->GetColumn(k,tmpcol);
        this->GetColumn(k, tmpcol);
        a_ik = tmpdual * tmpcol;
      }
      c_k = RelativeCost(k);
      c_jo = c_k - a_ik * ratio;

      if (this->LtZero(c_jo)) {
        // gout << "\ni not col to enter in prior tableau: ";
        // gout << "c_jo < 0 for k = " << k;
        return false;
      }
    }
  }
  // gout << "\nValid Reverse pivot at i = " << i << " j =  " << j;
  return true;
}

template <class T> void LPTableau<T>::DualReversePivots(List<Array<int>> & /*list*/) {}

template <class T> bool LPTableau<T>::IsDualReversePivot(int i, int j)
{
  // first check that pivot preserves dual feasibility

  // gout << "\nin IsDualReversePivot, i= " << i << " j = "<< j;

  int k;

  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  Vector<T> tmpdual(this->MinRow(), this->MaxRow());
  tmpcol = (T)0;
  tmpcol[i] = (T)1;
  this->SolveT(tmpcol, tmpdual);

  Vector<T> solution(tmpcol);  //$$
  this->BasisVector(solution); //$$

  // gout << "\ncurrentPivCol = " << tmpcol;
  // gout << "\ncurrentSolCol = " << solution;

  T a_ij, a_ik, c_j, c_k, ratio;

  /*  if( j<0 )
      { tmpcol=(T)0; tmpcol[-j]=(T)1; }
    else
      A->GetColumn(j,tmpcol);
    */

  this->GetColumn(j, tmpcol);

  a_ij = tmpdual * tmpcol;
  c_j = RelativeCost(j);
  if (this->GeZero(a_ij)) {
    // gout << "\nPrior tableau not dual feasible: ";
    // gout << "a_ij>=0";
    return false;
  }
  ratio = c_j / a_ij;

  for (k = -this->b->Last(); k <= cost.Last(); k++) {
    if (k != 0) {
      if (k < 0) {
        a_ik = tmpdual[-k];
      }
      else {
        //      A->GetColumn(k,tmpcol);
        this->GetColumn(k, tmpcol);
        a_ik = tmpdual * tmpcol;
      }
      c_k = RelativeCost(k);

      if (this->LtZero(a_ik) && this->GtZero(c_k / a_ik - ratio)) {
        // gout << "\nPrior tableau not dual feasible: ";
        // gout << "\nhigher ratio for k = " << k;
        return false;
      }
    }
  }

  // check that i would be the column to enter in prior tableau

  int enter = this->Label(i);
  // gout << "\nenter = " << enter;

  if (enter < 0) {
    a_ik = tmpdual[-enter];
  }
  else {
    //    A->GetColumn(enter,tmpcol);
    this->GetColumn(enter, tmpcol);
    a_ik = tmpdual * tmpcol;
  }
  a_ik = a_ik / a_ij;
  c_k = RelativeCost(enter);
  c_k -= a_ik * c_j;

  if (this->GeZero(a_ik)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "a_ik>=0";
    return false;
  }
  ratio = c_k / a_ik;

  for (k = -this->b->Last(); k <= cost.Last(); k++) {
    if (k != 0) {
      if (k < 0) {
        a_ik = tmpdual[-k];
      }
      else {
        //    A->GetColumn(k,tmpcol);
        this->GetColumn(k, tmpcol);
        a_ik = tmpdual * tmpcol;
      }
      a_ik = a_ik / a_ij;
      c_k = RelativeCost(k);
      c_k -= a_ik * c_j;

      if (this->LtZero(a_ik) && this->GtZero(c_k / a_ik - ratio)) {
        // gout << "\ni not col to enter in prior tableau: ";
        // gout << "\nhigher ratio for k = " << k;
        return false;
      }
      if (k < enter && this->LtZero(a_ik) && this->EqZero(c_k / a_ik - ratio)) {
        // gout << "\ni not col to enter in prior tableau: ";
        // gout << "\nsame ratio and lower lex for k = " << k;
        return false;
      }
    }
  }

  // check that j would be the row to exit in prior tableau

  this->SolveColumn(j, tmpcol);
  // gout << "\ncurrentPivCol = " << tmpcol;
  // gout << "\ncurrentSolCol = " << solution;

  T b_k, b_i;
  b_i = solution[i] / tmpcol[i];
  if (this->LeZero(b_i)) {
    // gout << "\nj not row to exit in prior tableau: ";
    // gout << "b_i<=0";
    return false;
  }

  for (k = this->b->First(); k <= this->b->Last(); k++) {
    if (k != i) {
      b_k = solution[k] - b_i * tmpcol[k];
      if (this->GtZero(b_k) && this->Label(k) < j) {
        // gout << "\nj not row to exit in prior tableau: ";
        // gout << "same ratio,lower lex at k= " << k;
        return false;
      }
    }
  }
  // gout << "\nValid Reverse pivot at i = " << i << " j =  " << j;
  return true;
}

/*
template <class T>
BFS<T> LPTableau<T>::DualBFS() const
{
  BFS<T> cbfs((T) 0);
  for(int i=MinRow();i<=MaxRow();i++) {
    if(!Member(-i))
      cbfs.Define(-i,dual[i]);
  }
  return cbfs;
}
*/

template <class T> BFS<T> LPTableau<T>::DualBFS() const
{
  BFS<T> cbfs;
  Vector<T> d(this->MinRow(), this->MaxRow());
  DualVector(d);

  for (int i = this->MinRow(); i <= this->MaxRow(); i++) {
    if (!this->Member(-i)) {
      cbfs.insert(-i, d[i]);
    }
  }
  // gout << "\ndual: " << d;
  return cbfs;
}

template <class T> int LPTableau<T>::LastLabel() { return this->artificial.Last(); }

template <class T> void LPTableau<T>::BasisSelect(const Array<T> &rowv, Vector<T> &colv) const
{
  for (int i = this->basis.First(); i <= this->basis.Last(); i++) {
    if (this->basis.Label(i) < 0) {
      colv[i] = (T)0;
    }
    else {
      colv[i] = rowv[this->basis.Label(i)];
    }
  }
}

template <class T>
void LPTableau<T>::BasisSelect(const Array<T> &unitv, const Array<T> &rowv, Vector<T> &colv) const
{
  for (int i = this->basis.First(); i <= this->basis.Last(); i++) {
    if (this->basis.Label(i) < 0) {
      colv[i] = unitv[-this->basis.Label(i)];
    }
    else {
      colv[i] = rowv[this->basis.Label(i)];
    }
  }
}

} // namespace linalg

} // end namespace Gambit
