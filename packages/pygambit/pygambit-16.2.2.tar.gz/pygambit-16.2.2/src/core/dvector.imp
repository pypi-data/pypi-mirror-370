//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/libgambit/dvector.imp
// Implementation of doubly-partitioned vector class
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "dvector.h"

namespace Gambit {

//--------------------------------------------------------------------------
//          DVector<T>: Private and protected member functions
//--------------------------------------------------------------------------

template <class T> void DVector<T>::setindex()
{
  int index = 1;

  for (int i = 1; i <= dvlen.Length(); i++) {
    dvptr[i] = this->svptr + index - 1;
    dvidx[i] = index;
    index += dvlen[i];
  }
}

//--------------------------------------------------------------------------
//    DVector<T>: Constructors, destructor, and constructive operators
//--------------------------------------------------------------------------

template <class T>
DVector<T>::DVector(const PVector<int> &shape)
  : PVector<T>(static_cast<const Array<int> &>(shape)), dvlen(shape.Lengths().Length()),
    dvidx(shape.Lengths().Length())
{
  dvptr = new T **[dvlen.Length()];
  dvptr -= 1;

  for (int i = 1; i <= dvlen.Length(); i++) {
    dvlen[i] = shape.Lengths()[i];
  }

  setindex();
}

template <class T>
DVector<T>::DVector(const DVector<T> &v) : PVector<T>(v), dvlen(v.dvlen), dvidx(v.dvidx)
{
  dvptr = new T **[dvlen.Length()];
  dvptr -= 1;

  setindex();
}

template <class T> DVector<T>::~DVector()
{
  if (dvptr) {
    delete[] (dvptr + 1);
  }
}

template <class T> DVector<T> &DVector<T>::operator=(const T &c)
{
  PVector<T>::operator=(c);
  return *this;
}

//--------------------------------------------------------------------------
//                    DVector<T>: Operator definitions
//--------------------------------------------------------------------------

template <class T> T &DVector<T>::operator()(int a, int b, int c)
{
  if (dvlen.First() > a || a > dvlen.Last()) {
    throw IndexException();
  }
  if (1 > b || b > dvlen[a]) {
    throw IndexException();
  }
  if (1 > c || c > this->svlen[dvidx[a] + b - 1]) {
    throw IndexException();
  }
  return dvptr[a][b][c];
}

template <class T> const T &DVector<T>::operator()(int a, int b, int c) const
{
  if (dvlen.First() > a || a > dvlen.Last()) {
    throw IndexException();
  }
  if (1 > b || b > dvlen[a]) {
    throw IndexException();
  }
  if (1 > c || c > this->svlen[dvidx[a] + b - 1]) {
    throw IndexException();
  }
  return dvptr[a][b][c];
}

} // end namespace Gambit
