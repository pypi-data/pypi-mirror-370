/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/linksocks/linksocks/linksockslib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "linksockslib.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: pkix.RelativeDistinguishedNameSET ---
//
extern long long int pkix_RelativeDistinguishedNameSET_CTor();
extern GoInt pkix_RelativeDistinguishedNameSET_len(long long int handle);
extern long long int pkix_RelativeDistinguishedNameSET_elem(long long int handle, GoInt _idx);
extern long long int pkix_RelativeDistinguishedNameSET_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void pkix_RelativeDistinguishedNameSET_set(long long int handle, GoInt _idx, long long int _vl);
extern void pkix_RelativeDistinguishedNameSET_append(long long int handle, long long int _vl);

// --- wrapping slice: asn1.ObjectIdentifier ---
//
extern long long int asn1_ObjectIdentifier_CTor();
extern GoInt asn1_ObjectIdentifier_len(long long int handle);
extern long long int asn1_ObjectIdentifier_elem(long long int handle, GoInt _idx);
extern long long int asn1_ObjectIdentifier_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void asn1_ObjectIdentifier_set(long long int handle, GoInt _idx, long long int _vl);
extern void asn1_ObjectIdentifier_append(long long int handle, long long int _vl);

// --- wrapping slice: asn1.RawContent ---
//
extern long long int asn1_RawContent_CTor();
extern GoInt asn1_RawContent_len(long long int handle);
extern char asn1_RawContent_elem(long long int handle, GoInt _idx);
extern long long int asn1_RawContent_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void asn1_RawContent_set(long long int handle, GoInt _idx, char _vl);
extern void asn1_RawContent_append(long long int handle, char _vl);

// --- wrapping slice: uuid.UUID ---
//
extern long long int uuid_UUID_CTor();
extern GoInt uuid_UUID_len(long long int handle);
extern char uuid_UUID_elem(long long int handle, GoInt _idx);
extern void uuid_UUID_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: net.HardwareAddr ---
//
extern long long int net_HardwareAddr_CTor();
extern GoInt net_HardwareAddr_len(long long int handle);
extern char net_HardwareAddr_elem(long long int handle, GoInt _idx);
extern long long int net_HardwareAddr_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void net_HardwareAddr_set(long long int handle, GoInt _idx, char _vl);
extern void net_HardwareAddr_append(long long int handle, char _vl);

// --- wrapping slice: net.IP ---
//
extern long long int net_IP_CTor();
extern GoInt net_IP_len(long long int handle);
extern char net_IP_elem(long long int handle, GoInt _idx);
extern long long int net_IP_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void net_IP_set(long long int handle, GoInt _idx, char _vl);
extern void net_IP_append(long long int handle, char _vl);

// --- wrapping slice: net.IPMask ---
//
extern long long int net_IPMask_CTor();
extern GoInt net_IPMask_len(long long int handle);
extern char net_IPMask_elem(long long int handle, GoInt _idx);
extern long long int net_IPMask_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void net_IPMask_set(long long int handle, GoInt _idx, char _vl);
extern void net_IPMask_append(long long int handle, char _vl);

// --- wrapping map: http.Header ---
//
extern long long int http_Header_CTor();
extern GoInt http_Header_len(long long int handle);
extern long long int http_Header_elem(long long int handle, char* _ky);
extern char http_Header_contains(long long int handle, char* _ky);
extern void http_Header_set(long long int handle, char* _ky, long long int _vl);
extern void http_Header_delete(long long int handle, char* _ky);
extern long long int http_Header_keys(long long int handle);

// --- wrapping map: textproto.MIMEHeader ---
//
extern long long int textproto_MIMEHeader_CTor();
extern GoInt textproto_MIMEHeader_len(long long int handle);
extern long long int textproto_MIMEHeader_elem(long long int handle, char* _ky);
extern char textproto_MIMEHeader_contains(long long int handle, char* _ky);
extern void textproto_MIMEHeader_set(long long int handle, char* _ky, long long int _vl);
extern void textproto_MIMEHeader_delete(long long int handle, char* _ky);
extern long long int textproto_MIMEHeader_keys(long long int handle);

// --- wrapping map: url.Values ---
//
extern long long int url_Values_CTor();
extern GoInt url_Values_len(long long int handle);
extern long long int url_Values_elem(long long int handle, char* _ky);
extern char url_Values_contains(long long int handle, char* _ky);
extern void url_Values_set(long long int handle, char* _ky, long long int _vl);
extern void url_Values_delete(long long int handle, char* _ky);
extern long long int url_Values_keys(long long int handle);

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: [16]byte ---
//
extern long long int Array_16_byte_CTor();
extern GoInt Array_16_byte_len(long long int handle);
extern char Array_16_byte_elem(long long int handle, GoInt _idx);
extern void Array_16_byte_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: [4]byte ---
//
extern long long int Array_4_byte_CTor();
extern GoInt Array_4_byte_len(long long int handle);
extern char Array_4_byte_elem(long long int handle, GoInt _idx);
extern void Array_4_byte_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: []*x509.Certificate ---
//
extern long long int Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Ptr_x509_Certificate_len(long long int handle);
extern long long int Slice_Ptr_x509_Certificate_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_x509_Certificate_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_x509_Certificate_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_x509_Certificate_append(long long int handle, long long int _vl);

// --- wrapping slice: []*multipart.FileHeader ---
//
extern long long int Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Slice_Ptr_multipart_FileHeader_len(long long int handle);
extern long long int Slice_Ptr_multipart_FileHeader_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_multipart_FileHeader_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_multipart_FileHeader_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_multipart_FileHeader_append(long long int handle, long long int _vl);

// --- wrapping slice: []*net.IPNet ---
//
extern long long int Slice_Ptr_net_IPNet_CTor();
extern GoInt Slice_Ptr_net_IPNet_len(long long int handle);
extern long long int Slice_Ptr_net_IPNet_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_net_IPNet_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_net_IPNet_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_net_IPNet_append(long long int handle, long long int _vl);

// --- wrapping slice: []*http.Cookie ---
//
extern long long int Slice_Ptr_http_Cookie_CTor();
extern GoInt Slice_Ptr_http_Cookie_len(long long int handle);
extern long long int Slice_Ptr_http_Cookie_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_http_Cookie_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_http_Cookie_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_http_Cookie_append(long long int handle, long long int _vl);

// --- wrapping slice: []*url.URL ---
//
extern long long int Slice_Ptr_url_URL_CTor();
extern GoInt Slice_Ptr_url_URL_len(long long int handle);
extern long long int Slice_Ptr_url_URL_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_url_URL_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_url_URL_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_url_URL_append(long long int handle, long long int _vl);

// --- wrapping slice: [][]*x509.Certificate ---
//
extern long long int Slice_Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Slice_Ptr_x509_Certificate_len(long long int handle);
extern long long int Slice_Slice_Ptr_x509_Certificate_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_Ptr_x509_Certificate_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Ptr_x509_Certificate_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_Ptr_x509_Certificate_append(long long int handle, long long int _vl);

// --- wrapping slice: [][]byte ---
//
extern long long int Slice_Slice_byte_CTor();
extern GoInt Slice_Slice_byte_len(long long int handle);
extern long long int Slice_Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_byte_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_byte_append(long long int handle, long long int _vl);

// --- wrapping slice: []x509.ExtKeyUsage ---
//
extern long long int Slice_x509_ExtKeyUsage_CTor();
extern GoInt Slice_x509_ExtKeyUsage_len(long long int handle);
extern long long int Slice_x509_ExtKeyUsage_elem(long long int handle, GoInt _idx);
extern long long int Slice_x509_ExtKeyUsage_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_x509_ExtKeyUsage_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_x509_ExtKeyUsage_append(long long int handle, long long int _vl);

// --- wrapping slice: []pkix.AttributeTypeAndValue ---
//
extern long long int Slice_pkix_AttributeTypeAndValue_CTor();
extern GoInt Slice_pkix_AttributeTypeAndValue_len(long long int handle);
extern long long int Slice_pkix_AttributeTypeAndValue_elem(long long int handle, GoInt _idx);
extern long long int Slice_pkix_AttributeTypeAndValue_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_AttributeTypeAndValue_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_pkix_AttributeTypeAndValue_append(long long int handle, long long int _vl);

// --- wrapping slice: []pkix.Extension ---
//
extern long long int Slice_pkix_Extension_CTor();
extern GoInt Slice_pkix_Extension_len(long long int handle);
extern long long int Slice_pkix_Extension_elem(long long int handle, GoInt _idx);
extern long long int Slice_pkix_Extension_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_Extension_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_pkix_Extension_append(long long int handle, long long int _vl);

// --- wrapping slice: []pkix.RevokedCertificate ---
//
extern long long int Slice_pkix_RevokedCertificate_CTor();
extern GoInt Slice_pkix_RevokedCertificate_len(long long int handle);
extern long long int Slice_pkix_RevokedCertificate_elem(long long int handle, GoInt _idx);
extern long long int Slice_pkix_RevokedCertificate_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_RevokedCertificate_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_pkix_RevokedCertificate_append(long long int handle, long long int _vl);

// --- wrapping slice: []asn1.ObjectIdentifier ---
//
extern long long int Slice_asn1_ObjectIdentifier_CTor();
extern GoInt Slice_asn1_ObjectIdentifier_len(long long int handle);
extern long long int Slice_asn1_ObjectIdentifier_elem(long long int handle, GoInt _idx);
extern long long int Slice_asn1_ObjectIdentifier_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_asn1_ObjectIdentifier_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_asn1_ObjectIdentifier_append(long long int handle, long long int _vl);

// --- wrapping slice: []fmt.Stringer ---
//
extern long long int Slice_fmt_Stringer_CTor();
extern GoInt Slice_fmt_Stringer_len(long long int handle);
extern long long int Slice_fmt_Stringer_elem(long long int handle, GoInt _idx);
extern long long int Slice_fmt_Stringer_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_fmt_Stringer_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_fmt_Stringer_append(long long int handle, long long int _vl);

// --- wrapping slice: []linksocks.LogEntry ---
//
extern long long int Slice_linksocks_LogEntry_CTor();
extern GoInt Slice_linksocks_LogEntry_len(long long int handle);
extern long long int Slice_linksocks_LogEntry_elem(long long int handle, GoInt _idx);
extern long long int Slice_linksocks_LogEntry_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_linksocks_LogEntry_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_linksocks_LogEntry_append(long long int handle, long long int _vl);

// --- wrapping slice: []zerolog.Hook ---
//
extern long long int Slice_zerolog_Hook_CTor();
extern GoInt Slice_zerolog_Hook_len(long long int handle);
extern long long int Slice_zerolog_Hook_elem(long long int handle, GoInt _idx);
extern long long int Slice_zerolog_Hook_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_zerolog_Hook_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_zerolog_Hook_append(long long int handle, long long int _vl);

// --- wrapping slice: []interface{} ---
//
extern long long int Slice_interface__CTor();
extern GoInt Slice_interface__len(long long int handle);
extern char* Slice_interface__elem(long long int handle, GoInt _idx);
extern long long int Slice_interface__subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_interface__set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_interface__append(long long int handle, char* _vl);

// --- wrapping slice: []big.Word ---
//
extern long long int Slice_big_Word_CTor();
extern GoInt Slice_big_Word_len(long long int handle);
extern long long unsigned int Slice_big_Word_elem(long long int handle, GoInt _idx);
extern long long int Slice_big_Word_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_big_Word_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_big_Word_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []net.IP ---
//
extern long long int Slice_net_IP_CTor();
extern GoInt Slice_net_IP_len(long long int handle);
extern long long int Slice_net_IP_elem(long long int handle, GoInt _idx);
extern long long int Slice_net_IP_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_net_IP_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_net_IP_append(long long int handle, long long int _vl);

// --- wrapping slice: []time.Duration ---
//
extern long long int Slice_time_Duration_CTor();
extern GoInt Slice_time_Duration_len(long long int handle);
extern long long int Slice_time_Duration_elem(long long int handle, GoInt _idx);
extern long long int Slice_time_Duration_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_time_Duration_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_time_Duration_append(long long int handle, long long int _vl);

// --- wrapping slice: []time.Time ---
//
extern long long int Slice_time_Time_CTor();
extern GoInt Slice_time_Time_len(long long int handle);
extern long long int Slice_time_Time_elem(long long int handle, GoInt _idx);
extern long long int Slice_time_Time_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_time_Time_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_time_Time_append(long long int handle, long long int _vl);

// --- wrapping map: map[string][]*multipart.FileHeader ---
//
extern long long int Map_string_Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Map_string_Slice_Ptr_multipart_FileHeader_len(long long int handle);
extern long long int Map_string_Slice_Ptr_multipart_FileHeader_elem(long long int handle, char* _ky);
extern char Map_string_Slice_Ptr_multipart_FileHeader_contains(long long int handle, char* _ky);
extern void Map_string_Slice_Ptr_multipart_FileHeader_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Slice_Ptr_multipart_FileHeader_delete(long long int handle, char* _ky);
extern long long int Map_string_Slice_Ptr_multipart_FileHeader_keys(long long int handle);

// --- wrapping map: map[string][]string ---
//
extern long long int Map_string_Slice_string_CTor();
extern GoInt Map_string_Slice_string_len(long long int handle);
extern long long int Map_string_Slice_string_elem(long long int handle, char* _ky);
extern char Map_string_Slice_string_contains(long long int handle, char* _ky);
extern void Map_string_Slice_string_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Slice_string_delete(long long int handle, char* _ky);
extern long long int Map_string_Slice_string_keys(long long int handle);

// --- wrapping map: map[string]bool ---
//
extern long long int Map_string_bool_CTor();
extern GoInt Map_string_bool_len(long long int handle);
extern char Map_string_bool_elem(long long int handle, char* _ky);
extern char Map_string_bool_contains(long long int handle, char* _ky);
extern void Map_string_bool_set(long long int handle, char* _ky, char _vl);
extern void Map_string_bool_delete(long long int handle, char* _ky);
extern long long int Map_string_bool_keys(long long int handle);

// ---- Global Variables: can only use functions to access ---
//
extern long long int linksocks_Hour();
extern void linksocks_Set_Hour(long long int val);
extern char linksocks_LevelDebug();
extern void linksocks_Set_LevelDebug(char val);
extern char linksocks_LevelError();
extern void linksocks_Set_LevelError(char val);
extern char linksocks_LevelFatal();
extern void linksocks_Set_LevelFatal(char val);
extern char linksocks_LevelInfo();
extern void linksocks_Set_LevelInfo(char val);
extern char linksocks_LevelPanic();
extern void linksocks_Set_LevelPanic(char val);
extern char linksocks_LevelTrace();
extern void linksocks_Set_LevelTrace(char val);
extern char linksocks_LevelWarn();
extern void linksocks_Set_LevelWarn(char val);
extern long long int linksocks_Microsecond();
extern void linksocks_Set_Microsecond(long long int val);
extern long long int linksocks_Millisecond();
extern void linksocks_Set_Millisecond(long long int val);
extern long long int linksocks_Minute();
extern void linksocks_Set_Minute(long long int val);
extern long long int linksocks_Nanosecond();
extern void linksocks_Set_Nanosecond(long long int val);
extern char* linksocks_Platform();
extern void linksocks_Set_Platform(char* val);
extern long long int linksocks_Second();
extern void linksocks_Set_Second(long long int val);
extern char* linksocks_Version();
extern void linksocks_Set_Version(char* val);
extern char* linksocks_BaseMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.DynamicForwarder ---
//
extern long long int linksocks_DynamicForwarder_CTor();
extern void linksocks_DynamicForwarder_ProcessReads(long long int _handle, long long int conn, char goRun);
extern void linksocks_DynamicForwarder_ProcessReadsImmediate(long long int _handle, long long int conn, char goRun);
extern void linksocks_DynamicForwarder_ProcessUDPReads(long long int _handle, long long int conn, char goRun);

// --- wrapping struct: linksocks.LinkSocksClient ---
//
extern long long int linksocks_LinkSocksClient_CTor();
extern char linksocks_LinkSocksClient_IsConnected_Get(long long int handle);
extern void linksocks_LinkSocksClient_IsConnected_Set(long long int handle, char val);
extern char* linksocks_LinkSocksClient_WaitReady(long long int _handle, long long int ctx, long long int timeout);
extern char* linksocks_LinkSocksClient_Connect(long long int _handle, long long int ctx);
extern void linksocks_LinkSocksClient_Close(long long int _handle, char goRun);
extern char* linksocks_LinkSocksClient_AddConnector(long long int _handle, char* connectorToken);
extern char* linksocks_LinkSocksClient_RemoveConnector(long long int _handle, char* connectorToken);
extern long long int linksocks_LinkSocksClient_GetPartnersCount(long long int _handle);

// --- wrapping struct: linksocks.ReverseTokenOptions ---
//
extern long long int linksocks_ReverseTokenOptions_CTor();
extern char* linksocks_ReverseTokenOptions_Token_Get(long long int handle);
extern void linksocks_ReverseTokenOptions_Token_Set(long long int handle, char* val);
extern long long int linksocks_ReverseTokenOptions_Port_Get(long long int handle);
extern void linksocks_ReverseTokenOptions_Port_Set(long long int handle, long long int val);
extern char* linksocks_ReverseTokenOptions_Username_Get(long long int handle);
extern void linksocks_ReverseTokenOptions_Username_Set(long long int handle, char* val);
extern char* linksocks_ReverseTokenOptions_Password_Get(long long int handle);
extern void linksocks_ReverseTokenOptions_Password_Set(long long int handle, char* val);
extern char linksocks_ReverseTokenOptions_AllowManageConnector_Get(long long int handle);
extern void linksocks_ReverseTokenOptions_AllowManageConnector_Set(long long int handle, char val);

// --- wrapping struct: linksocks.ServerOption ---
//
extern long long int linksocks_ServerOption_CTor();
extern char* linksocks_ServerOption_WSHost_Get(long long int handle);
extern void linksocks_ServerOption_WSHost_Set(long long int handle, char* val);
extern long long int linksocks_ServerOption_WSPort_Get(long long int handle);
extern void linksocks_ServerOption_WSPort_Set(long long int handle, long long int val);
extern char* linksocks_ServerOption_SocksHost_Get(long long int handle);
extern void linksocks_ServerOption_SocksHost_Set(long long int handle, char* val);
extern long long int linksocks_ServerOption_PortPool_Get(long long int handle);
extern void linksocks_ServerOption_PortPool_Set(long long int handle, long long int val);
extern char linksocks_ServerOption_SocksWaitClient_Get(long long int handle);
extern void linksocks_ServerOption_SocksWaitClient_Set(long long int handle, char val);
extern long long int linksocks_ServerOption_Logger_Get(long long int handle);
extern void linksocks_ServerOption_Logger_Set(long long int handle, long long int val);
extern long long int linksocks_ServerOption_BufferSize_Get(long long int handle);
extern void linksocks_ServerOption_BufferSize_Set(long long int handle, long long int val);
extern char* linksocks_ServerOption_APIKey_Get(long long int handle);
extern void linksocks_ServerOption_APIKey_Set(long long int handle, char* val);
extern long long int linksocks_ServerOption_ChannelTimeout_Get(long long int handle);
extern void linksocks_ServerOption_ChannelTimeout_Set(long long int handle, long long int val);
extern long long int linksocks_ServerOption_ConnectTimeout_Get(long long int handle);
extern void linksocks_ServerOption_ConnectTimeout_Set(long long int handle, long long int val);
extern char linksocks_ServerOption_FastOpen_Get(long long int handle);
extern void linksocks_ServerOption_FastOpen_Set(long long int handle, char val);
extern char* linksocks_ServerOption_UpstreamProxy_Get(long long int handle);
extern void linksocks_ServerOption_UpstreamProxy_Set(long long int handle, char* val);
extern char* linksocks_ServerOption_UpstreamUsername_Get(long long int handle);
extern void linksocks_ServerOption_UpstreamUsername_Set(long long int handle, char* val);
extern char* linksocks_ServerOption_UpstreamPassword_Get(long long int handle);
extern void linksocks_ServerOption_UpstreamPassword_Set(long long int handle, char* val);
extern long long int linksocks_ServerOption_WithWSHost(long long int _handle, char* host);
extern long long int linksocks_ServerOption_WithWSPort(long long int _handle, long long int port);
extern long long int linksocks_ServerOption_WithSocksHost(long long int _handle, char* host);
extern long long int linksocks_ServerOption_WithPortPool(long long int _handle, long long int pool);
extern long long int linksocks_ServerOption_WithSocksWaitClient(long long int _handle, char wait);
extern long long int linksocks_ServerOption_WithLogger(long long int _handle, long long int logger);
extern long long int linksocks_ServerOption_WithBufferSize(long long int _handle, long long int size);
extern long long int linksocks_ServerOption_WithAPI(long long int _handle, char* apiKey);
extern long long int linksocks_ServerOption_WithChannelTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_ServerOption_WithConnectTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_ServerOption_WithFastOpen(long long int _handle, char fastOpen);
extern long long int linksocks_ServerOption_WithUpstreamProxy(long long int _handle, char* proxy);
extern long long int linksocks_ServerOption_WithUpstreamAuth(long long int _handle, char* username, char* password);

// --- wrapping struct: linksocks.ConnectorResponseMessage ---
//
extern long long int linksocks_ConnectorResponseMessage_CTor();
extern char linksocks_ConnectorResponseMessage_Success_Get(long long int handle);
extern void linksocks_ConnectorResponseMessage_Success_Set(long long int handle, char val);
extern char* linksocks_ConnectorResponseMessage_Error_Get(long long int handle);
extern void linksocks_ConnectorResponseMessage_Error_Set(long long int handle, char* val);
extern long long int linksocks_ConnectorResponseMessage_ChannelID_Get(long long int handle);
extern char* linksocks_ConnectorResponseMessage_ConnectorToken_Get(long long int handle);
extern void linksocks_ConnectorResponseMessage_ConnectorToken_Set(long long int handle, char* val);
extern char* linksocks_ConnectorResponseMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.ContextWithCancel ---
//
extern long long int linksocks_ContextWithCancel_CTor();
extern void linksocks_ContextWithCancel_Cancel(long long int _handle, char goRun);
extern long long int linksocks_ContextWithCancel_Context(long long int _handle);

// --- wrapping struct: linksocks.DisconnectMessage ---
//
extern long long int linksocks_DisconnectMessage_CTor();
extern long long int linksocks_DisconnectMessage_ChannelID_Get(long long int handle);
extern char* linksocks_DisconnectMessage_Error_Get(long long int handle);
extern void linksocks_DisconnectMessage_Error_Set(long long int handle, char* val);
extern char* linksocks_DisconnectMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.TokenRequest ---
//
extern long long int linksocks_TokenRequest_CTor();
extern char* linksocks_TokenRequest_Type_Get(long long int handle);
extern void linksocks_TokenRequest_Type_Set(long long int handle, char* val);
extern char* linksocks_TokenRequest_Token_Get(long long int handle);
extern void linksocks_TokenRequest_Token_Set(long long int handle, char* val);
extern long long int linksocks_TokenRequest_Port_Get(long long int handle);
extern void linksocks_TokenRequest_Port_Set(long long int handle, long long int val);
extern char* linksocks_TokenRequest_Username_Get(long long int handle);
extern void linksocks_TokenRequest_Username_Set(long long int handle, char* val);
extern char* linksocks_TokenRequest_Password_Get(long long int handle);
extern void linksocks_TokenRequest_Password_Set(long long int handle, char* val);
extern char* linksocks_TokenRequest_ReverseToken_Get(long long int handle);
extern void linksocks_TokenRequest_ReverseToken_Set(long long int handle, char* val);
extern char linksocks_TokenRequest_AllowManageConnector_Get(long long int handle);
extern void linksocks_TokenRequest_AllowManageConnector_Set(long long int handle, char val);

// --- wrapping struct: linksocks.APIHandler ---
//
extern long long int linksocks_APIHandler_CTor();
extern void linksocks_APIHandler_RegisterHandlers(long long int _handle, long long int mux, char goRun);

// --- wrapping struct: linksocks.SocketManager ---
//
extern long long int linksocks_SocketManager_CTor();
extern long long int linksocks_SocketManager_GetListener(long long int _handle, long long int port);
extern void linksocks_SocketManager_ReleaseListener(long long int _handle, long long int port, char goRun);
extern void linksocks_SocketManager_Close(long long int _handle, char goRun);

// --- wrapping struct: linksocks.StatusResponse ---
//
extern long long int linksocks_StatusResponse_CTor();
extern char* linksocks_StatusResponse_Version_Get(long long int handle);
extern void linksocks_StatusResponse_Version_Set(long long int handle, char* val);
extern long long int linksocks_StatusResponse_Tokens_Get(long long int handle);
extern void linksocks_StatusResponse_Tokens_Set(long long int handle, long long int val);

// --- wrapping struct: linksocks.TokenStatus ---
//
extern long long int linksocks_TokenStatus_CTor();
extern char* linksocks_TokenStatus_Token_Get(long long int handle);
extern void linksocks_TokenStatus_Token_Set(long long int handle, char* val);
extern char* linksocks_TokenStatus_Type_Get(long long int handle);
extern void linksocks_TokenStatus_Type_Set(long long int handle, char* val);
extern long long int linksocks_TokenStatus_ClientsCount_Get(long long int handle);
extern void linksocks_TokenStatus_ClientsCount_Set(long long int handle, long long int val);

// --- wrapping struct: linksocks.TokenResponse ---
//
extern long long int linksocks_TokenResponse_CTor();
extern char linksocks_TokenResponse_Success_Get(long long int handle);
extern void linksocks_TokenResponse_Success_Set(long long int handle, char val);
extern char* linksocks_TokenResponse_Token_Get(long long int handle);
extern void linksocks_TokenResponse_Token_Set(long long int handle, char* val);
extern long long int linksocks_TokenResponse_Port_Get(long long int handle);
extern void linksocks_TokenResponse_Port_Set(long long int handle, long long int val);
extern char* linksocks_TokenResponse_Error_Get(long long int handle);
extern void linksocks_TokenResponse_Error_Set(long long int handle, char* val);

// --- wrapping struct: linksocks.ReverseTokenStatus ---
//
extern long long int linksocks_ReverseTokenStatus_CTor();
extern long long int linksocks_ReverseTokenStatus_Port_Get(long long int handle);
extern void linksocks_ReverseTokenStatus_Port_Set(long long int handle, long long int val);
extern long long int linksocks_ReverseTokenStatus_ConnectorTokens_Get(long long int handle);
extern void linksocks_ReverseTokenStatus_ConnectorTokens_Set(long long int handle, long long int val);

// --- wrapping struct: linksocks.DataMessage ---
//
extern long long int linksocks_DataMessage_CTor();
extern char* linksocks_DataMessage_Protocol_Get(long long int handle);
extern void linksocks_DataMessage_Protocol_Set(long long int handle, char* val);
extern long long int linksocks_DataMessage_ChannelID_Get(long long int handle);
extern long long int linksocks_DataMessage_Data_Get(long long int handle);
extern void linksocks_DataMessage_Data_Set(long long int handle, long long int val);
extern char linksocks_DataMessage_Compression_Get(long long int handle);
extern void linksocks_DataMessage_Compression_Set(long long int handle, char val);
extern char* linksocks_DataMessage_Address_Get(long long int handle);
extern void linksocks_DataMessage_Address_Set(long long int handle, char* val);
extern long long int linksocks_DataMessage_Port_Get(long long int handle);
extern void linksocks_DataMessage_Port_Set(long long int handle, long long int val);
extern char* linksocks_DataMessage_TargetAddr_Get(long long int handle);
extern void linksocks_DataMessage_TargetAddr_Set(long long int handle, char* val);
extern long long int linksocks_DataMessage_TargetPort_Get(long long int handle);
extern void linksocks_DataMessage_TargetPort_Set(long long int handle, long long int val);
extern char* linksocks_DataMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.LogMessage ---
//
extern long long int linksocks_LogMessage_CTor();
extern char* linksocks_LogMessage_Level_Get(long long int handle);
extern void linksocks_LogMessage_Level_Set(long long int handle, char* val);
extern char* linksocks_LogMessage_Msg_Get(long long int handle);
extern void linksocks_LogMessage_Msg_Set(long long int handle, char* val);
extern char* linksocks_LogMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.Relay ---
//
extern long long int linksocks_Relay_CTor();
extern char* linksocks_Relay_RefuseSocksRequest(long long int _handle, long long int conn, char reason);
extern char* linksocks_Relay_HandleNetworkConnection(long long int _handle, long long int ctx, long long int ws, long long int request);
extern char* linksocks_Relay_HandleTCPConnection(long long int _handle, long long int ctx, long long int ws, long long int request);
extern char* linksocks_Relay_HandleUDPConnection(long long int _handle, long long int ctx, long long int ws, long long int request);
extern char* linksocks_Relay_HandleSocksRequest(long long int _handle, long long int ctx, long long int ws, long long int socksConn, char* socksUsername, char* socksPassword);
extern char* linksocks_Relay_HandleRemoteTCPForward(long long int _handle, long long int ctx, long long int ws, long long int remoteConn, long long int channelID);
extern char* linksocks_Relay_HandleRemoteUDPForward(long long int _handle, long long int ctx, long long int ws, long long int udpConn, long long int channelID);
extern char* linksocks_Relay_HandleSocksTCPForward(long long int _handle, long long int ctx, long long int ws, long long int socksConn, long long int channelID);
extern char* linksocks_Relay_HandleSocksUDPForward(long long int _handle, long long int ctx, long long int ws, long long int udpConn, long long int socksConn, long long int channelID);
extern void linksocks_Relay_Close(long long int _handle, char goRun);
extern void linksocks_Relay_SetConnectionSuccess(long long int _handle, long long int channelID, char goRun);

// --- wrapping struct: linksocks.ConnectorMessage ---
//
extern long long int linksocks_ConnectorMessage_CTor();
extern long long int linksocks_ConnectorMessage_ChannelID_Get(long long int handle);
extern char* linksocks_ConnectorMessage_ConnectorToken_Get(long long int handle);
extern void linksocks_ConnectorMessage_ConnectorToken_Set(long long int handle, char* val);
extern char* linksocks_ConnectorMessage_Operation_Get(long long int handle);
extern void linksocks_ConnectorMessage_Operation_Set(long long int handle, char* val);
extern char* linksocks_ConnectorMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.PartnersMessage ---
//
extern long long int linksocks_PartnersMessage_CTor();
extern long long int linksocks_PartnersMessage_Count_Get(long long int handle);
extern void linksocks_PartnersMessage_Count_Set(long long int handle, long long int val);
extern char* linksocks_PartnersMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.AuthResponseMessage ---
//
extern long long int linksocks_AuthResponseMessage_CTor();
extern char linksocks_AuthResponseMessage_Success_Get(long long int handle);
extern void linksocks_AuthResponseMessage_Success_Set(long long int handle, char val);
extern char* linksocks_AuthResponseMessage_Error_Get(long long int handle);
extern void linksocks_AuthResponseMessage_Error_Set(long long int handle, char* val);
extern char* linksocks_AuthResponseMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.ClientOption ---
//
extern long long int linksocks_ClientOption_CTor();
extern char* linksocks_ClientOption_WSURL_Get(long long int handle);
extern void linksocks_ClientOption_WSURL_Set(long long int handle, char* val);
extern char linksocks_ClientOption_Reverse_Get(long long int handle);
extern void linksocks_ClientOption_Reverse_Set(long long int handle, char val);
extern char* linksocks_ClientOption_SocksHost_Get(long long int handle);
extern void linksocks_ClientOption_SocksHost_Set(long long int handle, char* val);
extern long long int linksocks_ClientOption_SocksPort_Get(long long int handle);
extern void linksocks_ClientOption_SocksPort_Set(long long int handle, long long int val);
extern char* linksocks_ClientOption_SocksUsername_Get(long long int handle);
extern void linksocks_ClientOption_SocksUsername_Set(long long int handle, char* val);
extern char* linksocks_ClientOption_SocksPassword_Get(long long int handle);
extern void linksocks_ClientOption_SocksPassword_Set(long long int handle, char* val);
extern char linksocks_ClientOption_SocksWaitServer_Get(long long int handle);
extern void linksocks_ClientOption_SocksWaitServer_Set(long long int handle, char val);
extern char linksocks_ClientOption_Reconnect_Get(long long int handle);
extern void linksocks_ClientOption_Reconnect_Set(long long int handle, char val);
extern long long int linksocks_ClientOption_ReconnectDelay_Get(long long int handle);
extern void linksocks_ClientOption_ReconnectDelay_Set(long long int handle, long long int val);
extern long long int linksocks_ClientOption_Logger_Get(long long int handle);
extern void linksocks_ClientOption_Logger_Set(long long int handle, long long int val);
extern long long int linksocks_ClientOption_BufferSize_Get(long long int handle);
extern void linksocks_ClientOption_BufferSize_Set(long long int handle, long long int val);
extern long long int linksocks_ClientOption_ChannelTimeout_Get(long long int handle);
extern void linksocks_ClientOption_ChannelTimeout_Set(long long int handle, long long int val);
extern long long int linksocks_ClientOption_ConnectTimeout_Get(long long int handle);
extern void linksocks_ClientOption_ConnectTimeout_Set(long long int handle, long long int val);
extern long long int linksocks_ClientOption_Threads_Get(long long int handle);
extern void linksocks_ClientOption_Threads_Set(long long int handle, long long int val);
extern char linksocks_ClientOption_FastOpen_Get(long long int handle);
extern void linksocks_ClientOption_FastOpen_Set(long long int handle, char val);
extern char* linksocks_ClientOption_UpstreamProxy_Get(long long int handle);
extern void linksocks_ClientOption_UpstreamProxy_Set(long long int handle, char* val);
extern char* linksocks_ClientOption_UpstreamUsername_Get(long long int handle);
extern void linksocks_ClientOption_UpstreamUsername_Set(long long int handle, char* val);
extern char* linksocks_ClientOption_UpstreamPassword_Get(long long int handle);
extern void linksocks_ClientOption_UpstreamPassword_Set(long long int handle, char* val);
extern char linksocks_ClientOption_NoEnvProxy_Get(long long int handle);
extern void linksocks_ClientOption_NoEnvProxy_Set(long long int handle, char val);
extern long long int linksocks_ClientOption_WithWSURL(long long int _handle, char* url);
extern long long int linksocks_ClientOption_WithReverse(long long int _handle, char reverse);
extern long long int linksocks_ClientOption_WithSocksHost(long long int _handle, char* host);
extern long long int linksocks_ClientOption_WithSocksPort(long long int _handle, long long int port);
extern long long int linksocks_ClientOption_WithSocksUsername(long long int _handle, char* username);
extern long long int linksocks_ClientOption_WithSocksPassword(long long int _handle, char* password);
extern long long int linksocks_ClientOption_WithSocksWaitServer(long long int _handle, char wait);
extern long long int linksocks_ClientOption_WithReconnect(long long int _handle, char reconnect);
extern long long int linksocks_ClientOption_WithReconnectDelay(long long int _handle, long long int delay);
extern long long int linksocks_ClientOption_WithLogger(long long int _handle, long long int logger);
extern long long int linksocks_ClientOption_WithBufferSize(long long int _handle, long long int size);
extern long long int linksocks_ClientOption_WithChannelTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_ClientOption_WithConnectTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_ClientOption_WithThreads(long long int _handle, long long int threads);
extern long long int linksocks_ClientOption_WithFastOpen(long long int _handle, char fastOpen);
extern long long int linksocks_ClientOption_WithUpstreamProxy(long long int _handle, char* proxy);
extern long long int linksocks_ClientOption_WithUpstreamAuth(long long int _handle, char* username, char* password);
extern long long int linksocks_ClientOption_WithNoEnvProxy(long long int _handle, char noEnvProxy);

// --- wrapping struct: linksocks.PortPool ---
//
extern long long int linksocks_PortPool_CTor();
extern long long int linksocks_PortPool_Get(long long int _handle, long long int requestedPort);
extern void linksocks_PortPool_Put(long long int _handle, long long int port, char goRun);

// --- wrapping struct: linksocks.ReverseTokenResult ---
//
extern long long int linksocks_ReverseTokenResult_CTor();
extern char* linksocks_ReverseTokenResult_Token_Get(long long int handle);
extern void linksocks_ReverseTokenResult_Token_Set(long long int handle, char* val);
extern long long int linksocks_ReverseTokenResult_Port_Get(long long int handle);
extern void linksocks_ReverseTokenResult_Port_Set(long long int handle, long long int val);

// --- wrapping struct: linksocks.ConnectResponseMessage ---
//
extern long long int linksocks_ConnectResponseMessage_CTor();
extern char linksocks_ConnectResponseMessage_Success_Get(long long int handle);
extern void linksocks_ConnectResponseMessage_Success_Set(long long int handle, char val);
extern char* linksocks_ConnectResponseMessage_Error_Get(long long int handle);
extern void linksocks_ConnectResponseMessage_Error_Set(long long int handle, char* val);
extern long long int linksocks_ConnectResponseMessage_ChannelID_Get(long long int handle);
extern char* linksocks_ConnectResponseMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.LinkSocksServer ---
//
extern long long int linksocks_LinkSocksServer_CTor();
extern long long int linksocks_LinkSocksServer_AddReverseToken(long long int _handle, long long int opts);
extern char* linksocks_LinkSocksServer_AddForwardToken(long long int _handle, char* token);
extern char* linksocks_LinkSocksServer_AddConnectorToken(long long int _handle, char* connectorToken, char* reverseToken);
extern char linksocks_LinkSocksServer_RemoveToken(long long int _handle, char* token);
extern char* linksocks_LinkSocksServer_Serve(long long int _handle, long long int ctx);
extern char* linksocks_LinkSocksServer_WaitReady(long long int _handle, long long int ctx, long long int timeout);
extern void linksocks_LinkSocksServer_Close(long long int _handle, char goRun);
extern long long int linksocks_LinkSocksServer_GetClientCount(long long int _handle);
extern char linksocks_LinkSocksServer_HasClients(long long int _handle);
extern long long int linksocks_LinkSocksServer_GetTokenClientCount(long long int _handle, char* token);

// --- wrapping struct: linksocks.RelayOption ---
//
extern long long int linksocks_RelayOption_CTor();
extern long long int linksocks_RelayOption_BufferSize_Get(long long int handle);
extern void linksocks_RelayOption_BufferSize_Set(long long int handle, long long int val);
extern long long int linksocks_RelayOption_ChannelTimeout_Get(long long int handle);
extern void linksocks_RelayOption_ChannelTimeout_Set(long long int handle, long long int val);
extern long long int linksocks_RelayOption_ConnectTimeout_Get(long long int handle);
extern void linksocks_RelayOption_ConnectTimeout_Set(long long int handle, long long int val);
extern char linksocks_RelayOption_FastOpen_Get(long long int handle);
extern void linksocks_RelayOption_FastOpen_Set(long long int handle, char val);
extern char* linksocks_RelayOption_UpstreamProxy_Get(long long int handle);
extern void linksocks_RelayOption_UpstreamProxy_Set(long long int handle, char* val);
extern char* linksocks_RelayOption_UpstreamUsername_Get(long long int handle);
extern void linksocks_RelayOption_UpstreamUsername_Set(long long int handle, char* val);
extern char* linksocks_RelayOption_UpstreamPassword_Get(long long int handle);
extern void linksocks_RelayOption_UpstreamPassword_Set(long long int handle, char* val);
extern char linksocks_RelayOption_EnableDynamicBatching_Get(long long int handle);
extern void linksocks_RelayOption_EnableDynamicBatching_Set(long long int handle, char val);
extern long long int linksocks_RelayOption_MaxBatchWaitTime_Get(long long int handle);
extern void linksocks_RelayOption_MaxBatchWaitTime_Set(long long int handle, long long int val);
extern long long int linksocks_RelayOption_MinBatchWaitTime_Get(long long int handle);
extern void linksocks_RelayOption_MinBatchWaitTime_Set(long long int handle, long long int val);
extern double linksocks_RelayOption_HighSpeedThreshold_Get(long long int handle);
extern void linksocks_RelayOption_HighSpeedThreshold_Set(long long int handle, double val);
extern double linksocks_RelayOption_LowSpeedThreshold_Get(long long int handle);
extern void linksocks_RelayOption_LowSpeedThreshold_Set(long long int handle, double val);
extern long long int linksocks_RelayOption_CompressionThreshold_Get(long long int handle);
extern void linksocks_RelayOption_CompressionThreshold_Set(long long int handle, long long int val);
extern long long int linksocks_RelayOption_WithBufferSize(long long int _handle, long long int size);
extern long long int linksocks_RelayOption_WithChannelTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_RelayOption_WithConnectTimeout(long long int _handle, long long int timeout);
extern long long int linksocks_RelayOption_WithFastOpen(long long int _handle, char fastOpen);
extern long long int linksocks_RelayOption_WithUpstreamProxy(long long int _handle, char* proxy);
extern long long int linksocks_RelayOption_WithUpstreamAuth(long long int _handle, char* username, char* password);
extern long long int linksocks_RelayOption_WithDynamicBatching(long long int _handle, char enabled);
extern long long int linksocks_RelayOption_WithBatchingTimeLimits(long long int _handle, long long int min, long long int max);
extern long long int linksocks_RelayOption_WithHighSpeedThreshold(long long int _handle, double threshold);
extern long long int linksocks_RelayOption_WithLowSpeedThreshold(long long int _handle, double threshold);
extern long long int linksocks_RelayOption_WithCompressionThreshold(long long int _handle, long long int threshold);

// --- wrapping struct: linksocks.AuthMessage ---
//
extern long long int linksocks_AuthMessage_CTor();
extern char* linksocks_AuthMessage_Token_Get(long long int handle);
extern void linksocks_AuthMessage_Token_Set(long long int handle, char* val);
extern char linksocks_AuthMessage_Reverse_Get(long long int handle);
extern void linksocks_AuthMessage_Reverse_Set(long long int handle, char val);
extern long long int linksocks_AuthMessage_Instance_Get(long long int handle);
extern char* linksocks_AuthMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.ConnectMessage ---
//
extern long long int linksocks_ConnectMessage_CTor();
extern char* linksocks_ConnectMessage_Protocol_Get(long long int handle);
extern void linksocks_ConnectMessage_Protocol_Set(long long int handle, char* val);
extern char* linksocks_ConnectMessage_Address_Get(long long int handle);
extern void linksocks_ConnectMessage_Address_Set(long long int handle, char* val);
extern long long int linksocks_ConnectMessage_Port_Get(long long int handle);
extern void linksocks_ConnectMessage_Port_Set(long long int handle, long long int val);
extern long long int linksocks_ConnectMessage_ChannelID_Get(long long int handle);
extern char* linksocks_ConnectMessage_GetType(long long int _handle);

// --- wrapping struct: linksocks.LogEntry ---
//
extern long long int linksocks_LogEntry_CTor();
extern char* linksocks_LogEntry_LoggerID_Get(long long int handle);
extern void linksocks_LogEntry_LoggerID_Set(long long int handle, char* val);
extern char* linksocks_LogEntry_Message_Get(long long int handle);
extern void linksocks_LogEntry_Message_Set(long long int handle, char* val);
extern long long int linksocks_LogEntry_Time_Get(long long int handle);
extern void linksocks_LogEntry_Time_Set(long long int handle, long long int val);

// --- wrapping struct: linksocks.CLI ---
//
extern long long int linksocks_CLI_CTor();
extern char* linksocks_CLI_Execute(long long int _handle);

// --- wrapping struct: linksocks.WSConn ---
//
extern long long int linksocks_WSConn_CTor();
extern char* linksocks_WSConn_Label(long long int _handle);
extern char* linksocks_WSConn_GetClientIP(long long int _handle);
extern void linksocks_WSConn_SetClientIPFromRequest(long long int _handle, long long int r, char goRun);
extern char* linksocks_WSConn_SyncWriteBinary(long long int _handle, long long int data);
extern long long int linksocks_WSConn_ReadMessage(long long int _handle);
extern char* linksocks_WSConn_WriteMessage(long long int _handle, long long int msg);
extern char* linksocks_WSConn_SyncWriteControl(long long int _handle, long long int messageType, long long int data, long long int deadline);
extern char* linksocks_WSConn_Close(long long int _handle);
extern long long int linksocks_NewLinkSocksClient(char* token, long long int opt);
extern long long int linksocks_DefaultReverseTokenOptions();
extern long long int linksocks_DefaultServerOption();
extern long long int linksocks_NewContextWithCancel();
extern long long int linksocks_NewAPIHandler(long long int server, char* apiKey);
extern long long int linksocks_NewSocketManager(char* host, long long int log);
extern long long int linksocks_NewRelay(long long int logger, long long int option);
extern long long int linksocks_DefaultClientOption();
extern long long int linksocks_NewPortPool(long long int ports);
extern long long int linksocks_NewPortPoolFromRange(long long int start, long long int end);
extern long long int linksocks_NewLinkSocksServer(long long int opt);
extern long long int linksocks_NewDefaultRelayOption();
extern long long int linksocks_NewCLI();
extern long long int linksocks_NewWSConn(long long int conn, char* label, long long int logger);
extern long long int linksocks_NewLoggerWithID(char* id);
extern long long int linksocks_NewLoggerWithIDAndLevel(char* id, char level);
extern long long int linksocks_NewContext();
extern long long int linksocks_NewLogger(PyObject* cb);
extern long long int linksocks_Background();
extern long long int linksocks_PackMessage(long long int msg);
extern void linksocks_SetLoggerGlobalLevel(char level, char goRun);
extern long long int linksocks_WaitForLogEntries(long long int timeoutMs);
extern void linksocks_CancelGlobalContext(char goRun);
extern void linksocks_CancelLogWaiters(char goRun);
extern long long int linksocks_GetLogEntries();
extern long long int linksocks_NewLoggerWithLevel(char level, PyObject* cb);
extern long long int linksocks_ParseDuration(char* s);
extern void linksocks_DebugLog(long long int logger, char* msg, char goRun);
extern long long int linksocks_ParseMessage(long long int data);

#ifdef __cplusplus
}
#endif
