[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "askap-flint"
authors = [
    {name="Tim Galvin", email="tim.galvin@csiro.au"}
]
description = "Pipeline for ASKAP processing, and profit along the way"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.11,<3.13"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dynamic = ["version"]

dependencies = [
    "astropy>=6.1.3", # fixing until units change in 6.1.4 addressed in radio-beam
    "numpy>=2.0.0",
    "pydantic<2.11", # prefect v2 seems unhappy with pydantic 2.11
    "scipy",
    "spython>=0.3.1",
    "matplotlib",
    "prefect>=2.10.0, <3",
    "prefect-dask>=0.2.4",
    "dask-jobqueue",
    "RACS-tools>=4.2.1",
    "aegeantools==2.3.0",
    "radio-beam>=0.3.4",
    "reproject",
    "scikit-image",
    "pandas",
    "ConfigArgParse>=1.7",
    "fitscube>=2.0.0",
    "astroquery>=0.4.8.dev0",
    "crystalball>=0.4.3",
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "flint/_version.py"
metadata.allow-direct-references = true
build.targets.wheel.packages = ["flint"]

[tool.uv]
managed = true # let uv manage virtualenvs
package = true # install package in editable mode


[project.optional-dependencies]
dev = [
    "mypy",
    "isort",
    "pre-commit",
    "ruff",
    "pytest",
    "pytest-cov",
    "sphinx",
    "myst-parser",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-autoapi",
    "sphinx-argparse",
    "furo",
    "pytest-rerunfailures",
    "pytest-xdist",
]
casa =[
    "python-casacore>=3.6.0",
    "fixms>=0.4.0"
]

[project.scripts]
flint_skymodel = "flint.sky_model:cli"
flint_aocalibrate = "flint.calibrate.aocalibrate:cli"
flint_archive = "flint.archive:cli"
flint_flagger = "flint.flagging:cli"
flint_bandpass = "flint.bandpass:cli"
flint_catalogues = "flint.catalogue:cli"
flint_containers = "flint.containers:cli"
flint_ms = "flint.ms:cli"
flint_wsclean = "flint.imager.wsclean:cli"
flint_gaincal = "flint.selfcal.casa:cli"
flint_convol = "flint.convol:cli"
flint_yandalinmos = "flint.coadd.linmos:cli"
flint_config = "flint.configuration:cli"
flint_aegean = "flint.source_finding.aegean:cli"
flint_validation_plot = "flint.validation:cli"
flint_masking = "flint.masking:cli"
flint_potato = "flint.peel.potato:cli"
flint_leakage = "flint.leakage:cli"
flint_addmodel = "flint.predict.addmodel:cli"
flint_crystalball = "flint.predict.crystalball:cli"
flint_flow_bandpass_calibrate = "flint.prefect.flows.bandpass_pipeline:cli"
flint_flow_continuum_pipeline = "flint.prefect.flows.continuum_pipeline:cli"
flint_flow_subtract_cube_pipeline = "flint.prefect.flows.subtract_cube_pipeline:cli"
flint_flow_polarisation_pipeline = "flint.prefect.flows.polarisation_pipeline:cli"

# [tool.mypy]
# files = ["flint", "tests"]
# python_version = "3.11"
# warn_unused_configs = true
# strict = true
# enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
# warn_unreachable = true
# disallow_untyped_defs = false
# disallow_incomplete_defs = false


[[tool.mypy.overrides]]
module = "astropy.*"
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
# Full list of rules from scientific-python-cookiecutter.
# More can be enabled as needed / wanted.
extend-select = [
    # "B",        # flake8-bugbear
    "I",        # isort
    # "ARG",      # flake8-unused-arguments
    # "C4",       # flake8-comprehensions
    # "EM",       # flake8-errmsg
    # "ICN",      # flake8-import-conventions
    # "G",        # flake8-logging-format
    # "PGH",      # pygrep-hooks
    # "PIE",      # flake8-pie
    # "PL",       # pylint
    # "PT",       # flake8-pytest-style
    # "PTH",      # flake8-use-pathlib
    # "RET",      # flake8-return
    # "RUF",      # Ruff-specific
    # "SIM",      # flake8-simplify
    # "T20",      # flake8-print
    "UP",       # pyupgrade
    # "YTT",      # flake8-2020
    # "EXE",      # flake8-executable
    "NPY",      # NumPy specific rules
    "PD",       # pandas-vet
]
isort.required-imports = ["from __future__ import annotations"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.typos.files]
extend-exclude = ["*.fits", "flint/data/**/*", "ignore_words.txt"]

[tool.typos.default.extend-identifiers]
FIELDs = "FIELDs"
FoV = "FoV"
outweight= "outweight"

[tool.codespell]
skip = "*.lock"
