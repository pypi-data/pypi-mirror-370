[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gleitzeit"
version = "0.0.5"
description = "Unified workflow orchestration system with LLM, Python, and MCP support"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "Leif Markthaler", email = "leif.markthaler@gmail.com"},
]
maintainers = [
    {name = "Leif Markthaler", email = "leif.markthaler@gmail.com"},
]
keywords = [
    "workflow", 
    "orchestration", 
    "automation", 
    "unified-persistence",
    "hub-provider",
    "async", 
    "llm",
    "mcp",
    "model-context-protocol",
    "task-automation",
    "python-execution",
    "docker",
    "redis",
    "sqlite"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]

dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.12.0",
    "jsonschema>=4.0.0",
    "aiosqlite>=0.21.0",
    "redis>=4.5.0",
    "aiofiles>=24.1.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
]
llm = [
    "ollama>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]
docker = [
    "docker>=6.0.0",
]
all = [
    "gleitzeit[dev]",
    "gleitzeit[llm]",
    "gleitzeit[docker]",
]

[project.scripts]
gleitzeit = "gleitzeit.cli.gleitzeit_cli:main"
gz = "gleitzeit.cli.gleitzeit_cli:main"

[project.urls]
"Homepage" = "https://github.com/leifmarkthaler/gleitzeit"
"Documentation" = "https://github.com/leifmarkthaler/gleitzeit#readme"
"Source" = "https://github.com/leifmarkthaler/gleitzeit"
"Bug Reports" = "https://github.com/leifmarkthaler/gleitzeit/issues"
"Changelog" = "https://github.com/leifmarkthaler/gleitzeit/blob/main/CHANGELOG.md"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["gleitzeit*"]
exclude = ["tests*", "docs*", "examples*", "experimental*", "gleitzeit.experimental*"]

[tool.setuptools.package-data]
gleitzeit = [
    "py.typed",
    "protocols/*.yaml",
    "protocols/*.json",
]

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "real: marks tests that use real services (no mocks)",
]

[tool.coverage.run]
source = ["src/gleitzeit"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]