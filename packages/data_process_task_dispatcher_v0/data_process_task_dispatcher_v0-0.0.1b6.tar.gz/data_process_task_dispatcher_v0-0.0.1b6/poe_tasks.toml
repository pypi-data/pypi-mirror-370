executor.type = "uv"

[tasks]
# Server
server = { shell = "endpoint", help = "Run the server" }

# Style control
_check = { shell = 'ruff check .' }
_fix = { shell = 'ruff check . --fix' }
_format = { shell = "ruff format ." }
_lint = { shell = "mypy ." }
style = { sequence = [
  "_format",
  "_fix",
  "_format",
], help = "Auto-fix and format the code using ruff." }
lint = { sequence = [
  "_fix",
  "_lint",
], help = "Check for style and type violations using ruff and mypy." }


# Temp file control
_clean-pyc = { shell = """
    find . -name '*.pyc' -exec rm -f {} +;
    find . -name '*.pyo' -exec rm -f {} +;
    find . -name '*~' -exec rm -f {} +;
    find . -name '__pycache__' -exec rm -fr {} +
""", help = "Remove Python file artifacts" }
_clean-build = { shell = """
    rm -fr build/;
    rm -fr dist/;
    rm -fr .eggs/;
    find . -name '*.egg-info' -exec rm -fr {} +;
""", help = "Remove build artifacts" }
_clean-test = { shell = """
    rm -fr tests/api/cassettes/;
    rm -f .coverage;
    rm -fr htmlcov/;
    rm -fr .pytest_cache;
    rm -f report.xml;
    rm -f cov.xml
""", help = "Remove test and coverage artifacts" }
_clean-lint = { shell = """
    rm -fr .mypy_cache;
    rm -fr .ruff_cache
""", help = "Remove lint artifacts" }
clean = { sequence = [
  "_clean-build",
  "_clean-pyc",
  "_clean-test",
  "_clean-lint",
], help = "Remove all files generated by builds and tests." }

# Test
_test-pre-commit = { shell = "pre-commit install && pre-commit install-hooks && pre-commit run -a -v", help = "Install pre-commit" }
test = { shell = "pytest tests", help = "Run tests quickly using the default Python environment." }
test-all = { sequence = [
  "lint",
  "style",
  "_test-pre-commit",
  "test",
], help = "Run all tests." }
test-ci = { sequence = ["_check", "_lint"], help = "Run ci tests." }

# Release
build = { shell = "uv build", help = "Build source and wheel package" }
tag = { shell = "semantic-release -c releaserc.toml version", help = "Create a new version tag" }
publish = { shell = 'uv publish -u admin -p ${PYPI_PASS} --index custom-repo || true', help = "Publish the package to PyPI" }
release = { sequence = [
  "build",
  "tag",
  "tag",
  "publish",
], help = "Build source and wheel package" }
