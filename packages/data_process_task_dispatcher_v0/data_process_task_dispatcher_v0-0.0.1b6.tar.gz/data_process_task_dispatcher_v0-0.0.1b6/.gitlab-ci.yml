stages:
  - test
  - build
  - release
  - deploy

variables:
  # Registry
  CI_TEMPLATE_REGISTRY_HOST: "172.22.121.50/gzhu"

  # Cache
  APT_CACHE_DIR: "$CI_PROJECT_DIR/apt"
  KANIKO_CACHE_DIR: "$CI_PROJECT_DIR/kaniko"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.pre-commit"

  # Pip
  PIP_TIMEOUT: 30
  PIP_RETRIES: 5
  PIP_TRUSTED_HOST: "172.22.121.51"

  # Python & UV
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.5"
  UV_LINK_MODE: "copy"
  UV_FROZEN: "true"

# ⛓️ Shared templates
.base_job_template: &base_job_template
  stage: test
  retry:
    max: 2
    when:
      - runner_system_failure
  tags:
    - k8s_runner_persionnel_matching
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^v/ || $CI_COMMIT_TAG"
      when: never
    - if: "$CI_COMMIT_BRANCH"

.base_apt_env_template: &base_apt_env_template
  before_script:
    - |
        rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d && \
        echo 'deb http://172.22.121.51:8081/repository/apt-aliyun//debian/ bookworm main' > /etc/apt/sources.list && \
        echo 'deb http://172.22.121.51:8081/repository/apt-aliyun//debian-security/ bookworm-security main' >> /etc/apt/sources.list && \
        echo 'deb http://172.22.121.51:8081/repository/apt-aliyun/debian/ bookworm-updates main' >> /etc/apt/sources.list && \
        apt-get update -y && apt-get install -y --no-install-recommends git
.base_git_env_template: &base_git_env_template
  before_script:
    - !reference [.base_apt_env_template, before_script]
    - apt-get install -y --no-install-recommends git && apt-get install -y --no-install-recommends build-essential
# # 🔒 Secret scan
# include:
#   - template: Security/Secret-Detection.gitlab-ci.yml

# secret_detection:
#   <<: *base_job_template
#   allow_failure: false

# # ✅ Pre-commit check
# check-pre-commit:
#   <<: *base_job_template
#   <<: *base_git_env_template
#   image: ${CI_TEMPLATE_REGISTRY_HOST}/library/python:3.11-slim
#   cache:
#     key: ${CI_PROJECT_ID}-pre-commit-cache
#     paths:
#       - $PRE_COMMIT_HOME
#   script:
#     - pip install pre-commit==4.2.0 -i http://172.22.121.51:8081/repository/pypi-public/simple
#     - |
#         pre-commit run --all-files --show-diff-on-failure

# # ✅ Dockerfile check
# check-Dockerfile:
#   <<: *base_job_template
#   image: 172.22.121.50/gzhu/hadolint/hadolint:latest-debian
#   script:
#     - hadolint Dockerfile

# # 🧪 Project test
# test-project:
#   <<: *base_job_template
#   image: ${CI_TEMPLATE_REGISTRY_HOST}/astral-sh/uv:${UV_VERSION}-python${PYTHON_VERSION}-bookworm-slim
#   cache:
#     key: ${CI_PROJECT_ID}-test-cache
#     paths:
#       - tests/api/cassettes
#   script:
#     - uv sync --group dev
#     - uv run poe test-ci
#   coverage: '/(?i)total.*? (100(?:\.0+)?%|[1-9]?\d(?:\.\d+)?%)$/'
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: cov.xml
#       junit: report.xml

# 🛠️ Build image
build-image:
  <<: *base_job_template
  image:
    name: ${CI_TEMPLATE_REGISTRY_HOST}/kaniko-project/executor:v1.23.0-debug
    entrypoint: [""]
  stage: build
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^v/ && $CI_COMMIT_BRANCH"
      when: never
    - if: "$CI_COMMIT_BRANCH"
    - if: "$CI_COMMIT_TAG"
  variables:
    IMAGE_URL: "172.22.121.50/personnel-matching/zwx/data-process-task-dispatcher"
    IMAGE_PULL_RETRY: 15
  before_script:
    - echo "{\"auths\":{\"${KCI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${KCI_REGISTRY_USER}" "${KCI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - |
        if [[ "$CI_COMMIT_TAG" != "" ]]; then
          /kaniko/executor --cache=true --cache-dir ${KANIKO_CACHE_DIR} --cache-run-layers --skip-tls-verify --dockerfile Dockerfile --context . --destination ${IMAGE_URL}:${CI_COMMIT_TAG} --image-download-retry ${IMAGE_PULL_RETRY}
        else
          /kaniko/executor --cache=true --cache-dir ${KANIKO_CACHE_DIR} --cache-run-layers --cache-repo ${IMAGE_URL}/cache --skip-tls-verify --dockerfile Dockerfile --context . --destination ${IMAGE_URL}:${CI_COMMIT_TAG} --image-download-retry ${IMAGE_PULL_RETRY} --no-push
        fi

# 🚀 Semantic Release
release:
  <<: *base_git_env_template
  image: ${CI_TEMPLATE_REGISTRY_HOST}/astral-sh/uv:${UV_VERSION}-python${PYTHON_VERSION}-bookworm-slim
  stage: release
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: "$CI_COMMIT_MESSAGE =~ /^v/ || $CI_COMMIT_TAG"
      when: never
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev"'
  variables:
    GIT_DEPTH: 0
  before_script:
    - !reference [.base_git_env_template, before_script]
    - git checkout -B "$CI_COMMIT_REF_NAME" "origin/$CI_COMMIT_REF_NAME"
    - git status
  script:
    - uv sync --extra release
    - export VERSION=$(uv run semantic-release -c releaserc.toml version --print-tag)
    - sed -i "s|\(data-process-task-dispatcher:\)v.*|data-process-task-dispatcher:${VERSION}|g" ./deploy/${CI_COMMIT_REF_NAME}.yaml
    - git add deploy
    - uv run poe release

# Deploment k8s service
deploy:
  image: ${CI_TEMPLATE_REGISTRY_HOST}/bitnami/kubectl:1.27
  stage: deploy
  tags:
    - "k8s_runner_persionnel_matching"
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - |
      if [[ "$CI_COMMIT_TAG" == *"beta"* ]]; then
        kubectl apply -f deploy/dev.yaml
      else
        kubectl apply -f deploy/main.yaml
      fi
