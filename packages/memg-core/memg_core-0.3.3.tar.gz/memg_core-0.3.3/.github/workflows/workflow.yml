# .github/workflows/workflow.yml
name: MEMG Core â€“ Main

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]    # release on tags
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install toolchain
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"
          pip install ruff bandit mypy pylint pytest pytest-cov types-PyYAML
      - name: Bandit
        run: bandit -r src/ -f json -o bandit-report.json
      - name: Ruff
        run: |
          ruff format --check src/
          ruff check src/
      - name: Pylint
        run: pylint src/ --fail-under=7.0 --score=yes
      - name: MyPy
        run: mypy src/ --ignore-missing-imports
        continue-on-error: ${{ startsWith(github.ref,'refs/tags/v') }}
      - name: Setup temp directories for integration tests
        run: mkdir -p temp_data/qdrant temp_data/kuzu
      - name: Tests
        env:
          QDRANT_STORAGE_PATH: temp_data/qdrant
          KUZU_DB_PATH: temp_data/kuzu/ci_test.db
        run: python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

  pypi:
    needs: quality
    if: startsWith(github.ref,'refs/tags/v')     # tags only
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          skip-existing: true
          attestations: true
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  mcp-image:
    needs: pypi
    if: startsWith(github.ref,'refs/tags/v')     # build image after PyPI release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-mcp
          tags: |
            type=raw,value={{tag}}
            type=raw,value=latest,enable=${{ startsWith(github.ref,'refs/tags/') }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: mcp/Dockerfile.mcp              # <- fixed path
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          # No build args needed - using local wheel

  summary:
    needs: [mcp-image]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - run: |
          echo "MCP image: ghcr.io/${{ github.repository }}-mcp:${{ github.ref_name }}"
          echo "PyPI     : pip install memg-core"
