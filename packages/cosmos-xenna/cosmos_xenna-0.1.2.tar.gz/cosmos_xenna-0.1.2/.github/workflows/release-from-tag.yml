on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to test release for'
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract changelog section for tag
        id: extract
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          TAG=${TAG#v}  # Strip leading 'v' if present
          echo "Looking for changelog section for tag: $TAG"

          # Extract relevant section
          CHANGELOG=$(awk -v tag="$TAG" '
            $0 ~ "## \\[" tag "\\]" {flag=1; next}
            flag && /^## \[/ {flag=0}
            flag && /^### Released/ {next}
            flag && /^- [0-9]{4}-[0-9]{2}-[0-9]{2}/ {next}
            flag {print}
          ' CHANGELOG.md)

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changelog entry found for $TAG"
          fi

          # Write to a temp file
          echo "$CHANGELOG" > release_notes.md

          # Save multiline output to GITHUB_ENV via file
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-wheels:
    needs: release
    runs-on: ${{ matrix.conf.os }}
    name: ${{ matrix.conf.os }}-${{ matrix.python-version }}-${{ matrix.conf.target }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.x' ]
        conf:
          - { os: ubuntu-latest, target: x86_64,  target-triple: x86_64-unknown-linux-gnu,  manylinux: auto }

    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build wheel and sdist
        run: |
          python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.conf.os }}-${{ matrix.python-version }}-${{ matrix.conf.target }}
          path: dist/*

  attach-and-publish:
    needs: build-wheels
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Collect distributions
        run: |
          mkdir flat-dist
          find dist -type f -maxdepth 2 -name "*.whl" -exec cp {} flat-dist/ \;
          find dist -type f -maxdepth 2 -name "*.tar.gz" -exec cp {} flat-dist/ \;

      - name: Attach wheels to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to TestPyPI
        if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          packages-dir: flat-dist

      - name: Publish to PyPI
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: flat-dist
