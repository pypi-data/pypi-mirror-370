Metadata-Version: 2.4
Name: mcp-kicad-sch-api
Version: 0.1.5
Summary: Model Context Protocol server for KiCAD schematic manipulation
Author-email: Circuit-Synth <shane@circuit-synth.com>
Maintainer-email: Circuit-Synth <shane@circuit-synth.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/circuit-synth/mcp-kicad-sch-api
Project-URL: Documentation, https://circuit-synth.github.io/mcp-kicad-sch-api/
Project-URL: Repository, https://github.com/circuit-synth/mcp-kicad-sch-api.git
Project-URL: Bug Reports, https://github.com/circuit-synth/mcp-kicad-sch-api/issues
Project-URL: Changelog, https://github.com/circuit-synth/mcp-kicad-sch-api/blob/main/CHANGELOG.md
Keywords: mcp,kicad,schematic,eda,electronics,circuit-design,ai,model-context-protocol,llm,agent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.1.7
Requires-Dist: mcp>=1.0.0
Requires-Dist: kicad-sch-api>=0.1.7
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: license-file

# MCP KiCAD Schematic API

Model Context Protocol (MCP) server providing KiCAD schematic manipulation tools for AI agents.

## Overview

This MCP server exposes the [`kicad-sch-api`](https://github.com/circuit-synth/kicad-sch-api) library as tools that AI agents can use to create, modify, and analyze KiCAD schematic files.

## Features

- üîß **Create Schematics**: Generate new KiCAD schematic files
- ‚ö° **Add Components**: Place resistors, capacitors, ICs, and more
- üîç **Search Components**: Find parts in KiCAD symbol libraries  
- üîó **Add Connections**: Create wires and nets
- üìê **Hierarchical Design**: Support for hierarchical sheets and labels
- üéØ **Format Preservation**: Maintains exact KiCAD file format compatibility

## Quick Start

### Installation

```bash
pip install mcp-kicad-sch-api
```

### Configuration

#### Claude Desktop
Add to your `claude_desktop_config.json`:
```json
{
  "mcpServers": {
    "kicad-sch-api": {
      "command": "python",
      "args": ["-m", "mcp_kicad_sch_api"],
      "env": {}
    }
  }
}
```

#### Claude Code

**Option 1: Automatic (Recommended)**
```bash
# Add MCP server automatically
claude mcp add mcp-kicad-sch-api /path/to/your/venv/bin/mcp-kicad-sch-api

# Example with specific venv path:
claude mcp add mcp-kicad-sch-api /Users/username/myproject/venv/bin/mcp-kicad-sch-api
```

**Option 2: Manual Configuration**
If the automatic method doesn't work, manually edit your Claude Code config file:

```bash
# Find your config file location
code ~/.claude.json
```

Add the MCP server configuration:
```json
{
  "mcpServers": {
    "mcp-kicad-sch-api": {
      "command": "/path/to/your/venv/bin/mcp-kicad-sch-api"
    }
  }
}
```

**Finding Your Installation Path:**
```bash
# After installing in your venv, find the executable path:
which mcp-kicad-sch-api
# Example output: /Users/username/myproject/venv/bin/mcp-kicad-sch-api
```

**Restart Claude Code** after configuration to load the MCP server.

#### Other MCP Clients
The server supports standard MCP stdio transport and should work with any MCP-compatible client.

## Usage Examples

Ask your AI agent:

- *"Create a voltage divider circuit with two 10kŒ© resistors"*
- *"Add an Arduino Nano to the schematic at position (100, 100)"*
- *"Search for operational amplifiers in the KiCAD libraries"*
- *"Create a hierarchical sheet for the power supply section"*

## Tools Available

| Tool | Description |
|------|-------------|
| `create_schematic` | Create a new KiCAD schematic file |
| `add_component` | Add components (resistors, capacitors, ICs, etc.) |
| `search_components` | Search KiCAD symbol libraries |
| `add_wire` | Create wire connections |
| `add_hierarchical_sheet` | Add hierarchical design sheets |
| `add_sheet_pin` | Add pins to hierarchical sheets |
| `add_hierarchical_label` | Add hierarchical labels |
| `list_components` | List all components in schematic |
| `get_schematic_info` | Get schematic information |

## Requirements

- Python 3.10+
- KiCAD (for symbol libraries)
- [`kicad-sch-api`](https://pypi.org/project/kicad-sch-api/) library

## Development

```bash
git clone https://github.com/circuit-synth/mcp-kicad-sch-api.git
cd mcp-kicad-sch-api
uv sync --dev
uv run python -m mcp_kicad_sch_api
```

## License

MIT License - see [LICENSE](LICENSE) file.

## Related Projects

- [`kicad-sch-api`](https://github.com/circuit-synth/kicad-sch-api) - Core Python library
- [`circuit-synth`](https://github.com/circuit-synth/circuit-synth) - AI-powered circuit design platform

---

ü§ñ **AI-Powered Circuit Design Made Easy**
