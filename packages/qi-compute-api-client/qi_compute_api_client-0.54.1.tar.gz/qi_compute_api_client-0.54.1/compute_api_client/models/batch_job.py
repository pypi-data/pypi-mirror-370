# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from compute_api_client.models.algorithm_type import AlgorithmType
from compute_api_client.models.batch_job_status import BatchJobStatus
from typing import Optional, Set
from typing_extensions import Self

class BatchJob(BaseModel):
    """
    BatchJob
    """ # noqa: E501
    id: StrictInt = Field(description="ID of the batch job")
    created_on: datetime = Field(description="Time of batchjob creation")
    status: BatchJobStatus = Field(description="Status of the batchjob")
    user_id: StrictInt = Field(description="ID of the user to whom this job belongs")
    backend_type_id: StrictInt = Field(description="ID of the backendtype")
    backend_id: Optional[StrictInt]
    queued_at: Optional[datetime]
    reserved_at: Optional[datetime]
    finished_at: Optional[datetime]
    job_ids: List[StrictInt] = Field(description="Job ids in the batch job")
    aggregated_algorithm_type: AlgorithmType = Field(description="Algorithm type submitted")
    __properties: ClassVar[List[str]] = ["id", "created_on", "status", "user_id", "backend_type_id", "backend_id", "queued_at", "reserved_at", "finished_at", "job_ids", "aggregated_algorithm_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if backend_id (nullable) is None
        # and model_fields_set contains the field
        if self.backend_id is None and "backend_id" in self.model_fields_set:
            _dict['backend_id'] = None

        # set to None if queued_at (nullable) is None
        # and model_fields_set contains the field
        if self.queued_at is None and "queued_at" in self.model_fields_set:
            _dict['queued_at'] = None

        # set to None if reserved_at (nullable) is None
        # and model_fields_set contains the field
        if self.reserved_at is None and "reserved_at" in self.model_fields_set:
            _dict['reserved_at'] = None

        # set to None if finished_at (nullable) is None
        # and model_fields_set contains the field
        if self.finished_at is None and "finished_at" in self.model_fields_set:
            _dict['finished_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_on": obj.get("created_on"),
            "status": obj.get("status"),
            "user_id": obj.get("user_id"),
            "backend_type_id": obj.get("backend_type_id"),
            "backend_id": obj.get("backend_id"),
            "queued_at": obj.get("queued_at"),
            "reserved_at": obj.get("reserved_at"),
            "finished_at": obj.get("finished_at"),
            "job_ids": obj.get("job_ids"),
            "aggregated_algorithm_type": obj.get("aggregated_algorithm_type")
        })
        return _obj


