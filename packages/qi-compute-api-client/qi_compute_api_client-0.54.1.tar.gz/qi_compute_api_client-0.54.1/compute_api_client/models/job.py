# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from compute_api_client.models.algorithm_type import AlgorithmType
from compute_api_client.models.job_status import JobStatus
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job
    """ # noqa: E501
    id: StrictInt = Field(description="The ID of the job")
    created_on: datetime = Field(description="Time of creation of the Job")
    file_id: StrictInt = Field(description="The ID of the file")
    algorithm_type: AlgorithmType = Field(description="The type of the algorithm")
    status: JobStatus = Field(description="The status of the Job")
    batch_job_id: StrictInt = Field(description="The ID of the batch job")
    queued_at: Optional[datetime]
    finished_at: Optional[datetime]
    number_of_shots: Optional[StrictInt]
    raw_data_enabled: StrictBool = Field(description="If raw data is to be attached to results")
    session_id: StrictStr = Field(description="The uuid assigned to the job")
    trace_id: StrictStr = Field(description="The uuid of the trace in case of job failure")
    message: StrictStr = Field(description="The message associated with the executed job if it failed")
    source: Optional[StrictStr] = Field(default='', description="The source application of an exception that caused a job to fail (if applicable).")
    __properties: ClassVar[List[str]] = ["id", "created_on", "file_id", "algorithm_type", "status", "batch_job_id", "queued_at", "finished_at", "number_of_shots", "raw_data_enabled", "session_id", "trace_id", "message", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if queued_at (nullable) is None
        # and model_fields_set contains the field
        if self.queued_at is None and "queued_at" in self.model_fields_set:
            _dict['queued_at'] = None

        # set to None if finished_at (nullable) is None
        # and model_fields_set contains the field
        if self.finished_at is None and "finished_at" in self.model_fields_set:
            _dict['finished_at'] = None

        # set to None if number_of_shots (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_shots is None and "number_of_shots" in self.model_fields_set:
            _dict['number_of_shots'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_on": obj.get("created_on"),
            "file_id": obj.get("file_id"),
            "algorithm_type": obj.get("algorithm_type"),
            "status": obj.get("status"),
            "batch_job_id": obj.get("batch_job_id"),
            "queued_at": obj.get("queued_at"),
            "finished_at": obj.get("finished_at"),
            "number_of_shots": obj.get("number_of_shots"),
            "raw_data_enabled": obj.get("raw_data_enabled"),
            "session_id": obj.get("session_id"),
            "trace_id": obj.get("trace_id"),
            "message": obj.get("message"),
            "source": obj.get("source") if obj.get("source") is not None else ''
        })
        return _obj


