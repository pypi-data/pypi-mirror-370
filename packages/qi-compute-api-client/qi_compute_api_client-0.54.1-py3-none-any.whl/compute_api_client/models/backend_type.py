# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from compute_api_client.models.backend_status import BackendStatus
from typing import Optional, Set
from typing_extensions import Self

class BackendType(BaseModel):
    """
    BackendType
    """ # noqa: E501
    id: StrictInt = Field(description="The id of the backend type")
    name: Annotated[str, Field(strict=True, max_length=32)] = Field(description="Name of the backend type")
    infrastructure: Annotated[str, Field(strict=True, max_length=32)] = Field(description="Name of the infrastructure")
    description: StrictStr = Field(description="Description of the backendtype")
    image_id: Annotated[str, Field(strict=True, max_length=16)] = Field(description="The id of the image")
    is_hardware: StrictBool = Field(description="If it is hardware")
    supports_raw_data: StrictBool = Field(description="If it supports raw data extraction")
    features: List[Optional[StrictStr]] = Field(description="The features supported by backend type")
    default_compiler_config: Dict[str, Any] = Field(description="The various passes for each stage")
    gateset: List[Optional[StrictStr]] = Field(description="The primary gatesets supported by the backend")
    topology: List[List[StrictInt]] = Field(description="The topology of the backend")
    nqubits: StrictInt = Field(description="The number of qubits on the backend")
    status: BackendStatus = Field(description="The status of the backend type")
    default_number_of_shots: StrictInt = Field(description="The default shots")
    max_number_of_shots: StrictInt = Field(description="The maximum number of shots")
    enabled: StrictBool = Field(description="If it is enabled")
    identifier: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The identifier of the backend")
    protocol_version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "name", "infrastructure", "description", "image_id", "is_hardware", "supports_raw_data", "features", "default_compiler_config", "gateset", "topology", "nqubits", "status", "default_number_of_shots", "max_number_of_shots", "enabled", "identifier", "protocol_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackendType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if protocol_version (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_version is None and "protocol_version" in self.model_fields_set:
            _dict['protocol_version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackendType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "infrastructure": obj.get("infrastructure"),
            "description": obj.get("description"),
            "image_id": obj.get("image_id"),
            "is_hardware": obj.get("is_hardware"),
            "supports_raw_data": obj.get("supports_raw_data"),
            "features": obj.get("features"),
            "default_compiler_config": obj.get("default_compiler_config"),
            "gateset": obj.get("gateset"),
            "topology": obj.get("topology"),
            "nqubits": obj.get("nqubits"),
            "status": obj.get("status"),
            "default_number_of_shots": obj.get("default_number_of_shots"),
            "max_number_of_shots": obj.get("max_number_of_shots"),
            "enabled": obj.get("enabled"),
            "identifier": obj.get("identifier"),
            "protocol_version": obj.get("protocol_version")
        })
        return _obj


