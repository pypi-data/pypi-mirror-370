# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Result(BaseModel):
    """
    Result
    """ # noqa: E501
    id: StrictInt = Field(description="The ID of the result")
    created_on: datetime = Field(description="Time of creation of the result")
    job_id: StrictInt = Field(description="The ID of the job")
    execution_time_in_seconds: Union[StrictFloat, StrictInt] = Field(description="Time it took to compute the result")
    shots_requested: Optional[StrictInt]
    shots_done: Optional[StrictInt]
    results: Optional[Dict[str, Any]]
    raw_data: Optional[List[StrictStr]]
    __properties: ClassVar[List[str]] = ["id", "created_on", "job_id", "execution_time_in_seconds", "shots_requested", "shots_done", "results", "raw_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if shots_requested (nullable) is None
        # and model_fields_set contains the field
        if self.shots_requested is None and "shots_requested" in self.model_fields_set:
            _dict['shots_requested'] = None

        # set to None if shots_done (nullable) is None
        # and model_fields_set contains the field
        if self.shots_done is None and "shots_done" in self.model_fields_set:
            _dict['shots_done'] = None

        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict['results'] = None

        # set to None if raw_data (nullable) is None
        # and model_fields_set contains the field
        if self.raw_data is None and "raw_data" in self.model_fields_set:
            _dict['raw_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_on": obj.get("created_on"),
            "job_id": obj.get("job_id"),
            "execution_time_in_seconds": obj.get("execution_time_in_seconds"),
            "shots_requested": obj.get("shots_requested"),
            "shots_done": obj.get("shots_done"),
            "results": obj.get("results"),
            "raw_data": obj.get("raw_data")
        })
        return _obj


