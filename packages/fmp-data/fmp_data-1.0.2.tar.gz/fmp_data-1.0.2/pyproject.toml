[build-system]
requires = [
    "hatchling>=1.22.0",
    "hatch-vcs>=0.4.0",
]
build-backend = "hatchling.build"

[project]
name = "fmp-data"
dynamic = [
    "version",
]
description = "Python client for the Financial Modeling Prep API"
authors = [
    { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]
maintainers = [
    { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]
readme = "README.md"
requires-python = ">=3.10,<3.14"
keywords = [
    "fmp",
    "financial",
    "api",
    "stocks",
    "market-data",
    "stock market",
    "financial data",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: AsyncIO",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "httpx>=0.28.1",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "tenacity>=9.1.2",
    "tqdm>=4.67.1",
    "cachetools>=6.1.0",
    "structlog>=25.4.0",
    "pandas>=2.3.1",
]

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://github.com/MehdiZare/fmp-data"
Repository = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://mehdizare.github.io/fmp-data/"

[project.scripts]
fmp-mcp = "fmp_data.mcp.cli:main"

[project.optional-dependencies]
mcp = [
    "mcp[cli]>=1.12.4",
    "pyyaml>=6.0.2",
]
langchain = [
    "faiss-cpu>=1.11.0.post1",
    "langchain-core>=0.3.74",
    "langchain-community>=0.3.27",
    "langchain-openai>=0.3.29",
    "langgraph>=0.6.4",
    "openai>=1.99.5",
    "tiktoken>=0.10.0",
]
dev = [
    "ruff>=0.12.8",
    "black>=25.1.0",
    "mypy>=1.17.1",
    "types-cachetools>=6.1.0.20250717",
    "bandit[toml]>=1.8.6",
    "pip-audit>=2.9.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "freezegun>=1.5.4",
    "responses>=0.25.8",
    "vcrpy>=7.0.0",
    "coverage>=7.10.2",
    "pre-commit>=4.2.0",
    "rich>=14.1.0",
    "twine>=6.1.0",
    "nox>=2025.5.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "mkdocstrings-python>=1.16.12",
]

[dependency-groups]
dev = [
    "ruff>=0.12.8",
    "black>=25.1.0",
    "mypy>=1.17.1",
    "types-cachetools>=6.1.0.20250717",
    "bandit[toml]>=1.8.6",
    "pip-audit>=2.9.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "freezegun>=1.5.4",
    "responses>=0.25.8",
    "vcrpy>=7.0.0",
    "coverage>=7.10.2",
    "pre-commit>=4.2.0",
    "rich>=14.1.0",
    "twine>=6.1.0",
    "nox>=2025.5.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "mkdocstrings-python>=1.16.12",
]
langchain = [
    "faiss-cpu>=1.11.0.post1",
    "langchain-core>=0.3.74",
    "langchain-community>=0.3.27",
    "langchain-openai>=0.3.29",
    "langgraph>=0.6.4",
    "openai>=1.99.5",
    "tiktoken>=0.10.0",
]
mcp = [
    "mcp[cli]>=1.12.4",
    "pyyaml>=6.0.2",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = [
    "fmp_data",
]

[tool.hatch.build.targets.sdist]
include = [
    "/fmp_data",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.black]
line-length = 88
target-version = [
    "py310",
    "py311",
    "py312",
    "py313",
]
include = "\\.pyi?$"

[tool.ruff]
target-version = "py310"
line-length = 88
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "C",
    "B",
    "S",
    "UP",
    "RUF",
]
ignore = [
    "S101",
    "S603",
    "S607",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "S106",
    "S107",
]
"scripts/*" = [
    "S603",
    "S607",
]
"**/conftest.py" = [
    "S101",
]
"__init__.py" = [
    "F401",
]
"noxfile.py" = [
    "S603",
    "S607",
]

[tool.ruff.lint.isort]
known-first-party = [
    "fmp_data",
]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
disable_error_code = [
    "type-arg",
]
exclude = [
    "tests/",
    "examples/",
    "scripts/",
    "build/",
    "dist/",
]
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_core.*",
    "langchain_community.*",
    "langchain_openai.*",
    "langchain.embeddings.*",
    "langchain.tools.*",
    "faiss.*",
    "faiss",
    "mcp.*",
    "mcp.server.*",
    "tiktoken.*",
    "tiktoken",
    "openai.*",
    "openai",
    "yaml.*",
    "yaml",
    "rich.*",
    "tqdm.*",
    "pandas.*",
    "responses.*",
    "freezegun.*",
    "structlog.*",
    "tenacity.*",
    "tenacity",
    "fmp_data._version",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fmp_data.__init__"
disable_error_code = [
    "import-untyped",
    "no-any-return",
    "attr-defined",
]

[[tool.mypy.overrides]]
module = [
    "fmp_data.lc.*",
    "fmp_data.mcp.*",
]
ignore_missing_imports = true
disable_error_code = [
    "import-untyped",
    "import-not-found",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--quiet",
    "--no-header",
    "--tb=short",
    "-v",
    "--disable-warnings",
    "--strict-markers",
    "--strict-config",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_functions = [
    "test_*",
]
python_classes = [
    "Test*",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
]

[tool.coverage.run]
source = [
    "fmp_data",
]
branch = true
parallel = true
data_file = ".coverage"
omit = [
    "fmp_data/endpoints/definitions.py",
    "fmp_data/example.py",
    "fmp_data/_version.py",
    "*/__init__.py",
    "tests/*",
    "*/tests/*",
    "setup.py",
    "noxfile.py",
    "scripts/*",
    "*/mapping.py",
    "*/schema.py",
    "*/hints.py",
    "*/endpoints.py",
    "fmp_data/lc/*",
    "fmp_data/mcp/*",
]

[tool.coverage.paths]
source = [
    "fmp_data/",
    "*/site-packages/fmp_data/",
    "*/.venv/lib/python*/site-packages/fmp_data/",
    "*/.venv/lib/*/site-packages/fmp_data/",
    "*/.nox/*/lib/python*/site-packages/fmp_data/",
    "*/.nox/*/site-packages/fmp_data/",
]

[tool.coverage.combine]
skip_empty = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "if __name__ == ['\"]__main__['\"]:",
    "if TYPE_CHECKING:",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def main():",
    "class .*\\(Protocol\\):",
    "@abstractmethod",
]
show_missing = true
fail_under = 80
precision = 2
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = [
    "tests",
    "scripts",
    ".nox",
    ".venv",
    "build",
    "dist",
]
skips = [
    "B101",
    "B404",
    "B603",
    "B607",
    "B608",
]

[tool.bandit.assert_used]
skips = [
    "*/test_*.py",
    "*/tests/*",
]
