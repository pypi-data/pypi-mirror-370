from __future__ import annotations  # noqa: I001
from typing import Self, Any
from pathlib import Path
import pandas as pd

class SerdeAPI:
    """Base class that provides serialization/deserialization and initialization methods."""

    def init(self) -> None: ...
    @classmethod
    def from_file(cls, file_path: str | Path, skip_init: bool = False) -> Self: ...
    def to_file(self, file_path: str | Path) -> None: ...
    @classmethod
    def from_resource(cls, resource_path: str | Path, skip_init: bool = False) -> Self: ...
    @classmethod
    def from_url(cls, url: str, skip_init: bool = False) -> Self: ...
    def to_pydict(self, data_fmt: str = "msg_pack", flatten: bool = False) -> dict: ...
    @classmethod
    def from_pydict(
        cls,
        pydict: dict,
        data_fmt: str = "msg_pack",
        skip_init: bool = False,
    ) -> Self: ...
    def to_str(self, str_fmt: str) -> str: ...
    @classmethod
    def from_str(cls, contents: str, str_fmt: str, skip_init: bool = False) -> Self: ...
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json_str: str, skip_init: bool = False) -> Self: ...
    def to_msg_pack(self) -> bytes: ...
    @classmethod
    def from_msg_pack(cls, msg_pack: bytes, skip_init: bool = False) -> Self: ...
    def to_yaml(self) -> str: ...
    @classmethod
    def from_yaml(cls, yaml_str: str, skip_init: bool = False) -> Self: ...
    def to_toml(self) -> str: ...
    @classmethod
    def from_toml(cls, toml_str: str, skip_init: bool = False) -> Self: ...
    def __copy__(self) -> Self: ...
    def __deepcopy__(self, memo: dict) -> Self: ...
    def copy(self) -> Self: ...

class Air(SerdeAPI): ...

class FuelConverter(SerdeAPI):
    def get_eff_max(self) -> float: ...
    def set_eff_max(self, eff: float) -> None: ...
    def get_eff_min(self) -> float: ...
    def get_mass(self) -> float: ...
    def get_specific_pwr_kw_per_kg(self) -> float: ...

class FuelConverterState(SerdeAPI): ...
class FuelConverterStateHistoryVec(SerdeAPI): ...

class FuelConverterThermal(SerdeAPI):
    @classmethod
    def default(cls) -> FuelConverterThermal: ...

class FuelConverterThermalState(SerdeAPI): ...
class FuelConverterThermalStateHistoryVec(SerdeAPI): ...
class HVACSystemForLumpedCabin(SerdeAPI): ...
class HVACSystemForLumpedCabinState(SerdeAPI): ...
class HVACSystemForLumpedCabinStateHistoryVec(SerdeAPI): ...
class HVACSystemForLumpedCabinAndRES(SerdeAPI): ...
class HVACSystemForLumpedCabinAndRESState(SerdeAPI): ...
class HVACSystemForLumpedCabinAndRESStateHistoryVec(SerdeAPI): ...

class RESLumpedThermal(SerdeAPI):
    @classmethod
    def default(cls) -> RESLumpedThermal: ...

class RESLumpedThermalState(SerdeAPI):
    @classmethod
    def default(cls) -> RESLumpedThermalState: ...

class RESLumpedThermalStateHistoryVec(SerdeAPI): ...
class LumpedCabin(SerdeAPI): ...
class LumpedCabinState(SerdeAPI): ...
class LumpedCabinStateHistoryVec(SerdeAPI): ...

class ReversibleEnergyStorage(SerdeAPI):
    def get_eff_range(self) -> tuple[float, float]: ...
    def set_mass(self, mass_kg: float, side_effect: bool = True) -> None: ...
    def get_mass_kg(self) -> float: ...
    def get_specific_energy_kjoules_per_kg(self) -> float: ...
    def get_energy_capacity_usable_joules(self) -> float: ...
    def set_default_pwr_interp(self) -> None: ...
    def set_default_pwr_and_soc_interp(self) -> None: ...
    def set_default_pwr_and_temp_interp(self) -> None: ...
    def set_default_pwr_soc_and_temp_interp(self) -> None: ...

class ReversibleEnergyStorageState(SerdeAPI): ...
class ReversibleEnergyStorageStateHistoryVec(SerdeAPI): ...

class ElectricMachine(SerdeAPI):
    def get_eff_max_fwd(self) -> float: ...
    def set_eff_fwd_max(self, eff: float) -> None: ...
    def get_eff_min_fwd(self) -> float: ...
    def get_eff_fwd_range(self) -> tuple[float, float]: ...
    def set_eff_fwd_range(self, eff_range: tuple[float, float]) -> None: ...

class ElectricMachineState(SerdeAPI): ...
class ElectricMachineStateHistoryVec(SerdeAPI): ...
class RESGreedyWithDynamicBuffers(SerdeAPI): ...

class Cycle(SerdeAPI):
    @classmethod
    def list_resources(cls) -> list[str]: ...
    def len(self) -> int: ...

class CycleElement(SerdeAPI): ...

class Vehicle(SerdeAPI):
    @classmethod
    def try_from_fastsim2(cls, file_path: str | Path) -> Vehicle: ...
    def set_save_interval(self, interval: int | None) -> None: ...
    def get_save_interval(self) -> int: ...
    @property
    def save_interval(self) -> int: ...
    @save_interval.setter
    def save_interval(self, value: int) -> None: ...
    def get_fc(self) -> FuelConverter: ...
    def get_res(self) -> ReversibleEnergyStorage: ...
    def get_em(self) -> ElectricMachine: ...
    def veh_type(self) -> str: ...
    @classmethod
    def list_resources(cls) -> list[str]: ...
    @classmethod
    def from_f2_file(cls, file_path: str | Path) -> Vehicle: ...
    def to_fastsim2(self) -> Any: ...
    def clear(self) -> None: ...
    def reset(self) -> None: ...
    def reset_cumulative(self) -> None: ...
    def reset_step(self) -> None: ...

class SimDrive(SerdeAPI):
    def __new__(cls, veh: Vehicle, cyc: Cycle, sim_params: SimParams | None = None) -> SimDrive: ...
    def walk_once(self) -> bool: ...
    def walk(self) -> bool: ...
    def to_dataframe(self, allow_partial: bool = False) -> pd.DataFrame: ...
    def to_fastsim2(self) -> Any: ...
    def clear(self) -> None: ...
    def reset(self) -> None: ...
    def reset_cumulative(self) -> None: ...
    def reset_step(self) -> None: ...

class SimParams(SerdeAPI):
    @classmethod
    def default(cls) -> SimParams: ...

def enabled_features() -> list[str]: ...

class SerdeAPIF2:
    def copy(self) -> Self: ...
    def __copy__(self) -> Self: ...
    def __deepcopy__(self) -> Self: ...
    @classmethod
    def from_resource(cls, filepath: Path | str, skip_init: bool | None) -> Self: ...
    def to_file(self, filepath: Path | str) -> None: ...
    @classmethod
    def from_file(cls, filepath: Path | str, skip_init: bool | None) -> Self: ...
    def to_str(self, fmt: str) -> str: ...
    @classmethod
    def from_str(cls, ontents: str, fmt: str, skip_init: bool | None) -> Self: ...
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json_str: str, skip_init: bool | None) -> Self: ...
    def to_yaml(self) -> str: ...
    @classmethod
    def from_yaml(cls, yaml_str: str, skip_init: bool) -> Self: ...

class VehicleF2(SerdeAPIF2): ...
class SimDriveF2(SerdeAPIF2): ...
