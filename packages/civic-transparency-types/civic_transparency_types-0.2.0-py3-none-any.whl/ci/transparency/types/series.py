# generated by datamodel-codegen:
#   filename:  series.schema.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Dict, List

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Interval(Enum):
    """
    Aggregation interval.
    """

    minute = 'minute'


class Probability(RootModel[float]):
    root: Annotated[float, Field(ge=0.0, le=1.0)]


class CoordinationSignals(BaseModel):
    """
    Per-interval coordination indicators.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    burst_score: Annotated[
        float, Field(description='Burstiness indicator (0-1).', ge=0.0, le=1.0)
    ]
    synchrony_index: Annotated[
        float, Field(description='Temporal synchrony indicator (0-1).', ge=0.0, le=1.0)
    ]
    duplication_clusters: Annotated[
        int,
        Field(description='Count of duplicate/near-duplicate content clusters.', ge=0),
    ]


class Point(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ts: Annotated[
        AwareDatetime,
        Field(description='UTC minute boundary for this point (ISO 8601).'),
    ]
    volume: Annotated[
        int, Field(description='Total posts observed in this interval.', ge=0)
    ]
    reshare_ratio: Annotated[
        float,
        Field(
            description='Fraction of posts that are reshares in this interval.',
            ge=0.0,
            le=1.0,
        ),
    ]
    recycled_content_rate: Annotated[
        float,
        Field(
            description=(
                'Estimated fraction of posts that recycle prior content'
                ' (hash/duplicate-based).'
            ),
            ge=0.0,
            le=1.0,
        ),
    ]
    acct_age_mix: Annotated[
        Dict[str, Probability],
        Field(
            description=(
                'Distribution over account-age buckets; values typically sum to ~1.0.'
            )
        ),
    ]
    automation_mix: Annotated[
        Dict[str, Probability],
        Field(
            description=(
                'Distribution over automation flags; values typically sum to ~1.0.'
            )
        ),
    ]
    client_mix: Annotated[
        Dict[str, Probability],
        Field(
            description=(
                'Distribution over client families; values typically sum to ~1.0.'
            )
        ),
    ]
    coordination_signals: Annotated[
        CoordinationSignals, Field(description='Per-interval coordination indicators.')
    ]


class Series(BaseModel):
    """
    Aggregated, privacy-preserving behavior series for a topic over time.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    topic: Annotated[
        str,
        Field(
            description='Topic key (e.g., hashtag) this series describes.', min_length=1
        ),
    ]
    generated_at: Annotated[
        AwareDatetime,
        Field(description='UTC timestamp when this series was generated (ISO 8601).'),
    ]
    interval: Annotated[Interval, Field(description='Aggregation interval.')]
    points: Annotated[
        List[Point],
        Field(
            description='Time-ordered list of per-interval aggregates.', min_length=1
        ),
    ]
