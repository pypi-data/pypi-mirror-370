# AUTO-GENERATED: do not edit by hand
# source-schema: series.schema.json
# schema-sha256: acf1664027df36e92afba906343a652cc07c12ebeb333467bed522cfb179c3b0
# spec-version: 0.2.1
# generated by datamodel-codegen:
#   filename:  series.schema.json

from __future__ import annotations

from enum import Enum
from typing import Dict, List

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class Interval(Enum):
    minute = 'minute'


class Probability(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class CoordinationSignals(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    burst_score: Probability = Field(..., description='Burstiness indicator (0-1).')
    synchrony_index: Probability = Field(
        ..., description='Temporal synchrony indicator (0-1).'
    )
    duplication_clusters: conint(ge=0) = Field(
        ..., description='Count of duplicate/near-duplicate content clusters.'
    )


class Point(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ts: AwareDatetime = Field(
        ..., description='UTC minute boundary for this point (ISO 8601).'
    )
    volume: conint(ge=0) = Field(
        ..., description='Total posts observed in this interval.'
    )
    reshare_ratio: Probability = Field(
        ..., description='Fraction of posts that are reshares in this interval.'
    )
    recycled_content_rate: Probability = Field(
        ...,
        description='Estimated fraction of posts that recycle prior content (hash/duplicate-based).',
    )
    acct_age_mix: Dict[str, Probability] = Field(
        ...,
        description='Distribution over account-age buckets; values typically sum to ~1.0.',
    )
    automation_mix: Dict[str, Probability] = Field(
        ...,
        description='Distribution over automation flags; values typically sum to ~1.0.',
    )
    client_mix: Dict[str, Probability] = Field(
        ...,
        description='Distribution over client families; values typically sum to ~1.0.',
    )
    coordination_signals: CoordinationSignals = Field(
        ..., description='Per-interval coordination indicators.'
    )


class Series(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    topic: constr(min_length=1) = Field(
        ..., description='Topic key (e.g., hashtag) this series describes.'
    )
    generated_at: AwareDatetime = Field(
        ..., description='UTC timestamp when this series was generated (ISO 8601).'
    )
    interval: Interval = Field(..., description='Aggregation interval.')
    points: List[Point] = Field(default_factory=list)