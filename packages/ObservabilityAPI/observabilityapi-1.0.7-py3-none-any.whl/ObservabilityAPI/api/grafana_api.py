# coding: utf-8

"""
    ObservabilityAPI

    Observability API

    The version of the OpenAPI document: 1.0.2
    Contact: max.smith@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from ObservabilityAPI.models.add_grafana_datasource200_response import AddGrafanaDatasource200Response
from ObservabilityAPI.models.deploy_grafana_dashboards200_response import DeployGrafanaDashboards200Response
from ObservabilityAPI.models.generate_grafana_service_key200_response import GenerateGrafanaServiceKey200Response

from ObservabilityAPI.api_client import ApiClient, RequestSerialized
from ObservabilityAPI.api_response import ApiResponse
from ObservabilityAPI.rest import RESTResponseType


class GrafanaApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_grafana_datasource(
        self,
        datasource_name: Annotated[StrictStr, Field(description="Name for the datasource")],
        datasource_type: Annotated[StrictStr, Field(description="Type of datasource to create")],
        datasource_url: Annotated[StrictStr, Field(description="URL of the datasource endpoint")],
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        database_name: Annotated[Optional[StrictStr], Field(description="Database name (for database datasources)")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username for datasource authentication")] = None,
        password: Annotated[Optional[StrictStr], Field(description="Password for datasource authentication")] = None,
        is_default: Annotated[Optional[StrictBool], Field(description="Set this datasource as default")] = None,
        basic_auth: Annotated[Optional[StrictBool], Field(description="Enable basic authentication")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddGrafanaDatasource200Response:
        """Add Datasource to Grafana

        Add a new datasource to Grafana for metrics, logs, or other data visualization

        :param datasource_name: Name for the datasource (required)
        :type datasource_name: str
        :param datasource_type: Type of datasource to create (required)
        :type datasource_type: str
        :param datasource_url: URL of the datasource endpoint (required)
        :type datasource_url: str
        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param database_name: Database name (for database datasources)
        :type database_name: str
        :param username: Username for datasource authentication
        :type username: str
        :param password: Password for datasource authentication
        :type password: str
        :param is_default: Set this datasource as default
        :type is_default: bool
        :param basic_auth: Enable basic authentication
        :type basic_auth: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_grafana_datasource_serialize(
            datasource_name=datasource_name,
            datasource_type=datasource_type,
            datasource_url=datasource_url,
            service_key=service_key,
            database_name=database_name,
            username=username,
            password=password,
            is_default=is_default,
            basic_auth=basic_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddGrafanaDatasource200Response",
            '400': None,
            '401': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_grafana_datasource_with_http_info(
        self,
        datasource_name: Annotated[StrictStr, Field(description="Name for the datasource")],
        datasource_type: Annotated[StrictStr, Field(description="Type of datasource to create")],
        datasource_url: Annotated[StrictStr, Field(description="URL of the datasource endpoint")],
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        database_name: Annotated[Optional[StrictStr], Field(description="Database name (for database datasources)")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username for datasource authentication")] = None,
        password: Annotated[Optional[StrictStr], Field(description="Password for datasource authentication")] = None,
        is_default: Annotated[Optional[StrictBool], Field(description="Set this datasource as default")] = None,
        basic_auth: Annotated[Optional[StrictBool], Field(description="Enable basic authentication")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddGrafanaDatasource200Response]:
        """Add Datasource to Grafana

        Add a new datasource to Grafana for metrics, logs, or other data visualization

        :param datasource_name: Name for the datasource (required)
        :type datasource_name: str
        :param datasource_type: Type of datasource to create (required)
        :type datasource_type: str
        :param datasource_url: URL of the datasource endpoint (required)
        :type datasource_url: str
        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param database_name: Database name (for database datasources)
        :type database_name: str
        :param username: Username for datasource authentication
        :type username: str
        :param password: Password for datasource authentication
        :type password: str
        :param is_default: Set this datasource as default
        :type is_default: bool
        :param basic_auth: Enable basic authentication
        :type basic_auth: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_grafana_datasource_serialize(
            datasource_name=datasource_name,
            datasource_type=datasource_type,
            datasource_url=datasource_url,
            service_key=service_key,
            database_name=database_name,
            username=username,
            password=password,
            is_default=is_default,
            basic_auth=basic_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddGrafanaDatasource200Response",
            '400': None,
            '401': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_grafana_datasource_without_preload_content(
        self,
        datasource_name: Annotated[StrictStr, Field(description="Name for the datasource")],
        datasource_type: Annotated[StrictStr, Field(description="Type of datasource to create")],
        datasource_url: Annotated[StrictStr, Field(description="URL of the datasource endpoint")],
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        database_name: Annotated[Optional[StrictStr], Field(description="Database name (for database datasources)")] = None,
        username: Annotated[Optional[StrictStr], Field(description="Username for datasource authentication")] = None,
        password: Annotated[Optional[StrictStr], Field(description="Password for datasource authentication")] = None,
        is_default: Annotated[Optional[StrictBool], Field(description="Set this datasource as default")] = None,
        basic_auth: Annotated[Optional[StrictBool], Field(description="Enable basic authentication")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add Datasource to Grafana

        Add a new datasource to Grafana for metrics, logs, or other data visualization

        :param datasource_name: Name for the datasource (required)
        :type datasource_name: str
        :param datasource_type: Type of datasource to create (required)
        :type datasource_type: str
        :param datasource_url: URL of the datasource endpoint (required)
        :type datasource_url: str
        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param database_name: Database name (for database datasources)
        :type database_name: str
        :param username: Username for datasource authentication
        :type username: str
        :param password: Password for datasource authentication
        :type password: str
        :param is_default: Set this datasource as default
        :type is_default: bool
        :param basic_auth: Enable basic authentication
        :type basic_auth: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_grafana_datasource_serialize(
            datasource_name=datasource_name,
            datasource_type=datasource_type,
            datasource_url=datasource_url,
            service_key=service_key,
            database_name=database_name,
            username=username,
            password=password,
            is_default=is_default,
            basic_auth=basic_auth,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddGrafanaDatasource200Response",
            '400': None,
            '401': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_grafana_datasource_serialize(
        self,
        datasource_name,
        datasource_type,
        datasource_url,
        service_key,
        database_name,
        username,
        password,
        is_default,
        basic_auth,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if datasource_name is not None:
            
            _query_params.append(('datasource_name', datasource_name))
            
        if datasource_type is not None:
            
            _query_params.append(('datasource_type', datasource_type))
            
        if datasource_url is not None:
            
            _query_params.append(('datasource_url', datasource_url))
            
        if database_name is not None:
            
            _query_params.append(('database_name', database_name))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        if password is not None:
            
            _query_params.append(('password', password))
            
        if service_key is not None:
            
            _query_params.append(('service_key', service_key))
            
        if is_default is not None:
            
            _query_params.append(('is_default', is_default))
            
        if basic_auth is not None:
            
            _query_params.append(('basic_auth', basic_auth))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/grafana/datasource',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deploy_grafana_dashboards(
        self,
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeployGrafanaDashboards200Response:
        """Deploy Grafana Dashboards

        Deploy container and machine metrics dashboards to the connected Grafana instance

        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deploy_grafana_dashboards_serialize(
            service_key=service_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeployGrafanaDashboards200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deploy_grafana_dashboards_with_http_info(
        self,
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeployGrafanaDashboards200Response]:
        """Deploy Grafana Dashboards

        Deploy container and machine metrics dashboards to the connected Grafana instance

        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deploy_grafana_dashboards_serialize(
            service_key=service_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeployGrafanaDashboards200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deploy_grafana_dashboards_without_preload_content(
        self,
        service_key: Annotated[StrictStr, Field(description="Grafana service account key for authentication")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deploy Grafana Dashboards

        Deploy container and machine metrics dashboards to the connected Grafana instance

        :param service_key: Grafana service account key for authentication (required)
        :type service_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deploy_grafana_dashboards_serialize(
            service_key=service_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeployGrafanaDashboards200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deploy_grafana_dashboards_serialize(
        self,
        service_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if service_key is not None:
            
            _query_params.append(('service_key', service_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/grafana',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def generate_grafana_service_key(
        self,
        admin_username: Annotated[StrictStr, Field(description="Grafana administrator username")],
        admin_password: Annotated[StrictStr, Field(description="Grafana administrator password")],
        service_account_role: Annotated[StrictStr, Field(description="Role to assign to the service account")],
        service_account_name: Annotated[Optional[StrictStr], Field(description="Name for the service account to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenerateGrafanaServiceKey200Response:
        """Generate Grafana Service Account Key

        Generate a service account key in Grafana that can be used as a bearer token for API authentication

        :param admin_username: Grafana administrator username (required)
        :type admin_username: str
        :param admin_password: Grafana administrator password (required)
        :type admin_password: str
        :param service_account_role: Role to assign to the service account (required)
        :type service_account_role: str
        :param service_account_name: Name for the service account to be created
        :type service_account_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_grafana_service_key_serialize(
            admin_username=admin_username,
            admin_password=admin_password,
            service_account_role=service_account_role,
            service_account_name=service_account_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateGrafanaServiceKey200Response",
            '400': None,
            '401': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_grafana_service_key_with_http_info(
        self,
        admin_username: Annotated[StrictStr, Field(description="Grafana administrator username")],
        admin_password: Annotated[StrictStr, Field(description="Grafana administrator password")],
        service_account_role: Annotated[StrictStr, Field(description="Role to assign to the service account")],
        service_account_name: Annotated[Optional[StrictStr], Field(description="Name for the service account to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenerateGrafanaServiceKey200Response]:
        """Generate Grafana Service Account Key

        Generate a service account key in Grafana that can be used as a bearer token for API authentication

        :param admin_username: Grafana administrator username (required)
        :type admin_username: str
        :param admin_password: Grafana administrator password (required)
        :type admin_password: str
        :param service_account_role: Role to assign to the service account (required)
        :type service_account_role: str
        :param service_account_name: Name for the service account to be created
        :type service_account_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_grafana_service_key_serialize(
            admin_username=admin_username,
            admin_password=admin_password,
            service_account_role=service_account_role,
            service_account_name=service_account_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateGrafanaServiceKey200Response",
            '400': None,
            '401': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_grafana_service_key_without_preload_content(
        self,
        admin_username: Annotated[StrictStr, Field(description="Grafana administrator username")],
        admin_password: Annotated[StrictStr, Field(description="Grafana administrator password")],
        service_account_role: Annotated[StrictStr, Field(description="Role to assign to the service account")],
        service_account_name: Annotated[Optional[StrictStr], Field(description="Name for the service account to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Grafana Service Account Key

        Generate a service account key in Grafana that can be used as a bearer token for API authentication

        :param admin_username: Grafana administrator username (required)
        :type admin_username: str
        :param admin_password: Grafana administrator password (required)
        :type admin_password: str
        :param service_account_role: Role to assign to the service account (required)
        :type service_account_role: str
        :param service_account_name: Name for the service account to be created
        :type service_account_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_grafana_service_key_serialize(
            admin_username=admin_username,
            admin_password=admin_password,
            service_account_role=service_account_role,
            service_account_name=service_account_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateGrafanaServiceKey200Response",
            '400': None,
            '401': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _generate_grafana_service_key_serialize(
        self,
        admin_username,
        admin_password,
        service_account_role,
        service_account_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if admin_username is not None:
            
            _query_params.append(('admin_username', admin_username))
            
        if admin_password is not None:
            
            _query_params.append(('admin_password', admin_password))
            
        if service_account_name is not None:
            
            _query_params.append(('service_account_name', service_account_name))
            
        if service_account_role is not None:
            
            _query_params.append(('service_account_role', service_account_role))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/grafana/auth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


