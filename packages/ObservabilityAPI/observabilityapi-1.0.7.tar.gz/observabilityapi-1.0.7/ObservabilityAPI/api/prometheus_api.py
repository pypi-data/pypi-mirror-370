# coding: utf-8

"""
    ObservabilityAPI

    Observability API

    The version of the OpenAPI document: 1.0.2
    Contact: max.smith@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from ObservabilityAPI.models.add_exporter_to_host200_response import AddExporterToHost200Response
from ObservabilityAPI.models.add_prometheus_target200_response import AddPrometheusTarget200Response
from ObservabilityAPI.models.get_prometheus_targets200_response import GetPrometheusTargets200Response
from ObservabilityAPI.models.remove_prometheus_target200_response import RemovePrometheusTarget200Response

from ObservabilityAPI.api_client import ApiClient, RequestSerialized
from ObservabilityAPI.api_response import ApiResponse
from ObservabilityAPI.rest import RESTResponseType


class PrometheusApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_exporter_to_host(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        exporter_name: Annotated[str, Field(strict=True, description="Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter)")],
        port: Annotated[int, Field(le=65535, strict=True, ge=1024, description="Port where the exporter metrics are exposed")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddExporterToHost200Response:
        """Add/Update Specific Exporter for Host

        Add or update a specific exporter for a given hostname in the Prometheus configuration. This allows fine-grained control over individual exporters without affecting others. If the hostname doesn't exist, it will be created. If the exporter already exists for the hostname, it will be updated. 

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param exporter_name: Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter) (required)
        :type exporter_name: str
        :param port: Port where the exporter metrics are exposed (required)
        :type port: int
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_exporter_to_host_serialize(
            hostname=hostname,
            ip_address=ip_address,
            exporter_name=exporter_name,
            port=port,
            environment_label=environment_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddExporterToHost200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_exporter_to_host_with_http_info(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        exporter_name: Annotated[str, Field(strict=True, description="Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter)")],
        port: Annotated[int, Field(le=65535, strict=True, ge=1024, description="Port where the exporter metrics are exposed")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddExporterToHost200Response]:
        """Add/Update Specific Exporter for Host

        Add or update a specific exporter for a given hostname in the Prometheus configuration. This allows fine-grained control over individual exporters without affecting others. If the hostname doesn't exist, it will be created. If the exporter already exists for the hostname, it will be updated. 

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param exporter_name: Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter) (required)
        :type exporter_name: str
        :param port: Port where the exporter metrics are exposed (required)
        :type port: int
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_exporter_to_host_serialize(
            hostname=hostname,
            ip_address=ip_address,
            exporter_name=exporter_name,
            port=port,
            environment_label=environment_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddExporterToHost200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_exporter_to_host_without_preload_content(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        exporter_name: Annotated[str, Field(strict=True, description="Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter)")],
        port: Annotated[int, Field(le=65535, strict=True, ge=1024, description="Port where the exporter metrics are exposed")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add/Update Specific Exporter for Host

        Add or update a specific exporter for a given hostname in the Prometheus configuration. This allows fine-grained control over individual exporters without affecting others. If the hostname doesn't exist, it will be created. If the exporter already exists for the hostname, it will be updated. 

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param exporter_name: Name of the exporter to add/update (e.g., node_exporter, process_exporter, cadvisor, custom_exporter) (required)
        :type exporter_name: str
        :param port: Port where the exporter metrics are exposed (required)
        :type port: int
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_exporter_to_host_serialize(
            hostname=hostname,
            ip_address=ip_address,
            exporter_name=exporter_name,
            port=port,
            environment_label=environment_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddExporterToHost200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_exporter_to_host_serialize(
        self,
        hostname,
        ip_address,
        exporter_name,
        port,
        environment_label,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hostname is not None:
            
            _query_params.append(('hostname', hostname))
            
        if ip_address is not None:
            
            _query_params.append(('ip_address', ip_address))
            
        if exporter_name is not None:
            
            _query_params.append(('exporter_name', exporter_name))
            
        if port is not None:
            
            _query_params.append(('port', port))
            
        if environment_label is not None:
            
            _query_params.append(('environment_label', environment_label))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/prometheus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_prometheus_target(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        node_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Node Exporter metrics are exposed")] = None,
        process_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Process Exporter metrics are exposed")] = None,
        cadvisor_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where cAdvisor container metrics are exposed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddPrometheusTarget200Response:
        """Add Prometheus Monitoring Target

        Add a new system to Prometheus monitoring configuration. Note: The target system must have the required metric exporters (Node Exporter, Process Exporter, cAdvisor)  properly configured and running on the specified ports for monitoring to work correctly.

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param node_exporter_port: Port where Node Exporter metrics are exposed
        :type node_exporter_port: str
        :param process_exporter_port: Port where Process Exporter metrics are exposed
        :type process_exporter_port: str
        :param cadvisor_port: Port where cAdvisor container metrics are exposed
        :type cadvisor_port: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_prometheus_target_serialize(
            hostname=hostname,
            ip_address=ip_address,
            environment_label=environment_label,
            node_exporter_port=node_exporter_port,
            process_exporter_port=process_exporter_port,
            cadvisor_port=cadvisor_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddPrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_prometheus_target_with_http_info(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        node_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Node Exporter metrics are exposed")] = None,
        process_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Process Exporter metrics are exposed")] = None,
        cadvisor_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where cAdvisor container metrics are exposed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddPrometheusTarget200Response]:
        """Add Prometheus Monitoring Target

        Add a new system to Prometheus monitoring configuration. Note: The target system must have the required metric exporters (Node Exporter, Process Exporter, cAdvisor)  properly configured and running on the specified ports for monitoring to work correctly.

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param node_exporter_port: Port where Node Exporter metrics are exposed
        :type node_exporter_port: str
        :param process_exporter_port: Port where Process Exporter metrics are exposed
        :type process_exporter_port: str
        :param cadvisor_port: Port where cAdvisor container metrics are exposed
        :type cadvisor_port: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_prometheus_target_serialize(
            hostname=hostname,
            ip_address=ip_address,
            environment_label=environment_label,
            node_exporter_port=node_exporter_port,
            process_exporter_port=process_exporter_port,
            cadvisor_port=cadvisor_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddPrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_prometheus_target_without_preload_content(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target system")],
        ip_address: Annotated[StrictStr, Field(description="IP address or hostname of the target system")],
        environment_label: Annotated[Optional[StrictStr], Field(description="Environment or group label for dashboard categorization")] = None,
        node_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Node Exporter metrics are exposed")] = None,
        process_exporter_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where Process Exporter metrics are exposed")] = None,
        cadvisor_port: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Port where cAdvisor container metrics are exposed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add Prometheus Monitoring Target

        Add a new system to Prometheus monitoring configuration. Note: The target system must have the required metric exporters (Node Exporter, Process Exporter, cAdvisor)  properly configured and running on the specified ports for monitoring to work correctly.

        :param hostname: Hostname or service name of the target system (required)
        :type hostname: str
        :param ip_address: IP address or hostname of the target system (required)
        :type ip_address: str
        :param environment_label: Environment or group label for dashboard categorization
        :type environment_label: str
        :param node_exporter_port: Port where Node Exporter metrics are exposed
        :type node_exporter_port: str
        :param process_exporter_port: Port where Process Exporter metrics are exposed
        :type process_exporter_port: str
        :param cadvisor_port: Port where cAdvisor container metrics are exposed
        :type cadvisor_port: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_prometheus_target_serialize(
            hostname=hostname,
            ip_address=ip_address,
            environment_label=environment_label,
            node_exporter_port=node_exporter_port,
            process_exporter_port=process_exporter_port,
            cadvisor_port=cadvisor_port,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddPrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_prometheus_target_serialize(
        self,
        hostname,
        ip_address,
        environment_label,
        node_exporter_port,
        process_exporter_port,
        cadvisor_port,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hostname is not None:
            
            _query_params.append(('hostname', hostname))
            
        if ip_address is not None:
            
            _query_params.append(('ip_address', ip_address))
            
        if environment_label is not None:
            
            _query_params.append(('environment_label', environment_label))
            
        if node_exporter_port is not None:
            
            _query_params.append(('node_exporter_port', node_exporter_port))
            
        if process_exporter_port is not None:
            
            _query_params.append(('process_exporter_port', process_exporter_port))
            
        if cadvisor_port is not None:
            
            _query_params.append(('cadvisor_port', cadvisor_port))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/prometheus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_prometheus_targets(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPrometheusTargets200Response:
        """Get Prometheus Targets Configuration

        Retrieve all configured Prometheus monitoring targets and their configurations

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_prometheus_targets_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPrometheusTargets200Response",
            '400': None,
            '404': None,
            '500': None,
            '501': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_prometheus_targets_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPrometheusTargets200Response]:
        """Get Prometheus Targets Configuration

        Retrieve all configured Prometheus monitoring targets and their configurations

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_prometheus_targets_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPrometheusTargets200Response",
            '400': None,
            '404': None,
            '500': None,
            '501': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_prometheus_targets_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Prometheus Targets Configuration

        Retrieve all configured Prometheus monitoring targets and their configurations

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_prometheus_targets_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPrometheusTargets200Response",
            '400': None,
            '404': None,
            '500': None,
            '501': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_prometheus_targets_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/prometheus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_prometheus_target(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target to be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RemovePrometheusTarget200Response:
        """Remove Prometheus Monitoring Target

        Remove a monitoring target from the Prometheus configuration. This will stop collecting metrics from the specified system.

        :param hostname: Hostname or service name of the target to be removed (required)
        :type hostname: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_prometheus_target_serialize(
            hostname=hostname,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemovePrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_prometheus_target_with_http_info(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target to be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RemovePrometheusTarget200Response]:
        """Remove Prometheus Monitoring Target

        Remove a monitoring target from the Prometheus configuration. This will stop collecting metrics from the specified system.

        :param hostname: Hostname or service name of the target to be removed (required)
        :type hostname: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_prometheus_target_serialize(
            hostname=hostname,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemovePrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_prometheus_target_without_preload_content(
        self,
        hostname: Annotated[str, Field(strict=True, description="Hostname or service name of the target to be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove Prometheus Monitoring Target

        Remove a monitoring target from the Prometheus configuration. This will stop collecting metrics from the specified system.

        :param hostname: Hostname or service name of the target to be removed (required)
        :type hostname: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_prometheus_target_serialize(
            hostname=hostname,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemovePrometheusTarget200Response",
            '400': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_prometheus_target_serialize(
        self,
        hostname,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if hostname is not None:
            
            _query_params.append(('hostname', hostname))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/prometheus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


