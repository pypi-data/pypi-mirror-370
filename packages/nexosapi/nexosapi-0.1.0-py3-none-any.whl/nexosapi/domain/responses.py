import typing

import httpx
import pydantic

from nexosapi.domain.base import NullableBaseModel
from nexosapi.domain.data import (
    ChatChoice,
    Embedding,
    Image,
    StorageFile,
    TeamApiKey,
    TranscriptionSegment,
    TranscriptionWord,
)
from nexosapi.domain.metadata import Model, UsageInfo


class NexosAPIResponse(NullableBaseModel):
    _response: httpx.Response = pydantic.PrivateAttr()

    class Config:
        # Exclude fields that are None when dumping the model
        json_encoders = {type(None): lambda _: None}  # noqa: RUF012
        use_enum_values = True  # Use enum values instead of names in JSON serialization


class ChatCompletionsResponse(NexosAPIResponse):
    """
    Response model for the Nexos.ai Chat Completions API.

    Represents the server response body for chat completion requests. Fields mirror
    the public API schema.

    :ivar id: A unique identifier for the chat completion.
    :ivar object: The object type, always "chat.completion".
    :ivar created: The Unix timestamp (in seconds) of when the chat completion was created.
    :ivar model: The model used for the chat completion.
    :ivar choices: A list of chat completion choices (length corresponds to the request's ``n``).
        Each choice includes:
        - index: The position of the choice in the list.
        - finish_reason: Why generation stopped. One of:
            "stop", "length", "content_filter", "tool_calls", or "function_call" (deprecated).
        - message: The assistant message generated by the model, with:
            - role: Always "assistant".
            - content: The message content (nullable).
            - refusal: A refusal message when applicable (nullable).
            - tool_calls: Tool calls generated by the model (e.g., functions), each with:
                - id: Tool call ID.
                - type: Currently "function".
                - function: The function call details:
                    - name: Function name.
                    - arguments: JSON string arguments (validate before execution).
            - function_call: Deprecated; replaced by ``tool_calls``.
            - audio: Present when audio output was requested; contains:
                - id: Unique identifier for this audio response.
                - expires_at: Unix timestamp (seconds) when the audio response expires.
                - data: Base64-encoded audio bytes in the requested format.
                - transcript: Transcript of the generated audio.
            - annotations: When applicable (e.g., web search), contains URL citations:
                - type: Always "url_citation".
                - url_citation: The URL citation object.
        - logprobs: Log probability information for the choice, including:
            - content: List of message content tokens with log probabilities (nullable).
            - refusal: List of refusal tokens with log probabilities (nullable).
    :ivar usage: Usage statistics for the request, including:
        - prompt_tokens, completion_tokens, total_tokens.
        - completion_tokens_details:
            - accepted_prediction_tokens: Tokens from prediction that appeared in the completion.
            - audio_tokens: Audio input tokens generated by the model.
            - reasoning_tokens: Tokens generated for reasoning.
            - rejected_prediction_tokens: Predicted tokens not appearing in the completion (still billed).
        - prompt_tokens_details:
            - audio_tokens: Audio input tokens present in the prompt.
            - cached_tokens: Cached tokens present in the prompt.
    :ivar system_fingerprint: Fingerprint of the backend configuration that served the request.
        Use alongside the request ``seed`` to monitor determinism across backend changes.
    :ivar service_tier: The service tier used to process the request, included only when
        the request specified a ``service_tier``. One of: "scale", "default".

    Notes
    -----

    - ``object`` is always "chat.completion".
    - ``function_call`` is deprecated; prefer ``tool_calls`` within the assistant message.
    """

    id: str
    object: str = "chat.completion"
    created: int
    model: str
    choices: list[ChatChoice]
    usage: UsageInfo | None = None
    system_fingerprint: str | None = None
    service_tier: typing.Literal["scale", "default"] | None = None

    @property
    def tool_calls(self) -> list[dict[str, typing.Any]]:
        """
        Extracts and returns a list of tool calls from the chat response choices.
        Each tool call is represented as a dictionary.
        """
        tool_calls = []
        for choice in self.choices:
            if choice.message.tool_calls:
                tool_calls.extend(
                    [
                        {
                            "id": tool_call.id,
                            "type": tool_call.type,
                            "function": {
                                "name": tool_call.function.name,
                                "arguments": tool_call.function.arguments,
                            },
                        }
                        for tool_call in choice.message.tool_calls
                    ]
                )
        return tool_calls


class AudioSpeechResponse(NexosAPIResponse): ...


class AudioTranscriptionResponse(NexosAPIResponse):
    text: str | None = None
    model: str | None = None
    language: str | None = None
    duration: str | None = None
    words: list[TranscriptionWord] | None = None
    segments: list[TranscriptionSegment] | None = None


class AudioTranslationResponse(NexosAPIResponse):
    text: str | None = None
    duration: str | None = None
    model: str | None = None
    language: typing.Literal["english"] | None = None
    segments: list[TranscriptionSegment] | None = None


class ImageEndpointsResponse(NexosAPIResponse):
    created: int
    data: list[Image]


class EmbeddingResponse(NexosAPIResponse):
    object: str = "list"
    data: list[Embedding] | None = None
    model: str | None = None
    usage: UsageInfo | None = None


class StorageUploadResponse(NexosAPIResponse, StorageFile): ...


class StorageListResponse(NexosAPIResponse):
    data: list[StorageFile]


class StorageFileResponse(NexosAPIResponse, StorageFile): ...


class StorageContentResponse(NexosAPIResponse):
    content: bytes  # This is typically sent as raw binary content


class StorageDeleteResponse(NexosAPIResponse):
    id: str
    deleted: bool


class ModelsListResponse(NexosAPIResponse):
    object: str
    data: list[Model]
    total: int


class TeamApiKeyListResponse(NexosAPIResponse, pydantic.RootModel):  # type: ignore
    root: list[TeamApiKey]


class TeamApiKeyCreateResponse(NexosAPIResponse, TeamApiKey): ...


class TeamApiKeyDeleteResponse(NexosAPIResponse): ...


class TeamApiKeyUpdateResponse(NexosAPIResponse, TeamApiKey): ...


class TeamApiKeyRegenerateResponse(NexosAPIResponse, TeamApiKey): ...
