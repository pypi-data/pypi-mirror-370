import torch
import torch.nn as nn

# TODO: Find this list more systematically
# Right now they have been taken from
# - torch.Tensor
# - torch.functional
# - torch.nn.functional
# - torch.nn.init
# - torhc.linalg
# - torch
FUNCTIONS = [
	{'namespace': 'torch.Tensor', 'function': 'H'},
	{'namespace': 'torch.Tensor', 'function': 'T'},
	{'namespace': 'torch.Tensor', 'function': '__abs__'},
	{'namespace': 'torch.Tensor', 'function': '__add__'},
	{'namespace': 'torch.Tensor', 'function': '__and__'},
	{'namespace': 'torch.Tensor', 'function': '__array__'},
	{'namespace': 'torch.Tensor', 'function': '__array_wrap__'},
	{'namespace': 'torch.Tensor', 'function': '__bool__'},
	{'namespace': 'torch.Tensor', 'function': '__complex__'},
	{'namespace': 'torch.Tensor', 'function': 'eye'},
	{'namespace': 'torch.Tensor', 'function': 'full'},
	{'namespace': 'torch.Tensor', 'function': '__contains__'},
	{'namespace': 'torch.Tensor', 'function': '__cuda_array_interface__'},
	{'namespace': 'torch.Tensor', 'function': '__deepcopy__'},
	{'namespace': 'torch.Tensor', 'function': '__div__'},
	{'namespace': 'torch.Tensor', 'function': '__dlpack__'},
	{'namespace': 'torch.Tensor', 'function': '__dlpack_device__'},
	{'namespace': 'torch.Tensor', 'function': '__eq__'},
	{'namespace': 'torch.Tensor', 'function': '__float__'},
	{'namespace': 'torch.Tensor', 'function': '__floordiv__'},
	{'namespace': 'torch.Tensor', 'function': '__format__'},
	{'namespace': 'torch.Tensor', 'function': '__ge__'},
	{'namespace': 'torch.Tensor', 'function': '__getitem__'},
	{'namespace': 'torch.Tensor', 'function': '__gt__'},
	{'namespace': 'torch.Tensor', 'function': '__iadd__'},
	{'namespace': 'torch.Tensor', 'function': '__iand__'},
	{'namespace': 'torch.Tensor', 'function': '__idiv__'},
	{'namespace': 'torch.Tensor', 'function': '__ifloordiv__'},
	{'namespace': 'torch.Tensor', 'function': '__ilshift__'},
	{'namespace': 'torch.Tensor', 'function': '__imod__'},
	{'namespace': 'torch.Tensor', 'function': '__imul__'},
	{'namespace': 'torch.Tensor', 'function': '__index__'},
	{'namespace': 'torch.Tensor', 'function': '__int__'},
	{'namespace': 'torch.Tensor', 'function': '__invert__'},
	{'namespace': 'torch.Tensor', 'function': '__ior__'},
	{'namespace': 'torch.Tensor', 'function': '__ipow__'},
	{'namespace': 'torch.Tensor', 'function': '__irshift__'},
	{'namespace': 'torch.Tensor', 'function': '__isub__'},
	{'namespace': 'torch.Tensor', 'function': '__itruediv__'},
	{'namespace': 'torch.Tensor', 'function': '__ixor__'},
	{'namespace': 'torch.Tensor', 'function': '__le__'},
	{'namespace': 'torch.Tensor', 'function': '__len__'},
	{'namespace': 'torch.Tensor', 'function': '__long__'},
	{'namespace': 'torch.Tensor', 'function': '__lshift__'},
	{'namespace': 'torch.Tensor', 'function': '__lt__'},
	{'namespace': 'torch.Tensor', 'function': '__matmul__'},
	{'namespace': 'torch.Tensor', 'function': '__mod__'},
	{'namespace': 'torch.Tensor', 'function': '__mul__'},
	{'namespace': 'torch.Tensor', 'function': '__ne__'},
	{'namespace': 'torch.Tensor', 'function': '__neg__'},
	{'namespace': 'torch.Tensor', 'function': '__nonzero__'},
	{'namespace': 'torch.Tensor', 'function': '__or__'},
	{'namespace': 'torch.Tensor', 'function': '__pos__'},
	{'namespace': 'torch.Tensor', 'function': '__pow__'},
	{'namespace': 'torch.Tensor', 'function': '__radd__'},
	{'namespace': 'torch.Tensor', 'function': '__rand__'},
	{'namespace': 'torch.Tensor', 'function': '__rdiv__'},
	{'namespace': 'torch.Tensor', 'function': '__reduce_ex__'},
	{'namespace': 'torch.Tensor', 'function': '__repr__'},
	{'namespace': 'torch.Tensor', 'function': '__reversed__'},
	{'namespace': 'torch.Tensor', 'function': '__rfloordiv__'},
	{'namespace': 'torch.Tensor', 'function': '__rlshift__'},
	{'namespace': 'torch.Tensor', 'function': '__rmatmul__'},
	{'namespace': 'torch.Tensor', 'function': '__rmod__'},
	{'namespace': 'torch.Tensor', 'function': '__rmul__'},
	{'namespace': 'torch.Tensor', 'function': '__ror__'},
	{'namespace': 'torch.Tensor', 'function': '__rpow__'},
	{'namespace': 'torch.Tensor', 'function': '__rrshift__'},
	{'namespace': 'torch.Tensor', 'function': '__rshift__'},
	{'namespace': 'torch.Tensor', 'function': '__rsub__'},
	{'namespace': 'torch.Tensor', 'function': '__rtruediv__'},
	{'namespace': 'torch.Tensor', 'function': '__rxor__'},
	{'namespace': 'torch.Tensor', 'function': '__setitem__'},
	{'namespace': 'torch.Tensor', 'function': '__setstate__'},
	{'namespace': 'torch.Tensor', 'function': '__sub__'},
	{'namespace': 'torch.Tensor', 'function': '__truediv__'},
	{'namespace': 'torch.Tensor', 'function': '__xor__'},
	{'namespace': 'torch.Tensor', 'function': '_autocast_to_full_precision'},
	{'namespace': 'torch.Tensor', 'function': '_autocast_to_reduced_precision'},
	{'namespace': 'torch.Tensor', 'function': '_backward_hooks'},
	{'namespace': 'torch.Tensor', 'function': '_base'},
	{'namespace': 'torch.Tensor', 'function': '_cdata'},
	{'namespace': 'torch.Tensor', 'function': '_clear_non_serializable_cached_data'},
	{'namespace': 'torch.Tensor', 'function': '_coalesced_'},
	{'namespace': 'torch.Tensor', 'function': '_dimI'},
	{'namespace': 'torch.Tensor', 'function': '_dimV'},
	{'namespace': 'torch.Tensor', 'function': '_grad'},
	{'namespace': 'torch.Tensor', 'function': '_grad_fn'},
	{'namespace': 'torch.Tensor', 'function': '_indices'},
	{'namespace': 'torch.Tensor', 'function': '_is_view'},
	{'namespace': 'torch.Tensor', 'function': '_nested_tensor_size'},
	{'namespace': 'torch.Tensor', 'function': '_nested_tensor_storage_offsets'},
	{'namespace': 'torch.Tensor', 'function': '_nested_tensor_strides'},
	{'namespace': 'torch.Tensor', 'function': '_nnz'},
	{'namespace': 'torch.Tensor', 'function': '_post_accumulate_grad_hooks'},
	{'namespace': 'torch.Tensor', 'function': '_sparse_mask_projection'},
	{'namespace': 'torch.Tensor', 'function': '_to_dense'},
	{'namespace': 'torch.Tensor', 'function': '_update_names'},
	{'namespace': 'torch.Tensor', 'function': '_values'},
	{'namespace': 'torch.Tensor', 'function': '_version'},
	{'namespace': 'torch.Tensor', 'function': 'abs'},
	{'namespace': 'torch.Tensor', 'function': 'abs_'},
	{'namespace': 'torch.Tensor', 'function': 'absolute'},
	{'namespace': 'torch.Tensor', 'function': 'absolute_'},
	{'namespace': 'torch.Tensor', 'function': 'acos'},
	{'namespace': 'torch.Tensor', 'function': 'acos_'},
	{'namespace': 'torch.Tensor', 'function': 'acosh'},
	{'namespace': 'torch.Tensor', 'function': 'acosh_'},
	{'namespace': 'torch.Tensor', 'function': 'add'},
	{'namespace': 'torch.Tensor', 'function': 'add_'},
	{'namespace': 'torch.Tensor', 'function': 'addbmm'},
	{'namespace': 'torch.Tensor', 'function': 'addbmm_'},
	{'namespace': 'torch.Tensor', 'function': 'addcdiv'},
	{'namespace': 'torch.Tensor', 'function': 'addcdiv_'},
	{'namespace': 'torch.Tensor', 'function': 'addcmul'},
	{'namespace': 'torch.Tensor', 'function': 'addcmul_'},
	{'namespace': 'torch.Tensor', 'function': 'addmm'},
	{'namespace': 'torch.Tensor', 'function': 'addmm_'},
	{'namespace': 'torch.Tensor', 'function': 'addmv'},
	{'namespace': 'torch.Tensor', 'function': 'addmv_'},
	{'namespace': 'torch.Tensor', 'function': 'addr'},
	{'namespace': 'torch.Tensor', 'function': 'addr_'},
	{'namespace': 'torch.Tensor', 'function': 'adjoint'},
	{'namespace': 'torch.Tensor', 'function': 'align_as'},
	{'namespace': 'torch.Tensor', 'function': 'align_to'},
	{'namespace': 'torch.Tensor', 'function': 'all'},
	{'namespace': 'torch.Tensor', 'function': 'allclose'},
	{'namespace': 'torch.Tensor', 'function': 'amax'},
	{'namespace': 'torch.Tensor', 'function': 'amin'},
	{'namespace': 'torch.Tensor', 'function': 'aminmax'},
	{'namespace': 'torch.Tensor', 'function': 'angle'},
	{'namespace': 'torch.Tensor', 'function': 'any'},
	{'namespace': 'torch.Tensor', 'function': 'apply_'},
	{'namespace': 'torch.Tensor', 'function': 'arccos'},
	{'namespace': 'torch.Tensor', 'function': 'arccos_'},
	{'namespace': 'torch.Tensor', 'function': 'arccosh'},
	{'namespace': 'torch.Tensor', 'function': 'arccosh_'},
	{'namespace': 'torch.Tensor', 'function': 'arcsin'},
	{'namespace': 'torch.Tensor', 'function': 'arcsin_'},
	{'namespace': 'torch.Tensor', 'function': 'arcsinh'},
	{'namespace': 'torch.Tensor', 'function': 'arcsinh_'},
	{'namespace': 'torch.Tensor', 'function': 'arctan'},
	{'namespace': 'torch.Tensor', 'function': 'arctan2'},
	{'namespace': 'torch.Tensor', 'function': 'arctan2_'},
	{'namespace': 'torch.Tensor', 'function': 'arctan_'},
	{'namespace': 'torch.Tensor', 'function': 'arctanh'},
	{'namespace': 'torch.Tensor', 'function': 'arctanh_'},
	{'namespace': 'torch.Tensor', 'function': 'argmax'},
	{'namespace': 'torch.Tensor', 'function': 'argmin'},
	{'namespace': 'torch.Tensor', 'function': 'argsort'},
	{'namespace': 'torch.Tensor', 'function': 'argwhere'},
	{'namespace': 'torch.Tensor', 'function': 'as_strided'},
	{'namespace': 'torch.Tensor', 'function': 'as_strided_'},
	{'namespace': 'torch.Tensor', 'function': 'as_strided_scatter'},
	{'namespace': 'torch.Tensor', 'function': 'asin'},
	{'namespace': 'torch.Tensor', 'function': 'asin_'},
	{'namespace': 'torch.Tensor', 'function': 'asinh'},
	{'namespace': 'torch.Tensor', 'function': 'asinh_'},
	{'namespace': 'torch.Tensor', 'function': 'atan'},
	{'namespace': 'torch.Tensor', 'function': 'atan2'},
	{'namespace': 'torch.Tensor', 'function': 'atan2_'},
	{'namespace': 'torch.Tensor', 'function': 'atan_'},
	{'namespace': 'torch.Tensor', 'function': 'atanh'},
	{'namespace': 'torch.Tensor', 'function': 'atanh_'},
	{'namespace': 'torch.Tensor', 'function': 'backward'},
	{'namespace': 'torch.Tensor', 'function': 'baddbmm'},
	{'namespace': 'torch.Tensor', 'function': 'baddbmm_'},
	{'namespace': 'torch.Tensor', 'function': 'bernoulli'},
	{'namespace': 'torch.Tensor', 'function': 'bernoulli_'},
	{'namespace': 'torch.Tensor', 'function': 'bfloat16'},
	{'namespace': 'torch.Tensor', 'function': 'bincount'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_and'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_and_'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_left_shift'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_left_shift_'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_not'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_not_'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_or'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_or_'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_right_shift'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_right_shift_'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_xor'},
	{'namespace': 'torch.Tensor', 'function': 'bitwise_xor_'},
	{'namespace': 'torch.Tensor', 'function': 'bmm'},
	{'namespace': 'torch.Tensor', 'function': 'bool'},
	{'namespace': 'torch.Tensor', 'function': 'broadcast_to'},
	{'namespace': 'torch.Tensor', 'function': 'byte'},
	{'namespace': 'torch.Tensor', 'function': 'cauchy_'},
	{'namespace': 'torch.Tensor', 'function': 'ccol_indices'},
	{'namespace': 'torch.Tensor', 'function': 'cdouble'},
	{'namespace': 'torch.Tensor', 'function': 'ceil'},
	{'namespace': 'torch.Tensor', 'function': 'ceil_'},
	{'namespace': 'torch.Tensor', 'function': 'cfloat'},
	{'namespace': 'torch.Tensor', 'function': 'chalf'},
	{'namespace': 'torch.Tensor', 'function': 'char'},
	{'namespace': 'torch.Tensor', 'function': 'cholesky'},
	{'namespace': 'torch.Tensor', 'function': 'cholesky_inverse'},
	{'namespace': 'torch.Tensor', 'function': 'cholesky_solve'},
	{'namespace': 'torch.Tensor', 'function': 'chunk'},
	{'namespace': 'torch.Tensor', 'function': 'clamp'},
	{'namespace': 'torch.Tensor', 'function': 'clamp_'},
	{'namespace': 'torch.Tensor', 'function': 'clamp_max'},
	{'namespace': 'torch.Tensor', 'function': 'clamp_max_'},
	{'namespace': 'torch.Tensor', 'function': 'clamp_min'},
	{'namespace': 'torch.Tensor', 'function': 'clamp_min_'},
	{'namespace': 'torch.Tensor', 'function': 'clip'},
	{'namespace': 'torch.Tensor', 'function': 'clip_'},
	{'namespace': 'torch.Tensor', 'function': 'clone'},
	{'namespace': 'torch.Tensor', 'function': 'coalesce'},
	{'namespace': 'torch.Tensor', 'function': 'col_indices'},
	{'namespace': 'torch.Tensor', 'function': 'conj'},
	{'namespace': 'torch.Tensor', 'function': 'conj_physical'},
	{'namespace': 'torch.Tensor', 'function': 'conj_physical_'},
	{'namespace': 'torch.Tensor', 'function': 'contiguous'},
	{'namespace': 'torch.Tensor', 'function': 'copy_'},
	{'namespace': 'torch.Tensor', 'function': 'copysign'},
	{'namespace': 'torch.Tensor', 'function': 'copysign_'},
	{'namespace': 'torch.Tensor', 'function': 'corrcoef'},
	{'namespace': 'torch.Tensor', 'function': 'cos'},
	{'namespace': 'torch.Tensor', 'function': 'cos_'},
	{'namespace': 'torch.Tensor', 'function': 'cosh'},
	{'namespace': 'torch.Tensor', 'function': 'cosh_'},
	{'namespace': 'torch.Tensor', 'function': 'count_nonzero'},
	{'namespace': 'torch.Tensor', 'function': 'cov'},
	{'namespace': 'torch.Tensor', 'function': 'cpu'},
	{'namespace': 'torch.Tensor', 'function': 'cross'},
	{'namespace': 'torch.Tensor', 'function': 'crow_indices'},
	{'namespace': 'torch.Tensor', 'function': 'cuda'},
	{'namespace': 'torch.Tensor', 'function': 'cummax'},
	{'namespace': 'torch.Tensor', 'function': 'cummin'},
	{'namespace': 'torch.Tensor', 'function': 'cumprod'},
	{'namespace': 'torch.Tensor', 'function': 'cumprod_'},
	{'namespace': 'torch.Tensor', 'function': 'cumsum'},
	{'namespace': 'torch.Tensor', 'function': 'cumsum_'},
	{'namespace': 'torch.Tensor', 'function': 'data'},
	{'namespace': 'torch.Tensor', 'function': 'data_ptr'},
	{'namespace': 'torch.Tensor', 'function': 'deg2rad'},
	{'namespace': 'torch.Tensor', 'function': 'deg2rad_'},
	{'namespace': 'torch.Tensor', 'function': 'dense_dim'},
	{'namespace': 'torch.Tensor', 'function': 'dequantize'},
	{'namespace': 'torch.Tensor', 'function': 'det'},
	{'namespace': 'torch.Tensor', 'function': 'detach'},
	{'namespace': 'torch.Tensor', 'function': 'detach_'},
	{'namespace': 'torch.Tensor', 'function': 'device'},
	{'namespace': 'torch.Tensor', 'function': 'diag'},
	{'namespace': 'torch.Tensor', 'function': 'diag_embed'},
	{'namespace': 'torch.Tensor', 'function': 'diagflat'},
	{'namespace': 'torch.Tensor', 'function': 'diagonal'},
	{'namespace': 'torch.Tensor', 'function': 'diagonal_scatter'},
	{'namespace': 'torch.Tensor', 'function': 'diff'},
	{'namespace': 'torch.Tensor', 'function': 'digamma'},
	{'namespace': 'torch.Tensor', 'function': 'digamma_'},
	{'namespace': 'torch.Tensor', 'function': 'dim'},
	{'namespace': 'torch.Tensor', 'function': 'dim_order'},
	{'namespace': 'torch.Tensor', 'function': 'dist'},
	{'namespace': 'torch.Tensor', 'function': 'div'},
	{'namespace': 'torch.Tensor', 'function': 'div_'},
	{'namespace': 'torch.Tensor', 'function': 'divide'},
	{'namespace': 'torch.Tensor', 'function': 'divide_'},
	{'namespace': 'torch.Tensor', 'function': 'dot'},
	{'namespace': 'torch.Tensor', 'function': 'double'},
	{'namespace': 'torch.Tensor', 'function': 'dsplit'},
	{'namespace': 'torch.Tensor', 'function': 'dtype'},
	{'namespace': 'torch.Tensor', 'function': 'element_size'},
	{'namespace': 'torch.Tensor', 'function': 'eq'},
	{'namespace': 'torch.Tensor', 'function': 'eq_'},
	{'namespace': 'torch.Tensor', 'function': 'equal'},
	{'namespace': 'torch.Tensor', 'function': 'erf'},
	{'namespace': 'torch.Tensor', 'function': 'erf_'},
	{'namespace': 'torch.Tensor', 'function': 'erfc'},
	{'namespace': 'torch.Tensor', 'function': 'erfc_'},
	{'namespace': 'torch.Tensor', 'function': 'erfinv'},
	{'namespace': 'torch.Tensor', 'function': 'erfinv_'},
	{'namespace': 'torch.Tensor', 'function': 'exp'},
	{'namespace': 'torch.Tensor', 'function': 'exp2'},
	{'namespace': 'torch.Tensor', 'function': 'exp2_'},
	{'namespace': 'torch.Tensor', 'function': 'exp_'},
	{'namespace': 'torch.Tensor', 'function': 'expand'},
	{'namespace': 'torch.Tensor', 'function': 'expand_as'},
	{'namespace': 'torch.Tensor', 'function': 'expm1'},
	{'namespace': 'torch.Tensor', 'function': 'expm1_'},
	{'namespace': 'torch.Tensor', 'function': 'exponential_'},
	{'namespace': 'torch.Tensor', 'function': 'fill_'},
	{'namespace': 'torch.Tensor', 'function': 'fill_diagonal_'},
	{'namespace': 'torch.Tensor', 'function': 'fix'},
	{'namespace': 'torch.Tensor', 'function': 'fix_'},
	{'namespace': 'torch.Tensor', 'function': 'flatten'},
	{'namespace': 'torch.Tensor', 'function': 'flip'},
	{'namespace': 'torch.Tensor', 'function': 'fliplr'},
	{'namespace': 'torch.Tensor', 'function': 'flipud'},
	{'namespace': 'torch.Tensor', 'function': 'float'},
	{'namespace': 'torch.Tensor', 'function': 'float_power'},
	{'namespace': 'torch.Tensor', 'function': 'float_power_'},
	{'namespace': 'torch.Tensor', 'function': 'floor'},
	{'namespace': 'torch.Tensor', 'function': 'floor_'},
	{'namespace': 'torch.Tensor', 'function': 'floor_divide'},
	{'namespace': 'torch.Tensor', 'function': 'floor_divide_'},
	{'namespace': 'torch.Tensor', 'function': 'fmax'},
	{'namespace': 'torch.Tensor', 'function': 'fmin'},
	{'namespace': 'torch.Tensor', 'function': 'fmod'},
	{'namespace': 'torch.Tensor', 'function': 'fmod_'},
	{'namespace': 'torch.Tensor', 'function': 'frac'},
	{'namespace': 'torch.Tensor', 'function': 'frac_'},
	{'namespace': 'torch.Tensor', 'function': 'frexp'},
	{'namespace': 'torch.Tensor', 'function': 'gather'},
	{'namespace': 'torch.Tensor', 'function': 'gcd'},
	{'namespace': 'torch.Tensor', 'function': 'gcd_'},
	{'namespace': 'torch.Tensor', 'function': 'ge'},
	{'namespace': 'torch.Tensor', 'function': 'ge_'},
	{'namespace': 'torch.Tensor', 'function': 'geometric_'},
	{'namespace': 'torch.Tensor', 'function': 'geqrf'},
	{'namespace': 'torch.Tensor', 'function': 'ger'},
	{'namespace': 'torch.Tensor', 'function': 'get_device'},
	{'namespace': 'torch.Tensor', 'function': 'grad'},
	{'namespace': 'torch.Tensor', 'function': 'grad_fn'},
	{'namespace': 'torch.Tensor', 'function': 'greater'},
	{'namespace': 'torch.Tensor', 'function': 'greater_'},
	{'namespace': 'torch.Tensor', 'function': 'greater_equal'},
	{'namespace': 'torch.Tensor', 'function': 'greater_equal_'},
	{'namespace': 'torch.Tensor', 'function': 'gt'},
	{'namespace': 'torch.Tensor', 'function': 'gt_'},
	{'namespace': 'torch.Tensor', 'function': 'half'},
	{'namespace': 'torch.Tensor', 'function': 'hardshrink'},
	{'namespace': 'torch.Tensor', 'function': 'has_names'},
	{'namespace': 'torch.Tensor', 'function': 'heaviside'},
	{'namespace': 'torch.Tensor', 'function': 'heaviside_'},
	{'namespace': 'torch.Tensor', 'function': 'histc'},
	{'namespace': 'torch.Tensor', 'function': 'histogram'},
	{'namespace': 'torch.Tensor', 'function': 'hsplit'},
	{'namespace': 'torch.Tensor', 'function': 'hypot'},
	{'namespace': 'torch.Tensor', 'function': 'hypot_'},
	{'namespace': 'torch.Tensor', 'function': 'i0'},
	{'namespace': 'torch.Tensor', 'function': 'i0_'},
	{'namespace': 'torch.Tensor', 'function': 'igamma'},
	{'namespace': 'torch.Tensor', 'function': 'igamma_'},
	{'namespace': 'torch.Tensor', 'function': 'igammac'},
	{'namespace': 'torch.Tensor', 'function': 'igammac_'},
	{'namespace': 'torch.Tensor', 'function': 'imag'},
	{'namespace': 'torch.Tensor', 'function': 'index_add'},
	{'namespace': 'torch.Tensor', 'function': 'index_add_'},
	{'namespace': 'torch.Tensor', 'function': 'index_copy'},
	{'namespace': 'torch.Tensor', 'function': 'index_copy_'},
	{'namespace': 'torch.Tensor', 'function': 'index_fill'},
	{'namespace': 'torch.Tensor', 'function': 'index_fill_'},
	{'namespace': 'torch.Tensor', 'function': 'index_put'},
	{'namespace': 'torch.Tensor', 'function': 'index_put_'},
	{'namespace': 'torch.Tensor', 'function': 'index_reduce'},
	{'namespace': 'torch.Tensor', 'function': 'index_reduce_'},
	{'namespace': 'torch.Tensor', 'function': 'index_select'},
	{'namespace': 'torch.Tensor', 'function': 'indices'},
	{'namespace': 'torch.Tensor', 'function': 'inner'},
	{'namespace': 'torch.Tensor', 'function': 'int'},
	{'namespace': 'torch.Tensor', 'function': 'int_repr'},
	{'namespace': 'torch.Tensor', 'function': 'inverse'},
	{'namespace': 'torch.Tensor', 'function': 'ipu'},
	{'namespace': 'torch.Tensor', 'function': 'is_coalesced'},
	{'namespace': 'torch.Tensor', 'function': 'is_complex'},
	{'namespace': 'torch.Tensor', 'function': 'is_conj'},
	{'namespace': 'torch.Tensor', 'function': 'is_contiguous'},
	{'namespace': 'torch.Tensor', 'function': 'is_cpu'},
	{'namespace': 'torch.Tensor', 'function': 'is_cuda'},
	{'namespace': 'torch.Tensor', 'function': 'is_distributed'},
	{'namespace': 'torch.Tensor', 'function': 'is_floating_point'},
	{'namespace': 'torch.Tensor', 'function': 'is_inference'},
	{'namespace': 'torch.Tensor', 'function': 'is_ipu'},
	{'namespace': 'torch.Tensor', 'function': 'is_leaf'},
	{'namespace': 'torch.Tensor', 'function': 'is_maia'},
	{'namespace': 'torch.Tensor', 'function': 'is_meta'},
	{'namespace': 'torch.Tensor', 'function': 'is_mkldnn'},
	{'namespace': 'torch.Tensor', 'function': 'is_mps'},
	{'namespace': 'torch.Tensor', 'function': 'is_mtia'},
	{'namespace': 'torch.Tensor', 'function': 'is_neg'},
	{'namespace': 'torch.Tensor', 'function': 'is_nested'},
	{'namespace': 'torch.Tensor', 'function': 'is_nonzero'},
	{'namespace': 'torch.Tensor', 'function': 'is_pinned'},
	{'namespace': 'torch.Tensor', 'function': 'is_quantized'},
	{'namespace': 'torch.Tensor', 'function': 'is_same_size'},
	{'namespace': 'torch.Tensor', 'function': 'is_set_to'},
	{'namespace': 'torch.Tensor', 'function': 'is_shared'},
	{'namespace': 'torch.Tensor', 'function': 'is_signed'},
	{'namespace': 'torch.Tensor', 'function': 'is_sparse'},
	{'namespace': 'torch.Tensor', 'function': 'is_sparse_csr'},
	{'namespace': 'torch.Tensor', 'function': 'is_vulkan'},
	{'namespace': 'torch.Tensor', 'function': 'is_xla'},
	{'namespace': 'torch.Tensor', 'function': 'is_xpu'},
	{'namespace': 'torch.Tensor', 'function': 'isclose'},
	{'namespace': 'torch.Tensor', 'function': 'isfinite'},
	{'namespace': 'torch.Tensor', 'function': 'isinf'},
	{'namespace': 'torch.Tensor', 'function': 'isnan'},
	{'namespace': 'torch.Tensor', 'function': 'isneginf'},
	{'namespace': 'torch.Tensor', 'function': 'isposinf'},
	{'namespace': 'torch.Tensor', 'function': 'isreal'},
	{'namespace': 'torch.Tensor', 'function': 'istft'},
	{'namespace': 'torch.Tensor', 'function': 'item'},
	{'namespace': 'torch.Tensor', 'function': 'itemsize'},
	{'namespace': 'torch.Tensor', 'function': 'kron'},
	{'namespace': 'torch.Tensor', 'function': 'kthvalue'},
	{'namespace': 'torch.Tensor', 'function': 'layout'},
	{'namespace': 'torch.Tensor', 'function': 'lcm'},
	{'namespace': 'torch.Tensor', 'function': 'lcm_'},
	{'namespace': 'torch.Tensor', 'function': 'ldexp'},
	{'namespace': 'torch.Tensor', 'function': 'ldexp_'},
	{'namespace': 'torch.Tensor', 'function': 'le'},
	{'namespace': 'torch.Tensor', 'function': 'le_'},
	{'namespace': 'torch.Tensor', 'function': 'lerp'},
	{'namespace': 'torch.Tensor', 'function': 'lerp_'},
	{'namespace': 'torch.Tensor', 'function': 'less'},
	{'namespace': 'torch.Tensor', 'function': 'less_'},
	{'namespace': 'torch.Tensor', 'function': 'less_equal'},
	{'namespace': 'torch.Tensor', 'function': 'less_equal_'},
	{'namespace': 'torch.Tensor', 'function': 'lgamma'},
	{'namespace': 'torch.Tensor', 'function': 'lgamma_'},
	{'namespace': 'torch.Tensor', 'function': 'log'},
	{'namespace': 'torch.Tensor', 'function': 'log10'},
	{'namespace': 'torch.Tensor', 'function': 'log10_'},
	{'namespace': 'torch.Tensor', 'function': 'log1p'},
	{'namespace': 'torch.Tensor', 'function': 'log1p_'},
	{'namespace': 'torch.Tensor', 'function': 'log2'},
	{'namespace': 'torch.Tensor', 'function': 'log2_'},
	{'namespace': 'torch.Tensor', 'function': 'log_'},
	{'namespace': 'torch.Tensor', 'function': 'log_normal_'},
	{'namespace': 'torch.Tensor', 'function': 'log_softmax'},
	{'namespace': 'torch.Tensor', 'function': 'logaddexp'},
	{'namespace': 'torch.Tensor', 'function': 'logaddexp2'},
	{'namespace': 'torch.Tensor', 'function': 'logcumsumexp'},
	{'namespace': 'torch.Tensor', 'function': 'logdet'},
	{'namespace': 'torch.Tensor', 'function': 'logical_and'},
	{'namespace': 'torch.Tensor', 'function': 'logical_and_'},
	{'namespace': 'torch.Tensor', 'function': 'logical_not'},
	{'namespace': 'torch.Tensor', 'function': 'logical_not_'},
	{'namespace': 'torch.Tensor', 'function': 'logical_or'},
	{'namespace': 'torch.Tensor', 'function': 'logical_or_'},
	{'namespace': 'torch.Tensor', 'function': 'logical_xor'},
	{'namespace': 'torch.Tensor', 'function': 'logical_xor_'},
	{'namespace': 'torch.Tensor', 'function': 'logit'},
	{'namespace': 'torch.Tensor', 'function': 'logit_'},
	{'namespace': 'torch.Tensor', 'function': 'logsumexp'},
	{'namespace': 'torch.Tensor', 'function': 'long'},
	{'namespace': 'torch.Tensor', 'function': 'lt'},
	{'namespace': 'torch.Tensor', 'function': 'lt_'},
	{'namespace': 'torch.Tensor', 'function': 'lu'},
	{'namespace': 'torch.Tensor', 'function': 'lu_solve'},
	{'namespace': 'torch.Tensor', 'function': 'mH'},
	{'namespace': 'torch.Tensor', 'function': 'mT'},
	{'namespace': 'torch.Tensor', 'function': 'map2_'},
	{'namespace': 'torch.Tensor', 'function': 'map_'},
	{'namespace': 'torch.Tensor', 'function': 'masked_fill'},
	{'namespace': 'torch.Tensor', 'function': 'masked_fill_'},
	{'namespace': 'torch.Tensor', 'function': 'masked_scatter'},
	{'namespace': 'torch.Tensor', 'function': 'masked_scatter_'},
	{'namespace': 'torch.Tensor', 'function': 'masked_select'},
	{'namespace': 'torch.Tensor', 'function': 'matmul'},
	{'namespace': 'torch.Tensor', 'function': 'matrix_exp'},
	{'namespace': 'torch.Tensor', 'function': 'matrix_power'},
	{'namespace': 'torch.Tensor', 'function': 'max'},
	{'namespace': 'torch.Tensor', 'function': 'maximum'},
	{'namespace': 'torch.Tensor', 'function': 'mean'},
	{'namespace': 'torch.Tensor', 'function': 'median'},
	{'namespace': 'torch.Tensor', 'function': 'min'},
	{'namespace': 'torch.Tensor', 'function': 'minimum'},
	{'namespace': 'torch.Tensor', 'function': 'mm'},
	{'namespace': 'torch.Tensor', 'function': 'mode'},
	{'namespace': 'torch.Tensor', 'function': 'module_load'},
	{'namespace': 'torch.Tensor', 'function': 'moveaxis'},
	{'namespace': 'torch.Tensor', 'function': 'movedim'},
	{'namespace': 'torch.Tensor', 'function': 'msort'},
	{'namespace': 'torch.Tensor', 'function': 'mtia'},
	{'namespace': 'torch.Tensor', 'function': 'mul'},
	{'namespace': 'torch.Tensor', 'function': 'mul_'},
	{'namespace': 'torch.Tensor', 'function': 'multinomial'},
	{'namespace': 'torch.Tensor', 'function': 'multiply'},
	{'namespace': 'torch.Tensor', 'function': 'multiply_'},
	{'namespace': 'torch.Tensor', 'function': 'mv'},
	{'namespace': 'torch.Tensor', 'function': 'mvlgamma'},
	{'namespace': 'torch.Tensor', 'function': 'mvlgamma_'},
	{'namespace': 'torch.Tensor', 'function': 'name'},
	{'namespace': 'torch.Tensor', 'function': 'names'},
	{'namespace': 'torch.Tensor', 'function': 'nan_to_num'},
	{'namespace': 'torch.Tensor', 'function': 'nan_to_num_'},
	{'namespace': 'torch.Tensor', 'function': 'nanmean'},
	{'namespace': 'torch.Tensor', 'function': 'nanmedian'},
	{'namespace': 'torch.Tensor', 'function': 'nanquantile'},
	{'namespace': 'torch.Tensor', 'function': 'nansum'},
	{'namespace': 'torch.Tensor', 'function': 'narrow'},
	{'namespace': 'torch.Tensor', 'function': 'narrow_copy'},
	{'namespace': 'torch.Tensor', 'function': 'nbytes'},
	{'namespace': 'torch.Tensor', 'function': 'ndim'},
	{'namespace': 'torch.Tensor', 'function': 'ndimension'},
	{'namespace': 'torch.Tensor', 'function': 'ne'},
	{'namespace': 'torch.Tensor', 'function': 'ne_'},
	{'namespace': 'torch.Tensor', 'function': 'neg'},
	{'namespace': 'torch.Tensor', 'function': 'neg_'},
	{'namespace': 'torch.Tensor', 'function': 'negative'},
	{'namespace': 'torch.Tensor', 'function': 'negative_'},
	{'namespace': 'torch.Tensor', 'function': 'nelement'},
	{'namespace': 'torch.Tensor', 'function': 'nextafter'},
	{'namespace': 'torch.Tensor', 'function': 'nextafter_'},
	{'namespace': 'torch.Tensor', 'function': 'nonzero'},
	{'namespace': 'torch.Tensor', 'function': 'nonzero_static'},
	{'namespace': 'torch.Tensor', 'function': 'norm'},
	{'namespace': 'torch.Tensor', 'function': 'normal_'},
	{'namespace': 'torch.Tensor', 'function': 'not_equal'},
	{'namespace': 'torch.Tensor', 'function': 'not_equal_'},
	{'namespace': 'torch.Tensor', 'function': 'numel'},
	{'namespace': 'torch.Tensor', 'function': 'numpy'},
	{'namespace': 'torch.Tensor', 'function': 'orgqr'},
	{'namespace': 'torch.Tensor', 'function': 'ormqr'},
	{'namespace': 'torch.Tensor', 'function': 'outer'},
	{'namespace': 'torch.Tensor', 'function': 'output_nr'},
	{'namespace': 'torch.Tensor', 'function': 'permute'},
	{'namespace': 'torch.Tensor', 'function': 'pin_memory'},
	{'namespace': 'torch.Tensor', 'function': 'pinverse'},
	{'namespace': 'torch.Tensor', 'function': 'polygamma'},
	{'namespace': 'torch.Tensor', 'function': 'polygamma_'},
	{'namespace': 'torch.Tensor', 'function': 'positive'},
	{'namespace': 'torch.Tensor', 'function': 'pow'},
	{'namespace': 'torch.Tensor', 'function': 'pow_'},
	{'namespace': 'torch.Tensor', 'function': 'prelu'},
	{'namespace': 'torch.Tensor', 'function': 'prod'},
	{'namespace': 'torch.Tensor', 'function': 'put'},
	{'namespace': 'torch.Tensor', 'function': 'put_'},
	{'namespace': 'torch.Tensor', 'function': 'q_per_channel_axis'},
	{'namespace': 'torch.Tensor', 'function': 'q_per_channel_scales'},
	{'namespace': 'torch.Tensor', 'function': 'q_per_channel_zero_points'},
	{'namespace': 'torch.Tensor', 'function': 'q_scale'},
	{'namespace': 'torch.Tensor', 'function': 'q_zero_point'},
	{'namespace': 'torch.Tensor', 'function': 'qr'},
	{'namespace': 'torch.Tensor', 'function': 'qscheme'},
	{'namespace': 'torch.Tensor', 'function': 'quantile'},
	{'namespace': 'torch.Tensor', 'function': 'rad2deg'},
	{'namespace': 'torch.Tensor', 'function': 'rad2deg_'},
	{'namespace': 'torch.Tensor', 'function': 'random_'},
	{'namespace': 'torch.Tensor', 'function': 'ravel'},
	{'namespace': 'torch.Tensor', 'function': 'real'},
	{'namespace': 'torch.Tensor', 'function': 'reciprocal'},
	{'namespace': 'torch.Tensor', 'function': 'reciprocal_'},
	{'namespace': 'torch.Tensor', 'function': 'record_stream'},
	{'namespace': 'torch.Tensor', 'function': 'refine_names'},
	{'namespace': 'torch.Tensor', 'function': 'register_hook'},
	{'namespace': 'torch.Tensor', 'function': 'register_post_accumulate_grad_hook'},
	{'namespace': 'torch.Tensor', 'function': 'relu'},
	{'namespace': 'torch.Tensor', 'function': 'relu_'},
	{'namespace': 'torch.Tensor', 'function': 'remainder'},
	{'namespace': 'torch.Tensor', 'function': 'remainder_'},
	{'namespace': 'torch.Tensor', 'function': 'rename'},
	{'namespace': 'torch.Tensor', 'function': 'rename_'},
	{'namespace': 'torch.Tensor', 'function': 'renorm'},
	{'namespace': 'torch.Tensor', 'function': 'renorm_'},
	{'namespace': 'torch.Tensor', 'function': 'repeat'},
	{'namespace': 'torch.Tensor', 'function': 'repeat_interleave'},
	{'namespace': 'torch.Tensor', 'function': 'requires_grad'},
	{'namespace': 'torch.Tensor', 'function': 'requires_grad_'},
	{'namespace': 'torch.Tensor', 'function': 'reshape'},
	{'namespace': 'torch.Tensor', 'function': 'reshape_as'},
	{'namespace': 'torch.Tensor', 'function': 'resize'},
	{'namespace': 'torch.Tensor', 'function': 'resize_'},
	{'namespace': 'torch.Tensor', 'function': 'resize_as'},
	{'namespace': 'torch.Tensor', 'function': 'resize_as_'},
	{'namespace': 'torch.Tensor', 'function': 'resize_as_sparse_'},
	{'namespace': 'torch.Tensor', 'function': 'resolve_conj'},
	{'namespace': 'torch.Tensor', 'function': 'resolve_neg'},
	{'namespace': 'torch.Tensor', 'function': 'retain_grad'},
	{'namespace': 'torch.Tensor', 'function': 'retains_grad'},
	{'namespace': 'torch.Tensor', 'function': 'roll'},
	{'namespace': 'torch.Tensor', 'function': 'rot90'},
	{'namespace': 'torch.Tensor', 'function': 'round'},
	{'namespace': 'torch.Tensor', 'function': 'round_'},
	{'namespace': 'torch.Tensor', 'function': 'row_indices'},
	{'namespace': 'torch.Tensor', 'function': 'rsqrt'},
	{'namespace': 'torch.Tensor', 'function': 'rsqrt_'},
	{'namespace': 'torch.Tensor', 'function': 'scatter'},
	{'namespace': 'torch.Tensor', 'function': 'scatter_'},
	{'namespace': 'torch.Tensor', 'function': 'scatter_add'},
	{'namespace': 'torch.Tensor', 'function': 'scatter_add_'},
	{'namespace': 'torch.Tensor', 'function': 'scatter_reduce'},
	{'namespace': 'torch.Tensor', 'function': 'scatter_reduce_'},
	{'namespace': 'torch.Tensor', 'function': 'select'},
	{'namespace': 'torch.Tensor', 'function': 'select_scatter'},
	{'namespace': 'torch.Tensor', 'function': 'set_'},
	{'namespace': 'torch.Tensor', 'function': 'sgn'},
	{'namespace': 'torch.Tensor', 'function': 'sgn_'},
	{'namespace': 'torch.Tensor', 'function': 'shape'},
	{'namespace': 'torch.Tensor', 'function': 'share_memory_'},
	{'namespace': 'torch.Tensor', 'function': 'short'},
	{'namespace': 'torch.Tensor', 'function': 'sigmoid'},
	{'namespace': 'torch.Tensor', 'function': 'sigmoid_'},
	{'namespace': 'torch.Tensor', 'function': 'sign'},
	{'namespace': 'torch.Tensor', 'function': 'sign_'},
	{'namespace': 'torch.Tensor', 'function': 'signbit'},
	{'namespace': 'torch.Tensor', 'function': 'sin'},
	{'namespace': 'torch.Tensor', 'function': 'sin_'},
	{'namespace': 'torch.Tensor', 'function': 'sinc'},
	{'namespace': 'torch.Tensor', 'function': 'sinc_'},
	{'namespace': 'torch.Tensor', 'function': 'sinh'},
	{'namespace': 'torch.Tensor', 'function': 'sinh_'},
	{'namespace': 'torch.Tensor', 'function': 'size'},
	{'namespace': 'torch.Tensor', 'function': 'slice_inverse'},
	{'namespace': 'torch.Tensor', 'function': 'slice_scatter'},
	{'namespace': 'torch.Tensor', 'function': 'slogdet'},
	{'namespace': 'torch.Tensor', 'function': 'smm'},
	{'namespace': 'torch.Tensor', 'function': 'softmax'},
	{'namespace': 'torch.Tensor', 'function': 'sort'},
	{'namespace': 'torch.Tensor', 'function': 'sparse_dim'},
	{'namespace': 'torch.Tensor', 'function': 'sparse_mask'},
	{'namespace': 'torch.Tensor', 'function': 'sparse_resize_'},
	{'namespace': 'torch.Tensor', 'function': 'sparse_resize_and_clear_'},
	{'namespace': 'torch.Tensor', 'function': 'split'},
	{'namespace': 'torch.Tensor', 'function': 'split_with_sizes'},
	{'namespace': 'torch.Tensor', 'function': 'sqrt'},
	{'namespace': 'torch.Tensor', 'function': 'sqrt_'},
	{'namespace': 'torch.Tensor', 'function': 'square'},
	{'namespace': 'torch.Tensor', 'function': 'square_'},
	{'namespace': 'torch.Tensor', 'function': 'squeeze'},
	{'namespace': 'torch.Tensor', 'function': 'squeeze_'},
	{'namespace': 'torch.Tensor', 'function': 'sspaddmm'},
	{'namespace': 'torch.Tensor', 'function': 'std'},
	{'namespace': 'torch.Tensor', 'function': 'stft'},
	{'namespace': 'torch.Tensor', 'function': 'storage'},
	{'namespace': 'torch.Tensor', 'function': 'storage_offset'},
	{'namespace': 'torch.Tensor', 'function': 'storage_type'},
	{'namespace': 'torch.Tensor', 'function': 'sub'},
	{'namespace': 'torch.Tensor', 'function': 'sub_'},
	{'namespace': 'torch.Tensor', 'function': 'subtract'},
	{'namespace': 'torch.Tensor', 'function': 'subtract_'},
	{'namespace': 'torch.Tensor', 'function': 'sum'},
	{'namespace': 'torch.Tensor', 'function': 'sum_to_size'},
	{'namespace': 'torch.Tensor', 'function': 'svd'},
	{'namespace': 'torch.Tensor', 'function': 'swapaxes'},
	{'namespace': 'torch.Tensor', 'function': 'swapaxes_'},
	{'namespace': 'torch.Tensor', 'function': 'swapdims'},
	{'namespace': 'torch.Tensor', 'function': 'swapdims_'},
	{'namespace': 'torch.Tensor', 'function': 't'},
	{'namespace': 'torch.Tensor', 'function': 't_'},
	{'namespace': 'torch.Tensor', 'function': 'take'},
	{'namespace': 'torch.Tensor', 'function': 'take_along_dim'},
	{'namespace': 'torch.Tensor', 'function': 'tan'},
	{'namespace': 'torch.Tensor', 'function': 'tan_'},
	{'namespace': 'torch.Tensor', 'function': 'tanh'},
	{'namespace': 'torch.Tensor', 'function': 'tanh_'},
	{'namespace': 'torch.Tensor', 'function': 'tensor_split'},
	{'namespace': 'torch.Tensor', 'function': 'tile'},
	{'namespace': 'torch.Tensor', 'function': 'to'},
	{'namespace': 'torch.Tensor', 'function': 'to_dense'},
	{'namespace': 'torch.Tensor', 'function': 'to_mkldnn'},
	{'namespace': 'torch.Tensor', 'function': 'to_sparse'},
	{'namespace': 'torch.Tensor', 'function': 'tolist'},
	{'namespace': 'torch.Tensor', 'function': 'topk'},
	{'namespace': 'torch.Tensor', 'function': 'trace'},
	{'namespace': 'torch.Tensor', 'function': 'transpose'},
	{'namespace': 'torch.Tensor', 'function': 'transpose_'},
	{'namespace': 'torch.Tensor', 'function': 'triangular_solve'},
	{'namespace': 'torch.Tensor', 'function': 'tril'},
	{'namespace': 'torch.Tensor', 'function': 'tril_'},
	{'namespace': 'torch.Tensor', 'function': 'triu'},
	{'namespace': 'torch.Tensor', 'function': 'triu_'},
	{'namespace': 'torch.Tensor', 'function': 'true_divide'},
	{'namespace': 'torch.Tensor', 'function': 'true_divide_'},
	{'namespace': 'torch.Tensor', 'function': 'trunc'},
	{'namespace': 'torch.Tensor', 'function': 'trunc_'},
	{'namespace': 'torch.Tensor', 'function': 'type'},
	{'namespace': 'torch.Tensor', 'function': 'type_as'},
	{'namespace': 'torch.Tensor', 'function': 'unbind'},
	{'namespace': 'torch.Tensor', 'function': 'unfold'},
	{'namespace': 'torch.Tensor', 'function': 'uniform_'},
	{'namespace': 'torch.Tensor', 'function': 'unique'},
	{'namespace': 'torch.Tensor', 'function': 'unique_consecutive'},
	{'namespace': 'torch.Tensor', 'function': 'unsafe_chunk'},
	{'namespace': 'torch.Tensor', 'function': 'unsafe_split'},
	{'namespace': 'torch.Tensor', 'function': 'unsafe_split_with_sizes'},
	{'namespace': 'torch.Tensor', 'function': 'unsqueeze'},
	{'namespace': 'torch.Tensor', 'function': 'unsqueeze_'},
	{'namespace': 'torch.Tensor', 'function': 'untyped_storage'},
	{'namespace': 'torch.Tensor', 'function': 'values'},
	{'namespace': 'torch.Tensor', 'function': 'var'},
	{'namespace': 'torch.Tensor', 'function': 'vdot'},
	{'namespace': 'torch.Tensor', 'function': 'view'},
	{'namespace': 'torch.Tensor', 'function': 'view_as'},
	{'namespace': 'torch.Tensor', 'function': 'volatile'},
	{'namespace': 'torch.Tensor', 'function': 'vsplit'},
	{'namespace': 'torch.Tensor', 'function': 'where'},
	{'namespace': 'torch.Tensor', 'function': 'xlogy'},
	{'namespace': 'torch.Tensor', 'function': 'xlogy_'},
	{'namespace': 'torch.Tensor', 'function': 'xpu'},
	{'namespace': 'torch.Tensor', 'function': 'zero_'},
	{'namespace': 'torch.functional', 'function': 'atleast_1d'},
	{'namespace': 'torch.functional', 'function': 'atleast_2d'},
	{'namespace': 'torch.functional', 'function': 'atleast_3d'},
	{'namespace': 'torch.functional', 'function': 'broadcast_tensors'},
	{'namespace': 'torch.functional', 'function': 'cartesian_prod'},
	{'namespace': 'torch.functional', 'function': 'block_diag'},
	{'namespace': 'torch.functional', 'function': 'cdist'},
	{'namespace': 'torch.functional', 'function': 'chain_matmul'},
	{'namespace': 'torch.functional', 'function': 'einsum'},
	{'namespace': 'torch.functional', 'function': 'istft'},
	{'namespace': 'torch.functional', 'function': 'lu'},
	{'namespace': 'torch.functional', 'function': 'norm'},
	{'namespace': 'torch.functional', 'function': 'meshgrid'},
	{'namespace': 'torch.functional', 'function': 'pca_lowrank'},
	{'namespace': 'torch.functional', 'function': 'split'},
	{'namespace': 'torch.functional', 'function': 'stft'},
	{'namespace': 'torch.functional', 'function': 'svd_lowrank'},
	{'namespace': 'torch.functional', 'function': 'tensordot'},
	{'namespace': 'torch.functional', 'function': 'unique'},
	{'namespace': 'torch.functional', 'function': 'unique_consecutive'},
	{'namespace': 'torch.functional', 'function': 'unravel_index'},
	{'namespace': 'torch.nn.functional', 'function': '_adaptive_max_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': '_adaptive_max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': '_adaptive_max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': '_add_docstr'},
	{'namespace': 'torch.nn.functional', 'function': '_check_key_padding_mask'},
	{'namespace': 'torch.nn.functional', 'function': '_fractional_max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': '_fractional_max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': '_get_softmax_dim'},
	{'namespace': 'torch.nn.functional', 'function': '_in_projection'},
	{'namespace': 'torch.nn.functional', 'function': '_in_projection_packed'},
	{'namespace': 'torch.nn.functional', 'function': '_infer_size'},
	{'namespace': 'torch.nn.functional', 'function': '_is_integer'},
	{'namespace': 'torch.nn.functional', 'function': '_list_with_default'},
	{'namespace': 'torch.nn.functional', 'function': '_max_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': '_max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': '_max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': '_mha_shape_check'},
	{'namespace': 'torch.nn.functional', 'function': '_no_grad_embedding_renorm_'},
	{'namespace': 'torch.nn.functional', 'function': '_overload'},
	{'namespace': 'torch.nn.functional', 'function': '_pair'},
	{'namespace': 'torch.nn.functional', 'function': '_single'},
	{'namespace': 'torch.nn.functional', 'function': '_sym_int'},
	{'namespace': 'torch.nn.functional', 'function': '_threshold'},
	{'namespace': 'torch.nn.functional', 'function': '_triple'},
	{'namespace': 'torch.nn.functional', 'function': '_unpool_output_size'},
	{'namespace': 'torch.nn.functional', 'function': '_verify_batch_size'},
	{'namespace': 'torch.nn.functional', 'function': '_verify_spatial_size'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_avg_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_avg_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_avg_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool1d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool2d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'adaptive_max_pool3d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'affine_grid'},
	{'namespace': 'torch.nn.functional', 'function': 'alpha_dropout'},
	{'namespace': 'torch.nn.functional', 'function': 'avg_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'avg_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'avg_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'batch_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'bilinear'},
	{'namespace': 'torch.nn.functional', 'function': 'binary_cross_entropy'},
	{'namespace': 'torch.nn.functional', 'function': 'binary_cross_entropy_with_logits'},
	{'namespace': 'torch.nn.functional', 'function': 'celu'},
	{'namespace': 'torch.nn.functional', 'function': 'celu_'},
	{'namespace': 'torch.nn.functional', 'function': 'channel_shuffle'},
	{'namespace': 'torch.nn.functional', 'function': 'conv1d'},
	{'namespace': 'torch.nn.functional', 'function': 'conv2d'},
	{'namespace': 'torch.nn.functional', 'function': 'conv3d'},
	{'namespace': 'torch.nn.functional', 'function': 'conv_tbc'},
	{'namespace': 'torch.nn.functional', 'function': 'conv_transpose1d'},
	{'namespace': 'torch.nn.functional', 'function': 'conv_transpose2d'},
	{'namespace': 'torch.nn.functional', 'function': 'conv_transpose3d'},
	{'namespace': 'torch.nn.functional', 'function': 'cosine_embedding_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'cosine_similarity'},
	{'namespace': 'torch.nn.functional', 'function': 'cross_entropy'},
	{'namespace': 'torch.nn.functional', 'function': 'ctc_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'dropout'},
	{'namespace': 'torch.nn.functional', 'function': 'dropout1d'},
	{'namespace': 'torch.nn.functional', 'function': 'dropout2d'},
	{'namespace': 'torch.nn.functional', 'function': 'dropout3d'},
	{'namespace': 'torch.nn.functional', 'function': 'elu'},
	{'namespace': 'torch.nn.functional', 'function': 'elu_'},
	{'namespace': 'torch.nn.functional', 'function': 'embedding'},
	{'namespace': 'torch.nn.functional', 'function': 'embedding_bag'},
	{'namespace': 'torch.nn.functional', 'function': 'feature_alpha_dropout'},
	{'namespace': 'torch.nn.functional', 'function': 'fold'},
	{'namespace': 'torch.nn.functional', 'function': 'fractional_max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'fractional_max_pool2d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'fractional_max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'fractional_max_pool3d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'gaussian_nll_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'gelu'},
	{'namespace': 'torch.nn.functional', 'function': 'glu'},
	{'namespace': 'torch.nn.functional', 'function': 'grid_sample'},
	{'namespace': 'torch.nn.functional', 'function': 'group_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'gumbel_softmax'},
	{'namespace': 'torch.nn.functional', 'function': 'hardshrink'},
	{'namespace': 'torch.nn.functional', 'function': 'hardsigmoid'},
	{'namespace': 'torch.nn.functional', 'function': 'hardtanh'},
	{'namespace': 'torch.nn.functional', 'function': 'hardtanh_'},
	{'namespace': 'torch.nn.functional', 'function': 'hinge_embedding_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'huber_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'instance_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'interpolate'},
	{'namespace': 'torch.nn.functional', 'function': 'kl_div'},
	{'namespace': 'torch.nn.functional', 'function': 'l1_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'layer_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'leaky_relu'},
	{'namespace': 'torch.nn.functional', 'function': 'leaky_relu_'},
	{'namespace': 'torch.nn.functional', 'function': 'linear'},
	{'namespace': 'torch.nn.functional', 'function': 'local_response_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'log_softmax'},
	{'namespace': 'torch.nn.functional', 'function': 'logsigmoid'},
	{'namespace': 'torch.nn.functional', 'function': 'lp_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'lp_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'lp_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'margin_ranking_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool1d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool2d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'max_pool3d_with_indices'},
	{'namespace': 'torch.nn.functional', 'function': 'max_unpool1d'},
	{'namespace': 'torch.nn.functional', 'function': 'max_unpool2d'},
	{'namespace': 'torch.nn.functional', 'function': 'max_unpool3d'},
	{'namespace': 'torch.nn.functional', 'function': 'mish'},
	{'namespace': 'torch.nn.functional', 'function': 'mse_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'multi_head_attention_forward'},
	{'namespace': 'torch.nn.functional', 'function': 'multi_margin_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'multilabel_margin_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'multilabel_soft_margin_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'native_channel_shuffle'},
	{'namespace': 'torch.nn.functional', 'function': 'nll_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'normalize'},
	{'namespace': 'torch.nn.functional', 'function': 'one_hot'},
	{'namespace': 'torch.nn.functional', 'function': 'pad'},
	{'namespace': 'torch.nn.functional', 'function': 'pairwise_distance'},
	{'namespace': 'torch.nn.functional', 'function': 'pdist'},
	{'namespace': 'torch.nn.functional', 'function': 'pixel_shuffle'},
	{'namespace': 'torch.nn.functional', 'function': 'pixel_unshuffle'},
	{'namespace': 'torch.nn.functional', 'function': 'poisson_nll_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'prelu'},
	{'namespace': 'torch.nn.functional', 'function': 'relu'},
	{'namespace': 'torch.nn.functional', 'function': 'relu6'},
	{'namespace': 'torch.nn.functional', 'function': 'relu_'},
	{'namespace': 'torch.nn.functional', 'function': 'rms_norm'},
	{'namespace': 'torch.nn.functional', 'function': 'rrelu'},
	{'namespace': 'torch.nn.functional', 'function': 'rrelu_'},
	{'namespace': 'torch.nn.functional', 'function': 'scaled_dot_product_attention'},
	{'namespace': 'torch.nn.functional', 'function': 'selu'},
	{'namespace': 'torch.nn.functional', 'function': 'selu_'},
	{'namespace': 'torch.nn.functional', 'function': 'silu'},
	{'namespace': 'torch.nn.functional', 'function': 'smooth_l1_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'soft_margin_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'softmax'},
	{'namespace': 'torch.nn.functional', 'function': 'softmin'},
	{'namespace': 'torch.nn.functional', 'function': 'softplus'},
	{'namespace': 'torch.nn.functional', 'function': 'softshrink'},
	{'namespace': 'torch.nn.functional', 'function': 'softsign'},
	{'namespace': 'torch.nn.functional', 'function': 'tanhshrink'},
	{'namespace': 'torch.nn.functional', 'function': 'threshold'},
	{'namespace': 'torch.nn.functional', 'function': 'threshold_'},
	{'namespace': 'torch.nn.functional', 'function': 'triplet_margin_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'triplet_margin_with_distance_loss'},
	{'namespace': 'torch.nn.functional', 'function': 'unfold'},
	{'namespace': 'torch.nn.functional', 'function': 'upsample'},
	{'namespace': 'torch.nn.functional', 'function': 'upsample_bilinear'},
	{'namespace': 'torch.nn.functional', 'function': 'upsample_nearest'},
	{'namespace': 'torch.nn.functional', 'function': 'handle_torch_function'},
	{'namespace': 'torch.nn.functional', 'function': 'sigmoid'},
	{'namespace': 'torch.nn.functional', 'function': 'hardsigmoid'},
	{'namespace': 'torch.nn.functional', 'function': 'tanh'},
	{'namespace': 'torch.nn.functional', 'function': 'hardswish'},
	{'namespace': 'torch.nn.init', 'function': '_FanMode'},
	{'namespace': 'torch.nn.init', 'function': '_NonlinearityType'},
	{'namespace': 'torch.nn.init', 'function': '_Optional'},
	{'namespace': 'torch.nn.init', 'function': '_calculate_correct_fan'},
	{'namespace': 'torch.nn.init', 'function': '_calculate_fan_in_and_fan_out'},
	{'namespace': 'torch.nn.init', 'function': '_make_deprecate'},
	{'namespace': 'torch.nn.init', 'function': '_no_grad_fill_'},
	{'namespace': 'torch.nn.init', 'function': '_no_grad_normal_'},
	{'namespace': 'torch.nn.init', 'function': '_no_grad_trunc_normal_'},
	{'namespace': 'torch.nn.init', 'function': '_no_grad_uniform_'},
	{'namespace': 'torch.nn.init', 'function': '_no_grad_zero_'},
	{'namespace': 'torch.nn.init', 'function': 'constant_'},
	{'namespace': 'torch.nn.init', 'function': 'dirac_'},
	{'namespace': 'torch.nn.init', 'function': 'eye_'},
	{'namespace': 'torch.nn.init', 'function': 'kaiming_normal_'},
	{'namespace': 'torch.nn.init', 'function': 'kaiming_uniform_'},
	{'namespace': 'torch.nn.init', 'function': 'normal_'},
	{'namespace': 'torch.nn.init', 'function': 'ones_'},
	{'namespace': 'torch.nn.init', 'function': 'orthogonal_'},
	{'namespace': 'torch.nn.init', 'function': 'sparse_'},
	{'namespace': 'torch.nn.init', 'function': 'trunc_normal_'},
	{'namespace': 'torch.nn.init', 'function': 'uniform_'},
	{'namespace': 'torch.nn.init', 'function': 'xavier_normal_'},
	{'namespace': 'torch.nn.init', 'function': 'xavier_uniform_'},
	{'namespace': 'torch.nn.init', 'function': 'zeros_'},
	{'namespace': 'torch.nn.init', 'function': '_P'},
	{'namespace': 'torch.linalg', 'function': '_add_docstr'},
	{'namespace': 'torch.linalg', 'function': 'cholesky'},
	{'namespace': 'torch.linalg', 'function': 'cholesky_ex'},
	{'namespace': 'torch.linalg', 'function': 'cond'},
	{'namespace': 'torch.linalg', 'function': 'cross'},
	{'namespace': 'torch.linalg', 'function': 'det'},
	{'namespace': 'torch.linalg', 'function': 'diagonal'},
	{'namespace': 'torch.linalg', 'function': 'eig'},
	{'namespace': 'torch.linalg', 'function': 'eigh'},
	{'namespace': 'torch.linalg', 'function': 'eigvals'},
	{'namespace': 'torch.linalg', 'function': 'eigvalsh'},
	{'namespace': 'torch.linalg', 'function': 'householder_product'},
	{'namespace': 'torch.linalg', 'function': 'inv'},
	{'namespace': 'torch.linalg', 'function': 'inv_ex'},
	{'namespace': 'torch.linalg', 'function': 'ldl_factor'},
	{'namespace': 'torch.linalg', 'function': 'ldl_factor_ex'},
	{'namespace': 'torch.linalg', 'function': 'ldl_solve'},
	{'namespace': 'torch.linalg', 'function': 'lstsq'},
	{'namespace': 'torch.linalg', 'function': 'lu'},
	{'namespace': 'torch.linalg', 'function': 'lu_factor'},
	{'namespace': 'torch.linalg', 'function': 'lu_factor_ex'},
	{'namespace': 'torch.linalg', 'function': 'lu_solve'},
	{'namespace': 'torch.linalg', 'function': 'matmul'},
	{'namespace': 'torch.linalg', 'function': 'matrix_exp'},
	{'namespace': 'torch.linalg', 'function': 'matrix_norm'},
	{'namespace': 'torch.linalg', 'function': 'matrix_power'},
	{'namespace': 'torch.linalg', 'function': 'matrix_rank'},
	{'namespace': 'torch.linalg', 'function': 'multi_dot'},
	{'namespace': 'torch.linalg', 'function': 'norm'},
	{'namespace': 'torch.linalg', 'function': 'pinv'},
	{'namespace': 'torch.linalg', 'function': 'qr'},
	{'namespace': 'torch.linalg', 'function': 'slogdet'},
	{'namespace': 'torch.linalg', 'function': 'solve'},
	{'namespace': 'torch.linalg', 'function': 'solve_ex'},
	{'namespace': 'torch.linalg', 'function': 'solve_triangular'},
	{'namespace': 'torch.linalg', 'function': 'svd'},
	{'namespace': 'torch.linalg', 'function': 'svdvals'},
	{'namespace': 'torch.linalg', 'function': 'tensorinv'},
	{'namespace': 'torch.linalg', 'function': 'tensorsolve'},
	{'namespace': 'torch.linalg', 'function': 'vander'},
	{'namespace': 'torch.linalg', 'function': 'vecdot'},
	{'namespace': 'torch.linalg', 'function': 'vector_norm'},
	{'namespace': 'torch', 'function': 'autocast'},
	{'namespace': 'torch', 'function': 'cudnn_convolution'},
	{'namespace': 'torch', 'function': 'cudnn_is_acceptable'},
	{'namespace': 'torch', 'function': 'cudnn_batch_norm'},
	{'namespace': 'torch', 'function': 'chunk'},
	{'namespace': 'torch', 'function': 'manual_seed'},
	{'namespace': 'torch', 'function': '_dyn_quant_matmul_4bit'},
	{'namespace': 'torch', 'function': '_dyn_quant_pack_4bit_weight'},
	{'namespace': 'torch', 'function': '_fused_rms_norm'},
	{'namespace': 'torch', 'function': '_grouped_mm'},
	{'namespace': 'torch', 'function': '_scaled_grouped_mm'},
	{'namespace': 'torch', 'function': '_weight_int4pack_mm_with_scales_and_zeros'},
	{'namespace': 'torch', 'function': 'lobpcg'},
	{'namespace': 'torch', 'function': 'matmul'},
	{'namespace': 'torch', 'function': 'split'},
	{'namespace': 'torch', 'function': 'stack'},
	{'namespace': 'torch', 'function': 'sym_float'},
	{'namespace': 'torch', 'function': 'sym_int'},
	{'namespace': 'torch', 'function': 'sym_ite'},
	{'namespace': 'torch', 'function': 'sym_max'},
	{'namespace': 'torch', 'function': 'sym_min'},
	{'namespace': 'torch', 'function': 'sym_not'},
	{'namespace': 'torch', 'function': 'sym_sum'},
	{'namespace': 'torch', 'function': 'unravel_index'},
	{'namespace': 'torch', 'function': 'sym_sqrt'},
	{'namespace': 'torch', 'function': 'abs'},
	{'namespace': 'torch', 'function': 'abs_'},
	{'namespace': 'torch', 'function': 'absolute'},
	{'namespace': 'torch', 'function': 'acos'},
	{'namespace': 'torch', 'function': 'acos_'},
	{'namespace': 'torch', 'function': 'acosh'},
	{'namespace': 'torch', 'function': 'acosh_'},
	{'namespace': 'torch', 'function': 'adaptive_avg_pool1d'},
	{'namespace': 'torch', 'function': 'adaptive_max_pool1d'},
	{'namespace': 'torch', 'function': 'add'},
	{'namespace': 'torch', 'function': 'addbmm'},
	{'namespace': 'torch', 'function': 'addcdiv'},
	{'namespace': 'torch', 'function': 'addcmul'},
	{'namespace': 'torch', 'function': 'addmm'},
	{'namespace': 'torch', 'function': 'addmv'},
	{'namespace': 'torch', 'function': 'addmv_'},
	{'namespace': 'torch', 'function': 'addr'},
	{'namespace': 'torch', 'function': 'adjoint'},
	{'namespace': 'torch', 'function': 'affine_grid_generator'},
	{'namespace': 'torch', 'function': 'alias_copy'},
	{'namespace': 'torch', 'function': 'all'},
	{'namespace': 'torch', 'function': 'allclose'},
	{'namespace': 'torch', 'function': 'alpha_dropout'},
	{'namespace': 'torch', 'function': 'alpha_dropout_'},
	{'namespace': 'torch', 'function': 'amax'},
	{'namespace': 'torch', 'function': 'amin'},
	{'namespace': 'torch', 'function': 'aminmax'},
	{'namespace': 'torch', 'function': 'angle'},
	{'namespace': 'torch', 'function': 'any'},
	{'namespace': 'torch', 'function': 'arccos'},
	{'namespace': 'torch', 'function': 'arccos_'},
	{'namespace': 'torch', 'function': 'arccosh'},
	{'namespace': 'torch', 'function': 'arccosh_'},
	{'namespace': 'torch', 'function': 'arcsin'},
	{'namespace': 'torch', 'function': 'arcsin_'},
	{'namespace': 'torch', 'function': 'arcsinh'},
	{'namespace': 'torch', 'function': 'arcsinh_'},
	{'namespace': 'torch', 'function': 'arctan'},
	{'namespace': 'torch', 'function': 'arctan2'},
	{'namespace': 'torch', 'function': 'arctan_'},
	{'namespace': 'torch', 'function': 'arctanh'},
	{'namespace': 'torch', 'function': 'arctanh_'},
	{'namespace': 'torch', 'function': 'argmax'},
	{'namespace': 'torch', 'function': 'argmin'},
	{'namespace': 'torch', 'function': 'argsort'},
	{'namespace': 'torch', 'function': 'argwhere'},
	{'namespace': 'torch', 'function': 'as_strided_'},
	{'namespace': 'torch', 'function': 'as_strided_copy'},
	{'namespace': 'torch', 'function': 'load'},
	{'namespace': 'torch', 'function': 'as_tensor'},
	{'namespace': 'torch', 'function': 'from_numpy'},
	# {'namespace': 'torch', 'function': 'tensor'},
	{'namespace': 'torch', 'function': 'arange'},
	{'namespace': 'torch', 'function': 'as_strided'},
	{'namespace': 'torch', 'function': 'bartlett_window'},
	{'namespace': 'torch', 'function': 'blackman_window'},
	{'namespace': 'torch', 'function': 'cudnn_affine_grid_generator'},
	{'namespace': 'torch', 'function': 'cudnn_batch_norm'},
	{'namespace': 'torch', 'function': 'cudnn_convolution'},
	{'namespace': 'torch', 'function': 'cudnn_convolution_transpose'},
	{'namespace': 'torch', 'function': 'cudnn_convolution_relu'},
	{'namespace': 'torch', 'function': 'cudnn_convolution_add_relu'},
	{'namespace': 'torch', 'function': 'cudnn_grid_sampler'},
	{'namespace': 'torch', 'function': 'cudnn_is_acceptable'},
	{'namespace': 'torch', 'function': 'eye'},
	{'namespace': 'torch', 'function': 'from_file'},
	{'namespace': 'torch', 'function': 'full'},
	{'namespace': 'torch', 'function': 'fill_'},
	{'namespace': 'torch', 'function': 'hamming_window'},
	{'namespace': 'torch', 'function': 'hann_window'},
	{'namespace': 'torch', 'function': 'kaiser_window'},
	{'namespace': 'torch', 'function': 'linspace'},
	{'namespace': 'torch', 'function': 'logspace'},
	{'namespace': 'torch', 'function': 'mkldnn_adaptive_avg_pool2d'},
	{'namespace': 'torch', 'function': 'mkldnn_convolution'},
	{'namespace': 'torch', 'function': 'mkldnn_max_pool2d'},
	{'namespace': 'torch', 'function': 'mkldnn_max_pool3d'},
	{'namespace': 'torch', 'function': 'mkldnn_linear_backward_weights'},
	{'namespace': 'torch', 'function': 'normal'},
	{'namespace': 'torch', 'function': 'ones'},
	{'namespace': 'torch', 'function': 'rand'},
	{'namespace': 'torch', 'function': 'randn'},
	{'namespace': 'torch', 'function': 'randint'},
	{'namespace': 'torch', 'function': 'randperm'},
	{'namespace': 'torch', 'function': 'range'},
	{'namespace': 'torch', 'function': 'scalar_tensor'},
	{'namespace': 'torch', 'function': 'sparse_coo_tensor'},
	{'namespace': 'torch', 'function': '_sparse_csr_tensor'},
	{'namespace': 'torch', 'function': 'tril_indices'},
	{'namespace': 'torch', 'function': 'triu_indices'},
	{'namespace': 'torch', 'function': 'vander'},
	{'namespace': 'torch', 'function': 'zeros'},
	{'namespace': 'torch', 'function': 'as_strided_scatter'},
	{'namespace': 'torch', 'function': 'asin'},
	{'namespace': 'torch', 'function': 'asin_'},
	{'namespace': 'torch', 'function': 'asinh'},
	{'namespace': 'torch', 'function': 'asinh_'},
	{'namespace': 'torch', 'function': 'atan'},
	{'namespace': 'torch', 'function': 'atan2'},
	{'namespace': 'torch', 'function': 'atan_'},
	{'namespace': 'torch', 'function': 'atanh'},
	{'namespace': 'torch', 'function': 'atanh_'},
	{'namespace': 'torch', 'function': 'atleast_1d'},
	{'namespace': 'torch', 'function': 'atleast_2d'},
	{'namespace': 'torch', 'function': 'atleast_3d'},
	{'namespace': 'torch', 'function': 'avg_pool1d'},
	{'namespace': 'torch', 'function': 'baddbmm'},
	{'namespace': 'torch', 'function': 'batch_norm'},
	{'namespace': 'torch', 'function': 'batch_norm_backward_elemt'},
	{'namespace': 'torch', 'function': 'batch_norm_backward_reduce'},
	{'namespace': 'torch', 'function': 'batch_norm_elemt'},
	{'namespace': 'torch', 'function': 'batch_norm_gather_stats'},
	{'namespace': 'torch', 'function': 'batch_norm_gather_stats_with_counts'},
	{'namespace': 'torch', 'function': 'batch_norm_stats'},
	{'namespace': 'torch', 'function': 'batch_norm_update_stats'},
	{'namespace': 'torch', 'function': 'bernoulli'},
	{'namespace': 'torch', 'function': 'bilinear'},
	{'namespace': 'torch', 'function': 'binary_cross_entropy_with_logits'},
	{'namespace': 'torch', 'function': 'bincount'},
	{'namespace': 'torch', 'function': 'binomial'},
	{'namespace': 'torch', 'function': 'bitwise_and'},
	{'namespace': 'torch', 'function': 'bitwise_left_shift'},
	{'namespace': 'torch', 'function': 'bitwise_not'},
	{'namespace': 'torch', 'function': 'bitwise_or'},
	{'namespace': 'torch', 'function': 'bitwise_right_shift'},
	{'namespace': 'torch', 'function': 'bitwise_xor'},
	{'namespace': 'torch', 'function': 'block_diag'},
	{'namespace': 'torch', 'function': 'bmm'},
	{'namespace': 'torch', 'function': 'broadcast_tensors'},
	{'namespace': 'torch', 'function': 'broadcast_to'},
	{'namespace': 'torch', 'function': 'bucketize'},
	{'namespace': 'torch', 'function': 'cartesian_prod'},
	{'namespace': 'torch', 'function': 'cat'},
	{'namespace': 'torch', 'function': 'ccol_indices_copy'},
	{'namespace': 'torch', 'function': 'cdist'},
	{'namespace': 'torch', 'function': 'ceil'},
	{'namespace': 'torch', 'function': 'ceil_'},
	{'namespace': 'torch', 'function': 'celu'},
	{'namespace': 'torch', 'function': 'celu_'},
	{'namespace': 'torch', 'function': 'chain_matmul'},
	{'namespace': 'torch', 'function': 'channel_shuffle'},
	{'namespace': 'torch', 'function': 'cholesky'},
	{'namespace': 'torch', 'function': 'cholesky_inverse'},
	{'namespace': 'torch', 'function': 'cholesky_solve'},
	{'namespace': 'torch', 'function': 'choose_qparams_optimized'},
	{'namespace': 'torch', 'function': 'chunk'},
	{'namespace': 'torch', 'function': 'clamp'},
	{'namespace': 'torch', 'function': 'clamp_'},
	{'namespace': 'torch', 'function': 'clamp_max'},
	{'namespace': 'torch', 'function': 'clamp_max_'},
	{'namespace': 'torch', 'function': 'clamp_min'},
	{'namespace': 'torch', 'function': 'clamp_min_'},
	{'namespace': 'torch', 'function': 'clip'},
	{'namespace': 'torch', 'function': 'clip_'},
	{'namespace': 'torch', 'function': 'clone'},
	{'namespace': 'torch', 'function': 'col_indices_copy'},
	{'namespace': 'torch', 'function': 'column_stack'},
	{'namespace': 'torch', 'function': 'combinations'},
	{'namespace': 'torch', 'function': 'complex'},
	{'namespace': 'torch', 'function': 'concat'},
	{'namespace': 'torch', 'function': 'concatenate'},
	{'namespace': 'torch', 'function': 'conj'},
	{'namespace': 'torch', 'function': 'conj_physical'},
	{'namespace': 'torch', 'function': 'conj_physical_'},
	{'namespace': 'torch', 'function': 'constant_pad_nd'},
	{'namespace': 'torch', 'function': 'conv1d'},
	{'namespace': 'torch', 'function': 'conv2d'},
	{'namespace': 'torch', 'function': 'conv3d'},
	{'namespace': 'torch', 'function': 'conv_tbc'},
	{'namespace': 'torch', 'function': 'conv_transpose1d'},
	{'namespace': 'torch', 'function': 'conv_transpose2d'},
	{'namespace': 'torch', 'function': 'conv_transpose3d'},
	{'namespace': 'torch', 'function': 'convolution'},
	{'namespace': 'torch', 'function': 'copysign'},
	{'namespace': 'torch', 'function': 'corrcoef'},
	{'namespace': 'torch', 'function': 'cos'},
	{'namespace': 'torch', 'function': 'cos_'},
	{'namespace': 'torch', 'function': 'cosh'},
	{'namespace': 'torch', 'function': 'cosh_'},
	{'namespace': 'torch', 'function': 'cosine_embedding_loss'},
	{'namespace': 'torch', 'function': 'cosine_similarity'},
	{'namespace': 'torch', 'function': 'count_nonzero'},
	{'namespace': 'torch', 'function': 'cov'},
	{'namespace': 'torch', 'function': 'cross'},
	{'namespace': 'torch', 'function': 'crow_indices_copy'},
	{'namespace': 'torch', 'function': 'ctc_loss'},
	{'namespace': 'torch', 'function': 'cummax'},
	{'namespace': 'torch', 'function': 'cummin'},
	{'namespace': 'torch', 'function': 'cumprod'},
	{'namespace': 'torch', 'function': 'cumsum'},
	{'namespace': 'torch', 'function': 'cumulative_trapezoid'},
	{'namespace': 'torch', 'function': 'deg2rad'},
	{'namespace': 'torch', 'function': 'deg2rad_'},
	{'namespace': 'torch', 'function': 'dequantize'},
	{'namespace': 'torch', 'function': 'det'},
	{'namespace': 'torch', 'function': 'detach'},
	{'namespace': 'torch', 'function': 'detach_'},
	{'namespace': 'torch', 'function': 'detach_copy'},
	{'namespace': 'torch', 'function': 'diag'},
	{'namespace': 'torch', 'function': 'diag_embed'},
	{'namespace': 'torch', 'function': 'diagflat'},
	{'namespace': 'torch', 'function': 'diagonal'},
	{'namespace': 'torch', 'function': 'diagonal_copy'},
	{'namespace': 'torch', 'function': 'diagonal_scatter'},
	{'namespace': 'torch', 'function': 'diff'},
	{'namespace': 'torch', 'function': 'digamma'},
	{'namespace': 'torch', 'function': 'dist'},
	{'namespace': 'torch', 'function': 'div'},
	{'namespace': 'torch', 'function': 'divide'},
	{'namespace': 'torch', 'function': 'dot'},
	{'namespace': 'torch', 'function': 'dropout'},
	{'namespace': 'torch', 'function': 'dropout_'},
	{'namespace': 'torch', 'function': 'dsmm'},
	{'namespace': 'torch', 'function': 'dsplit'},
	{'namespace': 'torch', 'function': 'dstack'},
	{'namespace': 'torch', 'function': 'einsum'},
	{'namespace': 'torch', 'function': 'embedding'},
	{'namespace': 'torch', 'function': 'embedding_bag'},
	{'namespace': 'torch', 'function': 'embedding_renorm_'},
	{'namespace': 'torch', 'function': 'empty_like'},
	{'namespace': 'torch', 'function': 'eq'},
	{'namespace': 'torch', 'function': 'equal'},
	{'namespace': 'torch', 'function': 'erf'},
	{'namespace': 'torch', 'function': 'erf_'},
	{'namespace': 'torch', 'function': 'erfc'},
	{'namespace': 'torch', 'function': 'erfc_'},
	{'namespace': 'torch', 'function': 'erfinv'},
	{'namespace': 'torch', 'function': 'exp'},
	{'namespace': 'torch', 'function': 'exp2'},
	{'namespace': 'torch', 'function': 'exp2_'},
	{'namespace': 'torch', 'function': 'exp_'},
	{'namespace': 'torch', 'function': 'expand_copy'},
	{'namespace': 'torch', 'function': 'expm1'},
	{'namespace': 'torch', 'function': 'expm1_'},
	{'namespace': 'torch', 'function': 'fake_quantize_per_channel_affine'},
	{'namespace': 'torch', 'function': 'fake_quantize_per_tensor_affine'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_fp16_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_fp16_weight_fp32_activation'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_int8_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_int8_weight_fp32_activation'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_quantize_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_pack_gemm_matrix_fp16'},
	{'namespace': 'torch', 'function': 'fbgemm_pack_quantized_matrix'},
	{'namespace': 'torch', 'function': 'feature_alpha_dropout'},
	{'namespace': 'torch', 'function': 'feature_alpha_dropout_'},
	{'namespace': 'torch', 'function': 'feature_dropout'},
	{'namespace': 'torch', 'function': 'feature_dropout_'},
	{'namespace': 'torch', 'function': 'fill_'},
	{'namespace': 'torch', 'function': 'fix'},
	{'namespace': 'torch', 'function': 'fix_'},
	{'namespace': 'torch', 'function': 'flatten'},
	{'namespace': 'torch', 'function': 'flip'},
	{'namespace': 'torch', 'function': 'fliplr'},
	{'namespace': 'torch', 'function': 'flipud'},
	{'namespace': 'torch', 'function': 'float_power'},
	{'namespace': 'torch', 'function': 'floor'},
	{'namespace': 'torch', 'function': 'floor_'},
	{'namespace': 'torch', 'function': 'floor_divide'},
	{'namespace': 'torch', 'function': 'fmax'},
	{'namespace': 'torch', 'function': 'fmin'},
	{'namespace': 'torch', 'function': 'fmod'},
	{'namespace': 'torch', 'function': 'frac'},
	{'namespace': 'torch', 'function': 'frac_'},
	{'namespace': 'torch', 'function': 'frexp'},
	{'namespace': 'torch', 'function': 'frobenius_norm'},
	{'namespace': 'torch', 'function': 'full_like'},
	{'namespace': 'torch', 'function': 'fused_moving_avg_obs_fake_quant'},
	{'namespace': 'torch', 'function': 'gather'},
	{'namespace': 'torch', 'function': 'gcd'},
	{'namespace': 'torch', 'function': 'gcd_'},
	{'namespace': 'torch', 'function': 'ge'},
	{'namespace': 'torch', 'function': 'geqrf'},
	{'namespace': 'torch', 'function': 'ger'},
	{'namespace': 'torch', 'function': 'get_device'},
	{'namespace': 'torch', 'function': 'gradient'},
	{'namespace': 'torch', 'function': 'greater'},
	{'namespace': 'torch', 'function': 'greater_equal'},
	{'namespace': 'torch', 'function': 'grid_sampler'},
	{'namespace': 'torch', 'function': 'grid_sampler_2d'},
	{'namespace': 'torch', 'function': 'grid_sampler_3d'},
	{'namespace': 'torch', 'function': 'group_norm'},
	{'namespace': 'torch', 'function': 'gru'},
	{'namespace': 'torch', 'function': 'gru_cell'},
	{'namespace': 'torch', 'function': 'gt'},
	{'namespace': 'torch', 'function': 'hardshrink'},
	{'namespace': 'torch', 'function': 'heaviside'},
	{'namespace': 'torch', 'function': 'hinge_embedding_loss'},
	{'namespace': 'torch', 'function': 'histc'},
	{'namespace': 'torch', 'function': 'histogram'},
	{'namespace': 'torch', 'function': 'histogramdd'},
	{'namespace': 'torch', 'function': 'hsmm'},
	{'namespace': 'torch', 'function': 'hsplit'},
	{'namespace': 'torch', 'function': 'hspmm'},
	{'namespace': 'torch', 'function': 'hstack'},
	{'namespace': 'torch', 'function': 'hypot'},
	{'namespace': 'torch', 'function': 'i0'},
	{'namespace': 'torch', 'function': 'i0_'},
	{'namespace': 'torch', 'function': 'igamma'},
	{'namespace': 'torch', 'function': 'igammac'},
	{'namespace': 'torch', 'function': 'imag'},
	{'namespace': 'torch', 'function': 'index_add'},
	{'namespace': 'torch', 'function': 'index_copy'},
	{'namespace': 'torch', 'function': 'index_fill'},
	{'namespace': 'torch', 'function': 'index_put'},
	{'namespace': 'torch', 'function': 'index_put_'},
	{'namespace': 'torch', 'function': 'index_reduce'},
	{'namespace': 'torch', 'function': 'index_select'},
	{'namespace': 'torch', 'function': 'indices_copy'},
	{'namespace': 'torch', 'function': 'inner'},
	{'namespace': 'torch', 'function': 'instance_norm'},
	{'namespace': 'torch', 'function': 'int_repr'},
	{'namespace': 'torch', 'function': 'inverse'},
	{'namespace': 'torch', 'function': 'is_complex'},
	{'namespace': 'torch', 'function': 'is_conj'},
	{'namespace': 'torch', 'function': 'is_distributed'},
	{'namespace': 'torch', 'function': 'is_floating_point'},
	{'namespace': 'torch', 'function': 'is_inference'},
	{'namespace': 'torch', 'function': 'is_neg'},
	{'namespace': 'torch', 'function': 'is_nonzero'},
	{'namespace': 'torch', 'function': 'is_same_size'},
	{'namespace': 'torch', 'function': 'is_signed'},
	{'namespace': 'torch', 'function': 'isclose'},
	{'namespace': 'torch', 'function': 'isfinite'},
	{'namespace': 'torch', 'function': 'isin'},
	{'namespace': 'torch', 'function': 'isinf'},
	{'namespace': 'torch', 'function': 'isnan'},
	{'namespace': 'torch', 'function': 'isneginf'},
	{'namespace': 'torch', 'function': 'isposinf'},
	{'namespace': 'torch', 'function': 'isreal'},
	{'namespace': 'torch', 'function': 'istft'},
	{'namespace': 'torch', 'function': 'kl_div'},
	{'namespace': 'torch', 'function': 'kron'},
	{'namespace': 'torch', 'function': 'kthvalue'},
	{'namespace': 'torch', 'function': 'layer_norm'},
	{'namespace': 'torch', 'function': 'lcm'},
	{'namespace': 'torch', 'function': 'lcm_'},
	{'namespace': 'torch', 'function': 'ldexp'},
	{'namespace': 'torch', 'function': 'ldexp_'},
	{'namespace': 'torch', 'function': 'le'},
	{'namespace': 'torch', 'function': 'lerp'},
	{'namespace': 'torch', 'function': 'less'},
	{'namespace': 'torch', 'function': 'less_equal'},
	{'namespace': 'torch', 'function': 'lgamma'},
	{'namespace': 'torch', 'function': 'log'},
	{'namespace': 'torch', 'function': 'log10'},
	{'namespace': 'torch', 'function': 'log10_'},
	{'namespace': 'torch', 'function': 'log1p'},
	{'namespace': 'torch', 'function': 'log1p_'},
	{'namespace': 'torch', 'function': 'log2'},
	{'namespace': 'torch', 'function': 'log2_'},
	{'namespace': 'torch', 'function': 'log_'},
	{'namespace': 'torch', 'function': 'log_softmax'},
	{'namespace': 'torch', 'function': 'logaddexp'},
	{'namespace': 'torch', 'function': 'logaddexp2'},
	{'namespace': 'torch', 'function': 'logcumsumexp'},
	{'namespace': 'torch', 'function': 'logdet'},
	{'namespace': 'torch', 'function': 'logical_and'},
	{'namespace': 'torch', 'function': 'logical_not'},
	{'namespace': 'torch', 'function': 'logical_or'},
	{'namespace': 'torch', 'function': 'logical_xor'},
	{'namespace': 'torch', 'function': 'logit'},
	{'namespace': 'torch', 'function': 'logit_'},
	{'namespace': 'torch', 'function': 'logsumexp'},
	{'namespace': 'torch', 'function': 'lstm'},
	{'namespace': 'torch', 'function': 'lstm_cell'},
	{'namespace': 'torch', 'function': 'lt'},
	{'namespace': 'torch', 'function': 'lu_solve'},
	{'namespace': 'torch', 'function': 'lu_unpack'},
	{'namespace': 'torch', 'function': 'margin_ranking_loss'},
	{'namespace': 'torch', 'function': 'masked_fill'},
	{'namespace': 'torch', 'function': 'masked_scatter'},
	{'namespace': 'torch', 'function': 'masked_select'},
	{'namespace': 'torch', 'function': 'matmul'},
	{'namespace': 'torch', 'function': 'matrix_exp'},
	{'namespace': 'torch', 'function': 'matrix_power'},
	{'namespace': 'torch', 'function': 'max'},
	{'namespace': 'torch', 'function': 'max_pool1d'},
	{'namespace': 'torch', 'function': 'max_pool1d_with_indices'},
	{'namespace': 'torch', 'function': 'max_pool2d'},
	{'namespace': 'torch', 'function': 'max_pool3d'},
	{'namespace': 'torch', 'function': 'maximum'},
	{'namespace': 'torch', 'function': 'mean'},
	{'namespace': 'torch', 'function': 'median'},
	{'namespace': 'torch', 'function': 'meshgrid'},
	{'namespace': 'torch', 'function': 'min'},
	{'namespace': 'torch', 'function': 'minimum'},
	{'namespace': 'torch', 'function': 'miopen_batch_norm'},
	{'namespace': 'torch', 'function': 'miopen_convolution'},
	{'namespace': 'torch', 'function': 'miopen_convolution_add_relu'},
	{'namespace': 'torch', 'function': 'miopen_convolution_relu'},
	{'namespace': 'torch', 'function': 'miopen_convolution_transpose'},
	{'namespace': 'torch', 'function': 'miopen_depthwise_convolution'},
	{'namespace': 'torch', 'function': 'miopen_rnn'},
	{'namespace': 'torch', 'function': 'mm'},
	{'namespace': 'torch', 'function': 'mode'},
	{'namespace': 'torch', 'function': 'moveaxis'},
	{'namespace': 'torch', 'function': 'movedim'},
	{'namespace': 'torch', 'function': 'msort'},
	{'namespace': 'torch', 'function': 'mul'},
	{'namespace': 'torch', 'function': 'multinomial'},
	{'namespace': 'torch', 'function': 'multiply'},
	{'namespace': 'torch', 'function': 'mv'},
	{'namespace': 'torch', 'function': 'mvlgamma'},
	{'namespace': 'torch', 'function': 'nan_to_num'},
	{'namespace': 'torch', 'function': 'nan_to_num_'},
	{'namespace': 'torch', 'function': 'nanmean'},
	{'namespace': 'torch', 'function': 'nanmedian'},
	{'namespace': 'torch', 'function': 'nanquantile'},
	{'namespace': 'torch', 'function': 'nansum'},
	{'namespace': 'torch', 'function': 'narrow'},
	{'namespace': 'torch', 'function': 'narrow_copy'},
	{'namespace': 'torch', 'function': 'native_batch_norm'},
	{'namespace': 'torch', 'function': 'native_channel_shuffle'},
	{'namespace': 'torch', 'function': 'native_dropout'},
	{'namespace': 'torch', 'function': 'native_group_norm'},
	{'namespace': 'torch', 'function': 'native_layer_norm'},
	{'namespace': 'torch', 'function': 'native_norm'},
	{'namespace': 'torch', 'function': 'ne'},
	{'namespace': 'torch', 'function': 'neg'},
	{'namespace': 'torch', 'function': 'neg_'},
	{'namespace': 'torch', 'function': 'negative'},
	{'namespace': 'torch', 'function': 'negative_'},
	{'namespace': 'torch', 'function': 'nextafter'},
	{'namespace': 'torch', 'function': 'nonzero'},
	{'namespace': 'torch', 'function': 'nonzero_static'},
	{'namespace': 'torch', 'function': 'norm'},
	{'namespace': 'torch', 'function': 'norm_except_dim'},
	{'namespace': 'torch', 'function': 'not_equal'},
	{'namespace': 'torch', 'function': 'nuclear_norm'},
	{'namespace': 'torch', 'function': 'numel'},
	{'namespace': 'torch', 'function': 'ones_like'},
	{'namespace': 'torch', 'function': 'orgqr'},
	{'namespace': 'torch', 'function': 'ormqr'},
	{'namespace': 'torch', 'function': 'outer'},
	{'namespace': 'torch', 'function': 'pairwise_distance'},
	{'namespace': 'torch', 'function': 'pdist'},
	{'namespace': 'torch', 'function': 'permute'},
	{'namespace': 'torch', 'function': 'permute_copy'},
	{'namespace': 'torch', 'function': 'pinverse'},
	{'namespace': 'torch', 'function': 'pixel_shuffle'},
	{'namespace': 'torch', 'function': 'pixel_unshuffle'},
	{'namespace': 'torch', 'function': 'poisson'},
	{'namespace': 'torch', 'function': 'poisson_nll_loss'},
	{'namespace': 'torch', 'function': 'polar'},
	{'namespace': 'torch', 'function': 'polygamma'},
	{'namespace': 'torch', 'function': 'positive'},
	{'namespace': 'torch', 'function': 'pow'},
	{'namespace': 'torch', 'function': 'prelu'},
	{'namespace': 'torch', 'function': 'prod'},
	{'namespace': 'torch', 'function': 'put'},
	{'namespace': 'torch', 'function': 'q_per_channel_axis'},
	{'namespace': 'torch', 'function': 'q_per_channel_scales'},
	{'namespace': 'torch', 'function': 'q_per_channel_zero_points'},
	{'namespace': 'torch', 'function': 'q_scale'},
	{'namespace': 'torch', 'function': 'q_zero_point'},
	{'namespace': 'torch', 'function': 'qr'},
	{'namespace': 'torch', 'function': 'quantile'},
	{'namespace': 'torch', 'function': 'quantize_per_channel'},
	{'namespace': 'torch', 'function': 'quantize_per_tensor'},
	{'namespace': 'torch', 'function': 'quantize_per_tensor_dynamic'},
	{'namespace': 'torch', 'function': 'quantized_batch_norm'},
	{'namespace': 'torch', 'function': 'quantized_gru_cell'},
	{'namespace': 'torch', 'function': 'quantized_lstm_cell'},
	{'namespace': 'torch', 'function': 'quantized_max_pool1d'},
	{'namespace': 'torch', 'function': 'quantized_max_pool2d'},
	{'namespace': 'torch', 'function': 'quantized_max_pool3d'},
	{'namespace': 'torch', 'function': 'quantized_rnn_relu_cell'},
	{'namespace': 'torch', 'function': 'quantized_rnn_tanh_cell'},
	{'namespace': 'torch', 'function': 'rad2deg'},
	{'namespace': 'torch', 'function': 'rad2deg_'},
	{'namespace': 'torch', 'function': 'rand_like'},
	{'namespace': 'torch', 'function': 'randint_like'},
	{'namespace': 'torch', 'function': 'randn_like'},
	{'namespace': 'torch', 'function': 'ravel'},
	{'namespace': 'torch', 'function': 'real'},
	{'namespace': 'torch', 'function': 'reciprocal'},
	{'namespace': 'torch', 'function': 'reciprocal_'},
	{'namespace': 'torch', 'function': 'relu'},
	{'namespace': 'torch', 'function': 'relu_'},
	{'namespace': 'torch', 'function': 'remainder'},
	{'namespace': 'torch', 'function': 'renorm'},
	{'namespace': 'torch', 'function': 'repeat_interleave'},
	{'namespace': 'torch', 'function': 'reshape'},
	{'namespace': 'torch', 'function': 'resize_as_'},
	{'namespace': 'torch', 'function': 'resize_as_sparse_'},
	{'namespace': 'torch', 'function': 'resolve_conj'},
	{'namespace': 'torch', 'function': 'resolve_neg'},
	{'namespace': 'torch', 'function': 'rms_norm'},
	{'namespace': 'torch', 'function': 'rnn_relu'},
	{'namespace': 'torch', 'function': 'rnn_relu_cell'},
	{'namespace': 'torch', 'function': 'rnn_tanh'},
	{'namespace': 'torch', 'function': 'rnn_tanh_cell'},
	{'namespace': 'torch', 'function': 'roll'},
	{'namespace': 'torch', 'function': 'rot90'},
	{'namespace': 'torch', 'function': 'round'},
	{'namespace': 'torch', 'function': 'round_'},
	{'namespace': 'torch', 'function': 'row_indices_copy'},
	{'namespace': 'torch', 'function': 'row_stack'},
	{'namespace': 'torch', 'function': 'rrelu'},
	{'namespace': 'torch', 'function': 'rrelu_'},
	{'namespace': 'torch', 'function': 'rsqrt'},
	{'namespace': 'torch', 'function': 'rsqrt_'},
	{'namespace': 'torch', 'function': 'rsub'},
	{'namespace': 'torch', 'function': 'saddmm'},
	{'namespace': 'torch', 'function': 'scatter'},
	{'namespace': 'torch', 'function': 'scatter_add'},
	{'namespace': 'torch', 'function': 'scatter_reduce'},
	{'namespace': 'torch', 'function': 'searchsorted'},
	{'namespace': 'torch', 'function': 'select'},
	{'namespace': 'torch', 'function': 'select_copy'},
	{'namespace': 'torch', 'function': 'select_scatter'},
	{'namespace': 'torch', 'function': 'selu'},
	{'namespace': 'torch', 'function': 'selu_'},
	{'namespace': 'torch', 'function': 'sgn'},
	{'namespace': 'torch', 'function': 'sigmoid'},
	{'namespace': 'torch', 'function': 'sigmoid_'},
	{'namespace': 'torch', 'function': 'sign'},
	{'namespace': 'torch', 'function': 'signbit'},
	{'namespace': 'torch', 'function': 'sin'},
	{'namespace': 'torch', 'function': 'sin_'},
	{'namespace': 'torch', 'function': 'sinc'},
	{'namespace': 'torch', 'function': 'sinc_'},
	{'namespace': 'torch', 'function': 'sinh'},
	{'namespace': 'torch', 'function': 'sinh_'},
	{'namespace': 'torch', 'function': 'slice_copy'},
	{'namespace': 'torch', 'function': 'slice_inverse'},
	{'namespace': 'torch', 'function': 'slice_scatter'},
	{'namespace': 'torch', 'function': 'slogdet'},
	{'namespace': 'torch', 'function': 'smm'},
	{'namespace': 'torch', 'function': 'softmax'},
	{'namespace': 'torch', 'function': 'sort'},
	{'namespace': 'torch', 'function': 'split'},
	{'namespace': 'torch', 'function': 'split_copy'},
	{'namespace': 'torch', 'function': 'split_with_sizes'},
	{'namespace': 'torch', 'function': 'split_with_sizes_copy'},
	{'namespace': 'torch', 'function': 'spmm'},
	{'namespace': 'torch', 'function': 'sqrt'},
	{'namespace': 'torch', 'function': 'sqrt_'},
	{'namespace': 'torch', 'function': 'square'},
	{'namespace': 'torch', 'function': 'square_'},
	{'namespace': 'torch', 'function': 'squeeze'},
	{'namespace': 'torch', 'function': 'squeeze_copy'},
	{'namespace': 'torch', 'function': 'sspaddmm'},
	{'namespace': 'torch', 'function': 'stack'},
	{'namespace': 'torch', 'function': 'std'},
	{'namespace': 'torch', 'function': 'std_mean'},
	{'namespace': 'torch', 'function': 'stft'},
	{'namespace': 'torch', 'function': 'sub'},
	{'namespace': 'torch', 'function': 'subtract'},
	{'namespace': 'torch', 'function': 'sum'},
	{'namespace': 'torch', 'function': 'svd'},
	{'namespace': 'torch', 'function': 'swapaxes'},
	{'namespace': 'torch', 'function': 'swapdims'},
	{'namespace': 'torch', 'function': 't'},
	{'namespace': 'torch', 'function': 't_copy'},
	{'namespace': 'torch', 'function': 'take'},
	{'namespace': 'torch', 'function': 'take_along_dim'},
	{'namespace': 'torch', 'function': 'tan'},
	{'namespace': 'torch', 'function': 'tan_'},
	{'namespace': 'torch', 'function': 'tanh'},
	{'namespace': 'torch', 'function': 'tanh_'},
	{'namespace': 'torch', 'function': 'tensor_split'},
	{'namespace': 'torch', 'function': 'tensordot'},
	{'namespace': 'torch', 'function': 'threshold'},
	{'namespace': 'torch', 'function': 'threshold_'},
	{'namespace': 'torch', 'function': 'tile'},
	{'namespace': 'torch', 'function': 'topk'},
	{'namespace': 'torch', 'function': 'trace'},
	{'namespace': 'torch', 'function': 'transpose'},
	{'namespace': 'torch', 'function': 'transpose_copy'},
	{'namespace': 'torch', 'function': 'trapezoid'},
	{'namespace': 'torch', 'function': 'trapz'},
	{'namespace': 'torch', 'function': 'triangular_solve'},
	{'namespace': 'torch', 'function': 'tril'},
	{'namespace': 'torch', 'function': 'triplet_margin_loss'},
	{'namespace': 'torch', 'function': 'triu'},
	{'namespace': 'torch', 'function': 'true_divide'},
	{'namespace': 'torch', 'function': 'trunc'},
	{'namespace': 'torch', 'function': 'trunc_'},
	{'namespace': 'torch', 'function': 'unbind'},
	{'namespace': 'torch', 'function': 'unbind_copy'},
	{'namespace': 'torch', 'function': 'unflatten'},
	{'namespace': 'torch', 'function': 'unfold_copy'},
	{'namespace': 'torch', 'function': 'unique_consecutive'},
	{'namespace': 'torch', 'function': 'unsafe_chunk'},
	{'namespace': 'torch', 'function': 'unsafe_split'},
	{'namespace': 'torch', 'function': 'unsafe_split_with_sizes'},
	{'namespace': 'torch', 'function': 'unsqueeze'},
	{'namespace': 'torch', 'function': 'unsqueeze_copy'},
	{'namespace': 'torch', 'function': 'values_copy'},
	{'namespace': 'torch', 'function': 'var'},
	{'namespace': 'torch', 'function': 'var_mean'},
	{'namespace': 'torch', 'function': 'vdot'},
	{'namespace': 'torch', 'function': 'view_as_complex'},
	{'namespace': 'torch', 'function': 'view_as_complex_copy'},
	{'namespace': 'torch', 'function': 'view_as_real'},
	{'namespace': 'torch', 'function': 'view_as_real_copy'},
	{'namespace': 'torch', 'function': 'view_copy'},
	{'namespace': 'torch', 'function': 'vsplit'},
	{'namespace': 'torch', 'function': 'vstack'},
	{'namespace': 'torch', 'function': 'where'},
	{'namespace': 'torch', 'function': 'xlogy'},
	{'namespace': 'torch', 'function': 'xlogy_'},
	{'namespace': 'torch', 'function': 'zero_'},
	{'namespace': 'torch', 'function': 'zeros_like'},
	{'namespace': 'torch', 'function': '_adaptive_avg_pool2d'},
	{'namespace': 'torch', 'function': '_adaptive_avg_pool3d'},
	{'namespace': 'torch', 'function': '_add_batch_dim'},
	{'namespace': 'torch', 'function': '_add_relu'},
	{'namespace': 'torch', 'function': '_add_relu_'},
	{'namespace': 'torch', 'function': '_addmm_activation'},
	{'namespace': 'torch', 'function': '_aminmax'},
	{'namespace': 'torch', 'function': '_amp_foreach_non_finite_check_and_unscale_'},
	{'namespace': 'torch', 'function': '_amp_update_scale_'},
	{'namespace': 'torch', 'function': '_assert_async'},
	{'namespace': 'torch', 'function': '_assert_scalar'},
	{'namespace': 'torch', 'function': '_assert_tensor_metadata'},
	{'namespace': 'torch', 'function': '_batch_norm_impl_index'},
	{'namespace': 'torch', 'function': '_cast_Byte'},
	{'namespace': 'torch', 'function': '_cast_Char'},
	{'namespace': 'torch', 'function': '_cast_Double'},
	{'namespace': 'torch', 'function': '_cast_Float'},
	{'namespace': 'torch', 'function': '_cast_Half'},
	{'namespace': 'torch', 'function': '_cast_Int'},
	{'namespace': 'torch', 'function': '_cast_Long'},
	{'namespace': 'torch', 'function': '_cast_Short'},
	{'namespace': 'torch', 'function': '_choose_qparams_per_tensor'},
	{'namespace': 'torch', 'function': '_chunk_cat'},
	{'namespace': 'torch', 'function': '_coalesce'},
	{'namespace': 'torch', 'function': '_compute_linear_combination'},
	{'namespace': 'torch', 'function': '_conj'},
	{'namespace': 'torch', 'function': '_conj_copy'},
	{'namespace': 'torch', 'function': '_conj_physical'},
	{'namespace': 'torch', 'function': '_convert_indices_from_coo_to_csr'},
	{'namespace': 'torch', 'function': '_convert_indices_from_csr_to_coo'},
	{'namespace': 'torch', 'function': '_convert_weight_to_int4pack'},
	{'namespace': 'torch', 'function': '_convert_weight_to_int4pack_for_cpu'},
	{'namespace': 'torch', 'function': '_convolution'},
	{'namespace': 'torch', 'function': '_convolution_mode'},
	{'namespace': 'torch', 'function': '_copy_from'},
	{'namespace': 'torch', 'function': '_copy_from_and_resize'},
	{'namespace': 'torch', 'function': '_cslt_compress'},
	{'namespace': 'torch', 'function': '_cslt_sparse_mm'},
	{'namespace': 'torch', 'function': '_cslt_sparse_mm_search'},
	{'namespace': 'torch', 'function': '_ctc_loss'},
	{'namespace': 'torch', 'function': '_cudnn_ctc_loss'},
	{'namespace': 'torch', 'function': '_cudnn_init_dropout_state'},
	{'namespace': 'torch', 'function': '_cudnn_rnn'},
	{'namespace': 'torch', 'function': '_cudnn_rnn_flatten_weight'},
	{'namespace': 'torch', 'function': '_cufft_clear_plan_cache'},
	{'namespace': 'torch', 'function': '_cufft_get_plan_cache_max_size'},
	{'namespace': 'torch', 'function': '_cufft_get_plan_cache_size'},
	{'namespace': 'torch', 'function': '_cufft_set_plan_cache_max_size'},
	{'namespace': 'torch', 'function': '_cummax_helper'},
	{'namespace': 'torch', 'function': '_cummin_helper'},
	{'namespace': 'torch', 'function': '_debug_has_internal_overlap'},
	{'namespace': 'torch', 'function': '_dim_arange'},
	{'namespace': 'torch', 'function': '_dirichlet_grad'},
	{'namespace': 'torch', 'function': '_efficientzerotensor'},
	{'namespace': 'torch', 'function': '_embedding_bag'},
	{'namespace': 'torch', 'function': '_embedding_bag_forward_only'},
	{'namespace': 'torch', 'function': '_empty_affine_quantized'},
	{'namespace': 'torch', 'function': '_empty_per_channel_affine_quantized'},
	{'namespace': 'torch', 'function': '_euclidean_dist'},
	{'namespace': 'torch', 'function': '_fake_quantize_learnable_per_channel_affine'},
	{'namespace': 'torch', 'function': '_fake_quantize_learnable_per_tensor_affine'},
	{'namespace': 'torch', 'function': '_fake_quantize_per_tensor_affine_cachemask_tensor_qparams'},
	{'namespace': 'torch', 'function': '_fft_c2c'},
	{'namespace': 'torch', 'function': '_fft_c2r'},
	{'namespace': 'torch', 'function': '_fft_r2c'},
	{'namespace': 'torch', 'function': '_fill_mem_eff_dropout_mask_'},
	{'namespace': 'torch', 'function': '_foobar'},
	{'namespace': 'torch', 'function': '_foreach_abs'},
	{'namespace': 'torch', 'function': '_foreach_abs_'},
	{'namespace': 'torch', 'function': '_foreach_acos'},
	{'namespace': 'torch', 'function': '_foreach_acos_'},
	{'namespace': 'torch', 'function': '_foreach_add'},
	{'namespace': 'torch', 'function': '_foreach_add_'},
	{'namespace': 'torch', 'function': '_foreach_addcdiv'},
	{'namespace': 'torch', 'function': '_foreach_addcdiv_'},
	{'namespace': 'torch', 'function': '_foreach_addcmul'},
	{'namespace': 'torch', 'function': '_foreach_addcmul_'},
	{'namespace': 'torch', 'function': '_foreach_asin'},
	{'namespace': 'torch', 'function': '_foreach_asin_'},
	{'namespace': 'torch', 'function': '_foreach_atan'},
	{'namespace': 'torch', 'function': '_foreach_atan_'},
	{'namespace': 'torch', 'function': '_foreach_ceil'},
	{'namespace': 'torch', 'function': '_foreach_ceil_'},
	{'namespace': 'torch', 'function': '_foreach_clamp_max'},
	{'namespace': 'torch', 'function': '_foreach_clamp_max_'},
	{'namespace': 'torch', 'function': '_foreach_clamp_min'},
	{'namespace': 'torch', 'function': '_foreach_clamp_min_'},
	{'namespace': 'torch', 'function': '_foreach_copy_'},
	{'namespace': 'torch', 'function': '_foreach_cos'},
	{'namespace': 'torch', 'function': '_foreach_cos_'},
	{'namespace': 'torch', 'function': '_foreach_cosh'},
	{'namespace': 'torch', 'function': '_foreach_cosh_'},
	{'namespace': 'torch', 'function': '_foreach_div'},
	{'namespace': 'torch', 'function': '_foreach_div_'},
	{'namespace': 'torch', 'function': '_foreach_erf'},
	{'namespace': 'torch', 'function': '_foreach_erf_'},
	{'namespace': 'torch', 'function': '_foreach_erfc'},
	{'namespace': 'torch', 'function': '_foreach_erfc_'},
	{'namespace': 'torch', 'function': '_foreach_exp'},
	{'namespace': 'torch', 'function': '_foreach_exp_'},
	{'namespace': 'torch', 'function': '_foreach_expm1'},
	{'namespace': 'torch', 'function': '_foreach_expm1_'},
	{'namespace': 'torch', 'function': '_foreach_floor'},
	{'namespace': 'torch', 'function': '_foreach_floor_'},
	{'namespace': 'torch', 'function': '_foreach_frac'},
	{'namespace': 'torch', 'function': '_foreach_frac_'},
	{'namespace': 'torch', 'function': '_foreach_lerp'},
	{'namespace': 'torch', 'function': '_foreach_lerp_'},
	{'namespace': 'torch', 'function': '_foreach_lgamma'},
	{'namespace': 'torch', 'function': '_foreach_lgamma_'},
	{'namespace': 'torch', 'function': '_foreach_log'},
	{'namespace': 'torch', 'function': '_foreach_log10'},
	{'namespace': 'torch', 'function': '_foreach_log10_'},
	{'namespace': 'torch', 'function': '_foreach_log1p'},
	{'namespace': 'torch', 'function': '_foreach_log1p_'},
	{'namespace': 'torch', 'function': '_foreach_log2'},
	{'namespace': 'torch', 'function': '_foreach_log2_'},
	{'namespace': 'torch', 'function': '_foreach_log_'},
	{'namespace': 'torch', 'function': '_foreach_max'},
	{'namespace': 'torch', 'function': '_foreach_maximum'},
	{'namespace': 'torch', 'function': '_foreach_maximum_'},
	{'namespace': 'torch', 'function': '_foreach_minimum'},
	{'namespace': 'torch', 'function': '_foreach_minimum_'},
	{'namespace': 'torch', 'function': '_foreach_mul'},
	{'namespace': 'torch', 'function': '_foreach_mul_'},
	{'namespace': 'torch', 'function': '_foreach_neg'},
	{'namespace': 'torch', 'function': '_foreach_neg_'},
	{'namespace': 'torch', 'function': '_foreach_norm'},
	{'namespace': 'torch', 'function': '_foreach_pow'},
	{'namespace': 'torch', 'function': '_foreach_pow_'},
	{'namespace': 'torch', 'function': '_foreach_reciprocal'},
	{'namespace': 'torch', 'function': '_foreach_reciprocal_'},
	{'namespace': 'torch', 'function': '_foreach_round'},
	{'namespace': 'torch', 'function': '_foreach_round_'},
	{'namespace': 'torch', 'function': '_foreach_rsqrt'},
	{'namespace': 'torch', 'function': '_foreach_rsqrt_'},
	{'namespace': 'torch', 'function': '_foreach_sigmoid'},
	{'namespace': 'torch', 'function': '_foreach_sigmoid_'},
	{'namespace': 'torch', 'function': '_foreach_sign'},
	{'namespace': 'torch', 'function': '_foreach_sign_'},
	{'namespace': 'torch', 'function': '_foreach_sin'},
	{'namespace': 'torch', 'function': '_foreach_sin_'},
	{'namespace': 'torch', 'function': '_foreach_sinh'},
	{'namespace': 'torch', 'function': '_foreach_sinh_'},
	{'namespace': 'torch', 'function': '_foreach_sqrt'},
	{'namespace': 'torch', 'function': '_foreach_sqrt_'},
	{'namespace': 'torch', 'function': '_foreach_sub'},
	{'namespace': 'torch', 'function': '_foreach_sub_'},
	{'namespace': 'torch', 'function': '_foreach_tan'},
	{'namespace': 'torch', 'function': '_foreach_tan_'},
	{'namespace': 'torch', 'function': '_foreach_tanh'},
	{'namespace': 'torch', 'function': '_foreach_tanh_'},
	{'namespace': 'torch', 'function': '_foreach_trunc'},
	{'namespace': 'torch', 'function': '_foreach_trunc_'},
	{'namespace': 'torch', 'function': '_foreach_zero_'},
	{'namespace': 'torch', 'function': '_functional_assert_async'},
	{'namespace': 'torch', 'function': '_functional_assert_scalar'},
	{'namespace': 'torch', 'function': '_functional_sym_constrain_range_for_size'},
	{'namespace': 'torch', 'function': '_fused_adagrad_'},
	{'namespace': 'torch', 'function': '_fused_adam_'},
	{'namespace': 'torch', 'function': '_fused_adamw_'},
	{'namespace': 'torch', 'function': '_fused_dropout'},
	{'namespace': 'torch', 'function': '_fused_moving_avg_obs_fq_helper'},
	{'namespace': 'torch', 'function': '_fused_sdp_choice'},
	{'namespace': 'torch', 'function': '_fused_sgd_'},
	{'namespace': 'torch', 'function': '_fw_primal_copy'},
	{'namespace': 'torch', 'function': '_grid_sampler_2d_cpu_fallback'},
	{'namespace': 'torch', 'function': '_has_compatible_shallow_copy_type'},
	{'namespace': 'torch', 'function': '_histogramdd_bin_edges'},
	{'namespace': 'torch', 'function': '_histogramdd_from_bin_cts'},
	{'namespace': 'torch', 'function': '_histogramdd_from_bin_tensors'},
	{'namespace': 'torch', 'function': '_index_put_impl_'},
	{'namespace': 'torch', 'function': '_indices_copy'},
	{'namespace': 'torch', 'function': '_int_mm'},
	{'namespace': 'torch', 'function': '_is_all_true'},
	{'namespace': 'torch', 'function': '_is_any_true'},
	{'namespace': 'torch', 'function': '_is_zerotensor'},
	{'namespace': 'torch', 'function': '_lazy_clone'},
	{'namespace': 'torch', 'function': '_linalg_check_errors'},
	{'namespace': 'torch', 'function': '_linalg_det'},
	{'namespace': 'torch', 'function': '_linalg_eigh'},
	{'namespace': 'torch', 'function': '_linalg_slogdet'},
	{'namespace': 'torch', 'function': '_linalg_solve_ex'},
	{'namespace': 'torch', 'function': '_linalg_svd'},
	{'namespace': 'torch', 'function': '_log_softmax'},
	{'namespace': 'torch', 'function': '_log_softmax_backward_data'},
	{'namespace': 'torch', 'function': '_logcumsumexp'},
	{'namespace': 'torch', 'function': '_lstm_mps'},
	{'namespace': 'torch', 'function': '_lu_with_info'},
	{'namespace': 'torch', 'function': '_make_dual'},
	{'namespace': 'torch', 'function': '_make_dual_copy'},
	{'namespace': 'torch', 'function': '_make_per_channel_quantized_tensor'},
	{'namespace': 'torch', 'function': '_make_per_tensor_quantized_tensor'},
	{'namespace': 'torch', 'function': '_masked_scale'},
	{'namespace': 'torch', 'function': '_masked_softmax'},
	{'namespace': 'torch', 'function': '_mixed_dtypes_linear'},
	{'namespace': 'torch', 'function': '_mkldnn_reshape'},
	{'namespace': 'torch', 'function': '_mkldnn_transpose'},
	{'namespace': 'torch', 'function': '_mkldnn_transpose_'},
	{'namespace': 'torch', 'function': '_mps_convolution'},
	{'namespace': 'torch', 'function': '_mps_convolution_transpose'},
	{'namespace': 'torch', 'function': '_native_batch_norm_legit'},
	{'namespace': 'torch', 'function': '_native_batch_norm_legit_no_training'},
	{'namespace': 'torch', 'function': '_native_multi_head_attention'},
	{'namespace': 'torch', 'function': '_neg_view'},
	{'namespace': 'torch', 'function': '_neg_view_copy'},
	{'namespace': 'torch', 'function': '_nested_compute_contiguous_strides_offsets'},
	{'namespace': 'torch', 'function': '_nested_from_padded'},
	{'namespace': 'torch', 'function': '_nested_from_padded_and_nested_example'},
	{'namespace': 'torch', 'function': '_nested_from_padded_tensor'},
	{'namespace': 'torch', 'function': '_nested_get_jagged_dummy'},
	{'namespace': 'torch', 'function': '_nested_get_lengths'},
	{'namespace': 'torch', 'function': '_nested_get_max_seqlen'},
	{'namespace': 'torch', 'function': '_nested_get_min_seqlen'},
	{'namespace': 'torch', 'function': '_nested_get_offsets'},
	{'namespace': 'torch', 'function': '_nested_get_ragged_idx'},
	{'namespace': 'torch', 'function': '_nested_get_values'},
	{'namespace': 'torch', 'function': '_nested_get_values_copy'},
	{'namespace': 'torch', 'function': '_nested_tensor_from_mask'},
	{'namespace': 'torch', 'function': '_nested_tensor_from_mask_left_aligned'},
	{'namespace': 'torch', 'function': '_nested_tensor_from_tensor_list'},
	{'namespace': 'torch', 'function': '_nested_tensor_softmax_with_shape'},
	{'namespace': 'torch', 'function': '_nested_view_from_buffer'},
	{'namespace': 'torch', 'function': '_nested_view_from_buffer_copy'},
	{'namespace': 'torch', 'function': '_nested_view_from_jagged'},
	{'namespace': 'torch', 'function': '_nested_view_from_jagged_copy'},
	{'namespace': 'torch', 'function': '_nnpack_available'},
	{'namespace': 'torch', 'function': '_nnpack_spatial_convolution'},
	{'namespace': 'torch', 'function': '_pack_padded_sequence'},
	{'namespace': 'torch', 'function': '_pad_packed_sequence'},
	{'namespace': 'torch', 'function': '_pin_memory'},
	{'namespace': 'torch', 'function': '_prelu_kernel'},
	{'namespace': 'torch', 'function': '_print'},
	{'namespace': 'torch', 'function': '_propagate_xla_data'},
	{'namespace': 'torch', 'function': '_remove_batch_dim'},
	{'namespace': 'torch', 'function': '_reshape_alias_copy'},
	{'namespace': 'torch', 'function': '_reshape_from_tensor'},
	{'namespace': 'torch', 'function': '_resize_output_'},
	{'namespace': 'torch', 'function': '_rowwise_prune'},
	{'namespace': 'torch', 'function': '_safe_softmax'},
	{'namespace': 'torch', 'function': '_sample_dirichlet'},
	{'namespace': 'torch', 'function': '_saturate_weight_to_fp16'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_attention_math'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_attention_math_for_mps'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_cudnn_attention'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_efficient_attention'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_flash_attention'},
	{'namespace': 'torch', 'function': '_scaled_dot_product_flash_attention_for_cpu'},
	{'namespace': 'torch', 'function': '_scaled_mm'},
	{'namespace': 'torch', 'function': '_shape_as_tensor'},
	{'namespace': 'torch', 'function': '_sobol_engine_draw'},
	{'namespace': 'torch', 'function': '_sobol_engine_ff_'},
	{'namespace': 'torch', 'function': '_sobol_engine_initialize_state_'},
	{'namespace': 'torch', 'function': '_sobol_engine_scramble_'},
	{'namespace': 'torch', 'function': '_softmax'},
	{'namespace': 'torch', 'function': '_softmax_backward_data'},
	{'namespace': 'torch', 'function': '_sparse_broadcast_to'},
	{'namespace': 'torch', 'function': '_sparse_broadcast_to_copy'},
	{'namespace': 'torch', 'function': '_sparse_csr_prod'},
	{'namespace': 'torch', 'function': '_sparse_csr_sum'},
	{'namespace': 'torch', 'function': '_sparse_log_softmax_backward_data'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_addmm'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_apply'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_apply_dense'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_linear'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_mm'},
	{'namespace': 'torch', 'function': '_sparse_semi_structured_tile'},
	{'namespace': 'torch', 'function': '_sparse_softmax_backward_data'},
	{'namespace': 'torch', 'function': '_sparse_sparse_matmul'},
	{'namespace': 'torch', 'function': '_sparse_sum'},
	{'namespace': 'torch', 'function': '_stack'},
	{'namespace': 'torch', 'function': '_standard_gamma'},
	{'namespace': 'torch', 'function': '_standard_gamma_grad'},
	{'namespace': 'torch', 'function': '_test_autograd_multiple_dispatch'},
	{'namespace': 'torch', 'function': '_test_autograd_multiple_dispatch_view'},
	{'namespace': 'torch', 'function': '_test_autograd_multiple_dispatch_view_copy'},
	{'namespace': 'torch', 'function': '_test_check_tensor'},
	{'namespace': 'torch', 'function': '_test_functorch_fallback'},
	{'namespace': 'torch', 'function': '_test_parallel_materialize'},
	{'namespace': 'torch', 'function': '_test_serialization_subcmul'},
	{'namespace': 'torch', 'function': '_to_cpu'},
	{'namespace': 'torch', 'function': '_to_sparse_semi_structured'},
	{'namespace': 'torch', 'function': '_transform_bias_rescale_qkv'},
	{'namespace': 'torch', 'function': '_transformer_encoder_layer_fwd'},
	{'namespace': 'torch', 'function': '_trilinear'},
	{'namespace': 'torch', 'function': '_triton_multi_head_attention'},
	{'namespace': 'torch', 'function': '_triton_scaled_dot_attention'},
	{'namespace': 'torch', 'function': '_unique'},
	{'namespace': 'torch', 'function': '_unique2'},
	{'namespace': 'torch', 'function': '_unpack_dual'},
	{'namespace': 'torch', 'function': '_unsafe_index'},
	{'namespace': 'torch', 'function': '_unsafe_index_put'},
	{'namespace': 'torch', 'function': '_unsafe_masked_index'},
	{'namespace': 'torch', 'function': '_unsafe_masked_index_put_accumulate'},
	{'namespace': 'torch', 'function': '_use_cudnn_ctc_loss'},
	{'namespace': 'torch', 'function': '_use_cudnn_rnn_flatten_weight'},
	{'namespace': 'torch', 'function': '_validate_compressed_sparse_indices'},
	{'namespace': 'torch', 'function': '_validate_sparse_bsc_tensor_args'},
	{'namespace': 'torch', 'function': '_validate_sparse_bsr_tensor_args'},
	{'namespace': 'torch', 'function': '_validate_sparse_compressed_tensor_args'},
	{'namespace': 'torch', 'function': '_validate_sparse_coo_tensor_args'},
	{'namespace': 'torch', 'function': '_validate_sparse_csc_tensor_args'},
	{'namespace': 'torch', 'function': '_validate_sparse_csr_tensor_args'},
	{'namespace': 'torch', 'function': '_values_copy'},
	{'namespace': 'torch', 'function': '_weight_int4pack_mm'},
	{'namespace': 'torch', 'function': '_weight_int4pack_mm_for_cpu'},
	{'namespace': 'torch', 'function': '_weight_int8pack_mm'},
	{'namespace': 'torch', 'function': '_weight_norm'},
	{'namespace': 'torch', 'function': '_weight_norm_interface'},
	{'namespace': 'torch', 'function': '_wrapped_linear_prepack'},
	{'namespace': 'torch', 'function': '_wrapped_quantized_linear_prepacked'},
	{'namespace': 'torch', 'function': 'abs'},
	{'namespace': 'torch', 'function': 'abs_'},
	{'namespace': 'torch', 'function': 'absolute'},
	{'namespace': 'torch', 'function': 'acos'},
	{'namespace': 'torch', 'function': 'acos_'},
	{'namespace': 'torch', 'function': 'acosh'},
	{'namespace': 'torch', 'function': 'acosh_'},
	{'namespace': 'torch', 'function': 'adaptive_avg_pool1d'},
	{'namespace': 'torch', 'function': 'adaptive_max_pool1d'},
	{'namespace': 'torch', 'function': 'add'},
	{'namespace': 'torch', 'function': 'addbmm'},
	{'namespace': 'torch', 'function': 'addcdiv'},
	{'namespace': 'torch', 'function': 'addcmul'},
	{'namespace': 'torch', 'function': 'addmm'},
	{'namespace': 'torch', 'function': 'addmv'},
	{'namespace': 'torch', 'function': 'addmv_'},
	{'namespace': 'torch', 'function': 'addr'},
	{'namespace': 'torch', 'function': 'adjoint'},
	{'namespace': 'torch', 'function': 'affine_grid_generator'},
	{'namespace': 'torch', 'function': 'alias_copy'},
	{'namespace': 'torch', 'function': 'all'},
	{'namespace': 'torch', 'function': 'allclose'},
	{'namespace': 'torch', 'function': 'alpha_dropout'},
	{'namespace': 'torch', 'function': 'alpha_dropout_'},
	{'namespace': 'torch', 'function': 'amax'},
	{'namespace': 'torch', 'function': 'amin'},
	{'namespace': 'torch', 'function': 'aminmax'},
	{'namespace': 'torch', 'function': 'angle'},
	{'namespace': 'torch', 'function': 'any'},
	{'namespace': 'torch', 'function': 'arccos'},
	{'namespace': 'torch', 'function': 'arccos_'},
	{'namespace': 'torch', 'function': 'arccosh'},
	{'namespace': 'torch', 'function': 'arccosh_'},
	{'namespace': 'torch', 'function': 'arcsin'},
	{'namespace': 'torch', 'function': 'arcsin_'},
	{'namespace': 'torch', 'function': 'arcsinh'},
	{'namespace': 'torch', 'function': 'arcsinh_'},
	{'namespace': 'torch', 'function': 'arctan'},
	{'namespace': 'torch', 'function': 'arctan2'},
	{'namespace': 'torch', 'function': 'arctan_'},
	{'namespace': 'torch', 'function': 'arctanh'},
	{'namespace': 'torch', 'function': 'arctanh_'},
	{'namespace': 'torch', 'function': 'argmax'},
	{'namespace': 'torch', 'function': 'argmin'},
	{'namespace': 'torch', 'function': 'argsort'},
	{'namespace': 'torch', 'function': 'argwhere'},
	{'namespace': 'torch', 'function': 'as_strided_'},
	{'namespace': 'torch', 'function': 'as_strided_copy'},
	{'namespace': 'torch', 'function': 'as_strided_scatter'},
	{'namespace': 'torch', 'function': 'asin'},
	{'namespace': 'torch', 'function': 'asin_'},
	{'namespace': 'torch', 'function': 'asinh'},
	{'namespace': 'torch', 'function': 'asinh_'},
	{'namespace': 'torch', 'function': 'atan'},
	{'namespace': 'torch', 'function': 'atan2'},
	{'namespace': 'torch', 'function': 'atan_'},
	{'namespace': 'torch', 'function': 'atanh'},
	{'namespace': 'torch', 'function': 'atanh_'},
	{'namespace': 'torch', 'function': 'atleast_1d'},
	{'namespace': 'torch', 'function': 'atleast_2d'},
	{'namespace': 'torch', 'function': 'atleast_3d'},
	{'namespace': 'torch', 'function': 'avg_pool1d'},
	{'namespace': 'torch', 'function': 'baddbmm'},
	{'namespace': 'torch', 'function': 'batch_norm'},
	{'namespace': 'torch', 'function': 'batch_norm_backward_elemt'},
	{'namespace': 'torch', 'function': 'batch_norm_backward_reduce'},
	{'namespace': 'torch', 'function': 'batch_norm_elemt'},
	{'namespace': 'torch', 'function': 'batch_norm_gather_stats'},
	{'namespace': 'torch', 'function': 'batch_norm_gather_stats_with_counts'},
	{'namespace': 'torch', 'function': 'batch_norm_stats'},
	{'namespace': 'torch', 'function': 'batch_norm_update_stats'},
	{'namespace': 'torch', 'function': 'bernoulli'},
	{'namespace': 'torch', 'function': 'bilinear'},
	{'namespace': 'torch', 'function': 'binary_cross_entropy_with_logits'},
	{'namespace': 'torch', 'function': 'bincount'},
	{'namespace': 'torch', 'function': 'binomial'},
	{'namespace': 'torch', 'function': 'bitwise_and'},
	{'namespace': 'torch', 'function': 'bitwise_left_shift'},
	{'namespace': 'torch', 'function': 'bitwise_not'},
	{'namespace': 'torch', 'function': 'bitwise_or'},
	{'namespace': 'torch', 'function': 'bitwise_right_shift'},
	{'namespace': 'torch', 'function': 'bitwise_xor'},
	{'namespace': 'torch', 'function': 'block_diag'},
	{'namespace': 'torch', 'function': 'bmm'},
	{'namespace': 'torch', 'function': 'broadcast_tensors'},
	{'namespace': 'torch', 'function': 'broadcast_to'},
	{'namespace': 'torch', 'function': 'bucketize'},
	{'namespace': 'torch', 'function': 'cartesian_prod'},
	{'namespace': 'torch', 'function': 'cat'},
	{'namespace': 'torch', 'function': 'ccol_indices_copy'},
	{'namespace': 'torch', 'function': 'cdist'},
	{'namespace': 'torch', 'function': 'ceil'},
	{'namespace': 'torch', 'function': 'ceil_'},
	{'namespace': 'torch', 'function': 'celu'},
	{'namespace': 'torch', 'function': 'celu_'},
	{'namespace': 'torch', 'function': 'chain_matmul'},
	{'namespace': 'torch', 'function': 'channel_shuffle'},
	{'namespace': 'torch', 'function': 'cholesky'},
	{'namespace': 'torch', 'function': 'cholesky_inverse'},
	{'namespace': 'torch', 'function': 'cholesky_solve'},
	{'namespace': 'torch', 'function': 'choose_qparams_optimized'},
	{'namespace': 'torch', 'function': 'chunk'},
	{'namespace': 'torch', 'function': 'clamp'},
	{'namespace': 'torch', 'function': 'clamp_'},
	{'namespace': 'torch', 'function': 'clamp_max'},
	{'namespace': 'torch', 'function': 'clamp_max_'},
	{'namespace': 'torch', 'function': 'clamp_min'},
	{'namespace': 'torch', 'function': 'clamp_min_'},
	{'namespace': 'torch', 'function': 'clip'},
	{'namespace': 'torch', 'function': 'clip_'},
	{'namespace': 'torch', 'function': 'clone'},
	{'namespace': 'torch', 'function': 'col_indices_copy'},
	{'namespace': 'torch', 'function': 'column_stack'},
	{'namespace': 'torch', 'function': 'combinations'},
	{'namespace': 'torch', 'function': 'complex'},
	{'namespace': 'torch', 'function': 'concat'},
	{'namespace': 'torch', 'function': 'concatenate'},
	{'namespace': 'torch', 'function': 'conj'},
	{'namespace': 'torch', 'function': 'conj_physical'},
	{'namespace': 'torch', 'function': 'conj_physical_'},
	{'namespace': 'torch', 'function': 'constant_pad_nd'},
	{'namespace': 'torch', 'function': 'conv1d'},
	{'namespace': 'torch', 'function': 'conv2d'},
	{'namespace': 'torch', 'function': 'conv3d'},
	{'namespace': 'torch', 'function': 'conv_tbc'},
	{'namespace': 'torch', 'function': 'conv_transpose1d'},
	{'namespace': 'torch', 'function': 'conv_transpose2d'},
	{'namespace': 'torch', 'function': 'conv_transpose3d'},
	{'namespace': 'torch', 'function': 'convolution'},
	{'namespace': 'torch', 'function': 'copysign'},
	{'namespace': 'torch', 'function': 'corrcoef'},
	{'namespace': 'torch', 'function': 'cos'},
	{'namespace': 'torch', 'function': 'cos_'},
	{'namespace': 'torch', 'function': 'cosh'},
	{'namespace': 'torch', 'function': 'cosh_'},
	{'namespace': 'torch', 'function': 'cosine_embedding_loss'},
	{'namespace': 'torch', 'function': 'cosine_similarity'},
	{'namespace': 'torch', 'function': 'count_nonzero'},
	{'namespace': 'torch', 'function': 'cov'},
	{'namespace': 'torch', 'function': 'cross'},
	{'namespace': 'torch', 'function': 'crow_indices_copy'},
	{'namespace': 'torch', 'function': 'ctc_loss'},
	{'namespace': 'torch', 'function': 'cummax'},
	{'namespace': 'torch', 'function': 'cummin'},
	{'namespace': 'torch', 'function': 'cumprod'},
	{'namespace': 'torch', 'function': 'cumsum'},
	{'namespace': 'torch', 'function': 'cumulative_trapezoid'},
	{'namespace': 'torch', 'function': 'deg2rad'},
	{'namespace': 'torch', 'function': 'deg2rad_'},
	{'namespace': 'torch', 'function': 'dequantize'},
	{'namespace': 'torch', 'function': 'det'},
	{'namespace': 'torch', 'function': 'detach'},
	{'namespace': 'torch', 'function': 'detach_'},
	{'namespace': 'torch', 'function': 'detach_copy'},
	{'namespace': 'torch', 'function': 'diag'},
	{'namespace': 'torch', 'function': 'diag_embed'},
	{'namespace': 'torch', 'function': 'diagflat'},
	{'namespace': 'torch', 'function': 'diagonal'},
	{'namespace': 'torch', 'function': 'diagonal_copy'},
	{'namespace': 'torch', 'function': 'diagonal_scatter'},
	{'namespace': 'torch', 'function': 'diff'},
	{'namespace': 'torch', 'function': 'digamma'},
	{'namespace': 'torch', 'function': 'dist'},
	{'namespace': 'torch', 'function': 'div'},
	{'namespace': 'torch', 'function': 'divide'},
	{'namespace': 'torch', 'function': 'dot'},
	{'namespace': 'torch', 'function': 'dropout'},
	{'namespace': 'torch', 'function': 'dropout_'},
	{'namespace': 'torch', 'function': 'dsmm'},
	{'namespace': 'torch', 'function': 'dsplit'},
	{'namespace': 'torch', 'function': 'dstack'},
	{'namespace': 'torch', 'function': 'einsum'},
	{'namespace': 'torch', 'function': 'embedding'},
	{'namespace': 'torch', 'function': 'embedding_bag'},
	{'namespace': 'torch', 'function': 'embedding_renorm_'},
	{'namespace': 'torch', 'function': 'empty_like'},
	{'namespace': 'torch', 'function': 'eq'},
	{'namespace': 'torch', 'function': 'equal'},
	{'namespace': 'torch', 'function': 'erf'},
	{'namespace': 'torch', 'function': 'erf_'},
	{'namespace': 'torch', 'function': 'erfc'},
	{'namespace': 'torch', 'function': 'erfc_'},
	{'namespace': 'torch', 'function': 'erfinv'},
	{'namespace': 'torch', 'function': 'exp'},
	{'namespace': 'torch', 'function': 'exp2'},
	{'namespace': 'torch', 'function': 'exp2_'},
	{'namespace': 'torch', 'function': 'exp_'},
	{'namespace': 'torch', 'function': 'expand_copy'},
	{'namespace': 'torch', 'function': 'expm1'},
	{'namespace': 'torch', 'function': 'expm1_'},
	{'namespace': 'torch', 'function': 'fake_quantize_per_channel_affine'},
	{'namespace': 'torch', 'function': 'fake_quantize_per_tensor_affine'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_fp16_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_fp16_weight_fp32_activation'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_int8_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_int8_weight_fp32_activation'},
	{'namespace': 'torch', 'function': 'fbgemm_linear_quantize_weight'},
	{'namespace': 'torch', 'function': 'fbgemm_pack_gemm_matrix_fp16'},
	{'namespace': 'torch', 'function': 'fbgemm_pack_quantized_matrix'},
	{'namespace': 'torch', 'function': 'feature_alpha_dropout'},
	{'namespace': 'torch', 'function': 'feature_alpha_dropout_'},
	{'namespace': 'torch', 'function': 'feature_dropout'},
	{'namespace': 'torch', 'function': 'feature_dropout_'},
	{'namespace': 'torch', 'function': 'fill_'},
	{'namespace': 'torch', 'function': 'fix'},
	{'namespace': 'torch', 'function': 'fix_'},
	{'namespace': 'torch', 'function': 'flatten'},
	{'namespace': 'torch', 'function': 'flip'},
	{'namespace': 'torch', 'function': 'fliplr'},
	{'namespace': 'torch', 'function': 'flipud'},
	{'namespace': 'torch', 'function': 'float_power'},
	{'namespace': 'torch', 'function': 'floor'},
	{'namespace': 'torch', 'function': 'floor_'},
	{'namespace': 'torch', 'function': 'floor_divide'},
	{'namespace': 'torch', 'function': 'fmax'},
	{'namespace': 'torch', 'function': 'fmin'},
	{'namespace': 'torch', 'function': 'fmod'},
	{'namespace': 'torch', 'function': 'frac'},
	{'namespace': 'torch', 'function': 'frac_'},
	{'namespace': 'torch', 'function': 'frexp'},
	{'namespace': 'torch', 'function': 'frobenius_norm'},
	{'namespace': 'torch', 'function': 'full_like'},
	{'namespace': 'torch', 'function': 'fused_moving_avg_obs_fake_quant'},
	{'namespace': 'torch', 'function': 'gather'},
	{'namespace': 'torch', 'function': 'gcd'},
	{'namespace': 'torch', 'function': 'gcd_'},
	{'namespace': 'torch', 'function': 'ge'},
	{'namespace': 'torch', 'function': 'geqrf'},
	{'namespace': 'torch', 'function': 'ger'},
	{'namespace': 'torch', 'function': 'get_device'},
	{'namespace': 'torch', 'function': 'gradient'},
	{'namespace': 'torch', 'function': 'greater'},
	{'namespace': 'torch', 'function': 'greater_equal'},
	{'namespace': 'torch', 'function': 'grid_sampler'},
	{'namespace': 'torch', 'function': 'grid_sampler_2d'},
	{'namespace': 'torch', 'function': 'grid_sampler_3d'},
	{'namespace': 'torch', 'function': 'group_norm'},
	{'namespace': 'torch', 'function': 'gru'},
	{'namespace': 'torch', 'function': 'gru_cell'},
	{'namespace': 'torch', 'function': 'gt'},
	{'namespace': 'torch', 'function': 'hardshrink'},
	{'namespace': 'torch', 'function': 'heaviside'},
	{'namespace': 'torch', 'function': 'hinge_embedding_loss'},
	{'namespace': 'torch', 'function': 'histc'},
	{'namespace': 'torch', 'function': 'histogram'},
	{'namespace': 'torch', 'function': 'histogramdd'},
	{'namespace': 'torch', 'function': 'hsmm'},
	{'namespace': 'torch', 'function': 'hsplit'},
	{'namespace': 'torch', 'function': 'hspmm'},
	{'namespace': 'torch', 'function': 'hstack'},
	{'namespace': 'torch', 'function': 'hypot'},
	{'namespace': 'torch', 'function': 'i0'},
	{'namespace': 'torch', 'function': 'i0_'},
	{'namespace': 'torch', 'function': 'igamma'},
	{'namespace': 'torch', 'function': 'igammac'},
	{'namespace': 'torch', 'function': 'imag'},
	{'namespace': 'torch', 'function': 'index_add'},
	{'namespace': 'torch', 'function': 'index_copy'},
	{'namespace': 'torch', 'function': 'index_fill'},
	{'namespace': 'torch', 'function': 'index_put'},
	{'namespace': 'torch', 'function': 'index_put_'},
	{'namespace': 'torch', 'function': 'index_reduce'},
	{'namespace': 'torch', 'function': 'index_select'},
	{'namespace': 'torch', 'function': 'indices_copy'},
	{'namespace': 'torch', 'function': 'inner'},
	{'namespace': 'torch', 'function': 'instance_norm'},
	{'namespace': 'torch', 'function': 'int_repr'},
	{'namespace': 'torch', 'function': 'inverse'},
	{'namespace': 'torch', 'function': 'is_complex'},
	{'namespace': 'torch', 'function': 'is_conj'},
	{'namespace': 'torch', 'function': 'is_distributed'},
	{'namespace': 'torch', 'function': 'is_floating_point'},
	{'namespace': 'torch', 'function': 'is_inference'},
	{'namespace': 'torch', 'function': 'is_neg'},
	{'namespace': 'torch', 'function': 'is_nonzero'},
	{'namespace': 'torch', 'function': 'is_same_size'},
	{'namespace': 'torch', 'function': 'is_signed'},
	{'namespace': 'torch', 'function': 'isclose'},
	{'namespace': 'torch', 'function': 'isfinite'},
	{'namespace': 'torch', 'function': 'isin'},
	{'namespace': 'torch', 'function': 'isinf'},
	{'namespace': 'torch', 'function': 'isnan'},
	{'namespace': 'torch', 'function': 'isneginf'},
	{'namespace': 'torch', 'function': 'isposinf'},
	{'namespace': 'torch', 'function': 'isreal'},
	{'namespace': 'torch', 'function': 'istft'},
	{'namespace': 'torch', 'function': 'kl_div'},
	{'namespace': 'torch', 'function': 'kron'},
	{'namespace': 'torch', 'function': 'kthvalue'},
	{'namespace': 'torch', 'function': 'layer_norm'},
	{'namespace': 'torch', 'function': 'lcm'},
	{'namespace': 'torch', 'function': 'lcm_'},
	{'namespace': 'torch', 'function': 'ldexp'},
	{'namespace': 'torch', 'function': 'ldexp_'},
	{'namespace': 'torch', 'function': 'le'},
	{'namespace': 'torch', 'function': 'lerp'},
	{'namespace': 'torch', 'function': 'less'},
	{'namespace': 'torch', 'function': 'less_equal'},
	{'namespace': 'torch', 'function': 'lgamma'},
	{'namespace': 'torch', 'function': 'log'},
	{'namespace': 'torch', 'function': 'log10'},
	{'namespace': 'torch', 'function': 'log10_'},
	{'namespace': 'torch', 'function': 'log1p'},
	{'namespace': 'torch', 'function': 'log1p_'},
	{'namespace': 'torch', 'function': 'log2'},
	{'namespace': 'torch', 'function': 'log2_'},
	{'namespace': 'torch', 'function': 'log_'},
	{'namespace': 'torch', 'function': 'log_softmax'},
	{'namespace': 'torch', 'function': 'logaddexp'},
	{'namespace': 'torch', 'function': 'logaddexp2'},
	{'namespace': 'torch', 'function': 'logcumsumexp'},
	{'namespace': 'torch', 'function': 'logdet'},
	{'namespace': 'torch', 'function': 'logical_and'},
	{'namespace': 'torch', 'function': 'logical_not'},
	{'namespace': 'torch', 'function': 'logical_or'},
	{'namespace': 'torch', 'function': 'logical_xor'},
	{'namespace': 'torch', 'function': 'logit'},
	{'namespace': 'torch', 'function': 'logit_'},
	{'namespace': 'torch', 'function': 'logsumexp'},
	{'namespace': 'torch', 'function': 'lstm'},
	{'namespace': 'torch', 'function': 'lstm_cell'},
	{'namespace': 'torch', 'function': 'lt'},
	{'namespace': 'torch', 'function': 'lu_solve'},
	{'namespace': 'torch', 'function': 'lu_unpack'},
	{'namespace': 'torch', 'function': 'margin_ranking_loss'},
	{'namespace': 'torch', 'function': 'masked_fill'},
	{'namespace': 'torch', 'function': 'masked_scatter'},
	{'namespace': 'torch', 'function': 'masked_select'},
	{'namespace': 'torch', 'function': 'matmul'},
	{'namespace': 'torch', 'function': 'matrix_exp'},
	{'namespace': 'torch', 'function': 'matrix_power'},
	{'namespace': 'torch', 'function': 'max'},
	{'namespace': 'torch', 'function': 'max_pool1d'},
	{'namespace': 'torch', 'function': 'max_pool1d_with_indices'},
	{'namespace': 'torch', 'function': 'max_pool2d'},
	{'namespace': 'torch', 'function': 'max_pool3d'},
	{'namespace': 'torch', 'function': 'maximum'},
	{'namespace': 'torch', 'function': 'mean'},
	{'namespace': 'torch', 'function': 'median'},
	{'namespace': 'torch', 'function': 'meshgrid'},
	{'namespace': 'torch', 'function': 'min'},
	{'namespace': 'torch', 'function': 'minimum'},
	{'namespace': 'torch', 'function': 'miopen_batch_norm'},
	{'namespace': 'torch', 'function': 'miopen_convolution'},
	{'namespace': 'torch', 'function': 'miopen_convolution_add_relu'},
	{'namespace': 'torch', 'function': 'miopen_convolution_relu'},
	{'namespace': 'torch', 'function': 'miopen_convolution_transpose'},
	{'namespace': 'torch', 'function': 'miopen_depthwise_convolution'},
	{'namespace': 'torch', 'function': 'miopen_rnn'},
	{'namespace': 'torch', 'function': 'mm'},
	{'namespace': 'torch', 'function': 'mode'},
	{'namespace': 'torch', 'function': 'moveaxis'},
	{'namespace': 'torch', 'function': 'movedim'},
	{'namespace': 'torch', 'function': 'msort'},
	{'namespace': 'torch', 'function': 'mul'},
	{'namespace': 'torch', 'function': 'multinomial'},
	{'namespace': 'torch', 'function': 'multiply'},
	{'namespace': 'torch', 'function': 'mv'},
	{'namespace': 'torch', 'function': 'mvlgamma'},
	{'namespace': 'torch', 'function': 'nan_to_num'},
	{'namespace': 'torch', 'function': 'nan_to_num_'},
	{'namespace': 'torch', 'function': 'nanmean'},
	{'namespace': 'torch', 'function': 'nanmedian'},
	{'namespace': 'torch', 'function': 'nanquantile'},
	{'namespace': 'torch', 'function': 'nansum'},
	{'namespace': 'torch', 'function': 'narrow'},
	{'namespace': 'torch', 'function': 'narrow_copy'},
	{'namespace': 'torch', 'function': 'native_batch_norm'},
	{'namespace': 'torch', 'function': 'native_channel_shuffle'},
	{'namespace': 'torch', 'function': 'native_dropout'},
	{'namespace': 'torch', 'function': 'native_group_norm'},
	{'namespace': 'torch', 'function': 'native_layer_norm'},
	{'namespace': 'torch', 'function': 'native_norm'},
	{'namespace': 'torch', 'function': 'ne'},
	{'namespace': 'torch', 'function': 'neg'},
	{'namespace': 'torch', 'function': 'neg_'},
	{'namespace': 'torch', 'function': 'negative'},
	{'namespace': 'torch', 'function': 'negative_'},
	{'namespace': 'torch', 'function': 'nextafter'},
	{'namespace': 'torch', 'function': 'nonzero'},
	{'namespace': 'torch', 'function': 'nonzero_static'},
	{'namespace': 'torch', 'function': 'norm'},
	{'namespace': 'torch', 'function': 'norm_except_dim'},
	{'namespace': 'torch', 'function': 'not_equal'},
	{'namespace': 'torch', 'function': 'nuclear_norm'},
	{'namespace': 'torch', 'function': 'numel'},
	{'namespace': 'torch', 'function': 'ones_like'},
	{'namespace': 'torch', 'function': 'orgqr'},
	{'namespace': 'torch', 'function': 'ormqr'},
	{'namespace': 'torch', 'function': 'outer'},
	{'namespace': 'torch', 'function': 'pairwise_distance'},
	{'namespace': 'torch', 'function': 'pdist'},
	{'namespace': 'torch', 'function': 'permute'},
	{'namespace': 'torch', 'function': 'permute_copy'},
	{'namespace': 'torch', 'function': 'pinverse'},
	{'namespace': 'torch', 'function': 'pixel_shuffle'},
	{'namespace': 'torch', 'function': 'pixel_unshuffle'},
	{'namespace': 'torch', 'function': 'poisson'},
	{'namespace': 'torch', 'function': 'poisson_nll_loss'},
	{'namespace': 'torch', 'function': 'polar'},
	{'namespace': 'torch', 'function': 'polygamma'},
	{'namespace': 'torch', 'function': 'positive'},
	{'namespace': 'torch', 'function': 'pow'},
	{'namespace': 'torch', 'function': 'prelu'},
	{'namespace': 'torch', 'function': 'prod'},
	{'namespace': 'torch', 'function': 'put'},
	{'namespace': 'torch', 'function': 'q_per_channel_axis'},
	{'namespace': 'torch', 'function': 'q_per_channel_scales'},
	{'namespace': 'torch', 'function': 'q_per_channel_zero_points'},
	{'namespace': 'torch', 'function': 'q_scale'},
	{'namespace': 'torch', 'function': 'q_zero_point'},
	{'namespace': 'torch', 'function': 'qr'},
	{'namespace': 'torch', 'function': 'quantile'},
	{'namespace': 'torch', 'function': 'quantize_per_channel'},
	{'namespace': 'torch', 'function': 'quantize_per_tensor'},
	{'namespace': 'torch', 'function': 'quantize_per_tensor_dynamic'},
	{'namespace': 'torch', 'function': 'quantized_batch_norm'},
	{'namespace': 'torch', 'function': 'quantized_gru_cell'},
	{'namespace': 'torch', 'function': 'quantized_lstm_cell'},
	{'namespace': 'torch', 'function': 'quantized_max_pool1d'},
	{'namespace': 'torch', 'function': 'quantized_max_pool2d'},
	{'namespace': 'torch', 'function': 'quantized_max_pool3d'},
	{'namespace': 'torch', 'function': 'quantized_rnn_relu_cell'},
	{'namespace': 'torch', 'function': 'quantized_rnn_tanh_cell'},
	{'namespace': 'torch', 'function': 'rad2deg'},
	{'namespace': 'torch', 'function': 'rad2deg_'},
	{'namespace': 'torch', 'function': 'rand_like'},
	{'namespace': 'torch', 'function': 'randint_like'},
	{'namespace': 'torch', 'function': 'randn_like'},
	{'namespace': 'torch', 'function': 'ravel'},
	{'namespace': 'torch', 'function': 'real'},
	{'namespace': 'torch', 'function': 'reciprocal'},
	{'namespace': 'torch', 'function': 'reciprocal_'},
	{'namespace': 'torch', 'function': 'relu'},
	{'namespace': 'torch', 'function': 'relu_'},
	{'namespace': 'torch', 'function': 'remainder'},
	{'namespace': 'torch', 'function': 'renorm'},
	{'namespace': 'torch', 'function': 'repeat_interleave'},
	{'namespace': 'torch', 'function': 'reshape'},
	{'namespace': 'torch', 'function': 'resize_as_'},
	{'namespace': 'torch', 'function': 'resize_as_sparse_'},
	{'namespace': 'torch', 'function': 'resolve_conj'},
	{'namespace': 'torch', 'function': 'resolve_neg'},
	{'namespace': 'torch', 'function': 'rms_norm'},
	{'namespace': 'torch', 'function': 'rnn_relu'},
	{'namespace': 'torch', 'function': 'rnn_relu_cell'},
	{'namespace': 'torch', 'function': 'rnn_tanh'},
	{'namespace': 'torch', 'function': 'rnn_tanh_cell'},
	{'namespace': 'torch', 'function': 'roll'},
	{'namespace': 'torch', 'function': 'rot90'},
	{'namespace': 'torch', 'function': 'round'},
	{'namespace': 'torch', 'function': 'round_'},
	{'namespace': 'torch', 'function': 'row_indices_copy'},
	{'namespace': 'torch', 'function': 'row_stack'},
	{'namespace': 'torch', 'function': 'rrelu'},
	{'namespace': 'torch', 'function': 'rrelu_'},
	{'namespace': 'torch', 'function': 'rsqrt'},
	{'namespace': 'torch', 'function': 'rsqrt_'},
	{'namespace': 'torch', 'function': 'rsub'},
	{'namespace': 'torch', 'function': 'saddmm'},
	{'namespace': 'torch', 'function': 'scatter'},
	{'namespace': 'torch', 'function': 'scatter_add'},
	{'namespace': 'torch', 'function': 'scatter_reduce'},
	{'namespace': 'torch', 'function': 'searchsorted'},
	{'namespace': 'torch', 'function': 'segment_reduce'},
	{'namespace': 'torch', 'function': 'select'},
	{'namespace': 'torch', 'function': 'select_copy'},
	{'namespace': 'torch', 'function': 'select_scatter'},
	{'namespace': 'torch', 'function': 'selu'},
	{'namespace': 'torch', 'function': 'selu_'},
	{'namespace': 'torch', 'function': 'sgn'},
	{'namespace': 'torch', 'function': 'sigmoid'},
	{'namespace': 'torch', 'function': 'sigmoid_'},
	{'namespace': 'torch', 'function': 'sign'},
	{'namespace': 'torch', 'function': 'signbit'},
	{'namespace': 'torch', 'function': 'sin'},
	{'namespace': 'torch', 'function': 'sin_'},
	{'namespace': 'torch', 'function': 'sinc'},
	{'namespace': 'torch', 'function': 'sinc_'},
	{'namespace': 'torch', 'function': 'sinh'},
	{'namespace': 'torch', 'function': 'sinh_'},
	{'namespace': 'torch', 'function': 'slice_copy'},
	{'namespace': 'torch', 'function': 'slice_inverse'},
	{'namespace': 'torch', 'function': 'slice_scatter'},
	{'namespace': 'torch', 'function': 'slogdet'},
	{'namespace': 'torch', 'function': 'smm'},
	{'namespace': 'torch', 'function': 'softmax'},
	{'namespace': 'torch', 'function': 'sort'},
	{'namespace': 'torch', 'function': 'split'},
	{'namespace': 'torch', 'function': 'split_copy'},
	{'namespace': 'torch', 'function': 'split_with_sizes'},
	{'namespace': 'torch', 'function': 'split_with_sizes_copy'},
	{'namespace': 'torch', 'function': 'spmm'},
	{'namespace': 'torch', 'function': 'sqrt'},
	{'namespace': 'torch', 'function': 'sqrt_'},
	{'namespace': 'torch', 'function': 'square'},
	{'namespace': 'torch', 'function': 'square_'},
	{'namespace': 'torch', 'function': 'squeeze'},
	{'namespace': 'torch', 'function': 'squeeze_copy'},
	{'namespace': 'torch', 'function': 'sspaddmm'},
	{'namespace': 'torch', 'function': 'stack'},
	{'namespace': 'torch', 'function': 'std'},
	{'namespace': 'torch', 'function': 'std_mean'},
	{'namespace': 'torch', 'function': 'stft'},
	{'namespace': 'torch', 'function': 'sub'},
	{'namespace': 'torch', 'function': 'subtract'},
	{'namespace': 'torch', 'function': 'sum'},
	{'namespace': 'torch', 'function': 'svd'},
	{'namespace': 'torch', 'function': 'swapaxes'},
	{'namespace': 'torch', 'function': 'swapdims'},
	{'namespace': 'torch', 'function': 't'},
	{'namespace': 'torch', 'function': 't_copy'},
	{'namespace': 'torch', 'function': 'take'},
	{'namespace': 'torch', 'function': 'take_along_dim'},
	{'namespace': 'torch', 'function': 'tan'},
	{'namespace': 'torch', 'function': 'tan_'},
	{'namespace': 'torch', 'function': 'tanh'},
	{'namespace': 'torch', 'function': 'tanh_'},
	{'namespace': 'torch', 'function': 'tensor_split'},
	{'namespace': 'torch', 'function': 'tensordot'},
	{'namespace': 'torch', 'function': 'threshold'},
	{'namespace': 'torch', 'function': 'threshold_'},
	{'namespace': 'torch', 'function': 'tile'},
	{'namespace': 'torch', 'function': 'topk'},
	{'namespace': 'torch', 'function': 'trace'},
	{'namespace': 'torch', 'function': 'transpose'},
	{'namespace': 'torch', 'function': 'transpose_copy'},
	{'namespace': 'torch', 'function': 'trapezoid'},
	{'namespace': 'torch', 'function': 'trapz'},
	{'namespace': 'torch', 'function': 'triangular_solve'},
	{'namespace': 'torch', 'function': 'tril'},
	{'namespace': 'torch', 'function': 'triplet_margin_loss'},
	{'namespace': 'torch', 'function': 'triu'},
	{'namespace': 'torch', 'function': 'true_divide'},
	{'namespace': 'torch', 'function': 'trunc'},
	{'namespace': 'torch', 'function': 'trunc_'},
	{'namespace': 'torch', 'function': 'unbind'},
	{'namespace': 'torch', 'function': 'unbind_copy'},
	{'namespace': 'torch', 'function': 'unflatten'},
	{'namespace': 'torch', 'function': 'unfold_copy'},
	{'namespace': 'torch', 'function': 'unique_consecutive'},
	{'namespace': 'torch', 'function': 'unsafe_chunk'},
	{'namespace': 'torch', 'function': 'unsafe_split'},
	{'namespace': 'torch', 'function': 'unsafe_split_with_sizes'},
	{'namespace': 'torch', 'function': 'unsqueeze'},
	{'namespace': 'torch', 'function': 'unsqueeze_copy'},
	{'namespace': 'torch', 'function': 'values_copy'},
	{'namespace': 'torch', 'function': 'var'},
	{'namespace': 'torch', 'function': 'var_mean'},
	{'namespace': 'torch', 'function': 'vdot'},
	{'namespace': 'torch', 'function': 'view_as_complex'},
	{'namespace': 'torch', 'function': 'view_as_complex_copy'},
	{'namespace': 'torch', 'function': 'view_as_real'},
	{'namespace': 'torch', 'function': 'view_as_real_copy'},
	{'namespace': 'torch', 'function': 'view_copy'},
	{'namespace': 'torch', 'function': 'vsplit'},
	{'namespace': 'torch', 'function': 'vstack'},
	{'namespace': 'torch', 'function': 'where'},
	{'namespace': 'torch', 'function': 'xlogy'},
	{'namespace': 'torch', 'function': 'xlogy_'},
	{'namespace': 'torch', 'function': 'zero_'},
	{'namespace': 'torch', 'function': 'zeros_like'},
	{'namespace': 'torch.special', 'function': '_add_docstr'},
	{'namespace': 'torch.special', 'function': 'airy_ai'},
	{'namespace': 'torch.special', 'function': 'bessel_j0'},
	{'namespace': 'torch.special', 'function': 'bessel_j1'},
	{'namespace': 'torch.special', 'function': 'bessel_y0'},
	{'namespace': 'torch.special', 'function': 'bessel_y1'},
	{'namespace': 'torch.special', 'function': 'chebyshev_polynomial_t'},
	{'namespace': 'torch.special', 'function': 'chebyshev_polynomial_u'},
	{'namespace': 'torch.special', 'function': 'chebyshev_polynomial_v'},
	{'namespace': 'torch.special', 'function': 'chebyshev_polynomial_w'},
	{'namespace': 'torch.special', 'function': 'digamma'},
	{'namespace': 'torch.special', 'function': 'entr'},
	{'namespace': 'torch.special', 'function': 'erf'},
	{'namespace': 'torch.special', 'function': 'erfc'},
	{'namespace': 'torch.special', 'function': 'erfcx'},
	{'namespace': 'torch.special', 'function': 'erfinv'},
	{'namespace': 'torch.special', 'function': 'exp2'},
	{'namespace': 'torch.special', 'function': 'expit'},
	{'namespace': 'torch.special', 'function': 'expm1'},
	{'namespace': 'torch.special', 'function': 'gammainc'},
	{'namespace': 'torch.special', 'function': 'gammaincc'},
	{'namespace': 'torch.special', 'function': 'gammaln'},
	{'namespace': 'torch.special', 'function': 'hermite_polynomial_h'},
	{'namespace': 'torch.special', 'function': 'hermite_polynomial_he'},
	{'namespace': 'torch.special', 'function': 'i0'},
	{'namespace': 'torch.special', 'function': 'i0e'},
	{'namespace': 'torch.special', 'function': 'i1'},
	{'namespace': 'torch.special', 'function': 'i1e'},
	{'namespace': 'torch.special', 'function': 'laguerre_polynomial_l'},
	{'namespace': 'torch.special', 'function': 'legendre_polynomial_p'},
	{'namespace': 'torch.special', 'function': 'log1p'},
	{'namespace': 'torch.special', 'function': 'log_ndtr'},
	{'namespace': 'torch.special', 'function': 'log_softmax'},
	{'namespace': 'torch.special', 'function': 'logit'},
	{'namespace': 'torch.special', 'function': 'logsumexp'},
	{'namespace': 'torch.special', 'function': 'modified_bessel_i0'},
	{'namespace': 'torch.special', 'function': 'modified_bessel_i1'},
	{'namespace': 'torch.special', 'function': 'modified_bessel_k0'},
	{'namespace': 'torch.special', 'function': 'modified_bessel_k1'},
	{'namespace': 'torch.special', 'function': 'multigammaln'},
	{'namespace': 'torch.special', 'function': 'ndtr'},
	{'namespace': 'torch.special', 'function': 'ndtri'},
	{'namespace': 'torch.special', 'function': 'polygamma'},
	{'namespace': 'torch.special', 'function': 'psi'},
	{'namespace': 'torch.special', 'function': 'round'},
	{'namespace': 'torch.special', 'function': 'scaled_modified_bessel_k0'},
	{'namespace': 'torch.special', 'function': 'scaled_modified_bessel_k1'},
	{'namespace': 'torch.special', 'function': 'shifted_chebyshev_polynomial_t'},
	{'namespace': 'torch.special', 'function': 'shifted_chebyshev_polynomial_u'},
	{'namespace': 'torch.special', 'function': 'shifted_chebyshev_polynomial_v'},
	{'namespace': 'torch.special', 'function': 'shifted_chebyshev_polynomial_w'},
	{'namespace': 'torch.special', 'function': 'sinc'},
	{'namespace': 'torch.special', 'function': 'softmax'},
	{'namespace': 'torch.special', 'function': 'spherical_bessel_j0'},
	{'namespace': 'torch.special', 'function': 'xlog1py'},
	{'namespace': 'torch.special', 'function': 'xlogy'},
	{'namespace': 'torch.special', 'function': 'zeta'},
]

FUNCTIONS += [
    {'namespace': 'torch.Tensor', 'function': 'new_full'},
    # https://docs.pytorch.org/vision/main/ops.html
    {'namespace': 'torch.ops.torchvision', 'function': 'roi_align'},
    {'namespace': 'torch.ops.torchvision', 'function': 'roi_pool'},
    {'namespace': 'torch.ops.torchvision', 'function': 'ps_roi_align'},
    {'namespace': 'torch.ops.torchvision', 'function': 'ps_roi_pool'},
    {'namespace': 'torch.ops.torchvision', 'function': 'nms'},
    {'namespace': 'torch.ops.torchvision', 'function': 'batched_nms'},
]

# https://pytorch.org/docs/stable/nn.html#containers
CONTAINER_MODULES = {
    nn.Module,
    nn.Sequential,
    nn.ModuleList,
    nn.ModuleDict,
    nn.ParameterList,
    nn.ParameterDict
}