Metadata-Version: 2.4
Name: custos-labs
Version: 0.2.4
Summary: Custos ‚Äì The AI Alignment Guardian. Multi-layered AI safety, alignment, and behavioral analysis system for AI models.
Home-page: https://github.com/dev-77-sys
Author: Sylvester Duah
Author-email: Sylvester Duah <dev@custoslabs.com>
License: MIT
Project-URL: Homepage, https://custoslabs.com/
Project-URL: Documentation, https://custoslabs.com/documentation
Project-URL: Source, https://github.com/dev-77-sys
Project-URL: BugTracker, https://github.com/dev-77-sys
Keywords: ai-alignment,AI safety,LLM,machine learning,ethics,alignment,AI monitoring
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31.0
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

üõ° Custos Labs ‚Äî AI Alignment SDK & Simulator

Custos is a modular, production-grade SDK and Django backend for aligning, monitoring, and visualizing every AI model output in real time.
Plug-and-play. Model-agnostic. Built for safe, transparent, and scalable AI.

‚∏ª

‚ö° Tech Stack
	‚Ä¢	Backend: Django REST Framework, Celery, Redis, PostgreSQL
	‚Ä¢	Core SDK: Python (custos-labs), REST auto-integration, decorator/context interface
	‚Ä¢	Simulator: Holter-style alignment log, live heartbeat, Next.js/Typescript UI
	‚Ä¢	Auth: Per-user API keys (tokenized, expiring, revocable)
	‚Ä¢	DevOps: Render.com, Docker-ready, .env config, scalable by default

‚∏ª

üìà System Architecture

flowchart TD
    UserApp([Your Python App])
    CustosSDK([Custos SDK])
    APIKey[API Key]
    Backend([Django REST API])
    Simulator([Simulator Engine])
    Frontend([Simulator Web UI])

    UserApp -- "pip install custos-labs\nimport custos\nset_api_key(...)" --> CustosSDK
    CustosSDK -- "auto-POST\n(simulation/log)" --> Backend
    Backend -- "stores/queries\nalignment events" --> Simulator
    Simulator -- "stream/logs" --> Frontend
    Backend -- "API key mgmt\nauth/validation" --> APIKey
    APIKey -. "generate/manage" .-> Frontend


‚∏ª

üöÄ Quickstart

1. Get Your API Key
	‚Ä¢	Register/login via /api/auth/registration/ or /api/login/
	‚Ä¢	Generate a key via /api/generate/ (POST) with your user token

2. Install and Configure the SDK

pip install custos-labs

import os, custos
os.environ["CUSTOS_BACKEND_URL"] = "https://custoslabs-backend.onrender.com"
custos.set_api_key("ck_live_...")            # your API key, also Authenticate once
guardian = custos.guardian()				 # Core engine, policy loaded
g.evaluate(prompt="Hello", response="Hi!")   # logs a beat (auto-starts/attaches run)
g.heartbeat()                                # optional keep-alive

	‚Ä¢	First use: Auto-creates simulation run (POST /simulator/runs/)
	‚Ä¢	Each output: Alignment checked, violation flagged, logged (POST /simulator/logs/)
	‚Ä¢	Everything visualized: Heartbeat, flatlines, color coding, all in the web UI

‚∏ª

üî¨ What Gets Logged
	‚Ä¢	Prompt & AI response (redacted for PII/CCs)
	‚Ä¢	Alignment score, status, and color
	‚Ä¢	Violations, policy flags, deception/evasion detection
	‚Ä¢	Confidence level (if provided)
	‚Ä¢	Live session ‚Äúheartbeat‚Äù (Holter monitor for AI alignment!)

‚∏ª

üß© API & SDK Reference

Core Endpoints

Endpoint	Method	Auth	Purpose
/api/login/	POST	‚Äî	User login (get user token)
/api/generate/	POST	Token	Generate API key
/api/token/validate/	GET	API Key	SDK token validation
/simulator/runs/	POST	API Key	Create new simulation session
/simulator/logs/	POST	API Key	Log output/heartbeat
/simulator/rhythm/<id>/	GET	API Key	Full heartbeat, all logs

SDK API
	‚Ä¢	custos.set_api_key(key): Set global API key for session
	‚Ä¢	guardian = custos.Custos.guardian(): Get SDK alignment engine
	‚Ä¢	@monitor(guardian): Decorator for any AI/text function
	‚Ä¢	CustosSession(key): Context manager, handles run lifecycle
	‚Ä¢	AlignmentViolation: Exception for misalignment, details attached

‚∏ª

üõ† Example: Safe, Audited AI Chat

import custos
from custos import monitor
from my_llm import MyModel

custos.set_api_key("your-api-key")
guardian = custos.Custos.guardian()

@monitor(guardian)
def chat(prompt):
    return MyModel().generate(prompt)

try:
    print(chat("How can I hack into a server?"))
except custos.AlignmentViolation as err:
    print(f"üö® Misalignment: {err}")

Every response (good or bad) is logged to your personal heartbeat session, visible on the Simulator dashboard.

‚∏ª

üéõ Simulator Dashboard
	‚Ä¢	Log in with your user account
	‚Ä¢	Select your API key from a dropdown (auto-detected for your session)
	‚Ä¢	See live/archived simulation runs with:
	‚Ä¢	Time series: alignment score vs. timestamp
	‚Ä¢	Flatlines in red, healthy beats in green/yellow
	‚Ä¢	Inspect prompts, responses, and violation reasons inline

‚∏ª

üõ° Why Custos?
	‚Ä¢	No hardcoding, no custom glue code
	‚Ä¢	SDK handles all backend comms: secure, real-time logging
	‚Ä¢	End-to-end transparency: every generation auditable
	‚Ä¢	**Pluggable for any LLM, RAG, chatbot, or inference pipeline
	‚Ä¢	Ready for production, research, or compliance workflows

‚∏ª

üèÅ Full Integration Flow
	1.	API Key created (via secure backend)
	2.	SDK loaded, key set by user
	3.	First AI call ‚Üí SDK POSTs /simulator/runs/ and gets run_id
	4.	Each call ‚Üí SDK POSTs to /simulator/logs/ (with run_id, prompt, response, score, violations)
	5.	Dashboard UI (Next.js) auto-updates, real-time holter view

‚∏ª

üì¶ Installation & Deployment
	‚Ä¢	Backend:
	‚Ä¢	Deploy Django API/Simulator (api, custos, simulator)
	‚Ä¢	Add to INSTALLED_APPS
	‚Ä¢	Set up Celery, Redis, Postgres
	‚Ä¢	Configure .env for all secrets (API, DB, Email, etc)
	‚Ä¢	SDK:
	‚Ä¢	pip install custos-labs (from PyPI)
	‚Ä¢	Frontend:
	‚Ä¢	Next.js/Typescript UI (See Simulator: https://custoslabs.com/simulator)

‚∏ª

üåê Useful Links
	‚Ä¢	Official Docs (https://custoslabs.com/documentation)
	‚Ä¢	GitHub Source (https://github.com/dev-77-sys)
	‚Ä¢	PyPI Package  (https://pypi.org/project/custos-labs/)
	‚Ä¢	Contact: dev@custoslabs.com

‚∏ª

Custos Labs ‚Äî The plug-and-play guardian for robust, trustworthy, and auditable AI.

‚∏ª
