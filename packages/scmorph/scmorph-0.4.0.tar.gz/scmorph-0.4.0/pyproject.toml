[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "scmorph"
description = "Single-cell morphological analysis"
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [
  { name = "Jesko Wagner", email = "35219306+jeskowagner@users.noreply.github.com" },
]
authors = [ { name = "Jesko Wagner" } ]
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dynamic = [ "version" ]
dependencies = [
  "anndata>=0.8",
  "certifi",           # required by scanpy's download tool
  "formulaic",
  "matplotlib>=3.6",
  "numba>=0.56",
  "numpy>=1.23",
  "pandas>=2.2",
  "patsy",
  "pyarrow",
  "pyod",
  "scanpy",
  "scikit-learn>=1.1",
  "seaborn",
  "session-info",
  #"rpy2",
  "tqdm",
]

optional-dependencies.dev = [ "pre-commit", "setuptools-scm", "twine>=4.0.2" ]
optional-dependencies.doc = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  "ipykernel",
  "ipython",
  "myst-nb>=1.1",
  "pandas",
  "scanpydoc>=0.14.1",
  "sphinx>=4",
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinx-tabs",
  "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
]
optional-dependencies.test = [ "coverage", "pytest", "pytest-cov", "pytest-nunit" ]
# https://docs.pypi.org/project_metadata/#project-urls
urls.Documentation = "https://scmorph.readthedocs.io/"
urls.Homepage = "https://github.com/edbiomedai/scmorph"
urls.Source = "https://github.com/edbiomedai/scmorph"

[tool.setuptools_scm]

[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.version]
source = "vcs"
raw-options.version_scheme = "release-branch-semver"

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.build = "sphinx-build -M html docs docs/_build {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

[tool.hatch.envs.hatch-test]
features = [ "test" ]

[tool.hatch.build.hooks.vcs]
version-file = "src/scmorph/_version.py"

[tool.ruff]
line-length = 100
src = [ "src" ]
extend-include = [ "*.ipynb" ]

exclude = [ "docs/extensions", "docs/notebooks" ]
format.docstring-code-format = true

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "NPY201", # numpy 2
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D205", # As D203, but with auto-formatted docstrings
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
xfail_strict = true
addopts = [
  "--import-mode=importlib", # allow using test files with same name,
  "--pyargs",
]
nunit_attach_on = "fail"

[tool.coverage.run]
source = [ "scmorph" ]
omit = [ "**/test_*.py", "*/datasets/_datasets.py" ]

[tool.cruft]
skip = [
  "tests",
  "src/**/__init__.py",
  "src/**/basic.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]
