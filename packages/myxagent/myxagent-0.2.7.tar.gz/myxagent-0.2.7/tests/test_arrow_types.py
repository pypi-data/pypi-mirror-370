#!/usr/bin/env python3
"""
ÊµãËØï DSL ÂêåÊó∂ÊîØÊåÅ ‚Üí Âíå -> ‰∏§ÁßçÁÆ≠Â§¥Á¨¶Âè∑ÁöÑÂäüËÉΩ
"""

import sys
import os

# Add the parent directory to the path so we can import xagent
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from xagent.multi.workflow import parse_dependencies_dsl, validate_dsl_syntax


def test_both_arrow_types():
    """ÊµãËØï‰∏§ÁßçÁÆ≠Â§¥Á¨¶Âè∑ÁöÑÁ≠âÊïàÊÄß"""
    print("üî¨ Testing Both Arrow Types (‚Üí and ->)")
    print("=" * 50)
    
    # ÊµãËØïÁî®‰æãÔºö‰ΩøÁî®‰∏çÂêåÁÆ≠Â§¥Á¨¶Âè∑ÁöÑÁ≠âÊïà DSL
    test_cases = [
        # ÁÆÄÂçï‰æùËµñ
        ("A‚ÜíB", "A->B"),
        
        # ÈìæÂºè‰æùËµñ
        ("A‚ÜíB‚ÜíC", "A->B->C"),
        
        # Âπ∂Ë°åÂàÜÊîØ
        ("A‚ÜíB, A‚ÜíC", "A->B, A->C"),
        
        # Â§ö‰æùËµñÂêàÂπ∂
        ("A&B‚ÜíC", "A&B->C"),
        
        # Â§çÊùÇÊ®°Âºè
        ("A‚ÜíB, A‚ÜíC, B&C‚ÜíD", "A->B, A->C, B&C->D"),
        
        # Êõ¥Â§çÊùÇÁöÑÊ®°Âºè
        ("research‚Üíanalysis, research‚Üíplanning, analysis&planning‚Üísynthesis‚Üíreview", 
         "research->analysis, research->planning, analysis&planning->synthesis->review"),
        
        # Ê∑∑Âêà‰ΩøÁî®‰∏§ÁßçÁÆ≠Â§¥ÔºàÂ∫îËØ•‰πüËÉΩÂ∑•‰ΩúÔºâ
        ("A‚ÜíB, B->C, C‚ÜíD", "A->B, B‚ÜíC, C->D"),
    ]
    
    print("1Ô∏è‚É£ Testing Equivalence")
    print("-" * 30)
    
    all_passed = True
    
    for i, (unicode_dsl, ascii_dsl) in enumerate(test_cases, 1):
        print(f"\nTest {i}:")
        print(f"  Unicode: '{unicode_dsl}'")
        print(f"  ASCII:   '{ascii_dsl}'")
        
        # È™åËØÅËØ≠Ê≥ï
        unicode_valid, unicode_error = validate_dsl_syntax(unicode_dsl)
        ascii_valid, ascii_error = validate_dsl_syntax(ascii_dsl)
        
        if not unicode_valid:
            print(f"  ‚ùå Unicode syntax error: {unicode_error}")
            all_passed = False
            continue
            
        if not ascii_valid:
            print(f"  ‚ùå ASCII syntax error: {ascii_error}")
            all_passed = False
            continue
        
        # Ëß£ÊûêÂπ∂ÊØîËæÉÁªìÊûú
        unicode_result = parse_dependencies_dsl(unicode_dsl)
        ascii_result = parse_dependencies_dsl(ascii_dsl)
        
        if unicode_result == ascii_result:
            print(f"  ‚úÖ Results match: {unicode_result}")
        else:
            print(f"  ‚ùå Results differ!")
            print(f"     Unicode result: {unicode_result}")
            print(f"     ASCII result:   {ascii_result}")
            all_passed = False
    
    print(f"\n2Ô∏è‚É£ Testing Mixed Arrow Usage")
    print("-" * 30)
    
    # ÊµãËØïÊ∑∑Âêà‰ΩøÁî®‰∏§ÁßçÁÆ≠Â§¥
    mixed_cases = [
        "A‚ÜíB, B->C",
        "A->B‚ÜíC, C->D",
        "research‚Üíanalysis, analysis->planning, planning‚Üísynthesis",
        "A->B, A‚ÜíC, B&C->D",
    ]
    
    for mixed_dsl in mixed_cases:
        print(f"\nMixed: '{mixed_dsl}'")
        
        is_valid, error = validate_dsl_syntax(mixed_dsl)
        if not is_valid:
            print(f"  ‚ùå Syntax error: {error}")
            all_passed = False
            continue
        
        try:
            result = parse_dependencies_dsl(mixed_dsl)
            print(f"  ‚úÖ Parsed successfully: {result}")
        except Exception as e:
            print(f"  ‚ùå Parse error: {e}")
            all_passed = False
    
    print(f"\n3Ô∏è‚É£ Testing Error Cases")
    print("-" * 30)
    
    # ÊµãËØïÈîôËØØÁî®‰æã
    error_cases = [
        "A->",       # ‰∏çÂÆåÊï¥ÁöÑÁÆ≠Â§¥
        "->B",       # ÂâçÈù¢‰∏∫Á©∫ÔºàËøô‰∏™Â∫îËØ•ÊòØÊúâÊïàÁöÑÔºâ
        "A->B->",    # Êú´Â∞æ‰∏çÂÆåÊï¥
        "A&->B",     # Á©∫‰æùËµñ
        "A-->B",     # ÈîôËØØÁöÑÁÆ≠Â§¥Ê†ºÂºè
        "A->>B",     # ÈîôËØØÁöÑÁÆ≠Â§¥Ê†ºÂºè
    ]
    
    for error_dsl in error_cases:
        print(f"\nError test: '{error_dsl}'")
        is_valid, error_msg = validate_dsl_syntax(error_dsl)
        
        if error_dsl == "->B":  # Ëøô‰∏™Â∫îËØ•ÊòØÊúâÊïàÁöÑ
            if is_valid:
                result = parse_dependencies_dsl(error_dsl)
                print(f"  ‚úÖ Valid (root node): {result}")
            else:
                print(f"  ‚ùå Unexpected error: {error_msg}")
                all_passed = False
        else:
            if not is_valid:
                print(f"  ‚úÖ Correctly rejected: {error_msg}")
            else:
                print(f"  ‚ùå Should have been rejected but was accepted")
                all_passed = False
    
    print(f"\n{'üéâ All tests passed!' if all_passed else '‚ùå Some tests failed'}")
    return all_passed


if __name__ == "__main__":
    print("Testing DSL support for both ‚Üí and -> arrows...\n")
    success = test_both_arrow_types()
    
    if success:
        print("\n‚úÖ Both arrow types work correctly!")
        print("Users can now use either ‚Üí (Unicode) or -> (ASCII) arrows in their DSL strings.")
    else:
        print("\n‚ùå There are issues with the arrow support that need to be fixed.")
