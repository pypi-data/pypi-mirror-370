# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('xenorchestra')


class _ExportableConfig(types.ModuleType):
    @property
    def insecure(self) -> Optional[bool]:
        """
        Whether SSL should be verified or not. Can be set via the XOA_INSECURE environment variable.
        """
        return __config__.get_bool('insecure')

    @property
    def password(self) -> Optional[str]:
        """
        Password for xoa api. Can be set via the XOA_PASSWORD environment variable.
        """
        return __config__.get('password')

    @property
    def retry_max_time(self) -> Optional[str]:
        """
        If `retry_mode` is set, this specifies the duration for which the backoff method will continue retries. Can be set via
        the `XOA_RETRY_MAX_TIME` environment variable
        """
        return __config__.get('retryMaxTime')

    @property
    def retry_mode(self) -> Optional[str]:
        """
        Specifies if retries should be attempted for requests that require eventual . Can be set via the XOA_RETRY_MODE
        environment variable.
        """
        return __config__.get('retryMode')

    @property
    def token(self) -> Optional[str]:
        """
        Password for xoa api. Can be set via the XOA_TOKEN environment variable.
        """
        return __config__.get('token')

    @property
    def url(self) -> Optional[str]:
        """
        Hostname of the xoa router. Can be set via the XOA_URL environment variable.
        """
        return __config__.get('url')

    @property
    def username(self) -> Optional[str]:
        """
        User account for xoa api. Can be set via the XOA_USER environment variable.
        """
        return __config__.get('username')

