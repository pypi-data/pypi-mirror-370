import unittest

import asyncio

import numpy as np

from graphrag_ecolink.db.neo4j_storage import write_table_to_neo4j,create_neo4j_constraint
import pandas as pd
import logging

from graphrag_ecolink.index.workflows.generate_text_embeddings_to_neo4j import get_embedding_result


class TestNeo4jWrite(unittest.TestCase):
    result = get_embedding_result("test")
    result_0 = result[0]
    logging.info("嵌入向量 %s:",result_0)



    byte_list = [-23,
                -97,
                -87,
                -26,
                -78,
                -119,
                -26,
                -72,
                -118,
                -26,
                -104,
                -81,
                -27,
                -72,
                -99,
                -27,
                -101,
                -67,
                -25,
                -102,
                -124,
                -23,
                -121,
                -115,
                -24,
                -90,
                -127,
                -27,
                -80,
                -122,
                -23,
                -94,
                -122,
                -17,
                -68,
                -116,
                -26,
                -117,
                -123,
                -28,
                -69,
                -69,
                -26,
                -100,
                -128,
                -23,
                -85,
                -104,
                -25,
                -69,
                -97,
                -27,
                -72,
                -123,
                -28,
                -69,
                -91,
                -25,
                -95,
                -82,
                -28,
                -65,
                -99,
                -24,
                -66,
                -71,
                -25,
                -106,
                -122,
                -27,
                -82,
                -119,
                -27,
                -123,
                -88,
                -29,
                -128,
                -126,
                -28,
                -69,
                -106,
                -25,
                -102,
                -124,
                -27,
                -122,
                -101,
                -28,
                -70,
                -117,
                -24,
                -125,
                -116,
                -26,
                -103,
                -81,
                -27,
                -110,
                -116,
                -27,
                -81,
                -71,
                -23,
                -107,
                -65,
                -25,
                -97,
                -101,
                -25,
                -102,
                -124,
                -25,
                -78,
                -66,
                -23,
                -128,
                -102,
                -24,
                -95,
                -88,
                -26,
                -104,
                -114,
                -28,
                -69,
                -106,
                -27,
                -100,
                -88,
                -26,
                -120,
                -104,
                -26,
                -106,
                -105,
                -28,
                -72,
                -83,
                -27,
                -123,
                -73,
                -26,
                -100,
                -119,
                -23,
                -85,
                -104,
                -27,
                -70,
                -90,
                -26,
                -120,
                -104,
                -26,
                -100,
                -81,
                -24,
                -125,
                -67,
                -27,
                -118,
                -101,
                -29,
                -128,
                -126,
                -26,
                -83,
                -92,
                -27,
                -92,
                -106,
                -17,
                -68,
                -116,
                -28,
                -69,
                -106,
                -28,
                -72,
                -114,
                -28,
                -71,
                -99,
                -27,
                -115,
                -114,
                -28,
                -71,
                -90,
                -23,
                -103,
                -94,
                -25,
                -102,
                -124,
                -24,
                -127,
                -108,
                -25,
                -77,
                -69,
                -26,
                -104,
                -66,
                -25,
                -92,
                -70,
                -27,
                -123,
                -74,
                -28,
                -72,
                -115,
                -28,
                -69,
                -123,
                -27,
                -100,
                -88,
                -27,
                -122,
                -101,
                -28,
                -70,
                -117,
                -23,
                -94,
                -122,
                -27,
                -97,
                -97,
                -26,
                -100,
                -119,
                -27,
                -67,
                -79,
                -27,
                -109,
                -115,
                -27,
                -118,
                -101,
                -17,
                -68,
                -116,
                -28,
                -71,
                -97,
                -27,
                -100,
                -88,
                -27,
                -83,
                -90,
                -26,
                -100,
                -81,
                -25,
                -107,
                -116,
                -26,
                -100,
                -119,
                -26,
                -119,
                -128,
                -26,
                -74,
                -119,
                -25,
                -116,
                -114,
                -29,
                -128,
                -126,
                -23,
                -97,
                -87,
                -26,
                -78,
                -119,
                -26,
                -72,
                -118,
                -25,
                -102,
                -124,
                -25,
                -101,
                -82,
                -26,
                -96,
                -121,
                -26,
                -104,
                -81,
                -23,
                -128,
                -102,
                -24,
                -65,
                -121,
                -25,
                -88,
                -77,
                -27,
                -82,
                -102,
                -28,
                -72,
                -106,
                -25,
                -107,
                -116,
                -26,
                -99,
                -91,
                -26,
                -127,
                -94,
                -27,
                -92,
                -115,
                -25,
                -89,
                -87,
                -27,
                -70,
                -113,
                -17,
                -68,
                -116,
                -24,
                -65,
                -103,
                -28,
                -67,
                -65,
                -28,
                -69,
                -106,
                -26,
                -120,
                -112,
                -28,
                -72,
                -70,
                -27,
                -72,
                -99,
                -27,
                -101,
                -67,
                -27,
                -82,
                -119,
                -27,
                -123,
                -88,
                -28,
                -72,
                -114,
                -27,
                -110,
                -116,
                -27,
                -71,
                -77,
                -25,
                -102,
                -124,
                -27,
                -123,
                -77,
                -23,
                -108,
                -82,
                -28,
                -70,
                -70,
                -25,
                -119,
                -87,
                32,
                91,
                68,
                97,
                116,
                97,
                58,
                32,
                69,
                110,
                116,
                105,
                116,
                105,
                101,
                115,
                32,
                40,
                50,
                52,
                41,
                59,
                32,
                82,
                101,
                108,
                97,
                116,
                105,
                111,
                110,
                115,
                104,
                105,
                112,
                115,
                32,
                40,
                49,
                57,
                44,
                32,
                50,
                48,
                44,
                32,
                50,
                50,
                41,
                93,
                -29,
                -128,
                -126]

    # 将 int 列表转为 bytes，并解码为 utf-8 字符串
    # 转换为 numpy int8 数组，然后转为 uint8（无符号）
    unsigned_bytes = np.array(byte_list, dtype=np.int8).astype(np.uint8).tobytes()

    # 解码成字符串
    decoded_str = unsigned_bytes.decode("utf-8")
    logging.info(decoded_str)



    # create_neo4j_constraint()
    # df = pd.read_parquet("/Users/mac/work/code/graphrag/ragtest/output/text_units.parquet")
    # asyncio.run(write_table_to_neo4j(df, "text_units"))
    #
    # df = pd.read_parquet("/Users/mac/work/code/graphrag/ragtest/output/entities.parquet")
    # asyncio.run(write_table_to_neo4j(df, "entities"))





