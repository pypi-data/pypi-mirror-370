[project]
name = "leaguemanager"
version = "0.12.2"
authors = [
  { name="Mario Munoz", email="pythonbynight@gmail.com" },
]
description = "Build and manage sports leagues."
readme = "README.md"
requires-python = ">=3.13"


license-file = ["LICENSE"]

keywords = ["sqlalchemy", "advanced alchemy", "alembic", "sports", "league"]

dependencies = [
    "advanced-alchemy>=1.2.0",
    "aiosqlite>=0.21.0",
    "alembic>=1.15.2",
    "attrs>=25.3.0",
    "svcs>=25.1.0",
    "typer>=0.15.2",
    "pandas>=2.3.1",
    "openpyxl>=3.1.5",
    "passlib>=1.7.4",
    "httpx-oauth>=0.16.1",
    "environ-config>=24.1.0",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Typing :: Typed",
]

[project.urls]
"Homepage" = "https://leaguemanager.readthedocs.io/en/latest/"
"Documentation" = "https://leaguemanager.readthedocs.io/en/latest/"
"Source" = "https://codeberg.org/pythonbynight/leaguemanager"
"Issue" = "https://codeberg.org/pythonbynight/leaguemanager/issues"
"Changelog" = "https://codeberg.org/pythonbynight/leaguemanager/releases"

[project.scripts]
mgr = "leaguemanager:cli.app"

[project.optional-dependencies]
litestar = ["litestar"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["src/leaguemanager"]

[dependency-groups]
dev = [
    { include-group = "test" },
    { include-group = "docs" },
    { include-group = "build" },
    { include-group = "lint" },
    "leaguemanager",
    "litestar>=2.17.0",
]
test = [
    "pytest-asyncio>=0.26.0",
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "coverage>=7.8.0",
    "leaguemanager",
]
build = [
    "bump-my-version>=1.1.2",
    "httpx>=0.28.1",
]
docs = [
    "auto-pytabs[sphinx]>=0.5.0",
    "furo>=2024.8.6",
    "karma-sphinx-theme>=0.0.8",
    "myst-parser>=4.0.1",
    "mystmd>=1.3.20",
    "piccolo-theme>=0.24.0",
    "shibuya>=2025.3.21",
    "sphinx>=8.2.3",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc-typehints>=3.1.0",
    "sphinx-autodoc2>=0.5.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinx-togglebutton>=0.3.2",
    "sphinx-toolbox>=3.9.0",
]
lint = [
    "pre-commit>=4.2.0",
    "ruff>=0.9.6",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".github",
    ".hg",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "migrations",
    "node_modules",
    "static",
]

line-length = 120
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]

# Enable flake8-bugbear (`B`) rules.
select = ["B", "E", "F", "Q", "W"]

ignore = [
    "E501",    # Ignore line length violations
    "F401"     # Ignore unused imports
]

# Disable autofix for unused imports
unfixable = ["F401"]

# Ignore `E402` (import violations) in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
asyncio_default_fixture_loop_scope = "session"
addopts = "--asyncio-mode=strict -s -vv"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    ]

ignore_errors = true

[tool.bumpversion]
allow_dirty = true
commit = true
message = "Bump to v{new_version}"
commit_args = ""
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump to v{new_version}"
current_version = "0.12.2"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
    "{major}.{minor}.{patch}"
]
search = "{current_version}"
replace = "{new_version}"


[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = 'version = "{new_version}"'
search = 'version = "{current_version}"'

[[tool.bumpversion.files]]
filename = "uv.lock"
replace = """
name = "leaguemanager"
version = "{new_version}"
"""
search = """
name = "leaguemanager"
version = "{current_version}"
"""

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[tool.uv.sources]
leaguemanager = { workspace = true }
