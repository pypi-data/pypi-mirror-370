[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "claude-wrapper"
dynamic = ["version"]
description = "A simple Python wrapper for Claude CLI with streaming support and OpenAI-compatible API interface"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Claude Wrapper Contributors"},
]
keywords = ["claude", "ai", "cli", "api", "openai", "streaming", "typer", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "typer>=0.9.0",
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",
    "rich>=13.7.0",
    "python-multipart>=0.0.6",
    "sse-starlette>=2.0.0",
    "aiofiles>=23.2.1",
    "orjson>=3.9.10",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "types-pyyaml>=6.0.0",
    "pre-commit>=3.5.0",
    "faker>=20.0.0",
    "freezegun>=1.2.0",
    "respx>=0.20.0",
    "openai>=1.99.9",
    "pip-audit>=2.6.0",
    "bandit>=1.7.0",
    "tomli-w>=1.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "faker>=20.0.0",
    "freezegun>=1.2.0",
    "respx>=0.20.0",
    "openai>=1.99.9",
]

[project.scripts]
claude-wrapper = "claude_wrapper.cli.main:app"
claude-api = "claude_wrapper.api.server:main"

[project.urls]
Homepage = "https://github.com/claude-wrapper/claude-wrapper"
Documentation = "https://github.com/claude-wrapper/claude-wrapper#readme"
Repository = "https://github.com/claude-wrapper/claude-wrapper"
Issues = "https://github.com/claude-wrapper/claude-wrapper/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.targets.wheel]
packages = ["src/claude_wrapper"]

[tool.ruff]
target-version = "py310"
line-length = 100
include = ["src/**/*.py", "tests/**/*.py"]
exclude = [".devcontainer/**", ".venv/**", "__pycache__/**"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
no_strict_optional = true
warn_unused_ignores = true
warn_return_any = false
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

# Test discovery patterns
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=claude_wrapper",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--maxfail=1",
    "--ff",
]

# Custom markers
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (may require external services)",
    "slow: Tests that take > 1 second",
    "requires_claude: Tests requiring actual Claude CLI",
    "mock: Tests using mocked dependencies",
    "api: API endpoint tests",
    "cli: CLI command tests",
    "core: Core functionality tests",
]

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "error::UserWarning",
]

# Timeout (in seconds)
timeout = 30
timeout_method = "thread"

[tool.coverage.run]
source = ["src/claude_wrapper"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "mypy>=1.17.1",
    "pip-audit>=2.9.0",
    "pre-commit>=4.3.0",
    "ruff>=0.12.9",
    "tomli-w>=1.2.0",
]
