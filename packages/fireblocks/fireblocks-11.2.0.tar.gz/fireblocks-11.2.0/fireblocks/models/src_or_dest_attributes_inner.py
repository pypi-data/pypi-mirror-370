# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from fireblocks.models.policy_src_or_dest_sub_type import PolicySrcOrDestSubType
from fireblocks.models.policy_src_or_dest_type import PolicySrcOrDestType
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

SRCORDESTATTRIBUTESINNER_ANY_OF_SCHEMAS = ["PolicySrcOrDestSubType", "PolicySrcOrDestType", "str"]

class SrcOrDestAttributesInner(BaseModel):
    """
    SrcOrDestAttributesInner
    """

    # data type: str
    anyof_schema_1_validator: Optional[StrictStr] = Field(default=None, description="Defines the account id, options are * \"*\" - All accounts * Specific account id ")
    # data type: PolicySrcOrDestType
    anyof_schema_2_validator: Optional[PolicySrcOrDestType] = None
    # data type: PolicySrcOrDestSubType
    anyof_schema_3_validator: Optional[PolicySrcOrDestSubType] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[PolicySrcOrDestSubType, PolicySrcOrDestType, str]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "PolicySrcOrDestSubType", "PolicySrcOrDestType", "str" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = SrcOrDestAttributesInner.model_construct()
        error_messages = []
        # validate data type: str
        try:
            instance.anyof_schema_1_validator = v
            return v
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: PolicySrcOrDestType
        if not isinstance(v, PolicySrcOrDestType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PolicySrcOrDestType`")
        else:
            return v

        # validate data type: PolicySrcOrDestSubType
        if not isinstance(v, PolicySrcOrDestSubType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PolicySrcOrDestSubType`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in SrcOrDestAttributesInner with anyOf schemas: PolicySrcOrDestSubType, PolicySrcOrDestType, str. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # deserialize data into str
        try:
            # validation
            instance.anyof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.anyof_schema_1_validator
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[PolicySrcOrDestType] = None
        try:
            instance.actual_instance = PolicySrcOrDestType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[PolicySrcOrDestSubType] = None
        try:
            instance.actual_instance = PolicySrcOrDestSubType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SrcOrDestAttributesInner with anyOf schemas: PolicySrcOrDestSubType, PolicySrcOrDestType, str. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PolicySrcOrDestSubType, PolicySrcOrDestType, str]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


