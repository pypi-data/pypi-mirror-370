# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.policy_rule import PolicyRule


class TestPolicyRule(unittest.TestCase):
    """PolicyRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolicyRule:
        """Test PolicyRule
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `PolicyRule`
        """
        model = PolicyRule()
        if include_optional:
            return PolicyRule(
                operator = '',
                operators = fireblocks.models.policy_rule_operators.PolicyRule_operators(
                    wildcard = '*', 
                    users = [
                        ''
                        ], 
                    users_groups = [
                        ''
                        ], 
                    services = [
                        ''
                        ], ),
                transaction_type = 'TRANSFER',
                designated_signer = '',
                designated_signers = fireblocks.models.policy_rule_designated_signers.PolicyRule_designatedSigners(
                    users = [
                        ''
                        ], 
                    users_groups = [
                        ''
                        ], ),
                type = 'TRANSFER',
                action = 'ALLOW',
                asset = '',
                src_type = 'EXCHANGE',
                src_sub_type = 'EXTERNAL',
                src_id = '',
                src = fireblocks.models.policy_rule_src.PolicyRule_src(
                    ids = [
                        [
                            null
                            ]
                        ], ),
                dst_type = 'EXCHANGE',
                dst_sub_type = 'EXTERNAL',
                dst_id = '',
                dst = fireblocks.models.policy_rule_dst.PolicyRule_dst(
                    ids = [
                        [
                            null
                            ]
                        ], ),
                dst_address_type = 'WHITELISTED',
                amount_currency = 'USD',
                amount_scope = 'SINGLE_TX',
                amount = None,
                period_sec = 1.337,
                authorizers = [
                    ''
                    ],
                authorizers_count = 1.337,
                authorization_groups = fireblocks.models.policy_rule_authorization_groups.PolicyRule_authorizationGroups(
                    logic = 'AND', 
                    allow_operator_as_authorizer = True, 
                    groups = [
                        fireblocks.models.policy_rule_authorization_groups_groups_inner.PolicyRule_authorizationGroups_groups_inner(
                            users = [
                                ''
                                ], 
                            users_groups = [
                                ''
                                ], 
                            th = 1.337, )
                        ], ),
                amount_aggregation = fireblocks.models.policy_rule_amount_aggregation.PolicyRule_amountAggregation(
                    operators = 'PER_SINGLE_MATCH', 
                    src_transfer_peers = 'PER_SINGLE_MATCH', 
                    dst_transfer_peers = 'PER_SINGLE_MATCH', ),
                raw_message_signing = fireblocks.models.policy_rule_raw_message_signing.PolicyRule_rawMessageSigning(
                    algorithm = '', 
                    derivation_path = fireblocks.models.policy_rule_raw_message_signing_derivation_path.PolicyRule_rawMessageSigning_derivationPath(
                        path = [
                            1.337
                            ], ), ),
                apply_for_approve = True,
                apply_for_typed_message = True,
                external_descriptor = ''
            )
        else:
            return PolicyRule(
                type = 'TRANSFER',
                action = 'ALLOW',
                asset = '',
                amount_currency = 'USD',
                amount_scope = 'SINGLE_TX',
                amount = None,
                period_sec = 1.337,
        )
        """

    def testPolicyRule(self):
        """Test PolicyRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
