[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-proxy-adapter"
version = "6.0.0"
description = "Reliable microservice with unified JSON-RPC endpoint"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Vasiliy Zubarev", email = "vasiliy.zubarev@example.com" }
]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
]
dependencies = [
    "fastapi>=0.95.0,<1.0.0",
    "pydantic>=2.0.0",
    "uvicorn>=0.22.0,<1.0.0",
    "docstring-parser>=0.15,<1.0.0",
    "typing-extensions>=4.5.0,<5.0.0",
    "jsonrpc>=1.2.0",
    "psutil>=5.9.0",
    "mcp_security_framework>=0.1.0",
]

[project.urls]
Documentation = "https://github.com/maverikod/vvz-mcp-proxy-adapter/tree/main/docs/RU/README.md"
Source = "https://github.com/maverikod/vvz-mcp-proxy-adapter"
"Bug Reports" = "https://github.com/maverikod/vvz-mcp-proxy-adapter/issues"

[tool.setuptools]
packages = [
    "mcp_proxy_adapter", 
    "mcp_proxy_adapter.api", 
    "mcp_proxy_adapter.api.middleware",
    "mcp_proxy_adapter.commands", 
    "mcp_proxy_adapter.core",
    "mcp_proxy_adapter.schemas",
    "mcp_proxy_adapter.examples",
    "mcp_proxy_adapter.examples.deployment",
    "mcp_proxy_adapter.examples.basic_server",
    "mcp_proxy_adapter.examples.custom_commands"
]

[tool.setuptools.package-data]
"mcp_proxy_adapter" = ["py.typed", "**/*.json", "**/*.yaml"]
"mcp_proxy_adapter.examples" = ["**/*.py", "**/*.json", "**/*.yaml", "**/*.md", "**/*.txt", "**/*.yml", "**/*.sh"]

[tool.coverage.run]
source = ["mcp_proxy_adapter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/setup.py",
    "tests/*",
    "test_*",
    "scripts/*",
    "publish.py",
    "finalize_framework.py",
    "fix_all_references.py",
    "rename_imports.py",
    "refactor_commands.py",
    "refactor_tests.py",
    "update_imports.py",
    "test_package_installation.py"
]

[tool.coverage.report]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/setup.py",
    "tests/*",
    "test_*",
    "scripts/*",
    "publish.py",
    "finalize_framework.py",
    "fix_all_references.py",
    "rename_imports.py",
    "refactor_commands.py",
    "refactor_tests.py",
    "update_imports.py",
    "test_package_installation.py"
]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/setup.py",
    "tests/*",
    "test_*",
    "scripts/*",
    "publish.py",
    "finalize_framework.py",
    "fix_all_references.py",
    "rename_imports.py",
    "refactor_commands.py",
    "refactor_tests.py",
    "update_imports.py",
    "test_package_installation.py"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

markers = [
    "unit: Модульные тесты",
    "integration: Интеграционные тесты",
    "functional: Функциональные тесты",
    "performance: Тесты производительности",
    "slow: Медленные тесты",
    "fast: Быстрые тесты",
]

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

addopts = "-v --tb=short" 